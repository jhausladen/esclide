
Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047b8  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  100057b8  100057b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000174  100057c8  100057c8  000057c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000138  2000000c  10005940  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   0000000c  20000144  00000000  00000144  2**0
                  ALLOC
  5 Stack         00000800  20000150  00000000  00000150  2**0
                  ALLOC
  6 .bss          000000d8  20000950  20000950  00010950  2**2
                  ALLOC
  7 .data         00000434  20000a30  10005a78  00008a30  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000198  00000000  00000000  00008e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000013f7  00000000  00000000  00009000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006c8  00000000  00000000  0000a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001ba1  00000000  00000000  0000aabf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008fc  00000000  00000000  0000c660  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000376fd  00000000  00000000  0000cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fff  00000000  00000000  00044659  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  00045658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000070a  00000000  00000000  00045778  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000a892  00000000  00000000  00045e82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1300_interrupt_vector_cortex_m>:
10001000:	50 09 00 20 19 10 00 10 61 12 00 10 63 12 00 10     P.. ....a...c...
10001010:	00 00 00 80 00 00 00 80                             ........

10001018 <__Xmc1300_reset_cortex_m>:
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001018:	4803      	ldr	r0, [pc, #12]	; (10001028 <__Xmc1300_reset_cortex_m+0x10>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000101c:	4803      	ldr	r0, [pc, #12]	; (1000102c <__Xmc1300_reset_cortex_m+0x14>)
    BLX     R0
1000101e:	4780      	blx	r0

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001020:	4803      	ldr	r0, [pc, #12]	; (10001030 <__Xmc1300_reset_cortex_m+0x18>)
    BLX     R0
10001022:	4780      	blx	r0

    B       __Xmc1300_Program_Loader 
10001024:	e006      	b.n	10001034 <__Xmc1300_Program_Loader>
10001026:	0000      	.short	0x0000
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001028:	20000950 	.word	0x20000950
    MOV SP,R0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000102c:	100012a5 	.word	0x100012a5

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001030:	100010c9 	.word	0x100010c9

10001034 <__Xmc1300_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001034:	4818      	ldr	r0, [pc, #96]	; (10001098 <SKIPVENEERCOPY+0x12>)
   LDR R1, =__Xmc1300_sData
10001036:	4919      	ldr	r1, [pc, #100]	; (1000109c <SKIPVENEERCOPY+0x16>)
   LDR R2, =__Xmc1300_Data_Size
10001038:	4a19      	ldr	r2, [pc, #100]	; (100010a0 <SKIPVENEERCOPY+0x1a>)

   /* Is there anything to be copied? */
   CMP R2,#0
1000103a:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000103c:	d00a      	beq.n	10001054 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
1000103e:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001040:	d200      	bcs.n	10001044 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001042:	2204      	movs	r2, #4

10001044 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001044:	0892      	lsrs	r2, r2, #2

10001046 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001046:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
10001048:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000104a:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000104c:	d002      	beq.n	10001054 <SKIPCOPY>
   ADDS R0,#4
1000104e:	3004      	adds	r0, #4
   ADDS R1,#4
10001050:	3104      	adds	r1, #4
   B COPYLOOP
10001052:	e7f8      	b.n	10001046 <COPYLOOP>

10001054 <SKIPCOPY>:
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001054:	4813      	ldr	r0, [pc, #76]	; (100010a4 <SKIPVENEERCOPY+0x1e>)
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001056:	4914      	ldr	r1, [pc, #80]	; (100010a8 <SKIPVENEERCOPY+0x22>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
10001058:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000105a:	d009      	beq.n	10001070 <SKIPCLEAR>

   /* At least 1 word must be copied */
   CMP R1,#4
1000105c:	2904      	cmp	r1, #4
   BCS STARTCLEAR
1000105e:	d200      	bcs.n	10001062 <STARTCLEAR>
   
   /* Byte count < 4 ; so bump it up to a word*/
   MOVS R1,#4
10001060:	2104      	movs	r1, #4

10001062 <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
10001062:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001064:	2200      	movs	r2, #0

10001066 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001066:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001068:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
1000106a:	d001      	beq.n	10001070 <SKIPCLEAR>
   ADDS R0,#4
1000106c:	3004      	adds	r0, #4
   B CLEARLOOP
1000106e:	e7fa      	b.n	10001066 <CLEARLOOP>

10001070 <SKIPCLEAR>:
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
10001070:	480e      	ldr	r0, [pc, #56]	; (100010ac <SKIPVENEERCOPY+0x26>)
   LDR R1, =VeneerStart
10001072:	490f      	ldr	r1, [pc, #60]	; (100010b0 <SKIPVENEERCOPY+0x2a>)
   LDR R2, =VeneerSize
10001074:	4a0f      	ldr	r2, [pc, #60]	; (100010b4 <SKIPVENEERCOPY+0x2e>)

10001076 <STARTVENEERCOPY>:
STARTVENEERCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001076:	0892      	lsrs	r2, r2, #2

10001078 <VENEERCOPYLOOP>:

   /* The proverbial loop from the schooldays */
VENEERCOPYLOOP:
   LDR R3,[R0]
10001078:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000107a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000107c:	3a01      	subs	r2, #1
   BEQ SKIPVENEERCOPY
1000107e:	d002      	beq.n	10001086 <SKIPVENEERCOPY>
   ADDS R0,#4
10001080:	3004      	adds	r0, #4
   ADDS R1,#4
10001082:	3104      	adds	r1, #4
   B VENEERCOPYLOOP
10001084:	e7f8      	b.n	10001078 <VENEERCOPYLOOP>

10001086 <SKIPVENEERCOPY>:
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
10001086:	480c      	ldr	r0, [pc, #48]	; (100010b8 <SKIPVENEERCOPY+0x32>)
   BLX R0
10001088:	4780      	blx	r0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
1000108a:	480c      	ldr	r0, [pc, #48]	; (100010bc <SKIPVENEERCOPY+0x36>)
   MOV SP,R0
1000108c:	4685      	mov	sp, r0

   MOVS R0,#0
1000108e:	2000      	movs	r0, #0
   MOVS R1,#0
10001090:	2100      	movs	r1, #0
   LDR R2, =main
10001092:	4a0b      	ldr	r2, [pc, #44]	; (100010c0 <SKIPVENEERCOPY+0x3a>)
   MOV PC,R2
10001094:	4697      	mov	pc, r2
10001096:	0000      	.short	0x0000
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001098:	10005a78 	.word	0x10005a78
   LDR R1, =__Xmc1300_sData
1000109c:	20000a30 	.word	0x20000a30
   LDR R2, =__Xmc1300_Data_Size
100010a0:	00000434 	.word	0x00000434
   ADDS R1,#4
   B COPYLOOP
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
100010a4:	20000950 	.word	0x20000950
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
100010a8:	000000d8 	.word	0x000000d8
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010ac:	10005940 	.word	0x10005940
   LDR R1, =VeneerStart
100010b0:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b4:	00000138 	.word	0x00000138
   ADDS R1,#4
   B VENEERCOPYLOOP
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
100010b8:	100012b1 	.word	0x100012b1
   BLX R0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
100010bc:	20000950 	.word	0x20000950
   MOV SP,R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c0:	100010cd 	.word	0x100010cd

100010c4 <AllowClkInitByStartup>:
*/   
     .section ".XmcStartup"
    .weak   AllowClkInitByStartup
    .type   AllowClkInitByStartup, %function
AllowClkInitByStartup:
    MOVS R0,#1
100010c4:	2001      	movs	r0, #1
    BX LR
100010c6:	4770      	bx	lr

100010c8 <SystemInit_DAVE3>:
setting up of external memory interfaces.
*/
     .weak SystemInit_DAVE3
     .type SystemInit_DAVE3, %function
SystemInit_DAVE3:
     NOP
100010c8:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ca:	4770      	bx	lr

100010cc <main>:
/* ----------------------------------------------------------------------
* Max magnitude FFT Bin test
* ------------------------------------------------------------------- */

int32_t main(void)
{
100010cc:	b590      	push	{r4, r7, lr}
100010ce:	b091      	sub	sp, #68	; 0x44
100010d0:	af00      	add	r7, sp, #0

  uint32_t srcRows, srcColumns;  /* Temporary variables */
  arm_status status;

  /* Initialise A Matrix Instance with numRows, numCols and data array(A_f32) */
  srcRows = 4;
100010d2:	2304      	movs	r3, #4
100010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  srcColumns = 4;
100010d6:	2304      	movs	r3, #4
100010d8:	637b      	str	r3, [r7, #52]	; 0x34
  arm_mat_init_f32(&A, srcRows, srcColumns, (float32_t *)A_f32);
100010da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100010dc:	b299      	uxth	r1, r3
100010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100010e0:	b29a      	uxth	r2, r3
100010e2:	1c38      	adds	r0, r7, #0
100010e4:	302c      	adds	r0, #44	; 0x2c
100010e6:	4b55      	ldr	r3, [pc, #340]	; (1000123c <main+0x170>)
100010e8:	f000 fda6 	bl	10001c38 <arm_mat_init_f32>

  /* Initialise Matrix Instance AT with numRows, numCols and data array(AT_f32) */
  srcRows = 4;
100010ec:	2304      	movs	r3, #4
100010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  srcColumns = 4;
100010f0:	2304      	movs	r3, #4
100010f2:	637b      	str	r3, [r7, #52]	; 0x34
  arm_mat_init_f32(&AT, srcRows, srcColumns, AT_f32);
100010f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100010f6:	b299      	uxth	r1, r3
100010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100010fa:	b29a      	uxth	r2, r3
100010fc:	1c38      	adds	r0, r7, #0
100010fe:	3024      	adds	r0, #36	; 0x24
10001100:	4b4f      	ldr	r3, [pc, #316]	; (10001240 <main+0x174>)
10001102:	f000 fd99 	bl	10001c38 <arm_mat_init_f32>

  /* calculation of A transpose */
  status = arm_mat_trans_f32(&A, &AT);
10001106:	1c3c      	adds	r4, r7, #0
10001108:	343f      	adds	r4, #63	; 0x3f
1000110a:	1c3a      	adds	r2, r7, #0
1000110c:	322c      	adds	r2, #44	; 0x2c
1000110e:	1c3b      	adds	r3, r7, #0
10001110:	3324      	adds	r3, #36	; 0x24
10001112:	1c10      	adds	r0, r2, #0
10001114:	1c19      	adds	r1, r3, #0
10001116:	f001 f861 	bl	100021dc <arm_mat_trans_f32>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	7023      	strb	r3, [r4, #0]


  /* Initialise ATMA Matrix Instance with numRows, numCols and data array(ATMA_f32) */
  srcRows = 4;
1000111e:	2304      	movs	r3, #4
10001120:	63bb      	str	r3, [r7, #56]	; 0x38
  srcColumns = 4;
10001122:	2304      	movs	r3, #4
10001124:	637b      	str	r3, [r7, #52]	; 0x34
  arm_mat_init_f32(&ATMA, srcRows, srcColumns, ATMA_f32);
10001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001128:	b299      	uxth	r1, r3
1000112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000112c:	b29a      	uxth	r2, r3
1000112e:	1c38      	adds	r0, r7, #0
10001130:	301c      	adds	r0, #28
10001132:	4b44      	ldr	r3, [pc, #272]	; (10001244 <main+0x178>)
10001134:	f000 fd80 	bl	10001c38 <arm_mat_init_f32>

  /* calculation of AT Multiply with A */
  status = arm_mat_mult_f32(&AT, &A, &ATMA);
10001138:	1c3c      	adds	r4, r7, #0
1000113a:	343f      	adds	r4, #63	; 0x3f
1000113c:	1c39      	adds	r1, r7, #0
1000113e:	3124      	adds	r1, #36	; 0x24
10001140:	1c3a      	adds	r2, r7, #0
10001142:	322c      	adds	r2, #44	; 0x2c
10001144:	1c3b      	adds	r3, r7, #0
10001146:	331c      	adds	r3, #28
10001148:	1c08      	adds	r0, r1, #0
1000114a:	1c11      	adds	r1, r2, #0
1000114c:	1c1a      	adds	r2, r3, #0
1000114e:	f000 ffa5 	bl	1000209c <arm_mat_mult_f32>
10001152:	1c03      	adds	r3, r0, #0
10001154:	7023      	strb	r3, [r4, #0]

  /* Initialise ATMAI Matrix Instance with numRows, numCols and data array(ATMAI_f32) */
  srcRows = 4;
10001156:	2304      	movs	r3, #4
10001158:	63bb      	str	r3, [r7, #56]	; 0x38
  srcColumns = 4;
1000115a:	2304      	movs	r3, #4
1000115c:	637b      	str	r3, [r7, #52]	; 0x34
  arm_mat_init_f32(&ATMAI, srcRows, srcColumns, ATMAI_f32);
1000115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001160:	b299      	uxth	r1, r3
10001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001164:	b29a      	uxth	r2, r3
10001166:	1c38      	adds	r0, r7, #0
10001168:	3014      	adds	r0, #20
1000116a:	4b37      	ldr	r3, [pc, #220]	; (10001248 <main+0x17c>)
1000116c:	f000 fd64 	bl	10001c38 <arm_mat_init_f32>

  /* calculation of Inverse((Transpose(A) * A) */
  status = arm_mat_inverse_f32(&ATMA, &ATMAI);
10001170:	1c3c      	adds	r4, r7, #0
10001172:	343f      	adds	r4, #63	; 0x3f
10001174:	1c3a      	adds	r2, r7, #0
10001176:	321c      	adds	r2, #28
10001178:	1c3b      	adds	r3, r7, #0
1000117a:	3314      	adds	r3, #20
1000117c:	1c10      	adds	r0, r2, #0
1000117e:	1c19      	adds	r1, r3, #0
10001180:	f000 fd5e 	bl	10001c40 <arm_mat_inverse_f32>
10001184:	1c03      	adds	r3, r0, #0
10001186:	7023      	strb	r3, [r4, #0]

  /* calculation of (Inverse((Transpose(A) * A)) *  Transpose(A)) */
  status = arm_mat_mult_f32(&ATMAI, &AT, &ATMA);
10001188:	1c3c      	adds	r4, r7, #0
1000118a:	343f      	adds	r4, #63	; 0x3f
1000118c:	1c39      	adds	r1, r7, #0
1000118e:	3114      	adds	r1, #20
10001190:	1c3a      	adds	r2, r7, #0
10001192:	3224      	adds	r2, #36	; 0x24
10001194:	1c3b      	adds	r3, r7, #0
10001196:	331c      	adds	r3, #28
10001198:	1c08      	adds	r0, r1, #0
1000119a:	1c11      	adds	r1, r2, #0
1000119c:	1c1a      	adds	r2, r3, #0
1000119e:	f000 ff7d 	bl	1000209c <arm_mat_mult_f32>
100011a2:	1c03      	adds	r3, r0, #0
100011a4:	7023      	strb	r3, [r4, #0]

  /* Initialise B Matrix Instance with numRows, numCols and data array(B_f32) */
  srcRows = 4;
100011a6:	2304      	movs	r3, #4
100011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  srcColumns = 1;
100011aa:	2301      	movs	r3, #1
100011ac:	637b      	str	r3, [r7, #52]	; 0x34
  arm_mat_init_f32(&B, srcRows, srcColumns, (float32_t *)B_f32);
100011ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100011b0:	b299      	uxth	r1, r3
100011b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100011b4:	b29a      	uxth	r2, r3
100011b6:	1c38      	adds	r0, r7, #0
100011b8:	300c      	adds	r0, #12
100011ba:	4b24      	ldr	r3, [pc, #144]	; (1000124c <main+0x180>)
100011bc:	f000 fd3c 	bl	10001c38 <arm_mat_init_f32>

  /* Initialise X Matrix Instance with numRows, numCols and data array(X_f32) */
  srcRows = 4;
100011c0:	2304      	movs	r3, #4
100011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  srcColumns = 1;
100011c4:	2301      	movs	r3, #1
100011c6:	637b      	str	r3, [r7, #52]	; 0x34
  arm_mat_init_f32(&X, srcRows, srcColumns, X_f32);
100011c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100011ca:	b299      	uxth	r1, r3
100011cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100011ce:	b29a      	uxth	r2, r3
100011d0:	1d38      	adds	r0, r7, #4
100011d2:	4b1f      	ldr	r3, [pc, #124]	; (10001250 <main+0x184>)
100011d4:	f000 fd30 	bl	10001c38 <arm_mat_init_f32>

  /* calculation ((Inverse((Transpose(A) * A)) *  Transpose(A)) * B) */
  status = arm_mat_mult_f32(&ATMA, &B, &X);
100011d8:	1c3c      	adds	r4, r7, #0
100011da:	343f      	adds	r4, #63	; 0x3f
100011dc:	1c39      	adds	r1, r7, #0
100011de:	311c      	adds	r1, #28
100011e0:	1c3a      	adds	r2, r7, #0
100011e2:	320c      	adds	r2, #12
100011e4:	1d3b      	adds	r3, r7, #4
100011e6:	1c08      	adds	r0, r1, #0
100011e8:	1c11      	adds	r1, r2, #0
100011ea:	1c1a      	adds	r2, r3, #0
100011ec:	f000 ff56 	bl	1000209c <arm_mat_mult_f32>
100011f0:	1c03      	adds	r3, r0, #0
100011f2:	7023      	strb	r3, [r4, #0]

  /* Comparison of reference with test output */
  snr = arm_snr_f32((float32_t *)xRef_f32, X_f32, 4);
100011f4:	4a17      	ldr	r2, [pc, #92]	; (10001254 <main+0x188>)
100011f6:	4b16      	ldr	r3, [pc, #88]	; (10001250 <main+0x184>)
100011f8:	1c10      	adds	r0, r2, #0
100011fa:	1c19      	adds	r1, r3, #0
100011fc:	2204      	movs	r2, #4
100011fe:	f000 f89b 	bl	10001338 <arm_snr_f32>
10001202:	1c02      	adds	r2, r0, #0
10001204:	4b14      	ldr	r3, [pc, #80]	; (10001258 <main+0x18c>)
10001206:	601a      	str	r2, [r3, #0]

  /*------------------------------------------------------------------------------
  *            Initialise status depending on SNR calculations
  *------------------------------------------------------------------------------*/
  if( snr > SNR_THRESHOLD)
10001208:	4b13      	ldr	r3, [pc, #76]	; (10001258 <main+0x18c>)
1000120a:	681b      	ldr	r3, [r3, #0]
1000120c:	1c18      	adds	r0, r3, #0
1000120e:	4913      	ldr	r1, [pc, #76]	; (1000125c <main+0x190>)
10001210:	f001 fc52 	bl	10002ab8 <__aeabi_fcmpgt>
10001214:	1c03      	adds	r3, r0, #0
10001216:	2b00      	cmp	r3, #0
10001218:	d004      	beq.n	10001224 <main+0x158>
  {
    status = ARM_MATH_SUCCESS;
1000121a:	1c3b      	adds	r3, r7, #0
1000121c:	333f      	adds	r3, #63	; 0x3f
1000121e:	2200      	movs	r2, #0
10001220:	701a      	strb	r2, [r3, #0]
10001222:	e003      	b.n	1000122c <main+0x160>
  }
  else
  {
    status = ARM_MATH_TEST_FAILURE;
10001224:	1c3b      	adds	r3, r7, #0
10001226:	333f      	adds	r3, #63	; 0x3f
10001228:	22fa      	movs	r2, #250	; 0xfa
1000122a:	701a      	strb	r2, [r3, #0]

  /* ----------------------------------------------------------------------
  ** Loop here if the signals fail the PASS check.
  ** This denotes a test failure
  ** ------------------------------------------------------------------- */
  if( status != ARM_MATH_SUCCESS)
1000122c:	1c3b      	adds	r3, r7, #0
1000122e:	333f      	adds	r3, #63	; 0x3f
10001230:	781b      	ldrb	r3, [r3, #0]
10001232:	b25b      	sxtb	r3, r3
10001234:	2b00      	cmp	r3, #0
10001236:	d000      	beq.n	1000123a <main+0x16e>
  {
    while(1);
10001238:	e7fe      	b.n	10001238 <main+0x16c>
  }

  while(1);                             /* main function does not return */
1000123a:	e7fe      	b.n	1000123a <main+0x16e>
1000123c:	100057d8 	.word	0x100057d8
10001240:	20000950 	.word	0x20000950
10001244:	200009e4 	.word	0x200009e4
10001248:	200009a0 	.word	0x200009a0
1000124c:	100057c8 	.word	0x100057c8
10001250:	20000990 	.word	0x20000990
10001254:	10005818 	.word	0x10005818
10001258:	200009e0 	.word	0x200009e0
1000125c:	42b40000 	.word	0x42b40000

10001260 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
10001260:	e7fe      	b.n	10001260 <NMI_Handler>

10001262 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
10001262:	e7fe      	b.n	10001262 <HardFault_Handler>

10001264 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10001264:	e7fe      	b.n	10001264 <SVC_Handler>

10001266 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
10001266:	e7fe      	b.n	10001266 <PendSV_Handler>

10001268 <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
10001268:	e7fe      	b.n	10001268 <SysTick_Handler>

1000126a <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
1000126a:	e7fe      	b.n	1000126a <SCU_0_IRQHandler>

1000126c <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
1000126c:	e7fe      	b.n	1000126c <SCU_1_IRQHandler>

1000126e <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
1000126e:	e7fe      	b.n	1000126e <SCU_2_IRQHandler>

10001270 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
10001270:	e7fe      	b.n	10001270 <ERU0_0_IRQHandler>

10001272 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
10001272:	e7fe      	b.n	10001272 <ERU0_1_IRQHandler>

10001274 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
10001274:	e7fe      	b.n	10001274 <ERU0_2_IRQHandler>

10001276 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
10001276:	e7fe      	b.n	10001276 <ERU0_3_IRQHandler>

10001278 <MATH0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler MATH0_0_IRQHandler
10001278:	e7fe      	b.n	10001278 <MATH0_0_IRQHandler>

1000127a <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
1000127a:	e7fe      	b.n	1000127a <VADC0_C0_0_IRQHandler>

1000127c <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
1000127c:	e7fe      	b.n	1000127c <VADC0_C0_1_IRQHandler>

1000127e <VADC0_G0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
1000127e:	e7fe      	b.n	1000127e <VADC0_G0_0_IRQHandler>

10001280 <VADC0_G0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
10001280:	e7fe      	b.n	10001280 <VADC0_G0_1_IRQHandler>

10001282 <VADC0_G1_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
10001282:	e7fe      	b.n	10001282 <VADC0_G1_0_IRQHandler>

10001284 <VADC0_G1_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
10001284:	e7fe      	b.n	10001284 <VADC0_G1_1_IRQHandler>

10001286 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
10001286:	e7fe      	b.n	10001286 <CCU40_0_IRQHandler>

10001288 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
10001288:	e7fe      	b.n	10001288 <CCU40_1_IRQHandler>

1000128a <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
1000128a:	e7fe      	b.n	1000128a <CCU40_2_IRQHandler>

1000128c <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
1000128c:	e7fe      	b.n	1000128c <CCU40_3_IRQHandler>

1000128e <CCU80_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_0_IRQHandler
1000128e:	e7fe      	b.n	1000128e <CCU80_0_IRQHandler>

10001290 <CCU80_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_1_IRQHandler
10001290:	e7fe      	b.n	10001290 <CCU80_1_IRQHandler>

10001292 <POSIF0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_0_IRQHandler
10001292:	e7fe      	b.n	10001292 <POSIF0_0_IRQHandler>

10001294 <POSIF0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_1_IRQHandler
10001294:	e7fe      	b.n	10001294 <POSIF0_1_IRQHandler>

10001296 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
10001296:	e7fe      	b.n	10001296 <USIC0_0_IRQHandler>

10001298 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
10001298:	e7fe      	b.n	10001298 <USIC0_1_IRQHandler>

1000129a <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
1000129a:	e7fe      	b.n	1000129a <USIC0_2_IRQHandler>

1000129c <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
1000129c:	e7fe      	b.n	1000129c <USIC0_3_IRQHandler>

1000129e <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
1000129e:	e7fe      	b.n	1000129e <USIC0_4_IRQHandler>

100012a0 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
100012a0:	e7fe      	b.n	100012a0 <USIC0_5_IRQHandler>

100012a2 <BCCU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler BCCU0_0_IRQHandler
100012a2:	e7fe      	b.n	100012a2 <BCCU0_0_IRQHandler>

100012a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
100012a4:	b580      	push	{r7, lr}
100012a6:	af00      	add	r7, sp, #0

  /*
   * Clock tree setup by CMSIS routines is allowed only in the absence of DAVE
   * Clock app.
   */ 
  if(AllowClkInitByStartup()){ 
100012a8:	f7ff ff0c 	bl	100010c4 <AllowClkInitByStartup>
   * MCLK    = DCO_DCLK
   * PCLK    = MCLK
   * RTC CLK = Standby clock
   */
  }
}
100012ac:	46bd      	mov	sp, r7
100012ae:	bd80      	pop	{r7, pc}

100012b0 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100012b0:	b580      	push	{r7, lr}
100012b2:	b086      	sub	sp, #24
100012b4:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV, CLKCR, Clock;

  CLKCR = SCU_CLK -> CLKCR;
100012b6:	4b1c      	ldr	r3, [pc, #112]	; (10001328 <SystemCoreClockUpdate+0x78>)
100012b8:	681b      	ldr	r3, [r3, #0]
100012ba:	613b      	str	r3, [r7, #16]
  IDIV = (CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100012bc:	693a      	ldr	r2, [r7, #16]
100012be:	23ff      	movs	r3, #255	; 0xff
100012c0:	021b      	lsls	r3, r3, #8
100012c2:	4013      	ands	r3, r2
100012c4:	0a1b      	lsrs	r3, r3, #8
100012c6:	60fb      	str	r3, [r7, #12]
  FDIV = (CLKCR & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100012c8:	693a      	ldr	r2, [r7, #16]
100012ca:	23ff      	movs	r3, #255	; 0xff
100012cc:	4013      	ands	r3, r2
100012ce:	60bb      	str	r3, [r7, #8]
  
  if(IDIV)
100012d0:	68fb      	ldr	r3, [r7, #12]
100012d2:	2b00      	cmp	r3, #0
100012d4:	d01f      	beq.n	10001316 <SystemCoreClockUpdate+0x66>
  {
    /* Divider is enabled and used */
    if(0 == FDIV)
100012d6:	68bb      	ldr	r3, [r7, #8]
100012d8:	2b00      	cmp	r3, #0
100012da:	d106      	bne.n	100012ea <SystemCoreClockUpdate+0x3a>
     {
       /* No fractional divider, so MCLK = DCO_Clk / (2 * IDIV) */
       Clock = MCLK_MHZ / IDIV;
100012dc:	4813      	ldr	r0, [pc, #76]	; (1000132c <SystemCoreClockUpdate+0x7c>)
100012de:	68f9      	ldr	r1, [r7, #12]
100012e0:	f001 fb36 	bl	10002950 <__aeabi_uidiv>
100012e4:	1c03      	adds	r3, r0, #0
100012e6:	617b      	str	r3, [r7, #20]
100012e8:	e017      	b.n	1000131a <SystemCoreClockUpdate+0x6a>
     }
    else
     {
       /* Both integer and fractional divider must be considered */
       /* 1. IDIV + FDIV/256 */
       Q_24_8 FDiv_IDiv_Sum = (IDIV << FRACBITS) + FDIV;  
100012ea:	68fb      	ldr	r3, [r7, #12]
100012ec:	021a      	lsls	r2, r3, #8
100012ee:	68bb      	ldr	r3, [r7, #8]
100012f0:	18d3      	adds	r3, r2, r3
100012f2:	607b      	str	r3, [r7, #4]

       /* 2. Fixed point division Q24.8 / Q9.8 = Q15.0 */
       Q_15_0 ClockVal = (DCO_DCLK_MULTIPLIER << FRACBITS)/ FDiv_IDiv_Sum;
100012f4:	687b      	ldr	r3, [r7, #4]
100012f6:	22fa      	movs	r2, #250	; 0xfa
100012f8:	0610      	lsls	r0, r2, #24
100012fa:	1c19      	adds	r1, r3, #0
100012fc:	f001 fb28 	bl	10002950 <__aeabi_uidiv>
10001300:	1c03      	adds	r3, r0, #0
10001302:	603b      	str	r3, [r7, #0]
       Clock = ((uint32_t)ClockVal) * KHZ_MULTIPLIER;
10001304:	683b      	ldr	r3, [r7, #0]
10001306:	22fa      	movs	r2, #250	; 0xfa
10001308:	0092      	lsls	r2, r2, #2
1000130a:	4353      	muls	r3, r2
1000130c:	617b      	str	r3, [r7, #20]
       Clock = Clock >> DCO_DCLK_DIVIDER;
1000130e:	697b      	ldr	r3, [r7, #20]
10001310:	0a5b      	lsrs	r3, r3, #9
10001312:	617b      	str	r3, [r7, #20]
10001314:	e001      	b.n	1000131a <SystemCoreClockUpdate+0x6a>
     }
  }
  else
  {
    /* Divider bypassed. Simply divide DCO_DCLK by 2 */
    Clock = MCLK_MHZ;
10001316:	4b05      	ldr	r3, [pc, #20]	; (1000132c <SystemCoreClockUpdate+0x7c>)
10001318:	617b      	str	r3, [r7, #20]
  }

  /* Finally with the math class over, update SystemCoreClock */
  SystemCoreClock = Clock;  
1000131a:	4b05      	ldr	r3, [pc, #20]	; (10001330 <SystemCoreClockUpdate+0x80>)
1000131c:	697a      	ldr	r2, [r7, #20]
1000131e:	601a      	str	r2, [r3, #0]
}
10001320:	46bd      	mov	sp, r7
10001322:	b006      	add	sp, #24
10001324:	bd80      	pop	{r7, pc}
10001326:	46c0      	nop			; (mov r8, r8)
10001328:	40010300 	.word	0x40010300
1000132c:	01e84800 	.word	0x01e84800
10001330:	20000a24 	.word	0x20000a24
10001334:	00000000 	.word	0x00000000

10001338 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output 
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
10001338:	b590      	push	{r4, r7, lr}
1000133a:	b08b      	sub	sp, #44	; 0x2c
1000133c:	af00      	add	r7, sp, #0
1000133e:	60f8      	str	r0, [r7, #12]
10001340:	60b9      	str	r1, [r7, #8]
10001342:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
10001344:	2300      	movs	r3, #0
10001346:	627b      	str	r3, [r7, #36]	; 0x24
10001348:	2300      	movs	r3, #0
1000134a:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
1000134c:	2300      	movs	r3, #0
1000134e:	623b      	str	r3, [r7, #32]
10001350:	e05f      	b.n	10001412 <arm_snr_f32+0xda>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
10001352:	6a3b      	ldr	r3, [r7, #32]
10001354:	009b      	lsls	r3, r3, #2
10001356:	68fa      	ldr	r2, [r7, #12]
10001358:	18d3      	adds	r3, r2, r3
1000135a:	61fb      	str	r3, [r7, #28]
      temp =  *test;
1000135c:	69fb      	ldr	r3, [r7, #28]
1000135e:	681b      	ldr	r3, [r3, #0]
10001360:	61bb      	str	r3, [r7, #24]

	  if(temp == 0x7FC00000)
10001362:	69ba      	ldr	r2, [r7, #24]
10001364:	4b48      	ldr	r3, [pc, #288]	; (10001488 <arm_snr_f32+0x150>)
10001366:	429a      	cmp	r2, r3
10001368:	d101      	bne.n	1000136e <arm_snr_f32+0x36>
	  {
	  		return(0);
1000136a:	2300      	movs	r3, #0
1000136c:	e081      	b.n	10001472 <arm_snr_f32+0x13a>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
1000136e:	6a3b      	ldr	r3, [r7, #32]
10001370:	009b      	lsls	r3, r3, #2
10001372:	68ba      	ldr	r2, [r7, #8]
10001374:	18d3      	adds	r3, r2, r3
10001376:	61fb      	str	r3, [r7, #28]
      temp =  *test;
10001378:	69fb      	ldr	r3, [r7, #28]
1000137a:	681b      	ldr	r3, [r3, #0]
1000137c:	61bb      	str	r3, [r7, #24]

	  if(temp == 0x7FC00000)
1000137e:	69ba      	ldr	r2, [r7, #24]
10001380:	4b41      	ldr	r3, [pc, #260]	; (10001488 <arm_snr_f32+0x150>)
10001382:	429a      	cmp	r2, r3
10001384:	d101      	bne.n	1000138a <arm_snr_f32+0x52>
	  {
	  		return(0);
10001386:	2300      	movs	r3, #0
10001388:	e073      	b.n	10001472 <arm_snr_f32+0x13a>
	  }
      EnergySignal += pRef[i] * pRef[i];
1000138a:	6a3b      	ldr	r3, [r7, #32]
1000138c:	009b      	lsls	r3, r3, #2
1000138e:	68fa      	ldr	r2, [r7, #12]
10001390:	18d3      	adds	r3, r2, r3
10001392:	681a      	ldr	r2, [r3, #0]
10001394:	6a3b      	ldr	r3, [r7, #32]
10001396:	009b      	lsls	r3, r3, #2
10001398:	68f9      	ldr	r1, [r7, #12]
1000139a:	18cb      	adds	r3, r1, r3
1000139c:	681b      	ldr	r3, [r3, #0]
1000139e:	1c10      	adds	r0, r2, #0
100013a0:	1c19      	adds	r1, r3, #0
100013a2:	f001 ff65 	bl	10003270 <__aeabi_fmul>
100013a6:	1c03      	adds	r3, r0, #0
100013a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
100013aa:	1c19      	adds	r1, r3, #0
100013ac:	f001 fb98 	bl	10002ae0 <__aeabi_fadd>
100013b0:	1c03      	adds	r3, r0, #0
100013b2:	627b      	str	r3, [r7, #36]	; 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
100013b4:	6a3b      	ldr	r3, [r7, #32]
100013b6:	009b      	lsls	r3, r3, #2
100013b8:	68fa      	ldr	r2, [r7, #12]
100013ba:	18d3      	adds	r3, r2, r3
100013bc:	681a      	ldr	r2, [r3, #0]
100013be:	6a3b      	ldr	r3, [r7, #32]
100013c0:	009b      	lsls	r3, r3, #2
100013c2:	68b9      	ldr	r1, [r7, #8]
100013c4:	18cb      	adds	r3, r1, r3
100013c6:	681b      	ldr	r3, [r3, #0]
100013c8:	1c10      	adds	r0, r2, #0
100013ca:	1c19      	adds	r1, r3, #0
100013cc:	f002 f880 	bl	100034d0 <__aeabi_fsub>
100013d0:	1c03      	adds	r3, r0, #0
100013d2:	1c1c      	adds	r4, r3, #0
100013d4:	6a3b      	ldr	r3, [r7, #32]
100013d6:	009b      	lsls	r3, r3, #2
100013d8:	68fa      	ldr	r2, [r7, #12]
100013da:	18d3      	adds	r3, r2, r3
100013dc:	681a      	ldr	r2, [r3, #0]
100013de:	6a3b      	ldr	r3, [r7, #32]
100013e0:	009b      	lsls	r3, r3, #2
100013e2:	68b9      	ldr	r1, [r7, #8]
100013e4:	18cb      	adds	r3, r1, r3
100013e6:	681b      	ldr	r3, [r3, #0]
100013e8:	1c10      	adds	r0, r2, #0
100013ea:	1c19      	adds	r1, r3, #0
100013ec:	f002 f870 	bl	100034d0 <__aeabi_fsub>
100013f0:	1c03      	adds	r3, r0, #0
100013f2:	1c20      	adds	r0, r4, #0
100013f4:	1c19      	adds	r1, r3, #0
100013f6:	f001 ff3b 	bl	10003270 <__aeabi_fmul>
100013fa:	1c03      	adds	r3, r0, #0
100013fc:	1c1a      	adds	r2, r3, #0
100013fe:	693b      	ldr	r3, [r7, #16]
10001400:	1c10      	adds	r0, r2, #0
10001402:	1c19      	adds	r1, r3, #0
10001404:	f001 fb6c 	bl	10002ae0 <__aeabi_fadd>
10001408:	1c03      	adds	r3, r0, #0
1000140a:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
1000140c:	6a3b      	ldr	r3, [r7, #32]
1000140e:	3301      	adds	r3, #1
10001410:	623b      	str	r3, [r7, #32]
10001412:	6a3a      	ldr	r2, [r7, #32]
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	429a      	cmp	r2, r3
10001418:	d39b      	bcc.n	10001352 <arm_snr_f32+0x1a>
      EnergySignal += pRef[i] * pRef[i];
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
1000141a:	1c3b      	adds	r3, r7, #0
1000141c:	3310      	adds	r3, #16
1000141e:	61fb      	str	r3, [r7, #28]
    temp =  *test;
10001420:	69fb      	ldr	r3, [r7, #28]
10001422:	681b      	ldr	r3, [r3, #0]
10001424:	61bb      	str	r3, [r7, #24]

    if(temp == 0x7FC00000)
10001426:	69ba      	ldr	r2, [r7, #24]
10001428:	4b17      	ldr	r3, [pc, #92]	; (10001488 <arm_snr_f32+0x150>)
1000142a:	429a      	cmp	r2, r3
1000142c:	d101      	bne.n	10001432 <arm_snr_f32+0xfa>
    {
  		return(0);
1000142e:	2300      	movs	r3, #0
10001430:	e01f      	b.n	10001472 <arm_snr_f32+0x13a>
    }
	

  SNR = 10 * log10 (EnergySignal / EnergyError);
10001432:	693b      	ldr	r3, [r7, #16]
10001434:	6a78      	ldr	r0, [r7, #36]	; 0x24
10001436:	1c19      	adds	r1, r3, #0
10001438:	f001 fd28 	bl	10002e8c <__aeabi_fdiv>
1000143c:	1c03      	adds	r3, r0, #0
1000143e:	1c18      	adds	r0, r3, #0
10001440:	f004 f8a0 	bl	10005584 <__aeabi_f2d>
10001444:	1c03      	adds	r3, r0, #0
10001446:	1c0c      	adds	r4, r1, #0
10001448:	1c18      	adds	r0, r3, #0
1000144a:	1c21      	adds	r1, r4, #0
1000144c:	f000 ff0c 	bl	10002268 <log10>
10001450:	1c03      	adds	r3, r0, #0
10001452:	1c0c      	adds	r4, r1, #0
10001454:	1c18      	adds	r0, r3, #0
10001456:	1c21      	adds	r1, r4, #0
10001458:	4b0a      	ldr	r3, [pc, #40]	; (10001484 <arm_snr_f32+0x14c>)
1000145a:	4a09      	ldr	r2, [pc, #36]	; (10001480 <arm_snr_f32+0x148>)
1000145c:	f003 fa30 	bl	100048c0 <__aeabi_dmul>
10001460:	1c03      	adds	r3, r0, #0
10001462:	1c0c      	adds	r4, r1, #0
10001464:	1c18      	adds	r0, r3, #0
10001466:	1c21      	adds	r1, r4, #0
10001468:	f004 f8e0 	bl	1000562c <__aeabi_d2f>
1000146c:	1c03      	adds	r3, r0, #0
1000146e:	617b      	str	r3, [r7, #20]

  return (SNR);
10001470:	697b      	ldr	r3, [r7, #20]

}
10001472:	1c18      	adds	r0, r3, #0
10001474:	46bd      	mov	sp, r7
10001476:	b00b      	add	sp, #44	; 0x2c
10001478:	bd90      	pop	{r4, r7, pc}
1000147a:	46c0      	nop			; (mov r8, r8)
1000147c:	46c0      	nop			; (mov r8, r8)
1000147e:	46c0      	nop			; (mov r8, r8)
10001480:	00000000 	.word	0x00000000
10001484:	40240000 	.word	0x40240000
10001488:	7fc00000 	.word	0x7fc00000
1000148c:	46c0      	nop			; (mov r8, r8)
1000148e:	46c0      	nop			; (mov r8, r8)

10001490 <arm_provide_guard_bits_q15>:
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
10001490:	b580      	push	{r7, lr}
10001492:	b086      	sub	sp, #24
10001494:	af00      	add	r7, sp, #0
10001496:	60f8      	str	r0, [r7, #12]
10001498:	60b9      	str	r1, [r7, #8]
1000149a:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
1000149c:	2300      	movs	r3, #0
1000149e:	617b      	str	r3, [r7, #20]
100014a0:	e012      	b.n	100014c8 <arm_provide_guard_bits_q15+0x38>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
100014a2:	697b      	ldr	r3, [r7, #20]
100014a4:	005b      	lsls	r3, r3, #1
100014a6:	68fa      	ldr	r2, [r7, #12]
100014a8:	18d3      	adds	r3, r2, r3
100014aa:	697a      	ldr	r2, [r7, #20]
100014ac:	0052      	lsls	r2, r2, #1
100014ae:	68f9      	ldr	r1, [r7, #12]
100014b0:	188a      	adds	r2, r1, r2
100014b2:	8812      	ldrh	r2, [r2, #0]
100014b4:	b211      	sxth	r1, r2
100014b6:	687a      	ldr	r2, [r7, #4]
100014b8:	1c08      	adds	r0, r1, #0
100014ba:	4110      	asrs	r0, r2
100014bc:	1c02      	adds	r2, r0, #0
100014be:	b292      	uxth	r2, r2
100014c0:	801a      	strh	r2, [r3, #0]
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
100014c2:	697b      	ldr	r3, [r7, #20]
100014c4:	3301      	adds	r3, #1
100014c6:	617b      	str	r3, [r7, #20]
100014c8:	697a      	ldr	r2, [r7, #20]
100014ca:	68bb      	ldr	r3, [r7, #8]
100014cc:	429a      	cmp	r2, r3
100014ce:	d3e8      	bcc.n	100014a2 <arm_provide_guard_bits_q15+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
100014d0:	46bd      	mov	sp, r7
100014d2:	b006      	add	sp, #24
100014d4:	bd80      	pop	{r7, pc}
100014d6:	46c0      	nop			; (mov r8, r8)

100014d8 <arm_float_to_q12_20>:
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
100014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100014da:	4647      	mov	r7, r8
100014dc:	b480      	push	{r7}
100014de:	b086      	sub	sp, #24
100014e0:	af00      	add	r7, sp, #0
100014e2:	60f8      	str	r0, [r7, #12]
100014e4:	60b9      	str	r1, [r7, #8]
100014e6:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100014e8:	2300      	movs	r3, #0
100014ea:	617b      	str	r3, [r7, #20]
100014ec:	e058      	b.n	100015a0 <arm_float_to_q12_20+0xc8>
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
100014ee:	697b      	ldr	r3, [r7, #20]
100014f0:	009b      	lsls	r3, r3, #2
100014f2:	68ba      	ldr	r2, [r7, #8]
100014f4:	18d4      	adds	r4, r2, r3
100014f6:	697b      	ldr	r3, [r7, #20]
100014f8:	009b      	lsls	r3, r3, #2
100014fa:	68fa      	ldr	r2, [r7, #12]
100014fc:	18d3      	adds	r3, r2, r3
100014fe:	681b      	ldr	r3, [r3, #0]
10001500:	1c18      	adds	r0, r3, #0
10001502:	2193      	movs	r1, #147	; 0x93
10001504:	05c9      	lsls	r1, r1, #23
10001506:	f001 feb3 	bl	10003270 <__aeabi_fmul>
1000150a:	1c03      	adds	r3, r0, #0
1000150c:	1c18      	adds	r0, r3, #0
1000150e:	f002 f9b9 	bl	10003884 <__aeabi_f2iz>
10001512:	1c03      	adds	r3, r0, #0
10001514:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001516:	697b      	ldr	r3, [r7, #20]
10001518:	009b      	lsls	r3, r3, #2
1000151a:	68ba      	ldr	r2, [r7, #8]
1000151c:	18d2      	adds	r2, r2, r3
1000151e:	4690      	mov	r8, r2
10001520:	697b      	ldr	r3, [r7, #20]
10001522:	009b      	lsls	r3, r3, #2
10001524:	68ba      	ldr	r2, [r7, #8]
10001526:	18d3      	adds	r3, r2, r3
10001528:	681b      	ldr	r3, [r3, #0]
1000152a:	1c18      	adds	r0, r3, #0
1000152c:	f003 fff0 	bl	10005510 <__aeabi_i2d>
10001530:	1c05      	adds	r5, r0, #0
10001532:	1c0e      	adds	r6, r1, #0
10001534:	697b      	ldr	r3, [r7, #20]
10001536:	009b      	lsls	r3, r3, #2
10001538:	68fa      	ldr	r2, [r7, #12]
1000153a:	18d3      	adds	r3, r2, r3
1000153c:	681b      	ldr	r3, [r3, #0]
1000153e:	1c18      	adds	r0, r3, #0
10001540:	2100      	movs	r1, #0
10001542:	f001 fab9 	bl	10002ab8 <__aeabi_fcmpgt>
10001546:	1c03      	adds	r3, r0, #0
10001548:	2b00      	cmp	r3, #0
1000154a:	d002      	beq.n	10001552 <arm_float_to_q12_20+0x7a>
1000154c:	4c1b      	ldr	r4, [pc, #108]	; (100015bc <arm_float_to_q12_20+0xe4>)
1000154e:	4b1a      	ldr	r3, [pc, #104]	; (100015b8 <arm_float_to_q12_20+0xe0>)
10001550:	e001      	b.n	10001556 <arm_float_to_q12_20+0x7e>
10001552:	4b1b      	ldr	r3, [pc, #108]	; (100015c0 <arm_float_to_q12_20+0xe8>)
10001554:	4c1b      	ldr	r4, [pc, #108]	; (100015c4 <arm_float_to_q12_20+0xec>)
10001556:	1c28      	adds	r0, r5, #0
10001558:	1c31      	adds	r1, r6, #0
1000155a:	1c1a      	adds	r2, r3, #0
1000155c:	1c23      	adds	r3, r4, #0
1000155e:	f002 fa05 	bl	1000396c <__aeabi_dadd>
10001562:	1c03      	adds	r3, r0, #0
10001564:	1c0c      	adds	r4, r1, #0
10001566:	1c18      	adds	r0, r3, #0
10001568:	1c21      	adds	r1, r4, #0
1000156a:	f003 ff9d 	bl	100054a8 <__aeabi_d2iz>
1000156e:	1c03      	adds	r3, r0, #0
10001570:	4642      	mov	r2, r8
10001572:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 1.0)
10001574:	697b      	ldr	r3, [r7, #20]
10001576:	009b      	lsls	r3, r3, #2
10001578:	68fa      	ldr	r2, [r7, #12]
1000157a:	18d3      	adds	r3, r2, r3
1000157c:	681b      	ldr	r3, [r3, #0]
1000157e:	1c18      	adds	r0, r3, #0
10001580:	21fe      	movs	r1, #254	; 0xfe
10001582:	0589      	lsls	r1, r1, #22
10001584:	f001 fa7e 	bl	10002a84 <__aeabi_fcmpeq>
10001588:	1c03      	adds	r3, r0, #0
1000158a:	2b00      	cmp	r3, #0
1000158c:	d005      	beq.n	1000159a <arm_float_to_q12_20+0xc2>
        {
          pOut[i] = 0x000FFFFF;
1000158e:	697b      	ldr	r3, [r7, #20]
10001590:	009b      	lsls	r3, r3, #2
10001592:	68ba      	ldr	r2, [r7, #8]
10001594:	18d3      	adds	r3, r2, r3
10001596:	4a0c      	ldr	r2, [pc, #48]	; (100015c8 <arm_float_to_q12_20+0xf0>)
10001598:	601a      	str	r2, [r3, #0]

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
1000159a:	697b      	ldr	r3, [r7, #20]
1000159c:	3301      	adds	r3, #1
1000159e:	617b      	str	r3, [r7, #20]
100015a0:	697a      	ldr	r2, [r7, #20]
100015a2:	687b      	ldr	r3, [r7, #4]
100015a4:	429a      	cmp	r2, r3
100015a6:	d3a2      	bcc.n	100014ee <arm_float_to_q12_20+0x16>
      if (pIn[i] == (float) 1.0)
        {
          pOut[i] = 0x000FFFFF;
        }
    }
}
100015a8:	46bd      	mov	sp, r7
100015aa:	b006      	add	sp, #24
100015ac:	bc04      	pop	{r2}
100015ae:	4690      	mov	r8, r2
100015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100015b2:	46c0      	nop			; (mov r8, r8)
100015b4:	46c0      	nop			; (mov r8, r8)
100015b6:	46c0      	nop			; (mov r8, r8)
100015b8:	00000000 	.word	0x00000000
100015bc:	3fe00000 	.word	0x3fe00000
100015c0:	00000000 	.word	0x00000000
100015c4:	bfe00000 	.word	0xbfe00000
100015c8:	000fffff 	.word	0x000fffff
100015cc:	46c0      	nop			; (mov r8, r8)
100015ce:	46c0      	nop			; (mov r8, r8)

100015d0 <arm_compare_fixed_q15>:
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
{
100015d0:	b580      	push	{r7, lr}
100015d2:	b088      	sub	sp, #32
100015d4:	af00      	add	r7, sp, #0
100015d6:	60f8      	str	r0, [r7, #12]
100015d8:	60b9      	str	r1, [r7, #8]
100015da:	607a      	str	r2, [r7, #4]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
100015dc:	2300      	movs	r3, #0
100015de:	617b      	str	r3, [r7, #20]
  uint32_t maxDiff = 0;
100015e0:	2300      	movs	r3, #0
100015e2:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < numSamples; i++)
100015e4:	2300      	movs	r3, #0
100015e6:	61fb      	str	r3, [r7, #28]
100015e8:	e01b      	b.n	10001622 <arm_compare_fixed_q15+0x52>
  {
  	diff = pIn[i] - pOut[i];
100015ea:	69fb      	ldr	r3, [r7, #28]
100015ec:	005b      	lsls	r3, r3, #1
100015ee:	68fa      	ldr	r2, [r7, #12]
100015f0:	18d3      	adds	r3, r2, r3
100015f2:	881b      	ldrh	r3, [r3, #0]
100015f4:	b21a      	sxth	r2, r3
100015f6:	69fb      	ldr	r3, [r7, #28]
100015f8:	005b      	lsls	r3, r3, #1
100015fa:	68b9      	ldr	r1, [r7, #8]
100015fc:	18cb      	adds	r3, r1, r3
100015fe:	881b      	ldrh	r3, [r3, #0]
10001600:	b21b      	sxth	r3, r3
10001602:	1ad3      	subs	r3, r2, r3
10001604:	613b      	str	r3, [r7, #16]
  	diffCrnt = (diff > 0) ? diff : -diff;
10001606:	693b      	ldr	r3, [r7, #16]
10001608:	17da      	asrs	r2, r3, #31
1000160a:	189b      	adds	r3, r3, r2
1000160c:	4053      	eors	r3, r2
1000160e:	617b      	str	r3, [r7, #20]

	if(diffCrnt > maxDiff)
10001610:	697a      	ldr	r2, [r7, #20]
10001612:	69bb      	ldr	r3, [r7, #24]
10001614:	429a      	cmp	r2, r3
10001616:	d901      	bls.n	1000161c <arm_compare_fixed_q15+0x4c>
	{
		maxDiff = diffCrnt;
10001618:	697b      	ldr	r3, [r7, #20]
1000161a:	61bb      	str	r3, [r7, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
1000161c:	69fb      	ldr	r3, [r7, #28]
1000161e:	3301      	adds	r3, #1
10001620:	61fb      	str	r3, [r7, #28]
10001622:	69fa      	ldr	r2, [r7, #28]
10001624:	687b      	ldr	r3, [r7, #4]
10001626:	429a      	cmp	r2, r3
10001628:	d3df      	bcc.n	100015ea <arm_compare_fixed_q15+0x1a>
	{
		maxDiff = diffCrnt;
	}	
  }

  return(maxDiff);
1000162a:	69bb      	ldr	r3, [r7, #24]
}
1000162c:	1c18      	adds	r0, r3, #0
1000162e:	46bd      	mov	sp, r7
10001630:	b008      	add	sp, #32
10001632:	bd80      	pop	{r7, pc}

10001634 <arm_compare_fixed_q31>:
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
{
10001634:	b580      	push	{r7, lr}
10001636:	b088      	sub	sp, #32
10001638:	af00      	add	r7, sp, #0
1000163a:	60f8      	str	r0, [r7, #12]
1000163c:	60b9      	str	r1, [r7, #8]
1000163e:	607a      	str	r2, [r7, #4]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
10001640:	2300      	movs	r3, #0
10001642:	617b      	str	r3, [r7, #20]
  uint32_t maxDiff = 0;
10001644:	2300      	movs	r3, #0
10001646:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < numSamples; i++)
10001648:	2300      	movs	r3, #0
1000164a:	61fb      	str	r3, [r7, #28]
1000164c:	e019      	b.n	10001682 <arm_compare_fixed_q31+0x4e>
  {
  	diff = pIn[i] - pOut[i];
1000164e:	69fb      	ldr	r3, [r7, #28]
10001650:	009b      	lsls	r3, r3, #2
10001652:	68fa      	ldr	r2, [r7, #12]
10001654:	18d3      	adds	r3, r2, r3
10001656:	681a      	ldr	r2, [r3, #0]
10001658:	69fb      	ldr	r3, [r7, #28]
1000165a:	009b      	lsls	r3, r3, #2
1000165c:	68b9      	ldr	r1, [r7, #8]
1000165e:	18cb      	adds	r3, r1, r3
10001660:	681b      	ldr	r3, [r3, #0]
10001662:	1ad3      	subs	r3, r2, r3
10001664:	613b      	str	r3, [r7, #16]
  	diffCrnt = (diff > 0) ? diff : -diff;
10001666:	693b      	ldr	r3, [r7, #16]
10001668:	17da      	asrs	r2, r3, #31
1000166a:	189b      	adds	r3, r3, r2
1000166c:	4053      	eors	r3, r2
1000166e:	617b      	str	r3, [r7, #20]

	if(diffCrnt > maxDiff)
10001670:	697a      	ldr	r2, [r7, #20]
10001672:	69bb      	ldr	r3, [r7, #24]
10001674:	429a      	cmp	r2, r3
10001676:	d901      	bls.n	1000167c <arm_compare_fixed_q31+0x48>
	{
		maxDiff = diffCrnt;
10001678:	697b      	ldr	r3, [r7, #20]
1000167a:	61bb      	str	r3, [r7, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
1000167c:	69fb      	ldr	r3, [r7, #28]
1000167e:	3301      	adds	r3, #1
10001680:	61fb      	str	r3, [r7, #28]
10001682:	69fa      	ldr	r2, [r7, #28]
10001684:	687b      	ldr	r3, [r7, #4]
10001686:	429a      	cmp	r2, r3
10001688:	d3e1      	bcc.n	1000164e <arm_compare_fixed_q31+0x1a>
	{
		maxDiff = diffCrnt;
	}
  }

  return(maxDiff);
1000168a:	69bb      	ldr	r3, [r7, #24]
}
1000168c:	1c18      	adds	r0, r3, #0
1000168e:	46bd      	mov	sp, r7
10001690:	b008      	add	sp, #32
10001692:	bd80      	pop	{r7, pc}

10001694 <arm_provide_guard_bits_q31>:
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
10001694:	b580      	push	{r7, lr}
10001696:	b086      	sub	sp, #24
10001698:	af00      	add	r7, sp, #0
1000169a:	60f8      	str	r0, [r7, #12]
1000169c:	60b9      	str	r1, [r7, #8]
1000169e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
100016a0:	2300      	movs	r3, #0
100016a2:	617b      	str	r3, [r7, #20]
100016a4:	e010      	b.n	100016c8 <arm_provide_guard_bits_q31+0x34>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
100016a6:	697b      	ldr	r3, [r7, #20]
100016a8:	009b      	lsls	r3, r3, #2
100016aa:	68fa      	ldr	r2, [r7, #12]
100016ac:	18d3      	adds	r3, r2, r3
100016ae:	697a      	ldr	r2, [r7, #20]
100016b0:	0092      	lsls	r2, r2, #2
100016b2:	68f9      	ldr	r1, [r7, #12]
100016b4:	188a      	adds	r2, r1, r2
100016b6:	6811      	ldr	r1, [r2, #0]
100016b8:	687a      	ldr	r2, [r7, #4]
100016ba:	1c08      	adds	r0, r1, #0
100016bc:	4110      	asrs	r0, r2
100016be:	1c02      	adds	r2, r0, #0
100016c0:	601a      	str	r2, [r3, #0]
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
100016c2:	697b      	ldr	r3, [r7, #20]
100016c4:	3301      	adds	r3, #1
100016c6:	617b      	str	r3, [r7, #20]
100016c8:	697a      	ldr	r2, [r7, #20]
100016ca:	68bb      	ldr	r3, [r7, #8]
100016cc:	429a      	cmp	r2, r3
100016ce:	d3ea      	bcc.n	100016a6 <arm_provide_guard_bits_q31+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
100016d0:	46bd      	mov	sp, r7
100016d2:	b006      	add	sp, #24
100016d4:	bd80      	pop	{r7, pc}
100016d6:	46c0      	nop			; (mov r8, r8)

100016d8 <arm_provide_guard_bits_q7>:
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
								uint32_t blockSize,
                                uint32_t guard_bits)
{
100016d8:	b580      	push	{r7, lr}
100016da:	b086      	sub	sp, #24
100016dc:	af00      	add	r7, sp, #0
100016de:	60f8      	str	r0, [r7, #12]
100016e0:	60b9      	str	r1, [r7, #8]
100016e2:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
100016e4:	2300      	movs	r3, #0
100016e6:	617b      	str	r3, [r7, #20]
100016e8:	e010      	b.n	1000170c <arm_provide_guard_bits_q7+0x34>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
100016ea:	68fa      	ldr	r2, [r7, #12]
100016ec:	697b      	ldr	r3, [r7, #20]
100016ee:	18d3      	adds	r3, r2, r3
100016f0:	68f9      	ldr	r1, [r7, #12]
100016f2:	697a      	ldr	r2, [r7, #20]
100016f4:	188a      	adds	r2, r1, r2
100016f6:	7812      	ldrb	r2, [r2, #0]
100016f8:	b251      	sxtb	r1, r2
100016fa:	687a      	ldr	r2, [r7, #4]
100016fc:	1c08      	adds	r0, r1, #0
100016fe:	4110      	asrs	r0, r2
10001700:	1c02      	adds	r2, r0, #0
10001702:	b2d2      	uxtb	r2, r2
10001704:	701a      	strb	r2, [r3, #0]
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001706:	697b      	ldr	r3, [r7, #20]
10001708:	3301      	adds	r3, #1
1000170a:	617b      	str	r3, [r7, #20]
1000170c:	697a      	ldr	r2, [r7, #20]
1000170e:	68bb      	ldr	r3, [r7, #8]
10001710:	429a      	cmp	r2, r3
10001712:	d3ea      	bcc.n	100016ea <arm_provide_guard_bits_q7+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
10001714:	46bd      	mov	sp, r7
10001716:	b006      	add	sp, #24
10001718:	bd80      	pop	{r7, pc}
1000171a:	46c0      	nop			; (mov r8, r8)

1000171c <arm_calc_guard_bits>:
 * The function Caluclates the number of guard bits  
 * depending on the numtaps 
 */

uint32_t arm_calc_guard_bits (uint32_t num_adds)
{
1000171c:	b580      	push	{r7, lr}
1000171e:	b084      	sub	sp, #16
10001720:	af00      	add	r7, sp, #0
10001722:	6078      	str	r0, [r7, #4]
  uint32_t i = 1, j = 0;
10001724:	2301      	movs	r3, #1
10001726:	60fb      	str	r3, [r7, #12]
10001728:	2300      	movs	r3, #0
1000172a:	60bb      	str	r3, [r7, #8]

  if (num_adds == 1)
1000172c:	687b      	ldr	r3, [r7, #4]
1000172e:	2b01      	cmp	r3, #1
10001730:	d107      	bne.n	10001742 <arm_calc_guard_bits+0x26>
    {
      return (0);
10001732:	2300      	movs	r3, #0
10001734:	e00a      	b.n	1000174c <arm_calc_guard_bits+0x30>
    }

  while (i < num_adds)
    {
      i = i * 2;
10001736:	68fb      	ldr	r3, [r7, #12]
10001738:	005b      	lsls	r3, r3, #1
1000173a:	60fb      	str	r3, [r7, #12]
      j++;
1000173c:	68bb      	ldr	r3, [r7, #8]
1000173e:	3301      	adds	r3, #1
10001740:	60bb      	str	r3, [r7, #8]
  if (num_adds == 1)
    {
      return (0);
    }

  while (i < num_adds)
10001742:	68fa      	ldr	r2, [r7, #12]
10001744:	687b      	ldr	r3, [r7, #4]
10001746:	429a      	cmp	r2, r3
10001748:	d3f5      	bcc.n	10001736 <arm_calc_guard_bits+0x1a>
    {
      i = i * 2;
      j++;
    }

  return (j);
1000174a:	68bb      	ldr	r3, [r7, #8]
}
1000174c:	1c18      	adds	r0, r3, #0
1000174e:	46bd      	mov	sp, r7
10001750:	b004      	add	sp, #16
10001752:	bd80      	pop	{r7, pc}

10001754 <arm_apply_guard_bits>:
 */

void arm_apply_guard_bits (float32_t * pIn, 
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
10001754:	b5b0      	push	{r4, r5, r7, lr}
10001756:	b086      	sub	sp, #24
10001758:	af00      	add	r7, sp, #0
1000175a:	60f8      	str	r0, [r7, #12]
1000175c:	60b9      	str	r1, [r7, #8]
1000175e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001760:	2300      	movs	r3, #0
10001762:	617b      	str	r3, [r7, #20]
10001764:	e01a      	b.n	1000179c <arm_apply_guard_bits+0x48>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
10001766:	697b      	ldr	r3, [r7, #20]
10001768:	009b      	lsls	r3, r3, #2
1000176a:	68fa      	ldr	r2, [r7, #12]
1000176c:	18d4      	adds	r4, r2, r3
1000176e:	697b      	ldr	r3, [r7, #20]
10001770:	009b      	lsls	r3, r3, #2
10001772:	68fa      	ldr	r2, [r7, #12]
10001774:	18d3      	adds	r3, r2, r3
10001776:	681d      	ldr	r5, [r3, #0]
10001778:	687b      	ldr	r3, [r7, #4]
1000177a:	1c18      	adds	r0, r3, #0
1000177c:	f000 f816 	bl	100017ac <arm_calc_2pow>
10001780:	1c03      	adds	r3, r0, #0
10001782:	1c18      	adds	r0, r3, #0
10001784:	f002 f89e 	bl	100038c4 <__aeabi_ui2f>
10001788:	1c03      	adds	r3, r0, #0
1000178a:	1c28      	adds	r0, r5, #0
1000178c:	1c19      	adds	r1, r3, #0
1000178e:	f001 fd6f 	bl	10003270 <__aeabi_fmul>
10001792:	1c03      	adds	r3, r0, #0
10001794:	6023      	str	r3, [r4, #0]
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001796:	697b      	ldr	r3, [r7, #20]
10001798:	3301      	adds	r3, #1
1000179a:	617b      	str	r3, [r7, #20]
1000179c:	697a      	ldr	r2, [r7, #20]
1000179e:	68bb      	ldr	r3, [r7, #8]
100017a0:	429a      	cmp	r2, r3
100017a2:	d3e0      	bcc.n	10001766 <arm_apply_guard_bits+0x12>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
    }
}
100017a4:	46bd      	mov	sp, r7
100017a6:	b006      	add	sp, #24
100017a8:	bdb0      	pop	{r4, r5, r7, pc}
100017aa:	46c0      	nop			; (mov r8, r8)

100017ac <arm_calc_2pow>:
 * @brief  Calculates pow(2, numShifts)
 * @param  uint32_t 	number of shifts
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
{
100017ac:	b580      	push	{r7, lr}
100017ae:	b084      	sub	sp, #16
100017b0:	af00      	add	r7, sp, #0
100017b2:	6078      	str	r0, [r7, #4]

  uint32_t i, val = 1;
100017b4:	2301      	movs	r3, #1
100017b6:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < numShifts; i++)
100017b8:	2300      	movs	r3, #0
100017ba:	60fb      	str	r3, [r7, #12]
100017bc:	e005      	b.n	100017ca <arm_calc_2pow+0x1e>
    {
      val = val * 2;
100017be:	68bb      	ldr	r3, [r7, #8]
100017c0:	005b      	lsls	r3, r3, #1
100017c2:	60bb      	str	r3, [r7, #8]
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
100017c4:	68fb      	ldr	r3, [r7, #12]
100017c6:	3301      	adds	r3, #1
100017c8:	60fb      	str	r3, [r7, #12]
100017ca:	68fa      	ldr	r2, [r7, #12]
100017cc:	687b      	ldr	r3, [r7, #4]
100017ce:	429a      	cmp	r2, r3
100017d0:	d3f5      	bcc.n	100017be <arm_calc_2pow+0x12>
    {
      val = val * 2;
    }	

  return(val);
100017d2:	68bb      	ldr	r3, [r7, #8]
}
100017d4:	1c18      	adds	r0, r3, #0
100017d6:	46bd      	mov	sp, r7
100017d8:	b004      	add	sp, #16
100017da:	bd80      	pop	{r7, pc}
100017dc:	0000      	movs	r0, r0
	...

100017e0 <arm_float_to_q14>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
100017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100017e2:	4647      	mov	r7, r8
100017e4:	b480      	push	{r7}
100017e6:	b086      	sub	sp, #24
100017e8:	af00      	add	r7, sp, #0
100017ea:	60f8      	str	r0, [r7, #12]
100017ec:	60b9      	str	r1, [r7, #8]
100017ee:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100017f0:	2300      	movs	r3, #0
100017f2:	617b      	str	r3, [r7, #20]
100017f4:	e05b      	b.n	100018ae <arm_float_to_q14+0xce>
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
100017f6:	697b      	ldr	r3, [r7, #20]
100017f8:	005b      	lsls	r3, r3, #1
100017fa:	68ba      	ldr	r2, [r7, #8]
100017fc:	18d4      	adds	r4, r2, r3
100017fe:	697b      	ldr	r3, [r7, #20]
10001800:	009b      	lsls	r3, r3, #2
10001802:	68fa      	ldr	r2, [r7, #12]
10001804:	18d3      	adds	r3, r2, r3
10001806:	681b      	ldr	r3, [r3, #0]
10001808:	1c18      	adds	r0, r3, #0
1000180a:	218d      	movs	r1, #141	; 0x8d
1000180c:	05c9      	lsls	r1, r1, #23
1000180e:	f001 fd2f 	bl	10003270 <__aeabi_fmul>
10001812:	1c03      	adds	r3, r0, #0
10001814:	1c18      	adds	r0, r3, #0
10001816:	f002 f835 	bl	10003884 <__aeabi_f2iz>
1000181a:	1c03      	adds	r3, r0, #0
1000181c:	b29b      	uxth	r3, r3
1000181e:	8023      	strh	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001820:	697b      	ldr	r3, [r7, #20]
10001822:	005b      	lsls	r3, r3, #1
10001824:	68ba      	ldr	r2, [r7, #8]
10001826:	18d2      	adds	r2, r2, r3
10001828:	4690      	mov	r8, r2
1000182a:	697b      	ldr	r3, [r7, #20]
1000182c:	005b      	lsls	r3, r3, #1
1000182e:	68ba      	ldr	r2, [r7, #8]
10001830:	18d3      	adds	r3, r2, r3
10001832:	881b      	ldrh	r3, [r3, #0]
10001834:	b21b      	sxth	r3, r3
10001836:	1c18      	adds	r0, r3, #0
10001838:	f003 fe6a 	bl	10005510 <__aeabi_i2d>
1000183c:	1c05      	adds	r5, r0, #0
1000183e:	1c0e      	adds	r6, r1, #0
10001840:	697b      	ldr	r3, [r7, #20]
10001842:	009b      	lsls	r3, r3, #2
10001844:	68fa      	ldr	r2, [r7, #12]
10001846:	18d3      	adds	r3, r2, r3
10001848:	681b      	ldr	r3, [r3, #0]
1000184a:	1c18      	adds	r0, r3, #0
1000184c:	2100      	movs	r1, #0
1000184e:	f001 f933 	bl	10002ab8 <__aeabi_fcmpgt>
10001852:	1c03      	adds	r3, r0, #0
10001854:	2b00      	cmp	r3, #0
10001856:	d002      	beq.n	1000185e <arm_float_to_q14+0x7e>
10001858:	4c1a      	ldr	r4, [pc, #104]	; (100018c4 <arm_float_to_q14+0xe4>)
1000185a:	4b19      	ldr	r3, [pc, #100]	; (100018c0 <arm_float_to_q14+0xe0>)
1000185c:	e001      	b.n	10001862 <arm_float_to_q14+0x82>
1000185e:	4b1a      	ldr	r3, [pc, #104]	; (100018c8 <arm_float_to_q14+0xe8>)
10001860:	4c1a      	ldr	r4, [pc, #104]	; (100018cc <arm_float_to_q14+0xec>)
10001862:	1c28      	adds	r0, r5, #0
10001864:	1c31      	adds	r1, r6, #0
10001866:	1c1a      	adds	r2, r3, #0
10001868:	1c23      	adds	r3, r4, #0
1000186a:	f002 f87f 	bl	1000396c <__aeabi_dadd>
1000186e:	1c03      	adds	r3, r0, #0
10001870:	1c0c      	adds	r4, r1, #0
10001872:	1c18      	adds	r0, r3, #0
10001874:	1c21      	adds	r1, r4, #0
10001876:	f003 fe17 	bl	100054a8 <__aeabi_d2iz>
1000187a:	1c03      	adds	r3, r0, #0
1000187c:	b29b      	uxth	r3, r3
1000187e:	4642      	mov	r2, r8
10001880:	8013      	strh	r3, [r2, #0]

      if (pIn[i] == (float) 2.0)
10001882:	697b      	ldr	r3, [r7, #20]
10001884:	009b      	lsls	r3, r3, #2
10001886:	68fa      	ldr	r2, [r7, #12]
10001888:	18d3      	adds	r3, r2, r3
1000188a:	681b      	ldr	r3, [r3, #0]
1000188c:	1c18      	adds	r0, r3, #0
1000188e:	2180      	movs	r1, #128	; 0x80
10001890:	05c9      	lsls	r1, r1, #23
10001892:	f001 f8f7 	bl	10002a84 <__aeabi_fcmpeq>
10001896:	1c03      	adds	r3, r0, #0
10001898:	2b00      	cmp	r3, #0
1000189a:	d005      	beq.n	100018a8 <arm_float_to_q14+0xc8>
        {
          pOut[i] = 0x7FFF;
1000189c:	697b      	ldr	r3, [r7, #20]
1000189e:	005b      	lsls	r3, r3, #1
100018a0:	68ba      	ldr	r2, [r7, #8]
100018a2:	18d3      	adds	r3, r2, r3
100018a4:	4a0a      	ldr	r2, [pc, #40]	; (100018d0 <arm_float_to_q14+0xf0>)
100018a6:	801a      	strh	r2, [r3, #0]
void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100018a8:	697b      	ldr	r3, [r7, #20]
100018aa:	3301      	adds	r3, #1
100018ac:	617b      	str	r3, [r7, #20]
100018ae:	697a      	ldr	r2, [r7, #20]
100018b0:	687b      	ldr	r3, [r7, #4]
100018b2:	429a      	cmp	r2, r3
100018b4:	d39f      	bcc.n	100017f6 <arm_float_to_q14+0x16>
          pOut[i] = 0x7FFF;
        }

    }

}
100018b6:	46bd      	mov	sp, r7
100018b8:	b006      	add	sp, #24
100018ba:	bc04      	pop	{r2}
100018bc:	4690      	mov	r8, r2
100018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100018c0:	00000000 	.word	0x00000000
100018c4:	3fe00000 	.word	0x3fe00000
100018c8:	00000000 	.word	0x00000000
100018cc:	bfe00000 	.word	0xbfe00000
100018d0:	00007fff 	.word	0x00007fff
100018d4:	46c0      	nop			; (mov r8, r8)
100018d6:	46c0      	nop			; (mov r8, r8)

100018d8 <arm_float_to_q30>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
100018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100018da:	4647      	mov	r7, r8
100018dc:	b480      	push	{r7}
100018de:	b086      	sub	sp, #24
100018e0:	af00      	add	r7, sp, #0
100018e2:	60f8      	str	r0, [r7, #12]
100018e4:	60b9      	str	r1, [r7, #8]
100018e6:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100018e8:	2300      	movs	r3, #0
100018ea:	617b      	str	r3, [r7, #20]
100018ec:	e058      	b.n	100019a0 <arm_float_to_q30+0xc8>
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
100018ee:	697b      	ldr	r3, [r7, #20]
100018f0:	009b      	lsls	r3, r3, #2
100018f2:	68ba      	ldr	r2, [r7, #8]
100018f4:	18d4      	adds	r4, r2, r3
100018f6:	697b      	ldr	r3, [r7, #20]
100018f8:	009b      	lsls	r3, r3, #2
100018fa:	68fa      	ldr	r2, [r7, #12]
100018fc:	18d3      	adds	r3, r2, r3
100018fe:	681b      	ldr	r3, [r3, #0]
10001900:	1c18      	adds	r0, r3, #0
10001902:	219d      	movs	r1, #157	; 0x9d
10001904:	05c9      	lsls	r1, r1, #23
10001906:	f001 fcb3 	bl	10003270 <__aeabi_fmul>
1000190a:	1c03      	adds	r3, r0, #0
1000190c:	1c18      	adds	r0, r3, #0
1000190e:	f001 ffb9 	bl	10003884 <__aeabi_f2iz>
10001912:	1c03      	adds	r3, r0, #0
10001914:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001916:	697b      	ldr	r3, [r7, #20]
10001918:	009b      	lsls	r3, r3, #2
1000191a:	68ba      	ldr	r2, [r7, #8]
1000191c:	18d2      	adds	r2, r2, r3
1000191e:	4690      	mov	r8, r2
10001920:	697b      	ldr	r3, [r7, #20]
10001922:	009b      	lsls	r3, r3, #2
10001924:	68ba      	ldr	r2, [r7, #8]
10001926:	18d3      	adds	r3, r2, r3
10001928:	681b      	ldr	r3, [r3, #0]
1000192a:	1c18      	adds	r0, r3, #0
1000192c:	f003 fdf0 	bl	10005510 <__aeabi_i2d>
10001930:	1c05      	adds	r5, r0, #0
10001932:	1c0e      	adds	r6, r1, #0
10001934:	697b      	ldr	r3, [r7, #20]
10001936:	009b      	lsls	r3, r3, #2
10001938:	68fa      	ldr	r2, [r7, #12]
1000193a:	18d3      	adds	r3, r2, r3
1000193c:	681b      	ldr	r3, [r3, #0]
1000193e:	1c18      	adds	r0, r3, #0
10001940:	2100      	movs	r1, #0
10001942:	f001 f8b9 	bl	10002ab8 <__aeabi_fcmpgt>
10001946:	1c03      	adds	r3, r0, #0
10001948:	2b00      	cmp	r3, #0
1000194a:	d002      	beq.n	10001952 <arm_float_to_q30+0x7a>
1000194c:	4c1b      	ldr	r4, [pc, #108]	; (100019bc <arm_float_to_q30+0xe4>)
1000194e:	4b1a      	ldr	r3, [pc, #104]	; (100019b8 <arm_float_to_q30+0xe0>)
10001950:	e001      	b.n	10001956 <arm_float_to_q30+0x7e>
10001952:	4b1b      	ldr	r3, [pc, #108]	; (100019c0 <arm_float_to_q30+0xe8>)
10001954:	4c1b      	ldr	r4, [pc, #108]	; (100019c4 <arm_float_to_q30+0xec>)
10001956:	1c28      	adds	r0, r5, #0
10001958:	1c31      	adds	r1, r6, #0
1000195a:	1c1a      	adds	r2, r3, #0
1000195c:	1c23      	adds	r3, r4, #0
1000195e:	f002 f805 	bl	1000396c <__aeabi_dadd>
10001962:	1c03      	adds	r3, r0, #0
10001964:	1c0c      	adds	r4, r1, #0
10001966:	1c18      	adds	r0, r3, #0
10001968:	1c21      	adds	r1, r4, #0
1000196a:	f003 fd9d 	bl	100054a8 <__aeabi_d2iz>
1000196e:	1c03      	adds	r3, r0, #0
10001970:	4642      	mov	r2, r8
10001972:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 2.0)
10001974:	697b      	ldr	r3, [r7, #20]
10001976:	009b      	lsls	r3, r3, #2
10001978:	68fa      	ldr	r2, [r7, #12]
1000197a:	18d3      	adds	r3, r2, r3
1000197c:	681b      	ldr	r3, [r3, #0]
1000197e:	1c18      	adds	r0, r3, #0
10001980:	2180      	movs	r1, #128	; 0x80
10001982:	05c9      	lsls	r1, r1, #23
10001984:	f001 f87e 	bl	10002a84 <__aeabi_fcmpeq>
10001988:	1c03      	adds	r3, r0, #0
1000198a:	2b00      	cmp	r3, #0
1000198c:	d005      	beq.n	1000199a <arm_float_to_q30+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
1000198e:	697b      	ldr	r3, [r7, #20]
10001990:	009b      	lsls	r3, r3, #2
10001992:	68ba      	ldr	r2, [r7, #8]
10001994:	18d3      	adds	r3, r2, r3
10001996:	4a0c      	ldr	r2, [pc, #48]	; (100019c8 <arm_float_to_q30+0xf0>)
10001998:	601a      	str	r2, [r3, #0]
void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
1000199a:	697b      	ldr	r3, [r7, #20]
1000199c:	3301      	adds	r3, #1
1000199e:	617b      	str	r3, [r7, #20]
100019a0:	697a      	ldr	r2, [r7, #20]
100019a2:	687b      	ldr	r3, [r7, #4]
100019a4:	429a      	cmp	r2, r3
100019a6:	d3a2      	bcc.n	100018ee <arm_float_to_q30+0x16>
      if (pIn[i] == (float) 2.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
100019a8:	46bd      	mov	sp, r7
100019aa:	b006      	add	sp, #24
100019ac:	bc04      	pop	{r2}
100019ae:	4690      	mov	r8, r2
100019b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100019b2:	46c0      	nop			; (mov r8, r8)
100019b4:	46c0      	nop			; (mov r8, r8)
100019b6:	46c0      	nop			; (mov r8, r8)
100019b8:	00000000 	.word	0x00000000
100019bc:	3fe00000 	.word	0x3fe00000
100019c0:	00000000 	.word	0x00000000
100019c4:	bfe00000 	.word	0xbfe00000
100019c8:	7fffffff 	.word	0x7fffffff
100019cc:	46c0      	nop			; (mov r8, r8)
100019ce:	46c0      	nop			; (mov r8, r8)

100019d0 <arm_float_to_q29>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
100019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100019d2:	4647      	mov	r7, r8
100019d4:	b480      	push	{r7}
100019d6:	b086      	sub	sp, #24
100019d8:	af00      	add	r7, sp, #0
100019da:	60f8      	str	r0, [r7, #12]
100019dc:	60b9      	str	r1, [r7, #8]
100019de:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100019e0:	2300      	movs	r3, #0
100019e2:	617b      	str	r3, [r7, #20]
100019e4:	e058      	b.n	10001a98 <arm_float_to_q29+0xc8>
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
100019e6:	697b      	ldr	r3, [r7, #20]
100019e8:	009b      	lsls	r3, r3, #2
100019ea:	68ba      	ldr	r2, [r7, #8]
100019ec:	18d4      	adds	r4, r2, r3
100019ee:	697b      	ldr	r3, [r7, #20]
100019f0:	009b      	lsls	r3, r3, #2
100019f2:	68fa      	ldr	r2, [r7, #12]
100019f4:	18d3      	adds	r3, r2, r3
100019f6:	681b      	ldr	r3, [r3, #0]
100019f8:	1c18      	adds	r0, r3, #0
100019fa:	219c      	movs	r1, #156	; 0x9c
100019fc:	05c9      	lsls	r1, r1, #23
100019fe:	f001 fc37 	bl	10003270 <__aeabi_fmul>
10001a02:	1c03      	adds	r3, r0, #0
10001a04:	1c18      	adds	r0, r3, #0
10001a06:	f001 ff3d 	bl	10003884 <__aeabi_f2iz>
10001a0a:	1c03      	adds	r3, r0, #0
10001a0c:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001a0e:	697b      	ldr	r3, [r7, #20]
10001a10:	009b      	lsls	r3, r3, #2
10001a12:	68ba      	ldr	r2, [r7, #8]
10001a14:	18d2      	adds	r2, r2, r3
10001a16:	4690      	mov	r8, r2
10001a18:	697b      	ldr	r3, [r7, #20]
10001a1a:	009b      	lsls	r3, r3, #2
10001a1c:	68ba      	ldr	r2, [r7, #8]
10001a1e:	18d3      	adds	r3, r2, r3
10001a20:	681b      	ldr	r3, [r3, #0]
10001a22:	1c18      	adds	r0, r3, #0
10001a24:	f003 fd74 	bl	10005510 <__aeabi_i2d>
10001a28:	1c05      	adds	r5, r0, #0
10001a2a:	1c0e      	adds	r6, r1, #0
10001a2c:	697b      	ldr	r3, [r7, #20]
10001a2e:	009b      	lsls	r3, r3, #2
10001a30:	68fa      	ldr	r2, [r7, #12]
10001a32:	18d3      	adds	r3, r2, r3
10001a34:	681b      	ldr	r3, [r3, #0]
10001a36:	1c18      	adds	r0, r3, #0
10001a38:	2100      	movs	r1, #0
10001a3a:	f001 f83d 	bl	10002ab8 <__aeabi_fcmpgt>
10001a3e:	1c03      	adds	r3, r0, #0
10001a40:	2b00      	cmp	r3, #0
10001a42:	d002      	beq.n	10001a4a <arm_float_to_q29+0x7a>
10001a44:	4c1b      	ldr	r4, [pc, #108]	; (10001ab4 <arm_float_to_q29+0xe4>)
10001a46:	4b1a      	ldr	r3, [pc, #104]	; (10001ab0 <arm_float_to_q29+0xe0>)
10001a48:	e001      	b.n	10001a4e <arm_float_to_q29+0x7e>
10001a4a:	4b1b      	ldr	r3, [pc, #108]	; (10001ab8 <arm_float_to_q29+0xe8>)
10001a4c:	4c1b      	ldr	r4, [pc, #108]	; (10001abc <arm_float_to_q29+0xec>)
10001a4e:	1c28      	adds	r0, r5, #0
10001a50:	1c31      	adds	r1, r6, #0
10001a52:	1c1a      	adds	r2, r3, #0
10001a54:	1c23      	adds	r3, r4, #0
10001a56:	f001 ff89 	bl	1000396c <__aeabi_dadd>
10001a5a:	1c03      	adds	r3, r0, #0
10001a5c:	1c0c      	adds	r4, r1, #0
10001a5e:	1c18      	adds	r0, r3, #0
10001a60:	1c21      	adds	r1, r4, #0
10001a62:	f003 fd21 	bl	100054a8 <__aeabi_d2iz>
10001a66:	1c03      	adds	r3, r0, #0
10001a68:	4642      	mov	r2, r8
10001a6a:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 4.0)
10001a6c:	697b      	ldr	r3, [r7, #20]
10001a6e:	009b      	lsls	r3, r3, #2
10001a70:	68fa      	ldr	r2, [r7, #12]
10001a72:	18d3      	adds	r3, r2, r3
10001a74:	681b      	ldr	r3, [r3, #0]
10001a76:	1c18      	adds	r0, r3, #0
10001a78:	2181      	movs	r1, #129	; 0x81
10001a7a:	05c9      	lsls	r1, r1, #23
10001a7c:	f001 f802 	bl	10002a84 <__aeabi_fcmpeq>
10001a80:	1c03      	adds	r3, r0, #0
10001a82:	2b00      	cmp	r3, #0
10001a84:	d005      	beq.n	10001a92 <arm_float_to_q29+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001a86:	697b      	ldr	r3, [r7, #20]
10001a88:	009b      	lsls	r3, r3, #2
10001a8a:	68ba      	ldr	r2, [r7, #8]
10001a8c:	18d3      	adds	r3, r2, r3
10001a8e:	4a0c      	ldr	r2, [pc, #48]	; (10001ac0 <arm_float_to_q29+0xf0>)
10001a90:	601a      	str	r2, [r3, #0]
void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001a92:	697b      	ldr	r3, [r7, #20]
10001a94:	3301      	adds	r3, #1
10001a96:	617b      	str	r3, [r7, #20]
10001a98:	697a      	ldr	r2, [r7, #20]
10001a9a:	687b      	ldr	r3, [r7, #4]
10001a9c:	429a      	cmp	r2, r3
10001a9e:	d3a2      	bcc.n	100019e6 <arm_float_to_q29+0x16>
      if (pIn[i] == (float) 4.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001aa0:	46bd      	mov	sp, r7
10001aa2:	b006      	add	sp, #24
10001aa4:	bc04      	pop	{r2}
10001aa6:	4690      	mov	r8, r2
10001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001aaa:	46c0      	nop			; (mov r8, r8)
10001aac:	46c0      	nop			; (mov r8, r8)
10001aae:	46c0      	nop			; (mov r8, r8)
10001ab0:	00000000 	.word	0x00000000
10001ab4:	3fe00000 	.word	0x3fe00000
10001ab8:	00000000 	.word	0x00000000
10001abc:	bfe00000 	.word	0xbfe00000
10001ac0:	7fffffff 	.word	0x7fffffff
10001ac4:	46c0      	nop			; (mov r8, r8)
10001ac6:	46c0      	nop			; (mov r8, r8)

10001ac8 <arm_float_to_q28>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
10001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001aca:	4647      	mov	r7, r8
10001acc:	b480      	push	{r7}
10001ace:	b086      	sub	sp, #24
10001ad0:	af00      	add	r7, sp, #0
10001ad2:	60f8      	str	r0, [r7, #12]
10001ad4:	60b9      	str	r1, [r7, #8]
10001ad6:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001ad8:	2300      	movs	r3, #0
10001ada:	617b      	str	r3, [r7, #20]
10001adc:	e058      	b.n	10001b90 <arm_float_to_q28+0xc8>
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
10001ade:	697b      	ldr	r3, [r7, #20]
10001ae0:	009b      	lsls	r3, r3, #2
10001ae2:	68ba      	ldr	r2, [r7, #8]
10001ae4:	18d4      	adds	r4, r2, r3
10001ae6:	697b      	ldr	r3, [r7, #20]
10001ae8:	009b      	lsls	r3, r3, #2
10001aea:	68fa      	ldr	r2, [r7, #12]
10001aec:	18d3      	adds	r3, r2, r3
10001aee:	681b      	ldr	r3, [r3, #0]
10001af0:	1c18      	adds	r0, r3, #0
10001af2:	219b      	movs	r1, #155	; 0x9b
10001af4:	05c9      	lsls	r1, r1, #23
10001af6:	f001 fbbb 	bl	10003270 <__aeabi_fmul>
10001afa:	1c03      	adds	r3, r0, #0
10001afc:	1c18      	adds	r0, r3, #0
10001afe:	f001 fec1 	bl	10003884 <__aeabi_f2iz>
10001b02:	1c03      	adds	r3, r0, #0
10001b04:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001b06:	697b      	ldr	r3, [r7, #20]
10001b08:	009b      	lsls	r3, r3, #2
10001b0a:	68ba      	ldr	r2, [r7, #8]
10001b0c:	18d2      	adds	r2, r2, r3
10001b0e:	4690      	mov	r8, r2
10001b10:	697b      	ldr	r3, [r7, #20]
10001b12:	009b      	lsls	r3, r3, #2
10001b14:	68ba      	ldr	r2, [r7, #8]
10001b16:	18d3      	adds	r3, r2, r3
10001b18:	681b      	ldr	r3, [r3, #0]
10001b1a:	1c18      	adds	r0, r3, #0
10001b1c:	f003 fcf8 	bl	10005510 <__aeabi_i2d>
10001b20:	1c05      	adds	r5, r0, #0
10001b22:	1c0e      	adds	r6, r1, #0
10001b24:	697b      	ldr	r3, [r7, #20]
10001b26:	009b      	lsls	r3, r3, #2
10001b28:	68fa      	ldr	r2, [r7, #12]
10001b2a:	18d3      	adds	r3, r2, r3
10001b2c:	681b      	ldr	r3, [r3, #0]
10001b2e:	1c18      	adds	r0, r3, #0
10001b30:	2100      	movs	r1, #0
10001b32:	f000 ffc1 	bl	10002ab8 <__aeabi_fcmpgt>
10001b36:	1c03      	adds	r3, r0, #0
10001b38:	2b00      	cmp	r3, #0
10001b3a:	d002      	beq.n	10001b42 <arm_float_to_q28+0x7a>
10001b3c:	4c1b      	ldr	r4, [pc, #108]	; (10001bac <arm_float_to_q28+0xe4>)
10001b3e:	4b1a      	ldr	r3, [pc, #104]	; (10001ba8 <arm_float_to_q28+0xe0>)
10001b40:	e001      	b.n	10001b46 <arm_float_to_q28+0x7e>
10001b42:	4b1b      	ldr	r3, [pc, #108]	; (10001bb0 <arm_float_to_q28+0xe8>)
10001b44:	4c1b      	ldr	r4, [pc, #108]	; (10001bb4 <arm_float_to_q28+0xec>)
10001b46:	1c28      	adds	r0, r5, #0
10001b48:	1c31      	adds	r1, r6, #0
10001b4a:	1c1a      	adds	r2, r3, #0
10001b4c:	1c23      	adds	r3, r4, #0
10001b4e:	f001 ff0d 	bl	1000396c <__aeabi_dadd>
10001b52:	1c03      	adds	r3, r0, #0
10001b54:	1c0c      	adds	r4, r1, #0
10001b56:	1c18      	adds	r0, r3, #0
10001b58:	1c21      	adds	r1, r4, #0
10001b5a:	f003 fca5 	bl	100054a8 <__aeabi_d2iz>
10001b5e:	1c03      	adds	r3, r0, #0
10001b60:	4642      	mov	r2, r8
10001b62:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 8.0)
10001b64:	697b      	ldr	r3, [r7, #20]
10001b66:	009b      	lsls	r3, r3, #2
10001b68:	68fa      	ldr	r2, [r7, #12]
10001b6a:	18d3      	adds	r3, r2, r3
10001b6c:	681b      	ldr	r3, [r3, #0]
10001b6e:	1c18      	adds	r0, r3, #0
10001b70:	2182      	movs	r1, #130	; 0x82
10001b72:	05c9      	lsls	r1, r1, #23
10001b74:	f000 ff86 	bl	10002a84 <__aeabi_fcmpeq>
10001b78:	1c03      	adds	r3, r0, #0
10001b7a:	2b00      	cmp	r3, #0
10001b7c:	d005      	beq.n	10001b8a <arm_float_to_q28+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001b7e:	697b      	ldr	r3, [r7, #20]
10001b80:	009b      	lsls	r3, r3, #2
10001b82:	68ba      	ldr	r2, [r7, #8]
10001b84:	18d3      	adds	r3, r2, r3
10001b86:	4a0c      	ldr	r2, [pc, #48]	; (10001bb8 <arm_float_to_q28+0xf0>)
10001b88:	601a      	str	r2, [r3, #0]
void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001b8a:	697b      	ldr	r3, [r7, #20]
10001b8c:	3301      	adds	r3, #1
10001b8e:	617b      	str	r3, [r7, #20]
10001b90:	697a      	ldr	r2, [r7, #20]
10001b92:	687b      	ldr	r3, [r7, #4]
10001b94:	429a      	cmp	r2, r3
10001b96:	d3a2      	bcc.n	10001ade <arm_float_to_q28+0x16>
      if (pIn[i] == (float) 8.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001b98:	46bd      	mov	sp, r7
10001b9a:	b006      	add	sp, #24
10001b9c:	bc04      	pop	{r2}
10001b9e:	4690      	mov	r8, r2
10001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ba2:	46c0      	nop			; (mov r8, r8)
10001ba4:	46c0      	nop			; (mov r8, r8)
10001ba6:	46c0      	nop			; (mov r8, r8)
10001ba8:	00000000 	.word	0x00000000
10001bac:	3fe00000 	.word	0x3fe00000
10001bb0:	00000000 	.word	0x00000000
10001bb4:	bfe00000 	.word	0xbfe00000
10001bb8:	7fffffff 	.word	0x7fffffff
10001bbc:	46c0      	nop			; (mov r8, r8)
10001bbe:	46c0      	nop			; (mov r8, r8)

10001bc0 <arm_clip_f32>:
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
10001bc0:	b580      	push	{r7, lr}
10001bc2:	b084      	sub	sp, #16
10001bc4:	af00      	add	r7, sp, #0
10001bc6:	6078      	str	r0, [r7, #4]
10001bc8:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001bca:	2300      	movs	r3, #0
10001bcc:	60fb      	str	r3, [r7, #12]
10001bce:	e029      	b.n	10001c24 <arm_clip_f32+0x64>
    {
      if(pIn[i] > 1.0f)
10001bd0:	68fb      	ldr	r3, [r7, #12]
10001bd2:	009b      	lsls	r3, r3, #2
10001bd4:	687a      	ldr	r2, [r7, #4]
10001bd6:	18d3      	adds	r3, r2, r3
10001bd8:	681b      	ldr	r3, [r3, #0]
10001bda:	1c18      	adds	r0, r3, #0
10001bdc:	21fe      	movs	r1, #254	; 0xfe
10001bde:	0589      	lsls	r1, r1, #22
10001be0:	f000 ff6a 	bl	10002ab8 <__aeabi_fcmpgt>
10001be4:	1c03      	adds	r3, r0, #0
10001be6:	2b00      	cmp	r3, #0
10001be8:	d007      	beq.n	10001bfa <arm_clip_f32+0x3a>
	  {
	    pIn[i] = 1.0;
10001bea:	68fb      	ldr	r3, [r7, #12]
10001bec:	009b      	lsls	r3, r3, #2
10001bee:	687a      	ldr	r2, [r7, #4]
10001bf0:	18d3      	adds	r3, r2, r3
10001bf2:	22fe      	movs	r2, #254	; 0xfe
10001bf4:	0592      	lsls	r2, r2, #22
10001bf6:	601a      	str	r2, [r3, #0]
10001bf8:	e011      	b.n	10001c1e <arm_clip_f32+0x5e>
	  }
	  else if( pIn[i] < -1.0f)
10001bfa:	68fb      	ldr	r3, [r7, #12]
10001bfc:	009b      	lsls	r3, r3, #2
10001bfe:	687a      	ldr	r2, [r7, #4]
10001c00:	18d3      	adds	r3, r2, r3
10001c02:	681b      	ldr	r3, [r3, #0]
10001c04:	1c18      	adds	r0, r3, #0
10001c06:	490b      	ldr	r1, [pc, #44]	; (10001c34 <arm_clip_f32+0x74>)
10001c08:	f000 ff42 	bl	10002a90 <__aeabi_fcmplt>
10001c0c:	1c03      	adds	r3, r0, #0
10001c0e:	2b00      	cmp	r3, #0
10001c10:	d005      	beq.n	10001c1e <arm_clip_f32+0x5e>
	  {
	    pIn[i] = -1.0;
10001c12:	68fb      	ldr	r3, [r7, #12]
10001c14:	009b      	lsls	r3, r3, #2
10001c16:	687a      	ldr	r2, [r7, #4]
10001c18:	18d3      	adds	r3, r2, r3
10001c1a:	4a06      	ldr	r2, [pc, #24]	; (10001c34 <arm_clip_f32+0x74>)
10001c1c:	601a      	str	r2, [r3, #0]

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001c1e:	68fb      	ldr	r3, [r7, #12]
10001c20:	3301      	adds	r3, #1
10001c22:	60fb      	str	r3, [r7, #12]
10001c24:	68fa      	ldr	r2, [r7, #12]
10001c26:	683b      	ldr	r3, [r7, #0]
10001c28:	429a      	cmp	r2, r3
10001c2a:	d3d1      	bcc.n	10001bd0 <arm_clip_f32+0x10>
	  {
	    pIn[i] = -1.0;
	  }
	       
    }
}
10001c2c:	46bd      	mov	sp, r7
10001c2e:	b004      	add	sp, #16
10001c30:	bd80      	pop	{r7, pc}
10001c32:	46c0      	nop			; (mov r8, r8)
10001c34:	bf800000 	.word	0xbf800000

10001c38 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
10001c38:	0412      	lsls	r2, r2, #16
10001c3a:	4311      	orrs	r1, r2

  /* Assign Number of Columns */
  S->numCols = nColumns;

  /* Assign Data pointer */
  S->pData = pData;
10001c3c:	c00a      	stmia	r0!, {r1, r3}
}
10001c3e:	4770      	bx	lr

10001c40 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
10001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c42:	465f      	mov	r7, fp
10001c44:	4656      	mov	r6, sl
10001c46:	464d      	mov	r5, r9
10001c48:	4644      	mov	r4, r8
10001c4a:	b4f0      	push	{r4, r5, r6, r7}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
10001c4c:	684f      	ldr	r7, [r1, #4]
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
10001c4e:	b093      	sub	sp, #76	; 0x4c
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
10001c50:	970d      	str	r7, [sp, #52]	; 0x34

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
10001c52:	6842      	ldr	r2, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pInT3, *pInT4;                      /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
10001c54:	8803      	ldrh	r3, [r0, #0]
  arm_status status;                             /* status of matrix inverse */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if((pSrc->numRows != pSrc->numCols) || (pDst->numRows != pDst->numCols)
10001c56:	8840      	ldrh	r0, [r0, #2]

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
10001c58:	4694      	mov	ip, r2
  arm_status status;                             /* status of matrix inverse */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if((pSrc->numRows != pSrc->numCols) || (pDst->numRows != pDst->numCols)
10001c5a:	4683      	mov	fp, r0
10001c5c:	4298      	cmp	r0, r3
10001c5e:	d000      	beq.n	10001c62 <arm_mat_inverse_f32+0x22>
10001c60:	e212      	b.n	10002088 <arm_mat_inverse_f32+0x448>
10001c62:	880c      	ldrh	r4, [r1, #0]
10001c64:	8849      	ldrh	r1, [r1, #2]
10001c66:	42a1      	cmp	r1, r4
10001c68:	d000      	beq.n	10001c6c <arm_mat_inverse_f32+0x2c>
10001c6a:	e20d      	b.n	10002088 <arm_mat_inverse_f32+0x448>
     || (pSrc->numRows != pDst->numRows))
10001c6c:	4288      	cmp	r0, r1
10001c6e:	d000      	beq.n	10001c72 <arm_mat_inverse_f32+0x32>
10001c70:	e20a      	b.n	10002088 <arm_mat_inverse_f32+0x448>

    /* Loop over the number of rows */
    rowCnt = numRows;

    /* Making the destination matrix as identity matrix */
    while(rowCnt > 0u)
10001c72:	2800      	cmp	r0, #0
10001c74:	d07c      	beq.n	10001d70 <arm_mat_inverse_f32+0x130>
        *pInT2++ = 0.0f;
        j--;
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;
10001c76:	23fe      	movs	r3, #254	; 0xfe
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10001c7a:	1c06      	adds	r6, r0, #0
        *pInT2++ = 0.0f;
        j--;
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;
10001c7c:	0598      	lsls	r0, r3, #22
10001c7e:	4680      	mov	r8, r0
10001c80:	4691      	mov	r9, r2
10001c82:	3e01      	subs	r6, #1
10001c84:	464c      	mov	r4, r9
10001c86:	4641      	mov	r1, r8
10001c88:	00b7      	lsls	r7, r6, #2
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001c8a:	2501      	movs	r5, #1

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
      {
        *pInT2++ = 0.0f;
10001c8c:	2300      	movs	r3, #0
        *pInT2++ = 0.0f;
        j--;
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;
10001c8e:	c402      	stmia	r4!, {r1}

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
10001c90:	2e00      	cmp	r6, #0
10001c92:	d038      	beq.n	10001d06 <arm_mat_inverse_f32+0xc6>
      {
        *pInT2++ = 0.0f;
10001c94:	4648      	mov	r0, r9
10001c96:	1e71      	subs	r1, r6, #1
10001c98:	2201      	movs	r2, #1
10001c9a:	6043      	str	r3, [r0, #4]
10001c9c:	400a      	ands	r2, r1
10001c9e:	1d20      	adds	r0, r4, #4
      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
10001ca0:	2900      	cmp	r1, #0
10001ca2:	d00d      	beq.n	10001cc0 <arm_mat_inverse_f32+0x80>
10001ca4:	2a00      	cmp	r2, #0
10001ca6:	d004      	beq.n	10001cb2 <arm_mat_inverse_f32+0x72>
      {
        *pInT2++ = 0.0f;
        j--;
10001ca8:	1eb1      	subs	r1, r6, #2

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
      {
        *pInT2++ = 0.0f;
10001caa:	6063      	str	r3, [r4, #4]
10001cac:	3004      	adds	r0, #4
      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
10001cae:	2900      	cmp	r1, #0
10001cb0:	d006      	beq.n	10001cc0 <arm_mat_inverse_f32+0x80>
      {
        *pInT2++ = 0.0f;
10001cb2:	1c02      	adds	r2, r0, #0
10001cb4:	c208      	stmia	r2!, {r3}
        j--;
10001cb6:	3902      	subs	r1, #2

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
      {
        *pInT2++ = 0.0f;
10001cb8:	6043      	str	r3, [r0, #4]
10001cba:	1d10      	adds	r0, r2, #4
      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
10001cbc:	2900      	cmp	r1, #0
10001cbe:	d1f8      	bne.n	10001cb2 <arm_mat_inverse_f32+0x72>
10001cc0:	19e0      	adds	r0, r4, r7
10001cc2:	4681      	mov	r9, r0
    /* Making the destination matrix as identity matrix */
    while(rowCnt > 0u)
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while(j > 0u)
10001cc4:	2d00      	cmp	r5, #0
10001cc6:	d016      	beq.n	10001cf6 <arm_mat_inverse_f32+0xb6>
10001cc8:	2101      	movs	r1, #1
10001cca:	1e68      	subs	r0, r5, #1
10001ccc:	1c0c      	adds	r4, r1, #0
      {
        *pInT2++ = 0.0f;
10001cce:	464a      	mov	r2, r9
10001cd0:	4004      	ands	r4, r0
10001cd2:	c208      	stmia	r2!, {r3}
    /* Making the destination matrix as identity matrix */
    while(rowCnt > 0u)
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while(j > 0u)
10001cd4:	2800      	cmp	r0, #0
10001cd6:	d00c      	beq.n	10001cf2 <arm_mat_inverse_f32+0xb2>
10001cd8:	2c00      	cmp	r4, #0
10001cda:	d003      	beq.n	10001ce4 <arm_mat_inverse_f32+0xa4>
      {
        *pInT2++ = 0.0f;
        j--;
10001cdc:	1ea8      	subs	r0, r5, #2
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while(j > 0u)
      {
        *pInT2++ = 0.0f;
10001cde:	c208      	stmia	r2!, {r3}
    /* Making the destination matrix as identity matrix */
    while(rowCnt > 0u)
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while(j > 0u)
10001ce0:	2800      	cmp	r0, #0
10001ce2:	d006      	beq.n	10001cf2 <arm_mat_inverse_f32+0xb2>
      {
        *pInT2++ = 0.0f;
10001ce4:	1c11      	adds	r1, r2, #0
10001ce6:	c108      	stmia	r1!, {r3}
        j--;
10001ce8:	3802      	subs	r0, #2
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while(j > 0u)
      {
        *pInT2++ = 0.0f;
10001cea:	6053      	str	r3, [r2, #4]
10001cec:	1d0a      	adds	r2, r1, #4
    /* Making the destination matrix as identity matrix */
    while(rowCnt > 0u)
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while(j > 0u)
10001cee:	2800      	cmp	r0, #0
10001cf0:	d1f8      	bne.n	10001ce4 <arm_mat_inverse_f32+0xa4>
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001cf2:	00ac      	lsls	r4, r5, #2
10001cf4:	44a1      	add	r9, r4
        *pInT2++ = 0.0f;
        j--;
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pInT2++ = 1.0f;
10001cf6:	464c      	mov	r4, r9
10001cf8:	4641      	mov	r1, r8
10001cfa:	3e01      	subs	r6, #1
10001cfc:	3501      	adds	r5, #1
10001cfe:	3f04      	subs	r7, #4
10001d00:	c402      	stmia	r4!, {r1}

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1u;
      while(j > 0u)
10001d02:	2e00      	cmp	r6, #0
10001d04:	d1c6      	bne.n	10001c94 <arm_mat_inverse_f32+0x54>
10001d06:	465d      	mov	r5, fp
10001d08:	00ae      	lsls	r6, r5, #2
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001d0a:	4663      	mov	r3, ip
10001d0c:	9608      	str	r6, [sp, #32]
10001d0e:	3604      	adds	r6, #4
10001d10:	00ea      	lsls	r2, r5, #3
10001d12:	960f      	str	r6, [sp, #60]	; 0x3c
10001d14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
10001d16:	1c1e      	adds	r6, r3, #0
10001d18:	3204      	adds	r2, #4
10001d1a:	2101      	movs	r1, #1
10001d1c:	2500      	movs	r5, #0
10001d1e:	3e04      	subs	r6, #4
10001d20:	9705      	str	r7, [sp, #20]
10001d22:	920e      	str	r2, [sp, #56]	; 0x38
10001d24:	930b      	str	r3, [sp, #44]	; 0x2c
10001d26:	9304      	str	r3, [sp, #16]
10001d28:	46d9      	mov	r9, fp
10001d2a:	910a      	str	r1, [sp, #40]	; 0x28
10001d2c:	9511      	str	r5, [sp, #68]	; 0x44
10001d2e:	9610      	str	r6, [sp, #64]	; 0x40
10001d30:	46d8      	mov	r8, fp
10001d32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
      /* Working pointer for the destination matrix that points     
       * to the pivot element of the particular row  */
      pInT3 = pOut + (l * numCols);

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
10001d34:	9904      	ldr	r1, [sp, #16]
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001d36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10001d38:	3f01      	subs	r7, #1
10001d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
10001d3c:	9706      	str	r7, [sp, #24]
10001d3e:	00a2      	lsls	r2, r4, #2
      /* Working pointer for the destination matrix that points     
       * to the pivot element of the particular row  */
      pInT3 = pOut + (l * numCols);

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
10001d40:	680f      	ldr	r7, [r1, #0]
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001d42:	1898      	adds	r0, r3, r2
10001d44:	9001      	str	r0, [sp, #4]

      /* Destination pointer modifier */
      k = 1u;

      /* Check if the pivot element is zero */
      if(*pInT1 == 0.0f)
10001d46:	2100      	movs	r1, #0
10001d48:	1c38      	adds	r0, r7, #0
10001d4a:	f000 fe9b 	bl	10002a84 <__aeabi_fcmpeq>
10001d4e:	2800      	cmp	r0, #0
10001d50:	d010      	beq.n	10001d74 <arm_mat_inverse_f32+0x134>
      {
        /* Loop over the number rows present below */
        for (i = (l + 1u); i < numRows; i++)
10001d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10001d54:	4590      	cmp	r8, r2
10001d56:	d907      	bls.n	10001d68 <arm_mat_inverse_f32+0x128>
          pInT2 = pInT1 + (numCols * l);
          pInT4 = pInT3 + (numCols * k);

          /* Check if there is a non zero pivot element to     
           * replace in the rows below */
          if(*pInT2 != 0.0f)
10001d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10001d5a:	2100      	movs	r1, #0
10001d5c:	6818      	ldr	r0, [r3, #0]
10001d5e:	f000 fe91 	bl	10002a84 <__aeabi_fcmpeq>
10001d62:	2800      	cmp	r0, #0
10001d64:	d100      	bne.n	10001d68 <arm_mat_inverse_f32+0x128>
10001d66:	e134      	b.n	10001fd2 <arm_mat_inverse_f32+0x392>
          k++;
        }
      }

      /* Update the status if the matrix is singular */
      if((flag != 1u) && (in == 0.0f))
10001d68:	9811      	ldr	r0, [sp, #68]	; 0x44
10001d6a:	2801      	cmp	r0, #1
10001d6c:	d100      	bne.n	10001d70 <arm_mat_inverse_f32+0x130>
10001d6e:	e18d      	b.n	1000208c <arm_mat_inverse_f32+0x44c>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if((flag != 1u) && (in == 0.0f))
    {
      status = ARM_MATH_SINGULAR;
10001d70:	23fb      	movs	r3, #251	; 0xfb
10001d72:	e11d      	b.n	10001fb0 <arm_mat_inverse_f32+0x370>
10001d74:	9d05      	ldr	r5, [sp, #20]
10001d76:	9e08      	ldr	r6, [sp, #32]
10001d78:	19ac      	adds	r4, r5, r6
10001d7a:	940c      	str	r4, [sp, #48]	; 0x30
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001d7c:	464c      	mov	r4, r9
10001d7e:	2c00      	cmp	r4, #0
10001d80:	d026      	beq.n	10001dd0 <arm_mat_inverse_f32+0x190>
      {
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
10001d82:	9804      	ldr	r0, [sp, #16]
10001d84:	1c39      	adds	r1, r7, #0
10001d86:	6800      	ldr	r0, [r0, #0]
10001d88:	f001 f880 	bl	10002e8c <__aeabi_fdiv>
10001d8c:	464e      	mov	r6, r9
10001d8e:	3e01      	subs	r6, #1
10001d90:	2501      	movs	r5, #1
10001d92:	9c04      	ldr	r4, [sp, #16]
10001d94:	4035      	ands	r5, r6
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001d96:	2601      	movs	r6, #1
      {
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
10001d98:	c401      	stmia	r4!, {r0}
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001d9a:	454e      	cmp	r6, r9
10001d9c:	d018      	beq.n	10001dd0 <arm_mat_inverse_f32+0x190>
10001d9e:	2d00      	cmp	r5, #0
10001da0:	d007      	beq.n	10001db2 <arm_mat_inverse_f32+0x172>
      {
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
10001da2:	6820      	ldr	r0, [r4, #0]
10001da4:	1c39      	adds	r1, r7, #0
10001da6:	f001 f871 	bl	10002e8c <__aeabi_fdiv>
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001daa:	2602      	movs	r6, #2
      {
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
10001dac:	c401      	stmia	r4!, {r0}
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001dae:	454e      	cmp	r6, r9
10001db0:	d00e      	beq.n	10001dd0 <arm_mat_inverse_f32+0x190>
      {
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
10001db2:	6820      	ldr	r0, [r4, #0]
10001db4:	1c39      	adds	r1, r7, #0
10001db6:	f001 f869 	bl	10002e8c <__aeabi_fdiv>
10001dba:	1c25      	adds	r5, r4, #0
10001dbc:	c501      	stmia	r5!, {r0}
10001dbe:	6860      	ldr	r0, [r4, #4]
10001dc0:	1c39      	adds	r1, r7, #0
10001dc2:	f001 f863 	bl	10002e8c <__aeabi_fdiv>
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001dc6:	3602      	adds	r6, #2
      {
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
10001dc8:	6060      	str	r0, [r4, #4]
        pInT1++;
10001dca:	1d2c      	adds	r4, r5, #4
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns     
       * to the right of the pilot element */
      for (j = 0u; j < (numCols - l); j++)
10001dcc:	454e      	cmp	r6, r9
10001dce:	d1f0      	bne.n	10001db2 <arm_mat_inverse_f32+0x172>
      }
      for (j = 0u; j < numCols; j++)
      {
        /* Divide each element of the row of the destination matrix     
         * by the pivot element */
        *pInT2 = *pInT2 / in;
10001dd0:	9a05      	ldr	r2, [sp, #20]
10001dd2:	4641      	mov	r1, r8
10001dd4:	3901      	subs	r1, #1
10001dd6:	2501      	movs	r5, #1
10001dd8:	6810      	ldr	r0, [r2, #0]
10001dda:	400d      	ands	r5, r1
10001ddc:	1c39      	adds	r1, r7, #0
10001dde:	f001 f855 	bl	10002e8c <__aeabi_fdiv>
10001de2:	9c05      	ldr	r4, [sp, #20]
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
        pInT1++;
      }
      for (j = 0u; j < numCols; j++)
10001de4:	2601      	movs	r6, #1
      {
        /* Divide each element of the row of the destination matrix     
         * by the pivot element */
        *pInT2 = *pInT2 / in;
10001de6:	c401      	stmia	r4!, {r0}
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
        pInT1++;
      }
      for (j = 0u; j < numCols; j++)
10001de8:	45b0      	cmp	r8, r6
10001dea:	d918      	bls.n	10001e1e <arm_mat_inverse_f32+0x1de>
10001dec:	2d00      	cmp	r5, #0
10001dee:	d007      	beq.n	10001e00 <arm_mat_inverse_f32+0x1c0>
      {
        /* Divide each element of the row of the destination matrix     
         * by the pivot element */
        *pInT2 = *pInT2 / in;
10001df0:	6820      	ldr	r0, [r4, #0]
10001df2:	1c39      	adds	r1, r7, #0
10001df4:	f001 f84a 	bl	10002e8c <__aeabi_fdiv>
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
        pInT1++;
      }
      for (j = 0u; j < numCols; j++)
10001df8:	2602      	movs	r6, #2
      {
        /* Divide each element of the row of the destination matrix     
         * by the pivot element */
        *pInT2 = *pInT2 / in;
10001dfa:	c401      	stmia	r4!, {r0}
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
        pInT1++;
      }
      for (j = 0u; j < numCols; j++)
10001dfc:	45b0      	cmp	r8, r6
10001dfe:	d90e      	bls.n	10001e1e <arm_mat_inverse_f32+0x1de>
      {
        /* Divide each element of the row of the destination matrix     
         * by the pivot element */
        *pInT2 = *pInT2 / in;
10001e00:	6820      	ldr	r0, [r4, #0]
10001e02:	1c39      	adds	r1, r7, #0
10001e04:	f001 f842 	bl	10002e8c <__aeabi_fdiv>
10001e08:	1c25      	adds	r5, r4, #0
10001e0a:	c501      	stmia	r5!, {r0}
10001e0c:	6860      	ldr	r0, [r4, #4]
10001e0e:	1c39      	adds	r1, r7, #0
10001e10:	f001 f83c 	bl	10002e8c <__aeabi_fdiv>
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
        pInT1++;
      }
      for (j = 0u; j < numCols; j++)
10001e14:	3602      	adds	r6, #2
      {
        /* Divide each element of the row of the destination matrix     
         * by the pivot element */
        *pInT2 = *pInT2 / in;
10001e16:	6060      	str	r0, [r4, #4]
        pInT2++;
10001e18:	1d2c      	adds	r4, r5, #4
        /* Divide each element of the row of the input matrix     
         * by the pivot element */
        *pInT1 = *pInT1 / in;
        pInT1++;
      }
      for (j = 0u; j < numCols; j++)
10001e1a:	45b0      	cmp	r8, r6
10001e1c:	d8f0      	bhi.n	10001e00 <arm_mat_inverse_f32+0x1c0>
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001e20:	489d      	ldr	r0, [pc, #628]	; (10002098 <arm_mat_inverse_f32+0x458>)
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001e22:	464c      	mov	r4, r9
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001e24:	1819      	adds	r1, r3, r0
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001e26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001e28:	008a      	lsls	r2, r1, #2
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001e2a:	00a6      	lsls	r6, r4, #2
10001e2c:	2300      	movs	r3, #0
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10001e2e:	9207      	str	r2, [sp, #28]
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001e30:	9609      	str	r6, [sp, #36]	; 0x24
10001e32:	9503      	str	r5, [sp, #12]
10001e34:	9302      	str	r3, [sp, #8]
      pInT2 = pOut;

      for (i = 0u; i < numRows; i++)
      {
        /* Check for the pivot element */
        if(i == l)
10001e36:	9802      	ldr	r0, [sp, #8]
10001e38:	9906      	ldr	r1, [sp, #24]
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001e3a:	9a01      	ldr	r2, [sp, #4]
      pInT2 = pOut;

      for (i = 0u; i < numRows; i++)
      {
        /* Check for the pivot element */
        if(i == l)
10001e3c:	4288      	cmp	r0, r1
10001e3e:	d100      	bne.n	10001e42 <arm_mat_inverse_f32+0x202>
10001e40:	e0be      	b.n	10001fc0 <arm_mat_inverse_f32+0x380>
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001e42:	464d      	mov	r5, r9
          pInT2 += numCols;
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
10001e44:	6817      	ldr	r7, [r2, #0]
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001e46:	2d00      	cmp	r5, #0
10001e48:	d043      	beq.n	10001ed2 <arm_mat_inverse_f32+0x292>
10001e4a:	3d01      	subs	r5, #1
10001e4c:	2601      	movs	r6, #1
10001e4e:	402e      	ands	r6, r5
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001e50:	9d04      	ldr	r5, [sp, #16]
10001e52:	1c39      	adds	r1, r7, #0
10001e54:	cd01      	ldmia	r5!, {r0}
10001e56:	1c14      	adds	r4, r2, #0
10001e58:	f001 fa0a 	bl	10003270 <__aeabi_fmul>
10001e5c:	1c01      	adds	r1, r0, #0
10001e5e:	1c38      	adds	r0, r7, #0
10001e60:	f001 fb36 	bl	100034d0 <__aeabi_fsub>
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001e64:	2301      	movs	r3, #1
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001e66:	c401      	stmia	r4!, {r0}
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001e68:	469b      	mov	fp, r3
10001e6a:	454b      	cmp	r3, r9
10001e6c:	d02d      	beq.n	10001eca <arm_mat_inverse_f32+0x28a>
10001e6e:	2e00      	cmp	r6, #0
10001e70:	d00c      	beq.n	10001e8c <arm_mat_inverse_f32+0x24c>
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001e72:	cd01      	ldmia	r5!, {r0}
10001e74:	1c39      	adds	r1, r7, #0
10001e76:	f001 f9fb 	bl	10003270 <__aeabi_fmul>
10001e7a:	1c01      	adds	r1, r0, #0
10001e7c:	6820      	ldr	r0, [r4, #0]
10001e7e:	f001 fb27 	bl	100034d0 <__aeabi_fsub>
10001e82:	c401      	stmia	r4!, {r0}
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001e84:	2002      	movs	r0, #2
10001e86:	4683      	mov	fp, r0
10001e88:	4548      	cmp	r0, r9
10001e8a:	d01e      	beq.n	10001eca <arm_mat_inverse_f32+0x28a>
10001e8c:	46ba      	mov	sl, r7
10001e8e:	1c2f      	adds	r7, r5, #0
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001e90:	1c3d      	adds	r5, r7, #0
10001e92:	cd01      	ldmia	r5!, {r0}
10001e94:	4651      	mov	r1, sl
10001e96:	f001 f9eb 	bl	10003270 <__aeabi_fmul>
10001e9a:	1c01      	adds	r1, r0, #0
10001e9c:	6820      	ldr	r0, [r4, #0]
10001e9e:	f001 fb17 	bl	100034d0 <__aeabi_fsub>
10001ea2:	1c26      	adds	r6, r4, #0
10001ea4:	c601      	stmia	r6!, {r0}
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001ea6:	2101      	movs	r1, #1
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001ea8:	6878      	ldr	r0, [r7, #4]
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001eaa:	448b      	add	fp, r1
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001eac:	4651      	mov	r1, sl
10001eae:	f001 f9df 	bl	10003270 <__aeabi_fmul>
10001eb2:	1c01      	adds	r1, r0, #0
10001eb4:	6860      	ldr	r0, [r4, #4]
10001eb6:	f001 fb0b 	bl	100034d0 <__aeabi_fsub>
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001eba:	2201      	movs	r2, #1
10001ebc:	4493      	add	fp, r2
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
10001ebe:	6060      	str	r0, [r4, #4]
10001ec0:	1d2f      	adds	r7, r5, #4
            pInT1++;
10001ec2:	1d34      	adds	r4, r6, #4
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,     
             to replace the elements in the input matrix */
          for (j = 0u; j < (numCols - l); j++)
10001ec4:	45cb      	cmp	fp, r9
10001ec6:	d1e3      	bne.n	10001e90 <arm_mat_inverse_f32+0x250>
10001ec8:	4657      	mov	r7, sl
10001eca:	9c01      	ldr	r4, [sp, #4]
10001ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
10001ece:	18e0      	adds	r0, r4, r3
10001ed0:	9001      	str	r0, [sp, #4]
10001ed2:	4645      	mov	r5, r8
10001ed4:	3d01      	subs	r5, #1
10001ed6:	2601      	movs	r6, #1
10001ed8:	402e      	ands	r6, r5
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001eda:	9d05      	ldr	r5, [sp, #20]
10001edc:	1c39      	adds	r1, r7, #0
10001ede:	cd01      	ldmia	r5!, {r0}
10001ee0:	f001 f9c6 	bl	10003270 <__aeabi_fmul>
10001ee4:	9a03      	ldr	r2, [sp, #12]
10001ee6:	1c01      	adds	r1, r0, #0
10001ee8:	6810      	ldr	r0, [r2, #0]
10001eea:	f001 faf1 	bl	100034d0 <__aeabi_fsub>
10001eee:	9c03      	ldr	r4, [sp, #12]
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001ef0:	2101      	movs	r1, #1
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001ef2:	c401      	stmia	r4!, {r0}
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001ef4:	468b      	mov	fp, r1
10001ef6:	4588      	cmp	r8, r1
10001ef8:	d92d      	bls.n	10001f56 <arm_mat_inverse_f32+0x316>
10001efa:	2e00      	cmp	r6, #0
10001efc:	d00c      	beq.n	10001f18 <arm_mat_inverse_f32+0x2d8>
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001efe:	cd01      	ldmia	r5!, {r0}
10001f00:	1c39      	adds	r1, r7, #0
10001f02:	f001 f9b5 	bl	10003270 <__aeabi_fmul>
10001f06:	1c01      	adds	r1, r0, #0
10001f08:	6820      	ldr	r0, [r4, #0]
10001f0a:	f001 fae1 	bl	100034d0 <__aeabi_fsub>
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001f0e:	2302      	movs	r3, #2
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001f10:	c401      	stmia	r4!, {r0}
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001f12:	469b      	mov	fp, r3
10001f14:	4598      	cmp	r8, r3
10001f16:	d91e      	bls.n	10001f56 <arm_mat_inverse_f32+0x316>
10001f18:	46ba      	mov	sl, r7
10001f1a:	1c2f      	adds	r7, r5, #0
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001f1c:	1c3d      	adds	r5, r7, #0
10001f1e:	cd01      	ldmia	r5!, {r0}
10001f20:	4651      	mov	r1, sl
10001f22:	f001 f9a5 	bl	10003270 <__aeabi_fmul>
10001f26:	1c01      	adds	r1, r0, #0
10001f28:	6820      	ldr	r0, [r4, #0]
10001f2a:	f001 fad1 	bl	100034d0 <__aeabi_fsub>
10001f2e:	1c26      	adds	r6, r4, #0
10001f30:	c601      	stmia	r6!, {r0}
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001f32:	2001      	movs	r0, #1
10001f34:	4483      	add	fp, r0
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001f36:	4651      	mov	r1, sl
10001f38:	6878      	ldr	r0, [r7, #4]
10001f3a:	f001 f999 	bl	10003270 <__aeabi_fmul>
10001f3e:	1c01      	adds	r1, r0, #0
10001f40:	6860      	ldr	r0, [r4, #4]
10001f42:	f001 fac5 	bl	100034d0 <__aeabi_fsub>
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001f46:	2201      	movs	r2, #1
10001f48:	4493      	add	fp, r2
          {
            /* Replace the element by the sum of that row     
               and a multiple of the reference row  */
            *pInT2 = *pInT2 - (in * *pPRT_pDst++);
10001f4a:	6060      	str	r0, [r4, #4]
10001f4c:	1d2f      	adds	r7, r5, #4
            pInT2++;
10001f4e:	1d34      	adds	r4, r6, #4
            *pInT1 = *pInT1 - (in * *pPRT_in++);
            pInT1++;
          }
          /* Loop over the number of columns to     
             replace the elements in the destination matrix */
          for (j = 0u; j < numCols; j++)
10001f50:	45d8      	cmp	r8, fp
10001f52:	d8e3      	bhi.n	10001f1c <arm_mat_inverse_f32+0x2dc>
10001f54:	4657      	mov	r7, sl
10001f56:	9c03      	ldr	r4, [sp, #12]
10001f58:	9908      	ldr	r1, [sp, #32]
10001f5a:	9d01      	ldr	r5, [sp, #4]
10001f5c:	1863      	adds	r3, r4, r1
10001f5e:	9303      	str	r3, [sp, #12]

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
      pInT2 = pOut;

      for (i = 0u; i < numRows; i++)
10001f60:	9e02      	ldr	r6, [sp, #8]
            pInT2++;
          }

        }
        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
10001f62:	9b07      	ldr	r3, [sp, #28]

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
      pInT2 = pOut;

      for (i = 0u; i < numRows; i++)
10001f64:	3601      	adds	r6, #1
            pInT2++;
          }

        }
        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
10001f66:	18ed      	adds	r5, r5, r3
10001f68:	9501      	str	r5, [sp, #4]

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
      pInT2 = pOut;

      for (i = 0u; i < numRows; i++)
10001f6a:	9602      	str	r6, [sp, #8]
10001f6c:	45b0      	cmp	r8, r6
10001f6e:	d900      	bls.n	10001f72 <arm_mat_inverse_f32+0x332>
10001f70:	e761      	b.n	10001e36 <arm_mat_inverse_f32+0x1f6>
      }
      /* Increment the input pointer */
      pIn++;

      /* Decrement the loop counter */
      loopCnt--;
10001f72:	2201      	movs	r2, #1
10001f74:	4250      	negs	r0, r2
10001f76:	9c04      	ldr	r4, [sp, #16]
10001f78:	4481      	add	r9, r0
10001f7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
10001f7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
10001f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10001f80:	980e      	ldr	r0, [sp, #56]	; 0x38
10001f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10001f84:	1863      	adds	r3, r4, r1
10001f86:	3601      	adds	r6, #1
10001f88:	1814      	adds	r4, r2, r0
    loopCnt = numCols;

    /* Index modifier to navigate through the columns */
    l = 0u;
    //for(loopCnt = 0u; loopCnt < numCols; loopCnt++)   
    while(loopCnt > 0u)
10001f8a:	4649      	mov	r1, r9
10001f8c:	9304      	str	r3, [sp, #16]
10001f8e:	9505      	str	r5, [sp, #20]
10001f90:	960a      	str	r6, [sp, #40]	; 0x28
10001f92:	940b      	str	r4, [sp, #44]	; 0x2c
10001f94:	2900      	cmp	r1, #0
10001f96:	d000      	beq.n	10001f9a <arm_mat_inverse_f32+0x35a>
10001f98:	e6cb      	b.n	10001d32 <arm_mat_inverse_f32+0xf2>
#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if((flag != 1u) && (in == 0.0f))
10001f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
10001f9c:	2b01      	cmp	r3, #1
10001f9e:	d006      	beq.n	10001fae <arm_mat_inverse_f32+0x36e>
10001fa0:	1c38      	adds	r0, r7, #0
10001fa2:	2100      	movs	r1, #0
10001fa4:	f000 fd6e 	bl	10002a84 <__aeabi_fcmpeq>
10001fa8:	2800      	cmp	r0, #0
10001faa:	d000      	beq.n	10001fae <arm_mat_inverse_f32+0x36e>
10001fac:	e6e0      	b.n	10001d70 <arm_mat_inverse_f32+0x130>


#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
10001fae:	2300      	movs	r3, #0
    {
      status = ARM_MATH_SINGULAR;
    }
  }
  /* Return to application */
  return (status);
10001fb0:	b258      	sxtb	r0, r3
}
10001fb2:	b013      	add	sp, #76	; 0x4c
10001fb4:	bc3c      	pop	{r2, r3, r4, r5}
10001fb6:	4690      	mov	r8, r2
10001fb8:	4699      	mov	r9, r3
10001fba:	46a2      	mov	sl, r4
10001fbc:	46ab      	mov	fp, r5
10001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
          pInT2 += numCols;
10001fc0:	9803      	ldr	r0, [sp, #12]
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001fc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
          pInT2 += numCols;
10001fc4:	9c08      	ldr	r4, [sp, #32]
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001fc6:	1992      	adds	r2, r2, r6
          pInT2 += numCols;
10001fc8:	1901      	adds	r1, r0, r4
        /* Check for the pivot element */
        if(i == l)
        {
          /* If the processing element is the pivot element,     
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
10001fca:	9201      	str	r2, [sp, #4]
          pInT2 += numCols;
10001fcc:	9103      	str	r1, [sp, #12]
10001fce:	1c15      	adds	r5, r2, #0
10001fd0:	e7c6      	b.n	10001f60 <arm_mat_inverse_f32+0x320>
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
10001fd2:	464c      	mov	r4, r9
10001fd4:	2c00      	cmp	r4, #0
10001fd6:	d025      	beq.n	10002024 <arm_mat_inverse_f32+0x3e4>
10001fd8:	464a      	mov	r2, r9
10001fda:	3a01      	subs	r2, #1
10001fdc:	2501      	movs	r5, #1
10001fde:	4015      	ands	r5, r2
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
10001fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
              *pInT2++ = *pInT1;
              *pInT1++ = Xchg;
10001fe2:	9b04      	ldr	r3, [sp, #16]
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
10001fe4:	6810      	ldr	r0, [r2, #0]
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
10001fe6:	2401      	movs	r4, #1
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
10001fe8:	c280      	stmia	r2!, {r7}
              *pInT1++ = Xchg;
10001fea:	c301      	stmia	r3!, {r0}
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
10001fec:	454c      	cmp	r4, r9
10001fee:	d019      	beq.n	10002024 <arm_mat_inverse_f32+0x3e4>
10001ff0:	2d00      	cmp	r5, #0
10001ff2:	d006      	beq.n	10002002 <arm_mat_inverse_f32+0x3c2>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
10001ff4:	6817      	ldr	r7, [r2, #0]
              *pInT2++ = *pInT1;
10001ff6:	6819      	ldr	r1, [r3, #0]
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
10001ff8:	2402      	movs	r4, #2
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
10001ffa:	c202      	stmia	r2!, {r1}
              *pInT1++ = Xchg;
10001ffc:	c380      	stmia	r3!, {r7}
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
10001ffe:	454c      	cmp	r4, r9
10002000:	d010      	beq.n	10002024 <arm_mat_inverse_f32+0x3e4>
10002002:	46ca      	mov	sl, r9
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
10002004:	6816      	ldr	r6, [r2, #0]
              *pInT2++ = *pInT1;
10002006:	681d      	ldr	r5, [r3, #0]
10002008:	1c10      	adds	r0, r2, #0
              *pInT1++ = Xchg;
1000200a:	1c19      	adds	r1, r3, #0
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
1000200c:	c020      	stmia	r0!, {r5}
              *pInT1++ = Xchg;
1000200e:	c140      	stmia	r1!, {r6}
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
10002010:	6856      	ldr	r6, [r2, #4]
              *pInT2++ = *pInT1;
10002012:	685f      	ldr	r7, [r3, #4]
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
10002014:	3402      	adds	r4, #2
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
10002016:	6057      	str	r7, [r2, #4]
              *pInT1++ = Xchg;
10002018:	605e      	str	r6, [r3, #4]
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
1000201a:	1d02      	adds	r2, r0, #4
              *pInT1++ = Xchg;
1000201c:	1d0b      	adds	r3, r1, #4
           * replace in the rows below */
          if(*pInT2 != 0.0f)
          {
            /* Loop over number of columns     
             * to the right of the pilot element */
            for (j = 0u; j < (numCols - l); j++)
1000201e:	4554      	cmp	r4, sl
10002020:	d1f0      	bne.n	10002004 <arm_mat_inverse_f32+0x3c4>
10002022:	46d1      	mov	r9, sl
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
10002024:	9a05      	ldr	r2, [sp, #20]
10002026:	9b08      	ldr	r3, [sp, #32]
            }

            for (j = 0u; j < numCols; j++)
            {
              Xchg = *pInT4;
              *pInT4++ = *pInT3;
10002028:	9f05      	ldr	r7, [sp, #20]
 * of the output matrix does not match the size of the input matrix.    
 * If the input matrix is found to be singular (non-invertible), then the function returns    
 * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.    
 */

arm_status arm_mat_inverse_f32(
1000202a:	18d4      	adds	r4, r2, r3
1000202c:	940c      	str	r4, [sp, #48]	; 0x30
            }

            for (j = 0u; j < numCols; j++)
            {
              Xchg = *pInT4;
              *pInT4++ = *pInT3;
1000202e:	683b      	ldr	r3, [r7, #0]
10002030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
            {
              Xchg = *pInT4;
10002032:	6821      	ldr	r1, [r4, #0]
10002034:	4645      	mov	r5, r8
              *pInT4++ = *pInT3;
10002036:	c208      	stmia	r2!, {r3}
10002038:	2001      	movs	r0, #1
              *pInT3++ = Xchg;
1000203a:	9b05      	ldr	r3, [sp, #20]
1000203c:	3d01      	subs	r5, #1
1000203e:	1c06      	adds	r6, r0, #0
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
10002040:	2401      	movs	r4, #1
10002042:	402e      	ands	r6, r5
            {
              Xchg = *pInT4;
              *pInT4++ = *pInT3;
              *pInT3++ = Xchg;
10002044:	c302      	stmia	r3!, {r1}
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
10002046:	45a0      	cmp	r8, r4
10002048:	d919      	bls.n	1000207e <arm_mat_inverse_f32+0x43e>
1000204a:	2e00      	cmp	r6, #0
1000204c:	d006      	beq.n	1000205c <arm_mat_inverse_f32+0x41c>
            {
              Xchg = *pInT4;
1000204e:	6814      	ldr	r4, [r2, #0]
              *pInT4++ = *pInT3;
10002050:	681d      	ldr	r5, [r3, #0]
10002052:	c220      	stmia	r2!, {r5}
              *pInT3++ = Xchg;
10002054:	c310      	stmia	r3!, {r4}
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
10002056:	2402      	movs	r4, #2
10002058:	45a0      	cmp	r8, r4
1000205a:	d910      	bls.n	1000207e <arm_mat_inverse_f32+0x43e>
1000205c:	4646      	mov	r6, r8
            {
              Xchg = *pInT4;
              *pInT4++ = *pInT3;
1000205e:	6819      	ldr	r1, [r3, #0]
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
            {
              Xchg = *pInT4;
10002060:	6817      	ldr	r7, [r2, #0]
              *pInT4++ = *pInT3;
10002062:	1c10      	adds	r0, r2, #0
10002064:	c002      	stmia	r0!, {r1}
              *pInT3++ = Xchg;
10002066:	1c19      	adds	r1, r3, #0
10002068:	c180      	stmia	r1!, {r7}
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
            {
              Xchg = *pInT4;
1000206a:	6855      	ldr	r5, [r2, #4]
              *pInT4++ = *pInT3;
1000206c:	685f      	ldr	r7, [r3, #4]
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
1000206e:	3402      	adds	r4, #2
            {
              Xchg = *pInT4;
              *pInT4++ = *pInT3;
10002070:	6057      	str	r7, [r2, #4]
              *pInT3++ = Xchg;
10002072:	605d      	str	r5, [r3, #4]
            }

            for (j = 0u; j < numCols; j++)
            {
              Xchg = *pInT4;
              *pInT4++ = *pInT3;
10002074:	1d02      	adds	r2, r0, #4
              *pInT3++ = Xchg;
10002076:	1d0b      	adds	r3, r1, #4
              Xchg = *pInT2;
              *pInT2++ = *pInT1;
              *pInT1++ = Xchg;
            }

            for (j = 0u; j < numCols; j++)
10002078:	42a6      	cmp	r6, r4
1000207a:	d8f0      	bhi.n	1000205e <arm_mat_inverse_f32+0x41e>
1000207c:	46b0      	mov	r8, r6
1000207e:	9a04      	ldr	r2, [sp, #16]
              *pInT4++ = *pInT3;
              *pInT3++ = Xchg;
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1u;
10002080:	2301      	movs	r3, #1
10002082:	6817      	ldr	r7, [r2, #0]
10002084:	9311      	str	r3, [sp, #68]	; 0x44
10002086:	e679      	b.n	10001d7c <arm_mat_inverse_f32+0x13c>
  /* Check for matrix mismatch condition */
  if((pSrc->numRows != pSrc->numCols) || (pDst->numRows != pDst->numCols)
     || (pSrc->numRows != pDst->numRows))
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
10002088:	23fd      	movs	r3, #253	; 0xfd
1000208a:	e791      	b.n	10001fb0 <arm_mat_inverse_f32+0x370>
1000208c:	9d05      	ldr	r5, [sp, #20]
1000208e:	9908      	ldr	r1, [sp, #32]
10002090:	186e      	adds	r6, r5, r1
10002092:	960c      	str	r6, [sp, #48]	; 0x30
10002094:	e672      	b.n	10001d7c <arm_mat_inverse_f32+0x13c>
10002096:	46c0      	nop			; (mov r8, r8)
10002098:	3fffffff 	.word	0x3fffffff

1000209c <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
1000209c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000209e:	4656      	mov	r6, sl
100020a0:	465f      	mov	r7, fp
100020a2:	464d      	mov	r5, r9
100020a4:	4644      	mov	r4, r8
100020a6:	b4f0      	push	{r4, r5, r6, r7}
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
100020a8:	6854      	ldr	r4, [r2, #4]

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
100020aa:	b08b      	sub	sp, #44	; 0x2c
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
100020ac:	9407      	str	r4, [sp, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
100020ae:	884e      	ldrh	r6, [r1, #2]
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
100020b0:	8805      	ldrh	r5, [r0, #0]
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
100020b2:	9602      	str	r6, [sp, #8]
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
100020b4:	6843      	ldr	r3, [r0, #4]

#else

  /* Run the below code for Cortex-M0 */

  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
100020b6:	684f      	ldr	r7, [r1, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
100020b8:	8840      	ldrh	r0, [r0, #2]

#else

  /* Run the below code for Cortex-M0 */

  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
100020ba:	9703      	str	r7, [sp, #12]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
100020bc:	9004      	str	r0, [sp, #16]
  arm_status status;                             /* status of matrix multiplication */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if((pSrcA->numCols != pSrcB->numRows) ||
100020be:	8809      	ldrh	r1, [r1, #0]
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
100020c0:	469a      	mov	sl, r3
  arm_status status;                             /* status of matrix multiplication */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if((pSrcA->numCols != pSrcB->numRows) ||
100020c2:	4281      	cmp	r1, r0
100020c4:	d000      	beq.n	100020c8 <arm_mat_mult_f32+0x2c>
100020c6:	e087      	b.n	100021d8 <arm_mat_mult_f32+0x13c>
100020c8:	8813      	ldrh	r3, [r2, #0]
100020ca:	42ab      	cmp	r3, r5
100020cc:	d000      	beq.n	100020d0 <arm_mat_mult_f32+0x34>
100020ce:	e083      	b.n	100021d8 <arm_mat_mult_f32+0x13c>
     (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
100020d0:	8852      	ldrh	r2, [r2, #2]
100020d2:	9c02      	ldr	r4, [sp, #8]
100020d4:	42a2      	cmp	r2, r4
100020d6:	d000      	beq.n	100020da <arm_mat_mult_f32+0x3e>
100020d8:	e07e      	b.n	100021d8 <arm_mat_mult_f32+0x13c>
100020da:	0085      	lsls	r5, r0, #2
 * @param[out]      *pDst points to output matrix structure    
 * @return     		The function returns either    
 * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.    
 */

arm_status arm_mat_mult_f32(
100020dc:	3801      	subs	r0, #1
100020de:	b287      	uxth	r7, r0
100020e0:	00b9      	lsls	r1, r7, #2
100020e2:	00a6      	lsls	r6, r4, #2
100020e4:	9306      	str	r3, [sp, #24]
100020e6:	3104      	adds	r1, #4
100020e8:	2300      	movs	r3, #0
100020ea:	9508      	str	r5, [sp, #32]
100020ec:	46b3      	mov	fp, r6
100020ee:	9305      	str	r3, [sp, #20]
100020f0:	9109      	str	r1, [sp, #36]	; 0x24
    /* The following loop performs the dot-product of each row in pInA with each column in pInB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
100020f2:	9a05      	ldr	r2, [sp, #20]
100020f4:	9d07      	ldr	r5, [sp, #28]
100020f6:	0094      	lsls	r4, r2, #2
 * @param[out]      *pDst points to output matrix structure    
 * @return     		The function returns either    
 * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.    
 */

arm_status arm_mat_mult_f32(
100020f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    /* The following loop performs the dot-product of each row in pInA with each column in pInB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
100020fa:	192e      	adds	r6, r5, r4
 * @param[out]      *pDst points to output matrix structure    
 * @return     		The function returns either    
 * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.    
 */

arm_status arm_mat_mult_f32(
100020fc:	9f02      	ldr	r7, [sp, #8]
    /* The following loop performs the dot-product of each row in pInA with each column in pInB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
100020fe:	9601      	str	r6, [sp, #4]
 * @param[out]      *pDst points to output matrix structure    
 * @return     		The function returns either    
 * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.    
 */

arm_status arm_mat_mult_f32(
10002100:	4680      	mov	r8, r0
      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;

      /* For every row wise process, the pIn2 pointer is set     
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
10002102:	9e03      	ldr	r6, [sp, #12]
 * @param[out]      *pDst points to output matrix structure    
 * @return     		The function returns either    
 * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.    
 */

arm_status arm_mat_mult_f32(
10002104:	44d0      	add	r8, sl
10002106:	46b9      	mov	r9, r7
        pIn1 = pInA;

        /* Matrix A columns number of MAC operations are to be performed */
        colCnt = numColsA;

        while(colCnt > 0u)
10002108:	9904      	ldr	r1, [sp, #16]
1000210a:	2900      	cmp	r1, #0
1000210c:	d062      	beq.n	100021d4 <arm_mat_mult_f32+0x138>
1000210e:	4643      	mov	r3, r8
10002110:	4652      	mov	r2, sl
10002112:	1a9c      	subs	r4, r3, r2
10002114:	3c04      	subs	r4, #4
10002116:	0765      	lsls	r5, r4, #29
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
10002118:	4654      	mov	r4, sl
1000211a:	6831      	ldr	r1, [r6, #0]
1000211c:	cc01      	ldmia	r4!, {r0}
1000211e:	f001 f8a7 	bl	10003270 <__aeabi_fmul>
10002122:	1c01      	adds	r1, r0, #0
10002124:	2000      	movs	r0, #0
10002126:	f000 fcdb 	bl	10002ae0 <__aeabi_fadd>
1000212a:	0fed      	lsrs	r5, r5, #31
1000212c:	1c07      	adds	r7, r0, #0
          pIn2 += numColsB;
1000212e:	445e      	add	r6, fp
        pIn1 = pInA;

        /* Matrix A columns number of MAC operations are to be performed */
        colCnt = numColsA;

        while(colCnt > 0u)
10002130:	4544      	cmp	r4, r8
10002132:	d02c      	beq.n	1000218e <arm_mat_mult_f32+0xf2>
10002134:	2d00      	cmp	r5, #0
10002136:	d00b      	beq.n	10002150 <arm_mat_mult_f32+0xb4>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
10002138:	6831      	ldr	r1, [r6, #0]
1000213a:	cc01      	ldmia	r4!, {r0}
1000213c:	f001 f898 	bl	10003270 <__aeabi_fmul>
10002140:	1c01      	adds	r1, r0, #0
10002142:	1c38      	adds	r0, r7, #0
10002144:	f000 fccc 	bl	10002ae0 <__aeabi_fadd>
          pIn2 += numColsB;
10002148:	445e      	add	r6, fp
        colCnt = numColsA;

        while(colCnt > 0u)
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
1000214a:	1c07      	adds	r7, r0, #0
        pIn1 = pInA;

        /* Matrix A columns number of MAC operations are to be performed */
        colCnt = numColsA;

        while(colCnt > 0u)
1000214c:	4544      	cmp	r4, r8
1000214e:	d01e      	beq.n	1000218e <arm_mat_mult_f32+0xf2>
10002150:	1c38      	adds	r0, r7, #0
10002152:	465f      	mov	r7, fp
10002154:	46d3      	mov	fp, sl
10002156:	4682      	mov	sl, r0
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
10002158:	1c25      	adds	r5, r4, #0
1000215a:	6831      	ldr	r1, [r6, #0]
1000215c:	cd01      	ldmia	r5!, {r0}
1000215e:	f001 f887 	bl	10003270 <__aeabi_fmul>
10002162:	1c01      	adds	r1, r0, #0
10002164:	4650      	mov	r0, sl
10002166:	f000 fcbb 	bl	10002ae0 <__aeabi_fadd>
          pIn2 += numColsB;
1000216a:	19f6      	adds	r6, r6, r7
        colCnt = numColsA;

        while(colCnt > 0u)
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
1000216c:	4682      	mov	sl, r0
1000216e:	6831      	ldr	r1, [r6, #0]
10002170:	6860      	ldr	r0, [r4, #4]
10002172:	f001 f87d 	bl	10003270 <__aeabi_fmul>
10002176:	1c01      	adds	r1, r0, #0
10002178:	4650      	mov	r0, sl
1000217a:	f000 fcb1 	bl	10002ae0 <__aeabi_fadd>
1000217e:	1d2c      	adds	r4, r5, #4
10002180:	4682      	mov	sl, r0
          pIn2 += numColsB;
10002182:	19f6      	adds	r6, r6, r7
        pIn1 = pInA;

        /* Matrix A columns number of MAC operations are to be performed */
        colCnt = numColsA;

        while(colCnt > 0u)
10002184:	4544      	cmp	r4, r8
10002186:	d1e7      	bne.n	10002158 <arm_mat_mult_f32+0xbc>
10002188:	46da      	mov	sl, fp
1000218a:	46bb      	mov	fp, r7
1000218c:	1c07      	adds	r7, r0, #0

        /* Store the result in the destination buffer */
        *px++ = sum;

        /* Decrement the column loop counter */
        col--;
1000218e:	464a      	mov	r2, r9
          /* Decrement the loop counter */
          colCnt--;
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
10002190:	9b01      	ldr	r3, [sp, #4]

        /* Decrement the column loop counter */
        col--;
10002192:	3a01      	subs	r2, #1

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        pIn2 = pInB + (numColsB - col);
10002194:	9802      	ldr	r0, [sp, #8]

        /* Store the result in the destination buffer */
        *px++ = sum;

        /* Decrement the column loop counter */
        col--;
10002196:	b294      	uxth	r4, r2
          /* Decrement the loop counter */
          colCnt--;
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
10002198:	c380      	stmia	r3!, {r7}

        /* Decrement the column loop counter */
        col--;

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        pIn2 = pInB + (numColsB - col);
1000219a:	9e03      	ldr	r6, [sp, #12]
1000219c:	1b07      	subs	r7, r0, r4
1000219e:	00bd      	lsls	r5, r7, #2
          /* Decrement the loop counter */
          colCnt--;
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
100021a0:	9301      	str	r3, [sp, #4]

        /* Decrement the column loop counter */
        col--;
100021a2:	46a1      	mov	r9, r4

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        pIn2 = pInB + (numColsB - col);
100021a4:	1976      	adds	r6, r6, r5

      } while(col > 0u);
100021a6:	2c00      	cmp	r4, #0
100021a8:	d1ae      	bne.n	10002108 <arm_mat_mult_f32+0x6c>

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
100021aa:	9905      	ldr	r1, [sp, #20]
      pInA = pInA + numColsA;
100021ac:	9c08      	ldr	r4, [sp, #32]
      } while(col > 0u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
100021ae:	180b      	adds	r3, r1, r0
      pInA = pInA + numColsA;

      /* Decrement the row loop counter */
      row--;
100021b0:	9806      	ldr	r0, [sp, #24]
      } while(col > 0u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
100021b2:	b29a      	uxth	r2, r3
      pInA = pInA + numColsA;

      /* Decrement the row loop counter */
      row--;
100021b4:	3801      	subs	r0, #1
100021b6:	b287      	uxth	r7, r0
      } while(col > 0u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
100021b8:	9205      	str	r2, [sp, #20]
      pInA = pInA + numColsA;
100021ba:	44a2      	add	sl, r4

      /* Decrement the row loop counter */
      row--;
100021bc:	9706      	str	r7, [sp, #24]

    } while(row > 0u);
100021be:	2f00      	cmp	r7, #0
100021c0:	d197      	bne.n	100020f2 <arm_mat_mult_f32+0x56>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
100021c2:	2500      	movs	r5, #0
  }

  /* Return to application */
  return (status);
100021c4:	b268      	sxtb	r0, r5
}
100021c6:	b00b      	add	sp, #44	; 0x2c
100021c8:	bc3c      	pop	{r2, r3, r4, r5}
100021ca:	4690      	mov	r8, r2
100021cc:	4699      	mov	r9, r3
100021ce:	46a2      	mov	sl, r4
100021d0:	46ab      	mov	fp, r5
100021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
100021d4:	2700      	movs	r7, #0
100021d6:	e7da      	b.n	1000218e <arm_mat_mult_f32+0xf2>
  if((pSrcA->numCols != pSrcB->numRows) ||
     (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  {

    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
100021d8:	25fd      	movs	r5, #253	; 0xfd
100021da:	e7f3      	b.n	100021c4 <arm_mat_mult_f32+0x128>

100021dc <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
100021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100021de:	464f      	mov	r7, r9
100021e0:	4646      	mov	r6, r8
100021e2:	b4c0      	push	{r6, r7}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
100021e4:	6843      	ldr	r3, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
100021e6:	8807      	ldrh	r7, [r0, #0]
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
100021e8:	684a      	ldr	r2, [r1, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
100021ea:	8840      	ldrh	r0, [r0, #2]


#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if((pSrc->numRows != pDst->numCols) || (pSrc->numCols != pDst->numRows))
100021ec:	884c      	ldrh	r4, [r1, #2]
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
100021ee:	4690      	mov	r8, r2
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
100021f0:	46b9      	mov	r9, r7
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
100021f2:	4684      	mov	ip, r0


#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if((pSrc->numRows != pDst->numCols) || (pSrc->numCols != pDst->numRows))
100021f4:	42bc      	cmp	r4, r7
100021f6:	d132      	bne.n	1000225e <arm_mat_trans_f32+0x82>
100021f8:	8809      	ldrh	r1, [r1, #0]
100021fa:	4281      	cmp	r1, r0
100021fc:	d12f      	bne.n	1000225e <arm_mat_trans_f32+0x82>
  * @return 	The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>    
  * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.    
  */


arm_status arm_mat_trans_f32(
100021fe:	4666      	mov	r6, ip
10002200:	3e01      	subs	r6, #1
10002202:	b2b5      	uxth	r5, r6
10002204:	3501      	adds	r5, #1
10002206:	00ae      	lsls	r6, r5, #2
10002208:	00b8      	lsls	r0, r7, #2
1000220a:	2500      	movs	r5, #0
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
1000220c:	00a9      	lsls	r1, r5, #2

      /* Initialize column loop counter */
      col = nColumns;

      while(col > 0u)
1000220e:	4662      	mov	r2, ip
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
10002210:	4441      	add	r1, r8

      /* Initialize column loop counter */
      col = nColumns;

      while(col > 0u)
10002212:	2a00      	cmp	r2, #0
10002214:	d019      	beq.n	1000224a <arm_mat_trans_f32+0x6e>
10002216:	1f37      	subs	r7, r6, #4
10002218:	077a      	lsls	r2, r7, #29
1000221a:	199c      	adds	r4, r3, r6
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
1000221c:	cb80      	ldmia	r3!, {r7}
1000221e:	0fd2      	lsrs	r2, r2, #31
10002220:	600f      	str	r7, [r1, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
10002222:	1809      	adds	r1, r1, r0
      px = pOut + i;

      /* Initialize column loop counter */
      col = nColumns;

      while(col > 0u)
10002224:	42a3      	cmp	r3, r4
10002226:	d010      	beq.n	1000224a <arm_mat_trans_f32+0x6e>
10002228:	2a00      	cmp	r2, #0
1000222a:	d004      	beq.n	10002236 <arm_mat_trans_f32+0x5a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
1000222c:	cb04      	ldmia	r3!, {r2}
1000222e:	600a      	str	r2, [r1, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
10002230:	1809      	adds	r1, r1, r0
      px = pOut + i;

      /* Initialize column loop counter */
      col = nColumns;

      while(col > 0u)
10002232:	42a3      	cmp	r3, r4
10002234:	d009      	beq.n	1000224a <arm_mat_trans_f32+0x6e>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
10002236:	1c1a      	adds	r2, r3, #0
10002238:	ca80      	ldmia	r2!, {r7}
1000223a:	600f      	str	r7, [r1, #0]
1000223c:	685b      	ldr	r3, [r3, #4]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
1000223e:	1809      	adds	r1, r1, r0
      col = nColumns;

      while(col > 0u)
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
10002240:	600b      	str	r3, [r1, #0]
10002242:	1d13      	adds	r3, r2, #4

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
10002244:	1809      	adds	r1, r1, r0
      px = pOut + i;

      /* Initialize column loop counter */
      col = nColumns;

      while(col > 0u)
10002246:	42a3      	cmp	r3, r4
10002248:	d1f5      	bne.n	10002236 <arm_mat_trans_f32+0x5a>
        col--;
      }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

      i++;
1000224a:	3501      	adds	r5, #1
1000224c:	b2ad      	uxth	r5, r5

      /* Decrement the row loop counter */
      row--;

    } while(row > 0u);          /* row loop end  */
1000224e:	454d      	cmp	r5, r9
10002250:	d1dc      	bne.n	1000220c <arm_mat_trans_f32+0x30>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
10002252:	2400      	movs	r4, #0
  }

  /* Return to application */
  return (status);
10002254:	b260      	sxtb	r0, r4
}
10002256:	bc0c      	pop	{r2, r3}
10002258:	4690      	mov	r8, r2
1000225a:	4699      	mov	r9, r3
1000225c:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* Check for matrix mismatch condition */
  if((pSrc->numRows != pDst->numCols) || (pSrc->numCols != pDst->numRows))
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
1000225e:	24fd      	movs	r4, #253	; 0xfd
10002260:	e7f8      	b.n	10002254 <arm_mat_trans_f32+0x78>
10002262:	46c0      	nop			; (mov r8, r8)
10002264:	0000      	movs	r0, r0
	...

10002268 <log10>:
10002268:	b5f0      	push	{r4, r5, r6, r7, lr}
1000226a:	4647      	mov	r7, r8
1000226c:	b480      	push	{r7}
1000226e:	b08a      	sub	sp, #40	; 0x28
10002270:	1c04      	adds	r4, r0, #0
10002272:	1c0d      	adds	r5, r1, #0
10002274:	f000 f87c 	bl	10002370 <__ieee754_log10>
10002278:	4a39      	ldr	r2, [pc, #228]	; (10002360 <log10+0xf8>)
1000227a:	2300      	movs	r3, #0
1000227c:	1c06      	adds	r6, r0, #0
1000227e:	56d0      	ldrsb	r0, [r2, r3]
10002280:	1c0f      	adds	r7, r1, #0
10002282:	4690      	mov	r8, r2
10002284:	1c43      	adds	r3, r0, #1
10002286:	d00d      	beq.n	100022a4 <log10+0x3c>
10002288:	1c20      	adds	r0, r4, #0
1000228a:	1c29      	adds	r1, r5, #0
1000228c:	f000 f910 	bl	100024b0 <__fpclassifyd>
10002290:	2800      	cmp	r0, #0
10002292:	d007      	beq.n	100022a4 <log10+0x3c>
10002294:	1c20      	adds	r0, r4, #0
10002296:	1c29      	adds	r1, r5, #0
10002298:	4b2c      	ldr	r3, [pc, #176]	; (1000234c <log10+0xe4>)
1000229a:	4a2b      	ldr	r2, [pc, #172]	; (10002348 <log10+0xe0>)
1000229c:	f000 fbc8 	bl	10002a30 <__aeabi_dcmple>
100022a0:	2800      	cmp	r0, #0
100022a2:	d105      	bne.n	100022b0 <log10+0x48>
100022a4:	1c30      	adds	r0, r6, #0
100022a6:	1c39      	adds	r1, r7, #0
100022a8:	b00a      	add	sp, #40	; 0x28
100022aa:	bc04      	pop	{r2}
100022ac:	4690      	mov	r8, r2
100022ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022b0:	2600      	movs	r6, #0
100022b2:	4647      	mov	r7, r8
100022b4:	492b      	ldr	r1, [pc, #172]	; (10002364 <log10+0xfc>)
100022b6:	9608      	str	r6, [sp, #32]
100022b8:	783e      	ldrb	r6, [r7, #0]
100022ba:	9101      	str	r1, [sp, #4]
100022bc:	9402      	str	r4, [sp, #8]
100022be:	9503      	str	r5, [sp, #12]
100022c0:	9404      	str	r4, [sp, #16]
100022c2:	9505      	str	r5, [sp, #20]
100022c4:	2e00      	cmp	r6, #0
100022c6:	d129      	bne.n	1000231c <log10+0xb4>
100022c8:	4821      	ldr	r0, [pc, #132]	; (10002350 <log10+0xe8>)
100022ca:	4922      	ldr	r1, [pc, #136]	; (10002354 <log10+0xec>)
100022cc:	9006      	str	r0, [sp, #24]
100022ce:	9107      	str	r1, [sp, #28]
100022d0:	1c20      	adds	r0, r4, #0
100022d2:	1c29      	adds	r1, r5, #0
100022d4:	4b1d      	ldr	r3, [pc, #116]	; (1000234c <log10+0xe4>)
100022d6:	4a1c      	ldr	r2, [pc, #112]	; (10002348 <log10+0xe0>)
100022d8:	f000 fb9a 	bl	10002a10 <__aeabi_dcmpeq>
100022dc:	2800      	cmp	r0, #0
100022de:	d00e      	beq.n	100022fe <log10+0x96>
100022e0:	2302      	movs	r3, #2
100022e2:	9300      	str	r3, [sp, #0]
100022e4:	2e02      	cmp	r6, #2
100022e6:	d023      	beq.n	10002330 <log10+0xc8>
100022e8:	4668      	mov	r0, sp
100022ea:	f000 f919 	bl	10002520 <matherr>
100022ee:	2800      	cmp	r0, #0
100022f0:	d01e      	beq.n	10002330 <log10+0xc8>
100022f2:	9f08      	ldr	r7, [sp, #32]
100022f4:	2f00      	cmp	r7, #0
100022f6:	d120      	bne.n	1000233a <log10+0xd2>
100022f8:	9e06      	ldr	r6, [sp, #24]
100022fa:	9f07      	ldr	r7, [sp, #28]
100022fc:	e7d2      	b.n	100022a4 <log10+0x3c>
100022fe:	2401      	movs	r4, #1
10002300:	9400      	str	r4, [sp, #0]
10002302:	2e02      	cmp	r6, #2
10002304:	d00f      	beq.n	10002326 <log10+0xbe>
10002306:	4668      	mov	r0, sp
10002308:	f000 f90a 	bl	10002520 <matherr>
1000230c:	2800      	cmp	r0, #0
1000230e:	d00a      	beq.n	10002326 <log10+0xbe>
10002310:	4815      	ldr	r0, [pc, #84]	; (10002368 <log10+0x100>)
10002312:	f000 f909 	bl	10002528 <nan>
10002316:	9006      	str	r0, [sp, #24]
10002318:	9107      	str	r1, [sp, #28]
1000231a:	e7ea      	b.n	100022f2 <log10+0x8a>
1000231c:	4a0e      	ldr	r2, [pc, #56]	; (10002358 <log10+0xf0>)
1000231e:	4b0f      	ldr	r3, [pc, #60]	; (1000235c <log10+0xf4>)
10002320:	9206      	str	r2, [sp, #24]
10002322:	9307      	str	r3, [sp, #28]
10002324:	e7d4      	b.n	100022d0 <log10+0x68>
10002326:	f003 fa41 	bl	100057ac <__errno>
1000232a:	2521      	movs	r5, #33	; 0x21
1000232c:	6005      	str	r5, [r0, #0]
1000232e:	e7ef      	b.n	10002310 <log10+0xa8>
10002330:	f003 fa3c 	bl	100057ac <__errno>
10002334:	2122      	movs	r1, #34	; 0x22
10002336:	6001      	str	r1, [r0, #0]
10002338:	e7db      	b.n	100022f2 <log10+0x8a>
1000233a:	f003 fa37 	bl	100057ac <__errno>
1000233e:	9e08      	ldr	r6, [sp, #32]
10002340:	6006      	str	r6, [r0, #0]
10002342:	e7d9      	b.n	100022f8 <log10+0x90>
10002344:	46c0      	nop			; (mov r8, r8)
10002346:	46c0      	nop			; (mov r8, r8)
	...
10002350:	e0000000 	.word	0xe0000000
10002354:	c7efffff 	.word	0xc7efffff
10002358:	00000000 	.word	0x00000000
1000235c:	fff00000 	.word	0xfff00000
10002360:	20000a30 	.word	0x20000a30
10002364:	10005828 	.word	0x10005828
10002368:	10005830 	.word	0x10005830
1000236c:	46c0      	nop			; (mov r8, r8)
1000236e:	46c0      	nop			; (mov r8, r8)

10002370 <__ieee754_log10>:
10002370:	b5f0      	push	{r4, r5, r6, r7, lr}
10002372:	464f      	mov	r7, r9
10002374:	4646      	mov	r6, r8
10002376:	b4c0      	push	{r6, r7}
10002378:	1c04      	adds	r4, r0, #0
1000237a:	1c02      	adds	r2, r0, #0
1000237c:	4848      	ldr	r0, [pc, #288]	; (100024a0 <__ieee754_log10+0x130>)
1000237e:	b083      	sub	sp, #12
10002380:	1c0d      	adds	r5, r1, #0
10002382:	1e0b      	subs	r3, r1, #0
10002384:	4283      	cmp	r3, r0
10002386:	dc1e      	bgt.n	100023c6 <__ieee754_log10+0x56>
10002388:	004b      	lsls	r3, r1, #1
1000238a:	085e      	lsrs	r6, r3, #1
1000238c:	4332      	orrs	r2, r6
1000238e:	d05b      	beq.n	10002448 <__ieee754_log10+0xd8>
10002390:	1c20      	adds	r0, r4, #0
10002392:	2900      	cmp	r1, #0
10002394:	db5f      	blt.n	10002456 <__ieee754_log10+0xe6>
10002396:	4b37      	ldr	r3, [pc, #220]	; (10002474 <__ieee754_log10+0x104>)
10002398:	4a35      	ldr	r2, [pc, #212]	; (10002470 <__ieee754_log10+0x100>)
1000239a:	1c29      	adds	r1, r5, #0
1000239c:	f002 fa90 	bl	100048c0 <__aeabi_dmul>
100023a0:	4a40      	ldr	r2, [pc, #256]	; (100024a4 <__ieee754_log10+0x134>)
100023a2:	2736      	movs	r7, #54	; 0x36
100023a4:	1c0d      	adds	r5, r1, #0
100023a6:	1c0b      	adds	r3, r1, #0
100023a8:	1c04      	adds	r4, r0, #0
100023aa:	4279      	negs	r1, r7
100023ac:	4293      	cmp	r3, r2
100023ae:	dd0e      	ble.n	100023ce <__ieee754_log10+0x5e>
100023b0:	1c20      	adds	r0, r4, #0
100023b2:	1c29      	adds	r1, r5, #0
100023b4:	1c22      	adds	r2, r4, #0
100023b6:	1c2b      	adds	r3, r5, #0
100023b8:	f001 fad8 	bl	1000396c <__aeabi_dadd>
100023bc:	b003      	add	sp, #12
100023be:	bc0c      	pop	{r2, r3}
100023c0:	4690      	mov	r8, r2
100023c2:	4699      	mov	r9, r3
100023c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100023c6:	4a37      	ldr	r2, [pc, #220]	; (100024a4 <__ieee754_log10+0x134>)
100023c8:	2100      	movs	r1, #0
100023ca:	4293      	cmp	r3, r2
100023cc:	dcf0      	bgt.n	100023b0 <__ieee754_log10+0x40>
100023ce:	4836      	ldr	r0, [pc, #216]	; (100024a8 <__ieee754_log10+0x138>)
100023d0:	151a      	asrs	r2, r3, #20
100023d2:	1812      	adds	r2, r2, r0
100023d4:	1851      	adds	r1, r2, r1
100023d6:	0fca      	lsrs	r2, r1, #31
100023d8:	031b      	lsls	r3, r3, #12
100023da:	0b1b      	lsrs	r3, r3, #12
100023dc:	1888      	adds	r0, r1, r2
100023de:	4690      	mov	r8, r2
100023e0:	4699      	mov	r9, r3
100023e2:	f003 f895 	bl	10005510 <__aeabi_i2d>
100023e6:	4b31      	ldr	r3, [pc, #196]	; (100024ac <__ieee754_log10+0x13c>)
100023e8:	1c06      	adds	r6, r0, #0
100023ea:	4640      	mov	r0, r8
100023ec:	1a1b      	subs	r3, r3, r0
100023ee:	051b      	lsls	r3, r3, #20
100023f0:	464d      	mov	r5, r9
100023f2:	431d      	orrs	r5, r3
100023f4:	1c0f      	adds	r7, r1, #0
100023f6:	1c20      	adds	r0, r4, #0
100023f8:	1c29      	adds	r1, r5, #0
100023fa:	f000 f89d 	bl	10002538 <__ieee754_log>
100023fe:	4a1e      	ldr	r2, [pc, #120]	; (10002478 <__ieee754_log10+0x108>)
10002400:	4b1e      	ldr	r3, [pc, #120]	; (1000247c <__ieee754_log10+0x10c>)
10002402:	1c04      	adds	r4, r0, #0
10002404:	1c0d      	adds	r5, r1, #0
10002406:	1c30      	adds	r0, r6, #0
10002408:	1c39      	adds	r1, r7, #0
1000240a:	f002 fa59 	bl	100048c0 <__aeabi_dmul>
1000240e:	4a1c      	ldr	r2, [pc, #112]	; (10002480 <__ieee754_log10+0x110>)
10002410:	4b1c      	ldr	r3, [pc, #112]	; (10002484 <__ieee754_log10+0x114>)
10002412:	9000      	str	r0, [sp, #0]
10002414:	9101      	str	r1, [sp, #4]
10002416:	1c30      	adds	r0, r6, #0
10002418:	1c39      	adds	r1, r7, #0
1000241a:	f002 fa51 	bl	100048c0 <__aeabi_dmul>
1000241e:	4a1a      	ldr	r2, [pc, #104]	; (10002488 <__ieee754_log10+0x118>)
10002420:	4b1a      	ldr	r3, [pc, #104]	; (1000248c <__ieee754_log10+0x11c>)
10002422:	1c06      	adds	r6, r0, #0
10002424:	1c0f      	adds	r7, r1, #0
10002426:	1c20      	adds	r0, r4, #0
10002428:	1c29      	adds	r1, r5, #0
1000242a:	f002 fa49 	bl	100048c0 <__aeabi_dmul>
1000242e:	1c02      	adds	r2, r0, #0
10002430:	1c0b      	adds	r3, r1, #0
10002432:	1c30      	adds	r0, r6, #0
10002434:	1c39      	adds	r1, r7, #0
10002436:	f001 fa99 	bl	1000396c <__aeabi_dadd>
1000243a:	1c02      	adds	r2, r0, #0
1000243c:	1c0b      	adds	r3, r1, #0
1000243e:	9800      	ldr	r0, [sp, #0]
10002440:	9901      	ldr	r1, [sp, #4]
10002442:	f001 fa93 	bl	1000396c <__aeabi_dadd>
10002446:	e7b9      	b.n	100023bc <__ieee754_log10+0x4c>
10002448:	4a11      	ldr	r2, [pc, #68]	; (10002490 <__ieee754_log10+0x120>)
1000244a:	4b12      	ldr	r3, [pc, #72]	; (10002494 <__ieee754_log10+0x124>)
1000244c:	4812      	ldr	r0, [pc, #72]	; (10002498 <__ieee754_log10+0x128>)
1000244e:	4913      	ldr	r1, [pc, #76]	; (1000249c <__ieee754_log10+0x12c>)
10002450:	f001 fe3c 	bl	100040cc <__aeabi_ddiv>
10002454:	e7b2      	b.n	100023bc <__ieee754_log10+0x4c>
10002456:	1c22      	adds	r2, r4, #0
10002458:	1c2b      	adds	r3, r5, #0
1000245a:	1c29      	adds	r1, r5, #0
1000245c:	f002 fca2 	bl	10004da4 <__aeabi_dsub>
10002460:	4a0b      	ldr	r2, [pc, #44]	; (10002490 <__ieee754_log10+0x120>)
10002462:	4b0c      	ldr	r3, [pc, #48]	; (10002494 <__ieee754_log10+0x124>)
10002464:	f001 fe32 	bl	100040cc <__aeabi_ddiv>
10002468:	e7a8      	b.n	100023bc <__ieee754_log10+0x4c>
1000246a:	46c0      	nop			; (mov r8, r8)
1000246c:	46c0      	nop			; (mov r8, r8)
1000246e:	46c0      	nop			; (mov r8, r8)
10002470:	00000000 	.word	0x00000000
10002474:	43500000 	.word	0x43500000
10002478:	509f6000 	.word	0x509f6000
1000247c:	3fd34413 	.word	0x3fd34413
10002480:	11f12b36 	.word	0x11f12b36
10002484:	3d59fef3 	.word	0x3d59fef3
10002488:	1526e50e 	.word	0x1526e50e
1000248c:	3fdbcb7b 	.word	0x3fdbcb7b
	...
1000249c:	c3500000 	.word	0xc3500000
100024a0:	000fffff 	.word	0x000fffff
100024a4:	7fefffff 	.word	0x7fefffff
100024a8:	fffffc01 	.word	0xfffffc01
100024ac:	000003ff 	.word	0x000003ff

100024b0 <__fpclassifyd>:
100024b0:	1c0b      	adds	r3, r1, #0
100024b2:	1c01      	adds	r1, r0, #0
100024b4:	b530      	push	{r4, r5, lr}
100024b6:	4319      	orrs	r1, r3
100024b8:	2202      	movs	r2, #2
100024ba:	2900      	cmp	r1, #0
100024bc:	d101      	bne.n	100024c2 <__fpclassifyd+0x12>
100024be:	1c10      	adds	r0, r2, #0
100024c0:	bd30      	pop	{r4, r5, pc}
100024c2:	2480      	movs	r4, #128	; 0x80
100024c4:	0625      	lsls	r5, r4, #24
100024c6:	42ab      	cmp	r3, r5
100024c8:	d01e      	beq.n	10002508 <__fpclassifyd+0x58>
100024ca:	4a11      	ldr	r2, [pc, #68]	; (10002510 <__fpclassifyd+0x60>)
100024cc:	4911      	ldr	r1, [pc, #68]	; (10002514 <__fpclassifyd+0x64>)
100024ce:	189c      	adds	r4, r3, r2
100024d0:	2204      	movs	r2, #4
100024d2:	428c      	cmp	r4, r1
100024d4:	d9f3      	bls.n	100024be <__fpclassifyd+0xe>
100024d6:	4d10      	ldr	r5, [pc, #64]	; (10002518 <__fpclassifyd+0x68>)
100024d8:	195c      	adds	r4, r3, r5
100024da:	428c      	cmp	r4, r1
100024dc:	d9ef      	bls.n	100024be <__fpclassifyd+0xe>
100024de:	490f      	ldr	r1, [pc, #60]	; (1000251c <__fpclassifyd+0x6c>)
100024e0:	2203      	movs	r2, #3
100024e2:	428b      	cmp	r3, r1
100024e4:	d9eb      	bls.n	100024be <__fpclassifyd+0xe>
100024e6:	2280      	movs	r2, #128	; 0x80
100024e8:	0615      	lsls	r5, r2, #24
100024ea:	490c      	ldr	r1, [pc, #48]	; (1000251c <__fpclassifyd+0x6c>)
100024ec:	195c      	adds	r4, r3, r5
100024ee:	2203      	movs	r2, #3
100024f0:	428c      	cmp	r4, r1
100024f2:	d9e4      	bls.n	100024be <__fpclassifyd+0xe>
100024f4:	4a08      	ldr	r2, [pc, #32]	; (10002518 <__fpclassifyd+0x68>)
100024f6:	4293      	cmp	r3, r2
100024f8:	d003      	beq.n	10002502 <__fpclassifyd+0x52>
100024fa:	4d05      	ldr	r5, [pc, #20]	; (10002510 <__fpclassifyd+0x60>)
100024fc:	2200      	movs	r2, #0
100024fe:	42ab      	cmp	r3, r5
10002500:	d1dd      	bne.n	100024be <__fpclassifyd+0xe>
10002502:	4242      	negs	r2, r0
10002504:	4142      	adcs	r2, r0
10002506:	e7da      	b.n	100024be <__fpclassifyd+0xe>
10002508:	2800      	cmp	r0, #0
1000250a:	d0d8      	beq.n	100024be <__fpclassifyd+0xe>
1000250c:	e7eb      	b.n	100024e6 <__fpclassifyd+0x36>
1000250e:	46c0      	nop			; (mov r8, r8)
10002510:	fff00000 	.word	0xfff00000
10002514:	7fdfffff 	.word	0x7fdfffff
10002518:	7ff00000 	.word	0x7ff00000
1000251c:	000fffff 	.word	0x000fffff

10002520 <matherr>:
10002520:	2000      	movs	r0, #0
10002522:	4770      	bx	lr
10002524:	0000      	movs	r0, r0
	...

10002528 <nan>:
10002528:	4902      	ldr	r1, [pc, #8]	; (10002534 <nan+0xc>)
1000252a:	4801      	ldr	r0, [pc, #4]	; (10002530 <nan+0x8>)
1000252c:	4770      	bx	lr
1000252e:	46c0      	nop			; (mov r8, r8)
10002530:	00000000 	.word	0x00000000
10002534:	7ff80000 	.word	0x7ff80000

10002538 <__ieee754_log>:
10002538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000253a:	464e      	mov	r6, r9
1000253c:	4657      	mov	r7, sl
1000253e:	4645      	mov	r5, r8
10002540:	b4e0      	push	{r5, r6, r7}
10002542:	4ec1      	ldr	r6, [pc, #772]	; (10002848 <__ieee754_log+0x310>)
10002544:	b088      	sub	sp, #32
10002546:	1c02      	adds	r2, r0, #0
10002548:	1c0b      	adds	r3, r1, #0
1000254a:	1c04      	adds	r4, r0, #0
1000254c:	42b3      	cmp	r3, r6
1000254e:	dc58      	bgt.n	10002602 <__ieee754_log+0xca>
10002550:	005d      	lsls	r5, r3, #1
10002552:	0869      	lsrs	r1, r5, #1
10002554:	430c      	orrs	r4, r1
10002556:	d100      	bne.n	1000255a <__ieee754_log+0x22>
10002558:	e0ed      	b.n	10002736 <__ieee754_log+0x1fe>
1000255a:	2b00      	cmp	r3, #0
1000255c:	da00      	bge.n	10002560 <__ieee754_log+0x28>
1000255e:	e1b2      	b.n	100028c6 <__ieee754_log+0x38e>
10002560:	1c10      	adds	r0, r2, #0
10002562:	1c19      	adds	r1, r3, #0
10002564:	4b99      	ldr	r3, [pc, #612]	; (100027cc <__ieee754_log+0x294>)
10002566:	4a98      	ldr	r2, [pc, #608]	; (100027c8 <__ieee754_log+0x290>)
10002568:	f002 f9aa 	bl	100048c0 <__aeabi_dmul>
1000256c:	1c02      	adds	r2, r0, #0
1000256e:	48b7      	ldr	r0, [pc, #732]	; (1000284c <__ieee754_log+0x314>)
10002570:	2436      	movs	r4, #54	; 0x36
10002572:	1c0b      	adds	r3, r1, #0
10002574:	4267      	negs	r7, r4
10002576:	4281      	cmp	r1, r0
10002578:	dc47      	bgt.n	1000260a <__ieee754_log+0xd2>
1000257a:	150b      	asrs	r3, r1, #20
1000257c:	4eb4      	ldr	r6, [pc, #720]	; (10002850 <__ieee754_log+0x318>)
1000257e:	0309      	lsls	r1, r1, #12
10002580:	48b4      	ldr	r0, [pc, #720]	; (10002854 <__ieee754_log+0x31c>)
10002582:	0b0c      	lsrs	r4, r1, #12
10002584:	199d      	adds	r5, r3, r6
10002586:	46a0      	mov	r8, r4
10002588:	1c03      	adds	r3, r0, #0
1000258a:	2680      	movs	r6, #128	; 0x80
1000258c:	19ef      	adds	r7, r5, r7
1000258e:	4443      	add	r3, r8
10002590:	0375      	lsls	r5, r6, #13
10002592:	49b1      	ldr	r1, [pc, #708]	; (10002858 <__ieee754_log+0x320>)
10002594:	401d      	ands	r5, r3
10002596:	4069      	eors	r1, r5
10002598:	1528      	asrs	r0, r5, #20
1000259a:	430c      	orrs	r4, r1
1000259c:	19c7      	adds	r7, r0, r7
1000259e:	1c21      	adds	r1, r4, #0
100025a0:	1c10      	adds	r0, r2, #0
100025a2:	4a8b      	ldr	r2, [pc, #556]	; (100027d0 <__ieee754_log+0x298>)
100025a4:	4b8b      	ldr	r3, [pc, #556]	; (100027d4 <__ieee754_log+0x29c>)
100025a6:	f002 fbfd 	bl	10004da4 <__aeabi_dsub>
100025aa:	4642      	mov	r2, r8
100025ac:	3202      	adds	r2, #2
100025ae:	0313      	lsls	r3, r2, #12
100025b0:	46b9      	mov	r9, r7
100025b2:	1c06      	adds	r6, r0, #0
100025b4:	1c0f      	adds	r7, r1, #0
100025b6:	0b1d      	lsrs	r5, r3, #12
100025b8:	2d02      	cmp	r5, #2
100025ba:	dc30      	bgt.n	1000261e <__ieee754_log+0xe6>
100025bc:	4a86      	ldr	r2, [pc, #536]	; (100027d8 <__ieee754_log+0x2a0>)
100025be:	4b87      	ldr	r3, [pc, #540]	; (100027dc <__ieee754_log+0x2a4>)
100025c0:	f000 fa26 	bl	10002a10 <__aeabi_dcmpeq>
100025c4:	2800      	cmp	r0, #0
100025c6:	d100      	bne.n	100025ca <__ieee754_log+0x92>
100025c8:	e0bc      	b.n	10002744 <__ieee754_log+0x20c>
100025ca:	464e      	mov	r6, r9
100025cc:	2e00      	cmp	r6, #0
100025ce:	d100      	bne.n	100025d2 <__ieee754_log+0x9a>
100025d0:	e182      	b.n	100028d8 <__ieee754_log+0x3a0>
100025d2:	4648      	mov	r0, r9
100025d4:	f002 ff9c 	bl	10005510 <__aeabi_i2d>
100025d8:	4a81      	ldr	r2, [pc, #516]	; (100027e0 <__ieee754_log+0x2a8>)
100025da:	4b82      	ldr	r3, [pc, #520]	; (100027e4 <__ieee754_log+0x2ac>)
100025dc:	1c04      	adds	r4, r0, #0
100025de:	1c0d      	adds	r5, r1, #0
100025e0:	f002 f96e 	bl	100048c0 <__aeabi_dmul>
100025e4:	4a80      	ldr	r2, [pc, #512]	; (100027e8 <__ieee754_log+0x2b0>)
100025e6:	4b81      	ldr	r3, [pc, #516]	; (100027ec <__ieee754_log+0x2b4>)
100025e8:	1c06      	adds	r6, r0, #0
100025ea:	1c0f      	adds	r7, r1, #0
100025ec:	1c20      	adds	r0, r4, #0
100025ee:	1c29      	adds	r1, r5, #0
100025f0:	f002 f966 	bl	100048c0 <__aeabi_dmul>
100025f4:	1c02      	adds	r2, r0, #0
100025f6:	1c0b      	adds	r3, r1, #0
100025f8:	1c30      	adds	r0, r6, #0
100025fa:	1c39      	adds	r1, r7, #0
100025fc:	f001 f9b6 	bl	1000396c <__aeabi_dadd>
10002600:	e007      	b.n	10002612 <__ieee754_log+0xda>
10002602:	4892      	ldr	r0, [pc, #584]	; (1000284c <__ieee754_log+0x314>)
10002604:	2700      	movs	r7, #0
10002606:	4281      	cmp	r1, r0
10002608:	ddb7      	ble.n	1000257a <__ieee754_log+0x42>
1000260a:	1c10      	adds	r0, r2, #0
1000260c:	1c19      	adds	r1, r3, #0
1000260e:	f001 f9ad 	bl	1000396c <__aeabi_dadd>
10002612:	b008      	add	sp, #32
10002614:	bc1c      	pop	{r2, r3, r4}
10002616:	4690      	mov	r8, r2
10002618:	4699      	mov	r9, r3
1000261a:	46a2      	mov	sl, r4
1000261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000261e:	4a74      	ldr	r2, [pc, #464]	; (100027f0 <__ieee754_log+0x2b8>)
10002620:	4b74      	ldr	r3, [pc, #464]	; (100027f4 <__ieee754_log+0x2bc>)
10002622:	f001 f9a3 	bl	1000396c <__aeabi_dadd>
10002626:	1c02      	adds	r2, r0, #0
10002628:	1c0b      	adds	r3, r1, #0
1000262a:	1c30      	adds	r0, r6, #0
1000262c:	1c39      	adds	r1, r7, #0
1000262e:	f001 fd4d 	bl	100040cc <__aeabi_ddiv>
10002632:	9002      	str	r0, [sp, #8]
10002634:	9103      	str	r1, [sp, #12]
10002636:	4648      	mov	r0, r9
10002638:	f002 ff6a 	bl	10005510 <__aeabi_i2d>
1000263c:	9004      	str	r0, [sp, #16]
1000263e:	9105      	str	r1, [sp, #20]
10002640:	9802      	ldr	r0, [sp, #8]
10002642:	9903      	ldr	r1, [sp, #12]
10002644:	1c02      	adds	r2, r0, #0
10002646:	1c0b      	adds	r3, r1, #0
10002648:	f002 f93a 	bl	100048c0 <__aeabi_dmul>
1000264c:	1c02      	adds	r2, r0, #0
1000264e:	1c0b      	adds	r3, r1, #0
10002650:	9000      	str	r0, [sp, #0]
10002652:	9101      	str	r1, [sp, #4]
10002654:	f002 f934 	bl	100048c0 <__aeabi_dmul>
10002658:	4a67      	ldr	r2, [pc, #412]	; (100027f8 <__ieee754_log+0x2c0>)
1000265a:	4b68      	ldr	r3, [pc, #416]	; (100027fc <__ieee754_log+0x2c4>)
1000265c:	4c7f      	ldr	r4, [pc, #508]	; (1000285c <__ieee754_log+0x324>)
1000265e:	1c0d      	adds	r5, r1, #0
10002660:	46a2      	mov	sl, r4
10002662:	1c04      	adds	r4, r0, #0
10002664:	f002 f92c 	bl	100048c0 <__aeabi_dmul>
10002668:	4a65      	ldr	r2, [pc, #404]	; (10002800 <__ieee754_log+0x2c8>)
1000266a:	4b66      	ldr	r3, [pc, #408]	; (10002804 <__ieee754_log+0x2cc>)
1000266c:	f001 f97e 	bl	1000396c <__aeabi_dadd>
10002670:	1c22      	adds	r2, r4, #0
10002672:	1c2b      	adds	r3, r5, #0
10002674:	f002 f924 	bl	100048c0 <__aeabi_dmul>
10002678:	4a63      	ldr	r2, [pc, #396]	; (10002808 <__ieee754_log+0x2d0>)
1000267a:	4b64      	ldr	r3, [pc, #400]	; (1000280c <__ieee754_log+0x2d4>)
1000267c:	f001 f976 	bl	1000396c <__aeabi_dadd>
10002680:	1c22      	adds	r2, r4, #0
10002682:	1c2b      	adds	r3, r5, #0
10002684:	f002 f91c 	bl	100048c0 <__aeabi_dmul>
10002688:	4a61      	ldr	r2, [pc, #388]	; (10002810 <__ieee754_log+0x2d8>)
1000268a:	4b62      	ldr	r3, [pc, #392]	; (10002814 <__ieee754_log+0x2dc>)
1000268c:	f001 f96e 	bl	1000396c <__aeabi_dadd>
10002690:	9a00      	ldr	r2, [sp, #0]
10002692:	9b01      	ldr	r3, [sp, #4]
10002694:	f002 f914 	bl	100048c0 <__aeabi_dmul>
10002698:	4a5f      	ldr	r2, [pc, #380]	; (10002818 <__ieee754_log+0x2e0>)
1000269a:	4b60      	ldr	r3, [pc, #384]	; (1000281c <__ieee754_log+0x2e4>)
1000269c:	9000      	str	r0, [sp, #0]
1000269e:	9101      	str	r1, [sp, #4]
100026a0:	1c20      	adds	r0, r4, #0
100026a2:	1c29      	adds	r1, r5, #0
100026a4:	f002 f90c 	bl	100048c0 <__aeabi_dmul>
100026a8:	4a5d      	ldr	r2, [pc, #372]	; (10002820 <__ieee754_log+0x2e8>)
100026aa:	4b5e      	ldr	r3, [pc, #376]	; (10002824 <__ieee754_log+0x2ec>)
100026ac:	f001 f95e 	bl	1000396c <__aeabi_dadd>
100026b0:	1c22      	adds	r2, r4, #0
100026b2:	1c2b      	adds	r3, r5, #0
100026b4:	f002 f904 	bl	100048c0 <__aeabi_dmul>
100026b8:	4a5b      	ldr	r2, [pc, #364]	; (10002828 <__ieee754_log+0x2f0>)
100026ba:	4b5c      	ldr	r3, [pc, #368]	; (1000282c <__ieee754_log+0x2f4>)
100026bc:	f001 f956 	bl	1000396c <__aeabi_dadd>
100026c0:	1c22      	adds	r2, r4, #0
100026c2:	1c2b      	adds	r3, r5, #0
100026c4:	f002 f8fc 	bl	100048c0 <__aeabi_dmul>
100026c8:	1c02      	adds	r2, r0, #0
100026ca:	1c0b      	adds	r3, r1, #0
100026cc:	9800      	ldr	r0, [sp, #0]
100026ce:	9901      	ldr	r1, [sp, #4]
100026d0:	f001 f94c 	bl	1000396c <__aeabi_dadd>
100026d4:	1c0d      	adds	r5, r1, #0
100026d6:	4962      	ldr	r1, [pc, #392]	; (10002860 <__ieee754_log+0x328>)
100026d8:	44c2      	add	sl, r8
100026da:	1c04      	adds	r4, r0, #0
100026dc:	4640      	mov	r0, r8
100026de:	1a0a      	subs	r2, r1, r0
100026e0:	4653      	mov	r3, sl
100026e2:	431a      	orrs	r2, r3
100026e4:	2a00      	cmp	r2, #0
100026e6:	dd54      	ble.n	10002792 <__ieee754_log+0x25a>
100026e8:	4a51      	ldr	r2, [pc, #324]	; (10002830 <__ieee754_log+0x2f8>)
100026ea:	4b52      	ldr	r3, [pc, #328]	; (10002834 <__ieee754_log+0x2fc>)
100026ec:	1c30      	adds	r0, r6, #0
100026ee:	1c39      	adds	r1, r7, #0
100026f0:	f002 f8e6 	bl	100048c0 <__aeabi_dmul>
100026f4:	1c32      	adds	r2, r6, #0
100026f6:	1c3b      	adds	r3, r7, #0
100026f8:	f002 f8e2 	bl	100048c0 <__aeabi_dmul>
100026fc:	9000      	str	r0, [sp, #0]
100026fe:	9101      	str	r1, [sp, #4]
10002700:	4648      	mov	r0, r9
10002702:	2800      	cmp	r0, #0
10002704:	d000      	beq.n	10002708 <__ieee754_log+0x1d0>
10002706:	e0ad      	b.n	10002864 <__ieee754_log+0x32c>
10002708:	1c22      	adds	r2, r4, #0
1000270a:	1c2b      	adds	r3, r5, #0
1000270c:	9800      	ldr	r0, [sp, #0]
1000270e:	9901      	ldr	r1, [sp, #4]
10002710:	f001 f92c 	bl	1000396c <__aeabi_dadd>
10002714:	9a02      	ldr	r2, [sp, #8]
10002716:	9b03      	ldr	r3, [sp, #12]
10002718:	f002 f8d2 	bl	100048c0 <__aeabi_dmul>
1000271c:	1c02      	adds	r2, r0, #0
1000271e:	1c0b      	adds	r3, r1, #0
10002720:	9800      	ldr	r0, [sp, #0]
10002722:	9901      	ldr	r1, [sp, #4]
10002724:	f002 fb3e 	bl	10004da4 <__aeabi_dsub>
10002728:	1c02      	adds	r2, r0, #0
1000272a:	1c0b      	adds	r3, r1, #0
1000272c:	1c30      	adds	r0, r6, #0
1000272e:	1c39      	adds	r1, r7, #0
10002730:	f002 fb38 	bl	10004da4 <__aeabi_dsub>
10002734:	e76d      	b.n	10002612 <__ieee754_log+0xda>
10002736:	4a28      	ldr	r2, [pc, #160]	; (100027d8 <__ieee754_log+0x2a0>)
10002738:	4b28      	ldr	r3, [pc, #160]	; (100027dc <__ieee754_log+0x2a4>)
1000273a:	483f      	ldr	r0, [pc, #252]	; (10002838 <__ieee754_log+0x300>)
1000273c:	493f      	ldr	r1, [pc, #252]	; (1000283c <__ieee754_log+0x304>)
1000273e:	f001 fcc5 	bl	100040cc <__aeabi_ddiv>
10002742:	e766      	b.n	10002612 <__ieee754_log+0xda>
10002744:	1c32      	adds	r2, r6, #0
10002746:	1c3b      	adds	r3, r7, #0
10002748:	1c30      	adds	r0, r6, #0
1000274a:	1c39      	adds	r1, r7, #0
1000274c:	f002 f8b8 	bl	100048c0 <__aeabi_dmul>
10002750:	4a3b      	ldr	r2, [pc, #236]	; (10002840 <__ieee754_log+0x308>)
10002752:	4b3c      	ldr	r3, [pc, #240]	; (10002844 <__ieee754_log+0x30c>)
10002754:	1c04      	adds	r4, r0, #0
10002756:	1c0d      	adds	r5, r1, #0
10002758:	1c30      	adds	r0, r6, #0
1000275a:	1c39      	adds	r1, r7, #0
1000275c:	f002 f8b0 	bl	100048c0 <__aeabi_dmul>
10002760:	1c02      	adds	r2, r0, #0
10002762:	1c0b      	adds	r3, r1, #0
10002764:	4832      	ldr	r0, [pc, #200]	; (10002830 <__ieee754_log+0x2f8>)
10002766:	4933      	ldr	r1, [pc, #204]	; (10002834 <__ieee754_log+0x2fc>)
10002768:	f002 fb1c 	bl	10004da4 <__aeabi_dsub>
1000276c:	1c02      	adds	r2, r0, #0
1000276e:	1c0b      	adds	r3, r1, #0
10002770:	1c20      	adds	r0, r4, #0
10002772:	1c29      	adds	r1, r5, #0
10002774:	f002 f8a4 	bl	100048c0 <__aeabi_dmul>
10002778:	464a      	mov	r2, r9
1000277a:	1c04      	adds	r4, r0, #0
1000277c:	1c0d      	adds	r5, r1, #0
1000277e:	2a00      	cmp	r2, #0
10002780:	d000      	beq.n	10002784 <__ieee754_log+0x24c>
10002782:	e0ac      	b.n	100028de <__ieee754_log+0x3a6>
10002784:	1c30      	adds	r0, r6, #0
10002786:	1c39      	adds	r1, r7, #0
10002788:	1c22      	adds	r2, r4, #0
1000278a:	1c2b      	adds	r3, r5, #0
1000278c:	f002 fb0a 	bl	10004da4 <__aeabi_dsub>
10002790:	e73f      	b.n	10002612 <__ieee754_log+0xda>
10002792:	4649      	mov	r1, r9
10002794:	2900      	cmp	r1, #0
10002796:	d100      	bne.n	1000279a <__ieee754_log+0x262>
10002798:	e0c3      	b.n	10002922 <__ieee754_log+0x3ea>
1000279a:	4a11      	ldr	r2, [pc, #68]	; (100027e0 <__ieee754_log+0x2a8>)
1000279c:	4b11      	ldr	r3, [pc, #68]	; (100027e4 <__ieee754_log+0x2ac>)
1000279e:	9804      	ldr	r0, [sp, #16]
100027a0:	9905      	ldr	r1, [sp, #20]
100027a2:	f002 f88d 	bl	100048c0 <__aeabi_dmul>
100027a6:	1c22      	adds	r2, r4, #0
100027a8:	9000      	str	r0, [sp, #0]
100027aa:	9101      	str	r1, [sp, #4]
100027ac:	1c2b      	adds	r3, r5, #0
100027ae:	1c30      	adds	r0, r6, #0
100027b0:	1c39      	adds	r1, r7, #0
100027b2:	f002 faf7 	bl	10004da4 <__aeabi_dsub>
100027b6:	9a02      	ldr	r2, [sp, #8]
100027b8:	9b03      	ldr	r3, [sp, #12]
100027ba:	f002 f881 	bl	100048c0 <__aeabi_dmul>
100027be:	1c04      	adds	r4, r0, #0
100027c0:	1c0d      	adds	r5, r1, #0
100027c2:	9804      	ldr	r0, [sp, #16]
100027c4:	9905      	ldr	r1, [sp, #20]
100027c6:	e097      	b.n	100028f8 <__ieee754_log+0x3c0>
100027c8:	00000000 	.word	0x00000000
100027cc:	43500000 	.word	0x43500000
100027d0:	00000000 	.word	0x00000000
100027d4:	3ff00000 	.word	0x3ff00000
	...
100027e0:	fee00000 	.word	0xfee00000
100027e4:	3fe62e42 	.word	0x3fe62e42
100027e8:	35793c76 	.word	0x35793c76
100027ec:	3dea39ef 	.word	0x3dea39ef
100027f0:	00000000 	.word	0x00000000
100027f4:	40000000 	.word	0x40000000
100027f8:	df3e5244 	.word	0xdf3e5244
100027fc:	3fc2f112 	.word	0x3fc2f112
10002800:	96cb03de 	.word	0x96cb03de
10002804:	3fc74664 	.word	0x3fc74664
10002808:	94229359 	.word	0x94229359
1000280c:	3fd24924 	.word	0x3fd24924
10002810:	55555593 	.word	0x55555593
10002814:	3fe55555 	.word	0x3fe55555
10002818:	d078c69f 	.word	0xd078c69f
1000281c:	3fc39a09 	.word	0x3fc39a09
10002820:	1d8e78af 	.word	0x1d8e78af
10002824:	3fcc71c5 	.word	0x3fcc71c5
10002828:	9997fa04 	.word	0x9997fa04
1000282c:	3fd99999 	.word	0x3fd99999
10002830:	00000000 	.word	0x00000000
10002834:	3fe00000 	.word	0x3fe00000
10002838:	00000000 	.word	0x00000000
1000283c:	c3500000 	.word	0xc3500000
10002840:	55555555 	.word	0x55555555
10002844:	3fd55555 	.word	0x3fd55555
10002848:	000fffff 	.word	0x000fffff
1000284c:	7fefffff 	.word	0x7fefffff
10002850:	fffffc01 	.word	0xfffffc01
10002854:	00095f64 	.word	0x00095f64
10002858:	3ff00000 	.word	0x3ff00000
1000285c:	fff9eb86 	.word	0xfff9eb86
10002860:	0006b851 	.word	0x0006b851
10002864:	4b35      	ldr	r3, [pc, #212]	; (1000293c <__ieee754_log+0x404>)
10002866:	4a34      	ldr	r2, [pc, #208]	; (10002938 <__ieee754_log+0x400>)
10002868:	9804      	ldr	r0, [sp, #16]
1000286a:	9905      	ldr	r1, [sp, #20]
1000286c:	f002 f828 	bl	100048c0 <__aeabi_dmul>
10002870:	1c22      	adds	r2, r4, #0
10002872:	9006      	str	r0, [sp, #24]
10002874:	9107      	str	r1, [sp, #28]
10002876:	9800      	ldr	r0, [sp, #0]
10002878:	9901      	ldr	r1, [sp, #4]
1000287a:	1c2b      	adds	r3, r5, #0
1000287c:	f001 f876 	bl	1000396c <__aeabi_dadd>
10002880:	9a02      	ldr	r2, [sp, #8]
10002882:	9b03      	ldr	r3, [sp, #12]
10002884:	f002 f81c 	bl	100048c0 <__aeabi_dmul>
10002888:	4a2d      	ldr	r2, [pc, #180]	; (10002940 <__ieee754_log+0x408>)
1000288a:	4b2e      	ldr	r3, [pc, #184]	; (10002944 <__ieee754_log+0x40c>)
1000288c:	1c04      	adds	r4, r0, #0
1000288e:	1c0d      	adds	r5, r1, #0
10002890:	9804      	ldr	r0, [sp, #16]
10002892:	9905      	ldr	r1, [sp, #20]
10002894:	f002 f814 	bl	100048c0 <__aeabi_dmul>
10002898:	1c02      	adds	r2, r0, #0
1000289a:	1c0b      	adds	r3, r1, #0
1000289c:	1c20      	adds	r0, r4, #0
1000289e:	1c29      	adds	r1, r5, #0
100028a0:	f001 f864 	bl	1000396c <__aeabi_dadd>
100028a4:	1c02      	adds	r2, r0, #0
100028a6:	1c0b      	adds	r3, r1, #0
100028a8:	9800      	ldr	r0, [sp, #0]
100028aa:	9901      	ldr	r1, [sp, #4]
100028ac:	f002 fa7a 	bl	10004da4 <__aeabi_dsub>
100028b0:	1c32      	adds	r2, r6, #0
100028b2:	1c3b      	adds	r3, r7, #0
100028b4:	f002 fa76 	bl	10004da4 <__aeabi_dsub>
100028b8:	1c02      	adds	r2, r0, #0
100028ba:	1c0b      	adds	r3, r1, #0
100028bc:	9806      	ldr	r0, [sp, #24]
100028be:	9907      	ldr	r1, [sp, #28]
100028c0:	f002 fa70 	bl	10004da4 <__aeabi_dsub>
100028c4:	e6a5      	b.n	10002612 <__ieee754_log+0xda>
100028c6:	1c10      	adds	r0, r2, #0
100028c8:	1c19      	adds	r1, r3, #0
100028ca:	f002 fa6b 	bl	10004da4 <__aeabi_dsub>
100028ce:	4a1e      	ldr	r2, [pc, #120]	; (10002948 <__ieee754_log+0x410>)
100028d0:	4b1e      	ldr	r3, [pc, #120]	; (1000294c <__ieee754_log+0x414>)
100028d2:	f001 fbfb 	bl	100040cc <__aeabi_ddiv>
100028d6:	e69c      	b.n	10002612 <__ieee754_log+0xda>
100028d8:	481b      	ldr	r0, [pc, #108]	; (10002948 <__ieee754_log+0x410>)
100028da:	491c      	ldr	r1, [pc, #112]	; (1000294c <__ieee754_log+0x414>)
100028dc:	e699      	b.n	10002612 <__ieee754_log+0xda>
100028de:	4648      	mov	r0, r9
100028e0:	f002 fe16 	bl	10005510 <__aeabi_i2d>
100028e4:	4b15      	ldr	r3, [pc, #84]	; (1000293c <__ieee754_log+0x404>)
100028e6:	4a14      	ldr	r2, [pc, #80]	; (10002938 <__ieee754_log+0x400>)
100028e8:	9002      	str	r0, [sp, #8]
100028ea:	9103      	str	r1, [sp, #12]
100028ec:	f001 ffe8 	bl	100048c0 <__aeabi_dmul>
100028f0:	9000      	str	r0, [sp, #0]
100028f2:	9101      	str	r1, [sp, #4]
100028f4:	9802      	ldr	r0, [sp, #8]
100028f6:	9903      	ldr	r1, [sp, #12]
100028f8:	4a11      	ldr	r2, [pc, #68]	; (10002940 <__ieee754_log+0x408>)
100028fa:	4b12      	ldr	r3, [pc, #72]	; (10002944 <__ieee754_log+0x40c>)
100028fc:	f001 ffe0 	bl	100048c0 <__aeabi_dmul>
10002900:	1c02      	adds	r2, r0, #0
10002902:	1c0b      	adds	r3, r1, #0
10002904:	1c20      	adds	r0, r4, #0
10002906:	1c29      	adds	r1, r5, #0
10002908:	f002 fa4c 	bl	10004da4 <__aeabi_dsub>
1000290c:	1c32      	adds	r2, r6, #0
1000290e:	1c3b      	adds	r3, r7, #0
10002910:	f002 fa48 	bl	10004da4 <__aeabi_dsub>
10002914:	1c02      	adds	r2, r0, #0
10002916:	1c0b      	adds	r3, r1, #0
10002918:	9800      	ldr	r0, [sp, #0]
1000291a:	9901      	ldr	r1, [sp, #4]
1000291c:	f002 fa42 	bl	10004da4 <__aeabi_dsub>
10002920:	e677      	b.n	10002612 <__ieee754_log+0xda>
10002922:	1c22      	adds	r2, r4, #0
10002924:	1c2b      	adds	r3, r5, #0
10002926:	1c30      	adds	r0, r6, #0
10002928:	1c39      	adds	r1, r7, #0
1000292a:	f002 fa3b 	bl	10004da4 <__aeabi_dsub>
1000292e:	9a02      	ldr	r2, [sp, #8]
10002930:	9b03      	ldr	r3, [sp, #12]
10002932:	f001 ffc5 	bl	100048c0 <__aeabi_dmul>
10002936:	e6f7      	b.n	10002728 <__ieee754_log+0x1f0>
10002938:	fee00000 	.word	0xfee00000
1000293c:	3fe62e42 	.word	0x3fe62e42
10002940:	35793c76 	.word	0x35793c76
10002944:	3dea39ef 	.word	0x3dea39ef
	...

10002950 <__aeabi_uidiv>:
10002950:	2900      	cmp	r1, #0
10002952:	d034      	beq.n	100029be <.udivsi3_skip_div0_test+0x6a>

10002954 <.udivsi3_skip_div0_test>:
10002954:	2301      	movs	r3, #1
10002956:	2200      	movs	r2, #0
10002958:	b410      	push	{r4}
1000295a:	4288      	cmp	r0, r1
1000295c:	d32c      	bcc.n	100029b8 <.udivsi3_skip_div0_test+0x64>
1000295e:	2401      	movs	r4, #1
10002960:	0724      	lsls	r4, r4, #28
10002962:	42a1      	cmp	r1, r4
10002964:	d204      	bcs.n	10002970 <.udivsi3_skip_div0_test+0x1c>
10002966:	4281      	cmp	r1, r0
10002968:	d202      	bcs.n	10002970 <.udivsi3_skip_div0_test+0x1c>
1000296a:	0109      	lsls	r1, r1, #4
1000296c:	011b      	lsls	r3, r3, #4
1000296e:	e7f8      	b.n	10002962 <.udivsi3_skip_div0_test+0xe>
10002970:	00e4      	lsls	r4, r4, #3
10002972:	42a1      	cmp	r1, r4
10002974:	d204      	bcs.n	10002980 <.udivsi3_skip_div0_test+0x2c>
10002976:	4281      	cmp	r1, r0
10002978:	d202      	bcs.n	10002980 <.udivsi3_skip_div0_test+0x2c>
1000297a:	0049      	lsls	r1, r1, #1
1000297c:	005b      	lsls	r3, r3, #1
1000297e:	e7f8      	b.n	10002972 <.udivsi3_skip_div0_test+0x1e>
10002980:	4288      	cmp	r0, r1
10002982:	d301      	bcc.n	10002988 <.udivsi3_skip_div0_test+0x34>
10002984:	1a40      	subs	r0, r0, r1
10002986:	431a      	orrs	r2, r3
10002988:	084c      	lsrs	r4, r1, #1
1000298a:	42a0      	cmp	r0, r4
1000298c:	d302      	bcc.n	10002994 <.udivsi3_skip_div0_test+0x40>
1000298e:	1b00      	subs	r0, r0, r4
10002990:	085c      	lsrs	r4, r3, #1
10002992:	4322      	orrs	r2, r4
10002994:	088c      	lsrs	r4, r1, #2
10002996:	42a0      	cmp	r0, r4
10002998:	d302      	bcc.n	100029a0 <.udivsi3_skip_div0_test+0x4c>
1000299a:	1b00      	subs	r0, r0, r4
1000299c:	089c      	lsrs	r4, r3, #2
1000299e:	4322      	orrs	r2, r4
100029a0:	08cc      	lsrs	r4, r1, #3
100029a2:	42a0      	cmp	r0, r4
100029a4:	d302      	bcc.n	100029ac <.udivsi3_skip_div0_test+0x58>
100029a6:	1b00      	subs	r0, r0, r4
100029a8:	08dc      	lsrs	r4, r3, #3
100029aa:	4322      	orrs	r2, r4
100029ac:	2800      	cmp	r0, #0
100029ae:	d003      	beq.n	100029b8 <.udivsi3_skip_div0_test+0x64>
100029b0:	091b      	lsrs	r3, r3, #4
100029b2:	d001      	beq.n	100029b8 <.udivsi3_skip_div0_test+0x64>
100029b4:	0909      	lsrs	r1, r1, #4
100029b6:	e7e3      	b.n	10002980 <.udivsi3_skip_div0_test+0x2c>
100029b8:	1c10      	adds	r0, r2, #0
100029ba:	bc10      	pop	{r4}
100029bc:	4770      	bx	lr
100029be:	2800      	cmp	r0, #0
100029c0:	d001      	beq.n	100029c6 <.udivsi3_skip_div0_test+0x72>
100029c2:	2000      	movs	r0, #0
100029c4:	43c0      	mvns	r0, r0
100029c6:	b407      	push	{r0, r1, r2}
100029c8:	4802      	ldr	r0, [pc, #8]	; (100029d4 <.udivsi3_skip_div0_test+0x80>)
100029ca:	a102      	add	r1, pc, #8	; (adr r1, 100029d4 <.udivsi3_skip_div0_test+0x80>)
100029cc:	1840      	adds	r0, r0, r1
100029ce:	9002      	str	r0, [sp, #8]
100029d0:	bd03      	pop	{r0, r1, pc}
100029d2:	46c0      	nop			; (mov r8, r8)
100029d4:	00000019 	.word	0x00000019

100029d8 <__aeabi_uidivmod>:
100029d8:	2900      	cmp	r1, #0
100029da:	d0f0      	beq.n	100029be <.udivsi3_skip_div0_test+0x6a>
100029dc:	b503      	push	{r0, r1, lr}
100029de:	f7ff ffb9 	bl	10002954 <.udivsi3_skip_div0_test>
100029e2:	bc0e      	pop	{r1, r2, r3}
100029e4:	4342      	muls	r2, r0
100029e6:	1a89      	subs	r1, r1, r2
100029e8:	4718      	bx	r3
100029ea:	46c0      	nop			; (mov r8, r8)

100029ec <__aeabi_idiv0>:
100029ec:	4770      	bx	lr
100029ee:	46c0      	nop			; (mov r8, r8)

100029f0 <__aeabi_cdrcmple>:
100029f0:	4684      	mov	ip, r0
100029f2:	1c10      	adds	r0, r2, #0
100029f4:	4662      	mov	r2, ip
100029f6:	468c      	mov	ip, r1
100029f8:	1c19      	adds	r1, r3, #0
100029fa:	4663      	mov	r3, ip
100029fc:	e000      	b.n	10002a00 <__aeabi_cdcmpeq>
100029fe:	46c0      	nop			; (mov r8, r8)

10002a00 <__aeabi_cdcmpeq>:
10002a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002a02:	f001 fef1 	bl	100047e8 <__ledf2>
10002a06:	2800      	cmp	r0, #0
10002a08:	d401      	bmi.n	10002a0e <__aeabi_cdcmpeq+0xe>
10002a0a:	2100      	movs	r1, #0
10002a0c:	42c8      	cmn	r0, r1
10002a0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002a10 <__aeabi_dcmpeq>:
10002a10:	b510      	push	{r4, lr}
10002a12:	f001 fe37 	bl	10004684 <__eqdf2>
10002a16:	4240      	negs	r0, r0
10002a18:	3001      	adds	r0, #1
10002a1a:	bd10      	pop	{r4, pc}

10002a1c <__aeabi_dcmplt>:
10002a1c:	b510      	push	{r4, lr}
10002a1e:	f001 fee3 	bl	100047e8 <__ledf2>
10002a22:	2800      	cmp	r0, #0
10002a24:	db01      	blt.n	10002a2a <__aeabi_dcmplt+0xe>
10002a26:	2000      	movs	r0, #0
10002a28:	bd10      	pop	{r4, pc}
10002a2a:	2001      	movs	r0, #1
10002a2c:	bd10      	pop	{r4, pc}
10002a2e:	46c0      	nop			; (mov r8, r8)

10002a30 <__aeabi_dcmple>:
10002a30:	b510      	push	{r4, lr}
10002a32:	f001 fed9 	bl	100047e8 <__ledf2>
10002a36:	2800      	cmp	r0, #0
10002a38:	dd01      	ble.n	10002a3e <__aeabi_dcmple+0xe>
10002a3a:	2000      	movs	r0, #0
10002a3c:	bd10      	pop	{r4, pc}
10002a3e:	2001      	movs	r0, #1
10002a40:	bd10      	pop	{r4, pc}
10002a42:	46c0      	nop			; (mov r8, r8)

10002a44 <__aeabi_dcmpgt>:
10002a44:	b510      	push	{r4, lr}
10002a46:	f001 fe5b 	bl	10004700 <__gedf2>
10002a4a:	2800      	cmp	r0, #0
10002a4c:	dc01      	bgt.n	10002a52 <__aeabi_dcmpgt+0xe>
10002a4e:	2000      	movs	r0, #0
10002a50:	bd10      	pop	{r4, pc}
10002a52:	2001      	movs	r0, #1
10002a54:	bd10      	pop	{r4, pc}
10002a56:	46c0      	nop			; (mov r8, r8)

10002a58 <__aeabi_dcmpge>:
10002a58:	b510      	push	{r4, lr}
10002a5a:	f001 fe51 	bl	10004700 <__gedf2>
10002a5e:	2800      	cmp	r0, #0
10002a60:	da01      	bge.n	10002a66 <__aeabi_dcmpge+0xe>
10002a62:	2000      	movs	r0, #0
10002a64:	bd10      	pop	{r4, pc}
10002a66:	2001      	movs	r0, #1
10002a68:	bd10      	pop	{r4, pc}
10002a6a:	46c0      	nop			; (mov r8, r8)

10002a6c <__aeabi_cfrcmple>:
10002a6c:	4684      	mov	ip, r0
10002a6e:	1c08      	adds	r0, r1, #0
10002a70:	4661      	mov	r1, ip
10002a72:	e7ff      	b.n	10002a74 <__aeabi_cfcmpeq>

10002a74 <__aeabi_cfcmpeq>:
10002a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002a76:	f000 fbb3 	bl	100031e0 <__lesf2>
10002a7a:	2800      	cmp	r0, #0
10002a7c:	d401      	bmi.n	10002a82 <__aeabi_cfcmpeq+0xe>
10002a7e:	2100      	movs	r1, #0
10002a80:	42c8      	cmn	r0, r1
10002a82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002a84 <__aeabi_fcmpeq>:
10002a84:	b510      	push	{r4, lr}
10002a86:	f000 fb3b 	bl	10003100 <__eqsf2>
10002a8a:	4240      	negs	r0, r0
10002a8c:	3001      	adds	r0, #1
10002a8e:	bd10      	pop	{r4, pc}

10002a90 <__aeabi_fcmplt>:
10002a90:	b510      	push	{r4, lr}
10002a92:	f000 fba5 	bl	100031e0 <__lesf2>
10002a96:	2800      	cmp	r0, #0
10002a98:	db01      	blt.n	10002a9e <__aeabi_fcmplt+0xe>
10002a9a:	2000      	movs	r0, #0
10002a9c:	bd10      	pop	{r4, pc}
10002a9e:	2001      	movs	r0, #1
10002aa0:	bd10      	pop	{r4, pc}
10002aa2:	46c0      	nop			; (mov r8, r8)

10002aa4 <__aeabi_fcmple>:
10002aa4:	b510      	push	{r4, lr}
10002aa6:	f000 fb9b 	bl	100031e0 <__lesf2>
10002aaa:	2800      	cmp	r0, #0
10002aac:	dd01      	ble.n	10002ab2 <__aeabi_fcmple+0xe>
10002aae:	2000      	movs	r0, #0
10002ab0:	bd10      	pop	{r4, pc}
10002ab2:	2001      	movs	r0, #1
10002ab4:	bd10      	pop	{r4, pc}
10002ab6:	46c0      	nop			; (mov r8, r8)

10002ab8 <__aeabi_fcmpgt>:
10002ab8:	b510      	push	{r4, lr}
10002aba:	f000 fb49 	bl	10003150 <__gesf2>
10002abe:	2800      	cmp	r0, #0
10002ac0:	dc01      	bgt.n	10002ac6 <__aeabi_fcmpgt+0xe>
10002ac2:	2000      	movs	r0, #0
10002ac4:	bd10      	pop	{r4, pc}
10002ac6:	2001      	movs	r0, #1
10002ac8:	bd10      	pop	{r4, pc}
10002aca:	46c0      	nop			; (mov r8, r8)

10002acc <__aeabi_fcmpge>:
10002acc:	b510      	push	{r4, lr}
10002ace:	f000 fb3f 	bl	10003150 <__gesf2>
10002ad2:	2800      	cmp	r0, #0
10002ad4:	da01      	bge.n	10002ada <__aeabi_fcmpge+0xe>
10002ad6:	2000      	movs	r0, #0
10002ad8:	bd10      	pop	{r4, pc}
10002ada:	2001      	movs	r0, #1
10002adc:	bd10      	pop	{r4, pc}
10002ade:	46c0      	nop			; (mov r8, r8)

10002ae0 <__aeabi_fadd>:
10002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002ae2:	0243      	lsls	r3, r0, #9
10002ae4:	0042      	lsls	r2, r0, #1
10002ae6:	024f      	lsls	r7, r1, #9
10002ae8:	004c      	lsls	r4, r1, #1
10002aea:	0fc0      	lsrs	r0, r0, #31
10002aec:	099b      	lsrs	r3, r3, #6
10002aee:	0e12      	lsrs	r2, r2, #24
10002af0:	1c06      	adds	r6, r0, #0
10002af2:	469c      	mov	ip, r3
10002af4:	0e24      	lsrs	r4, r4, #24
10002af6:	0fc9      	lsrs	r1, r1, #31
10002af8:	09bf      	lsrs	r7, r7, #6
10002afa:	4288      	cmp	r0, r1
10002afc:	d057      	beq.n	10002bae <__aeabi_fadd+0xce>
10002afe:	1b15      	subs	r5, r2, r4
10002b00:	2d00      	cmp	r5, #0
10002b02:	dc00      	bgt.n	10002b06 <__aeabi_fadd+0x26>
10002b04:	e07e      	b.n	10002c04 <__aeabi_fadd+0x124>
10002b06:	2c00      	cmp	r4, #0
10002b08:	d141      	bne.n	10002b8e <__aeabi_fadd+0xae>
10002b0a:	2f00      	cmp	r7, #0
10002b0c:	d064      	beq.n	10002bd8 <__aeabi_fadd+0xf8>
10002b0e:	3d01      	subs	r5, #1
10002b10:	2d00      	cmp	r5, #0
10002b12:	d000      	beq.n	10002b16 <__aeabi_fadd+0x36>
10002b14:	e0ab      	b.n	10002c6e <__aeabi_fadd+0x18e>
10002b16:	1bdb      	subs	r3, r3, r7
10002b18:	1c14      	adds	r4, r2, #0
10002b1a:	1c06      	adds	r6, r0, #0
10002b1c:	0159      	lsls	r1, r3, #5
10002b1e:	d544      	bpl.n	10002baa <__aeabi_fadd+0xca>
10002b20:	019a      	lsls	r2, r3, #6
10002b22:	0995      	lsrs	r5, r2, #6
10002b24:	1c28      	adds	r0, r5, #0
10002b26:	f002 fe23 	bl	10005770 <__clzsi2>
10002b2a:	3805      	subs	r0, #5
10002b2c:	4085      	lsls	r5, r0
10002b2e:	4284      	cmp	r4, r0
10002b30:	dd00      	ble.n	10002b34 <__aeabi_fadd+0x54>
10002b32:	e079      	b.n	10002c28 <__aeabi_fadd+0x148>
10002b34:	1b00      	subs	r0, r0, r4
10002b36:	241f      	movs	r4, #31
10002b38:	1c2b      	adds	r3, r5, #0
10002b3a:	1c41      	adds	r1, r0, #1
10002b3c:	1a22      	subs	r2, r4, r0
10002b3e:	40cb      	lsrs	r3, r1
10002b40:	4095      	lsls	r5, r2
10002b42:	1c1f      	adds	r7, r3, #0
10002b44:	1c2b      	adds	r3, r5, #0
10002b46:	1e5d      	subs	r5, r3, #1
10002b48:	41ab      	sbcs	r3, r5
10002b4a:	433b      	orrs	r3, r7
10002b4c:	2501      	movs	r5, #1
10002b4e:	2400      	movs	r4, #0
10002b50:	200f      	movs	r0, #15
10002b52:	4018      	ands	r0, r3
10002b54:	2804      	cmp	r0, #4
10002b56:	d000      	beq.n	10002b5a <__aeabi_fadd+0x7a>
10002b58:	3304      	adds	r3, #4
10002b5a:	2180      	movs	r1, #128	; 0x80
10002b5c:	04cf      	lsls	r7, r1, #19
10002b5e:	2201      	movs	r2, #1
10002b60:	401f      	ands	r7, r3
10002b62:	4016      	ands	r6, r2
10002b64:	2f00      	cmp	r7, #0
10002b66:	d005      	beq.n	10002b74 <__aeabi_fadd+0x94>
10002b68:	2dff      	cmp	r5, #255	; 0xff
10002b6a:	d05a      	beq.n	10002c22 <__aeabi_fadd+0x142>
10002b6c:	4cb3      	ldr	r4, [pc, #716]	; (10002e3c <__aeabi_fadd+0x35c>)
10002b6e:	4023      	ands	r3, r4
10002b70:	1c2c      	adds	r4, r5, #0
10002b72:	3501      	adds	r5, #1
10002b74:	b2ed      	uxtb	r5, r5
10002b76:	08da      	lsrs	r2, r3, #3
10002b78:	2d01      	cmp	r5, #1
10002b7a:	dd3b      	ble.n	10002bf4 <__aeabi_fadd+0x114>
10002b7c:	0253      	lsls	r3, r2, #9
10002b7e:	0a5a      	lsrs	r2, r3, #9
10002b80:	b2e4      	uxtb	r4, r4
10002b82:	05e4      	lsls	r4, r4, #23
10002b84:	4322      	orrs	r2, r4
10002b86:	07f6      	lsls	r6, r6, #31
10002b88:	1c10      	adds	r0, r2, #0
10002b8a:	4330      	orrs	r0, r6
10002b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002b8e:	2aff      	cmp	r2, #255	; 0xff
10002b90:	d02b      	beq.n	10002bea <__aeabi_fadd+0x10a>
10002b92:	2180      	movs	r1, #128	; 0x80
10002b94:	04cc      	lsls	r4, r1, #19
10002b96:	4327      	orrs	r7, r4
10002b98:	2301      	movs	r3, #1
10002b9a:	2d1b      	cmp	r5, #27
10002b9c:	dd49      	ble.n	10002c32 <__aeabi_fadd+0x152>
10002b9e:	4667      	mov	r7, ip
10002ba0:	1afb      	subs	r3, r7, r3
10002ba2:	1c14      	adds	r4, r2, #0
10002ba4:	1c06      	adds	r6, r0, #0
10002ba6:	0159      	lsls	r1, r3, #5
10002ba8:	d4ba      	bmi.n	10002b20 <__aeabi_fadd+0x40>
10002baa:	1c65      	adds	r5, r4, #1
10002bac:	e7d0      	b.n	10002b50 <__aeabi_fadd+0x70>
10002bae:	1b15      	subs	r5, r2, r4
10002bb0:	2d00      	cmp	r5, #0
10002bb2:	dd4f      	ble.n	10002c54 <__aeabi_fadd+0x174>
10002bb4:	2c00      	cmp	r4, #0
10002bb6:	d013      	beq.n	10002be0 <__aeabi_fadd+0x100>
10002bb8:	2aff      	cmp	r2, #255	; 0xff
10002bba:	d05a      	beq.n	10002c72 <__aeabi_fadd+0x192>
10002bbc:	2480      	movs	r4, #128	; 0x80
10002bbe:	04e1      	lsls	r1, r4, #19
10002bc0:	430f      	orrs	r7, r1
10002bc2:	2301      	movs	r3, #1
10002bc4:	2d1b      	cmp	r5, #27
10002bc6:	dc00      	bgt.n	10002bca <__aeabi_fadd+0xea>
10002bc8:	e0b0      	b.n	10002d2c <__aeabi_fadd+0x24c>
10002bca:	4463      	add	r3, ip
10002bcc:	1c14      	adds	r4, r2, #0
10002bce:	0159      	lsls	r1, r3, #5
10002bd0:	d455      	bmi.n	10002c7e <__aeabi_fadd+0x19e>
10002bd2:	1c65      	adds	r5, r4, #1
10002bd4:	1c06      	adds	r6, r0, #0
10002bd6:	e7bb      	b.n	10002b50 <__aeabi_fadd+0x70>
10002bd8:	1c55      	adds	r5, r2, #1
10002bda:	1c14      	adds	r4, r2, #0
10002bdc:	1c06      	adds	r6, r0, #0
10002bde:	e7b7      	b.n	10002b50 <__aeabi_fadd+0x70>
10002be0:	2f00      	cmp	r7, #0
10002be2:	d17c      	bne.n	10002cde <__aeabi_fadd+0x1fe>
10002be4:	1c55      	adds	r5, r2, #1
10002be6:	1c14      	adds	r4, r2, #0
10002be8:	e7b2      	b.n	10002b50 <__aeabi_fadd+0x70>
10002bea:	2780      	movs	r7, #128	; 0x80
10002bec:	4663      	mov	r3, ip
10002bee:	007d      	lsls	r5, r7, #1
10002bf0:	24ff      	movs	r4, #255	; 0xff
10002bf2:	e7ad      	b.n	10002b50 <__aeabi_fadd+0x70>
10002bf4:	2a00      	cmp	r2, #0
10002bf6:	d0c3      	beq.n	10002b80 <__aeabi_fadd+0xa0>
10002bf8:	2c00      	cmp	r4, #0
10002bfa:	d028      	beq.n	10002c4e <__aeabi_fadd+0x16e>
10002bfc:	2080      	movs	r0, #128	; 0x80
10002bfe:	03c1      	lsls	r1, r0, #15
10002c00:	430a      	orrs	r2, r1
10002c02:	e7bb      	b.n	10002b7c <__aeabi_fadd+0x9c>
10002c04:	2d00      	cmp	r5, #0
10002c06:	d147      	bne.n	10002c98 <__aeabi_fadd+0x1b8>
10002c08:	1c50      	adds	r0, r2, #1
10002c0a:	b2c3      	uxtb	r3, r0
10002c0c:	2b01      	cmp	r3, #1
10002c0e:	dc00      	bgt.n	10002c12 <__aeabi_fadd+0x132>
10002c10:	e096      	b.n	10002d40 <__aeabi_fadd+0x260>
10002c12:	4664      	mov	r4, ip
10002c14:	1be5      	subs	r5, r4, r7
10002c16:	0168      	lsls	r0, r5, #5
10002c18:	d558      	bpl.n	10002ccc <__aeabi_fadd+0x1ec>
10002c1a:	1b3d      	subs	r5, r7, r4
10002c1c:	1c0e      	adds	r6, r1, #0
10002c1e:	1c14      	adds	r4, r2, #0
10002c20:	e780      	b.n	10002b24 <__aeabi_fadd+0x44>
10002c22:	24ff      	movs	r4, #255	; 0xff
10002c24:	2200      	movs	r2, #0
10002c26:	e7ac      	b.n	10002b82 <__aeabi_fadd+0xa2>
10002c28:	4b84      	ldr	r3, [pc, #528]	; (10002e3c <__aeabi_fadd+0x35c>)
10002c2a:	1a24      	subs	r4, r4, r0
10002c2c:	402b      	ands	r3, r5
10002c2e:	1c65      	adds	r5, r4, #1
10002c30:	e78e      	b.n	10002b50 <__aeabi_fadd+0x70>
10002c32:	1c3e      	adds	r6, r7, #0
10002c34:	2120      	movs	r1, #32
10002c36:	40ee      	lsrs	r6, r5
10002c38:	1b4d      	subs	r5, r1, r5
10002c3a:	40af      	lsls	r7, r5
10002c3c:	1c3b      	adds	r3, r7, #0
10002c3e:	1e5f      	subs	r7, r3, #1
10002c40:	41bb      	sbcs	r3, r7
10002c42:	4333      	orrs	r3, r6
10002c44:	4667      	mov	r7, ip
10002c46:	1afb      	subs	r3, r7, r3
10002c48:	1c14      	adds	r4, r2, #0
10002c4a:	1c06      	adds	r6, r0, #0
10002c4c:	e7ab      	b.n	10002ba6 <__aeabi_fadd+0xc6>
10002c4e:	0257      	lsls	r7, r2, #9
10002c50:	0a7a      	lsrs	r2, r7, #9
10002c52:	e796      	b.n	10002b82 <__aeabi_fadd+0xa2>
10002c54:	2d00      	cmp	r5, #0
10002c56:	d17f      	bne.n	10002d58 <__aeabi_fadd+0x278>
10002c58:	1c54      	adds	r4, r2, #1
10002c5a:	b2e1      	uxtb	r1, r4
10002c5c:	2901      	cmp	r1, #1
10002c5e:	dd53      	ble.n	10002d08 <__aeabi_fadd+0x228>
10002c60:	2cff      	cmp	r4, #255	; 0xff
10002c62:	d100      	bne.n	10002c66 <__aeabi_fadd+0x186>
10002c64:	e09b      	b.n	10002d9e <__aeabi_fadd+0x2be>
10002c66:	18fb      	adds	r3, r7, r3
10002c68:	085b      	lsrs	r3, r3, #1
10002c6a:	1c95      	adds	r5, r2, #2
10002c6c:	e770      	b.n	10002b50 <__aeabi_fadd+0x70>
10002c6e:	2aff      	cmp	r2, #255	; 0xff
10002c70:	d192      	bne.n	10002b98 <__aeabi_fadd+0xb8>
10002c72:	1c06      	adds	r6, r0, #0
10002c74:	2080      	movs	r0, #128	; 0x80
10002c76:	4663      	mov	r3, ip
10002c78:	0045      	lsls	r5, r0, #1
10002c7a:	24ff      	movs	r4, #255	; 0xff
10002c7c:	e768      	b.n	10002b50 <__aeabi_fadd+0x70>
10002c7e:	1c67      	adds	r7, r4, #1
10002c80:	2fff      	cmp	r7, #255	; 0xff
10002c82:	d03c      	beq.n	10002cfe <__aeabi_fadd+0x21e>
10002c84:	4a6d      	ldr	r2, [pc, #436]	; (10002e3c <__aeabi_fadd+0x35c>)
10002c86:	2601      	movs	r6, #1
10002c88:	401e      	ands	r6, r3
10002c8a:	4013      	ands	r3, r2
10002c8c:	085b      	lsrs	r3, r3, #1
10002c8e:	4333      	orrs	r3, r6
10002c90:	1ca5      	adds	r5, r4, #2
10002c92:	1c06      	adds	r6, r0, #0
10002c94:	1c3c      	adds	r4, r7, #0
10002c96:	e75b      	b.n	10002b50 <__aeabi_fadd+0x70>
10002c98:	4268      	negs	r0, r5
10002c9a:	2a00      	cmp	r2, #0
10002c9c:	d025      	beq.n	10002cea <__aeabi_fadd+0x20a>
10002c9e:	2cff      	cmp	r4, #255	; 0xff
10002ca0:	d070      	beq.n	10002d84 <__aeabi_fadd+0x2a4>
10002ca2:	2280      	movs	r2, #128	; 0x80
10002ca4:	04d6      	lsls	r6, r2, #19
10002ca6:	1c1d      	adds	r5, r3, #0
10002ca8:	4335      	orrs	r5, r6
10002caa:	46ac      	mov	ip, r5
10002cac:	2601      	movs	r6, #1
10002cae:	281b      	cmp	r0, #27
10002cb0:	dc09      	bgt.n	10002cc6 <__aeabi_fadd+0x1e6>
10002cb2:	4662      	mov	r2, ip
10002cb4:	2520      	movs	r5, #32
10002cb6:	40c2      	lsrs	r2, r0
10002cb8:	1a2b      	subs	r3, r5, r0
10002cba:	4660      	mov	r0, ip
10002cbc:	4098      	lsls	r0, r3
10002cbe:	1c06      	adds	r6, r0, #0
10002cc0:	1e70      	subs	r0, r6, #1
10002cc2:	4186      	sbcs	r6, r0
10002cc4:	4316      	orrs	r6, r2
10002cc6:	1bbb      	subs	r3, r7, r6
10002cc8:	1c0e      	adds	r6, r1, #0
10002cca:	e727      	b.n	10002b1c <__aeabi_fadd+0x3c>
10002ccc:	1c14      	adds	r4, r2, #0
10002cce:	2d00      	cmp	r5, #0
10002cd0:	d000      	beq.n	10002cd4 <__aeabi_fadd+0x1f4>
10002cd2:	e727      	b.n	10002b24 <__aeabi_fadd+0x44>
10002cd4:	2600      	movs	r6, #0
10002cd6:	2501      	movs	r5, #1
10002cd8:	2304      	movs	r3, #4
10002cda:	2400      	movs	r4, #0
10002cdc:	e74a      	b.n	10002b74 <__aeabi_fadd+0x94>
10002cde:	3d01      	subs	r5, #1
10002ce0:	2d00      	cmp	r5, #0
10002ce2:	d108      	bne.n	10002cf6 <__aeabi_fadd+0x216>
10002ce4:	18fb      	adds	r3, r7, r3
10002ce6:	1c14      	adds	r4, r2, #0
10002ce8:	e771      	b.n	10002bce <__aeabi_fadd+0xee>
10002cea:	2b00      	cmp	r3, #0
10002cec:	d150      	bne.n	10002d90 <__aeabi_fadd+0x2b0>
10002cee:	1c65      	adds	r5, r4, #1
10002cf0:	1c3b      	adds	r3, r7, #0
10002cf2:	1c0e      	adds	r6, r1, #0
10002cf4:	e72c      	b.n	10002b50 <__aeabi_fadd+0x70>
10002cf6:	2aff      	cmp	r2, #255	; 0xff
10002cf8:	d000      	beq.n	10002cfc <__aeabi_fadd+0x21c>
10002cfa:	e762      	b.n	10002bc2 <__aeabi_fadd+0xe2>
10002cfc:	e7b9      	b.n	10002c72 <__aeabi_fadd+0x192>
10002cfe:	2380      	movs	r3, #128	; 0x80
10002d00:	005d      	lsls	r5, r3, #1
10002d02:	24ff      	movs	r4, #255	; 0xff
10002d04:	2304      	movs	r3, #4
10002d06:	e735      	b.n	10002b74 <__aeabi_fadd+0x94>
10002d08:	2a00      	cmp	r2, #0
10002d0a:	d17c      	bne.n	10002e06 <__aeabi_fadd+0x326>
10002d0c:	2b00      	cmp	r3, #0
10002d0e:	d100      	bne.n	10002d12 <__aeabi_fadd+0x232>
10002d10:	e0a1      	b.n	10002e56 <__aeabi_fadd+0x376>
10002d12:	2f00      	cmp	r7, #0
10002d14:	d100      	bne.n	10002d18 <__aeabi_fadd+0x238>
10002d16:	e0af      	b.n	10002e78 <__aeabi_fadd+0x398>
10002d18:	18fb      	adds	r3, r7, r3
10002d1a:	0159      	lsls	r1, r3, #5
10002d1c:	d400      	bmi.n	10002d20 <__aeabi_fadd+0x240>
10002d1e:	e0b0      	b.n	10002e82 <__aeabi_fadd+0x3a2>
10002d20:	4e46      	ldr	r6, [pc, #280]	; (10002e3c <__aeabi_fadd+0x35c>)
10002d22:	2502      	movs	r5, #2
10002d24:	4033      	ands	r3, r6
10002d26:	2401      	movs	r4, #1
10002d28:	1c06      	adds	r6, r0, #0
10002d2a:	e711      	b.n	10002b50 <__aeabi_fadd+0x70>
10002d2c:	1c3c      	adds	r4, r7, #0
10002d2e:	2320      	movs	r3, #32
10002d30:	40ec      	lsrs	r4, r5
10002d32:	1b5d      	subs	r5, r3, r5
10002d34:	40af      	lsls	r7, r5
10002d36:	1c3b      	adds	r3, r7, #0
10002d38:	1e5f      	subs	r7, r3, #1
10002d3a:	41bb      	sbcs	r3, r7
10002d3c:	4323      	orrs	r3, r4
10002d3e:	e744      	b.n	10002bca <__aeabi_fadd+0xea>
10002d40:	2a00      	cmp	r2, #0
10002d42:	d112      	bne.n	10002d6a <__aeabi_fadd+0x28a>
10002d44:	4665      	mov	r5, ip
10002d46:	2d00      	cmp	r5, #0
10002d48:	d141      	bne.n	10002dce <__aeabi_fadd+0x2ee>
10002d4a:	2f00      	cmp	r7, #0
10002d4c:	d0c2      	beq.n	10002cd4 <__aeabi_fadd+0x1f4>
10002d4e:	1c3b      	adds	r3, r7, #0
10002d50:	1c0e      	adds	r6, r1, #0
10002d52:	2501      	movs	r5, #1
10002d54:	2400      	movs	r4, #0
10002d56:	e6fb      	b.n	10002b50 <__aeabi_fadd+0x70>
10002d58:	426d      	negs	r5, r5
10002d5a:	2a00      	cmp	r2, #0
10002d5c:	d123      	bne.n	10002da6 <__aeabi_fadd+0x2c6>
10002d5e:	2b00      	cmp	r3, #0
10002d60:	d166      	bne.n	10002e30 <__aeabi_fadd+0x350>
10002d62:	1c65      	adds	r5, r4, #1
10002d64:	1c3b      	adds	r3, r7, #0
10002d66:	1c06      	adds	r6, r0, #0
10002d68:	e6f2      	b.n	10002b50 <__aeabi_fadd+0x70>
10002d6a:	4662      	mov	r2, ip
10002d6c:	2a00      	cmp	r2, #0
10002d6e:	d138      	bne.n	10002de2 <__aeabi_fadd+0x302>
10002d70:	2f00      	cmp	r7, #0
10002d72:	d107      	bne.n	10002d84 <__aeabi_fadd+0x2a4>
10002d74:	2280      	movs	r2, #128	; 0x80
10002d76:	2600      	movs	r6, #0
10002d78:	0055      	lsls	r5, r2, #1
10002d7a:	4b31      	ldr	r3, [pc, #196]	; (10002e40 <__aeabi_fadd+0x360>)
10002d7c:	24ff      	movs	r4, #255	; 0xff
10002d7e:	e6f9      	b.n	10002b74 <__aeabi_fadd+0x94>
10002d80:	2cff      	cmp	r4, #255	; 0xff
10002d82:	d193      	bne.n	10002cac <__aeabi_fadd+0x1cc>
10002d84:	1c3b      	adds	r3, r7, #0
10002d86:	2780      	movs	r7, #128	; 0x80
10002d88:	1c0e      	adds	r6, r1, #0
10002d8a:	007d      	lsls	r5, r7, #1
10002d8c:	24ff      	movs	r4, #255	; 0xff
10002d8e:	e6df      	b.n	10002b50 <__aeabi_fadd+0x70>
10002d90:	3801      	subs	r0, #1
10002d92:	2800      	cmp	r0, #0
10002d94:	d1f4      	bne.n	10002d80 <__aeabi_fadd+0x2a0>
10002d96:	4666      	mov	r6, ip
10002d98:	1bbb      	subs	r3, r7, r6
10002d9a:	1c0e      	adds	r6, r1, #0
10002d9c:	e6be      	b.n	10002b1c <__aeabi_fadd+0x3c>
10002d9e:	2780      	movs	r7, #128	; 0x80
10002da0:	007d      	lsls	r5, r7, #1
10002da2:	2304      	movs	r3, #4
10002da4:	e6e6      	b.n	10002b74 <__aeabi_fadd+0x94>
10002da6:	2cff      	cmp	r4, #255	; 0xff
10002da8:	d05c      	beq.n	10002e64 <__aeabi_fadd+0x384>
10002daa:	2280      	movs	r2, #128	; 0x80
10002dac:	04d1      	lsls	r1, r2, #19
10002dae:	430b      	orrs	r3, r1
10002db0:	469c      	mov	ip, r3
10002db2:	2301      	movs	r3, #1
10002db4:	2d1b      	cmp	r5, #27
10002db6:	dc08      	bgt.n	10002dca <__aeabi_fadd+0x2ea>
10002db8:	2120      	movs	r1, #32
10002dba:	4662      	mov	r2, ip
10002dbc:	40ea      	lsrs	r2, r5
10002dbe:	4663      	mov	r3, ip
10002dc0:	1b4d      	subs	r5, r1, r5
10002dc2:	40ab      	lsls	r3, r5
10002dc4:	1e59      	subs	r1, r3, #1
10002dc6:	418b      	sbcs	r3, r1
10002dc8:	4313      	orrs	r3, r2
10002dca:	19db      	adds	r3, r3, r7
10002dcc:	e6ff      	b.n	10002bce <__aeabi_fadd+0xee>
10002dce:	2f00      	cmp	r7, #0
10002dd0:	d038      	beq.n	10002e44 <__aeabi_fadd+0x364>
10002dd2:	1beb      	subs	r3, r5, r7
10002dd4:	015a      	lsls	r2, r3, #5
10002dd6:	d54b      	bpl.n	10002e70 <__aeabi_fadd+0x390>
10002dd8:	1b7b      	subs	r3, r7, r5
10002dda:	1c0e      	adds	r6, r1, #0
10002ddc:	2501      	movs	r5, #1
10002dde:	2400      	movs	r4, #0
10002de0:	e6b6      	b.n	10002b50 <__aeabi_fadd+0x70>
10002de2:	2f00      	cmp	r7, #0
10002de4:	d100      	bne.n	10002de8 <__aeabi_fadd+0x308>
10002de6:	e700      	b.n	10002bea <__aeabi_fadd+0x10a>
10002de8:	2080      	movs	r0, #128	; 0x80
10002dea:	08d3      	lsrs	r3, r2, #3
10002dec:	03c4      	lsls	r4, r0, #15
10002dee:	4223      	tst	r3, r4
10002df0:	d004      	beq.n	10002dfc <__aeabi_fadd+0x31c>
10002df2:	08ff      	lsrs	r7, r7, #3
10002df4:	4227      	tst	r7, r4
10002df6:	d101      	bne.n	10002dfc <__aeabi_fadd+0x31c>
10002df8:	1c3b      	adds	r3, r7, #0
10002dfa:	1c0e      	adds	r6, r1, #0
10002dfc:	2180      	movs	r1, #128	; 0x80
10002dfe:	00db      	lsls	r3, r3, #3
10002e00:	004d      	lsls	r5, r1, #1
10002e02:	24ff      	movs	r4, #255	; 0xff
10002e04:	e6a4      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e06:	2b00      	cmp	r3, #0
10002e08:	d020      	beq.n	10002e4c <__aeabi_fadd+0x36c>
10002e0a:	2f00      	cmp	r7, #0
10002e0c:	d100      	bne.n	10002e10 <__aeabi_fadd+0x330>
10002e0e:	e6ec      	b.n	10002bea <__aeabi_fadd+0x10a>
10002e10:	2280      	movs	r2, #128	; 0x80
10002e12:	08de      	lsrs	r6, r3, #3
10002e14:	03d5      	lsls	r5, r2, #15
10002e16:	1c31      	adds	r1, r6, #0
10002e18:	422e      	tst	r6, r5
10002e1a:	d003      	beq.n	10002e24 <__aeabi_fadd+0x344>
10002e1c:	08f9      	lsrs	r1, r7, #3
10002e1e:	4229      	tst	r1, r5
10002e20:	d000      	beq.n	10002e24 <__aeabi_fadd+0x344>
10002e22:	1c31      	adds	r1, r6, #0
10002e24:	1c06      	adds	r6, r0, #0
10002e26:	2080      	movs	r0, #128	; 0x80
10002e28:	00cb      	lsls	r3, r1, #3
10002e2a:	0045      	lsls	r5, r0, #1
10002e2c:	24ff      	movs	r4, #255	; 0xff
10002e2e:	e68f      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e30:	3d01      	subs	r5, #1
10002e32:	2d00      	cmp	r5, #0
10002e34:	d114      	bne.n	10002e60 <__aeabi_fadd+0x380>
10002e36:	18fb      	adds	r3, r7, r3
10002e38:	e6c9      	b.n	10002bce <__aeabi_fadd+0xee>
10002e3a:	46c0      	nop			; (mov r8, r8)
10002e3c:	fbffffff 	.word	0xfbffffff
10002e40:	03fffffc 	.word	0x03fffffc
10002e44:	4663      	mov	r3, ip
10002e46:	2501      	movs	r5, #1
10002e48:	2400      	movs	r4, #0
10002e4a:	e681      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e4c:	2480      	movs	r4, #128	; 0x80
10002e4e:	0065      	lsls	r5, r4, #1
10002e50:	1c3b      	adds	r3, r7, #0
10002e52:	24ff      	movs	r4, #255	; 0xff
10002e54:	e67c      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e56:	1c3b      	adds	r3, r7, #0
10002e58:	1c06      	adds	r6, r0, #0
10002e5a:	2501      	movs	r5, #1
10002e5c:	2400      	movs	r4, #0
10002e5e:	e677      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e60:	2cff      	cmp	r4, #255	; 0xff
10002e62:	d1a6      	bne.n	10002db2 <__aeabi_fadd+0x2d2>
10002e64:	1c3b      	adds	r3, r7, #0
10002e66:	2780      	movs	r7, #128	; 0x80
10002e68:	1c06      	adds	r6, r0, #0
10002e6a:	007d      	lsls	r5, r7, #1
10002e6c:	24ff      	movs	r4, #255	; 0xff
10002e6e:	e66f      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e70:	2b00      	cmp	r3, #0
10002e72:	d100      	bne.n	10002e76 <__aeabi_fadd+0x396>
10002e74:	e72e      	b.n	10002cd4 <__aeabi_fadd+0x1f4>
10002e76:	e669      	b.n	10002b4c <__aeabi_fadd+0x6c>
10002e78:	4663      	mov	r3, ip
10002e7a:	1c06      	adds	r6, r0, #0
10002e7c:	2501      	movs	r5, #1
10002e7e:	2400      	movs	r4, #0
10002e80:	e666      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e82:	1c06      	adds	r6, r0, #0
10002e84:	2501      	movs	r5, #1
10002e86:	2400      	movs	r4, #0
10002e88:	e662      	b.n	10002b50 <__aeabi_fadd+0x70>
10002e8a:	46c0      	nop			; (mov r8, r8)

10002e8c <__aeabi_fdiv>:
10002e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002e8e:	465f      	mov	r7, fp
10002e90:	4656      	mov	r6, sl
10002e92:	464d      	mov	r5, r9
10002e94:	4644      	mov	r4, r8
10002e96:	b4f0      	push	{r4, r5, r6, r7}
10002e98:	0245      	lsls	r5, r0, #9
10002e9a:	0044      	lsls	r4, r0, #1
10002e9c:	b083      	sub	sp, #12
10002e9e:	1c0e      	adds	r6, r1, #0
10002ea0:	0a6d      	lsrs	r5, r5, #9
10002ea2:	0e24      	lsrs	r4, r4, #24
10002ea4:	0fc7      	lsrs	r7, r0, #31
10002ea6:	2c00      	cmp	r4, #0
10002ea8:	d107      	bne.n	10002eba <__aeabi_fdiv+0x2e>
10002eaa:	2d00      	cmp	r5, #0
10002eac:	d000      	beq.n	10002eb0 <__aeabi_fdiv+0x24>
10002eae:	e091      	b.n	10002fd4 <__aeabi_fdiv+0x148>
10002eb0:	2104      	movs	r1, #4
10002eb2:	2201      	movs	r2, #1
10002eb4:	4688      	mov	r8, r1
10002eb6:	4692      	mov	sl, r2
10002eb8:	e009      	b.n	10002ece <__aeabi_fdiv+0x42>
10002eba:	2cff      	cmp	r4, #255	; 0xff
10002ebc:	d055      	beq.n	10002f6a <__aeabi_fdiv+0xde>
10002ebe:	2380      	movs	r3, #128	; 0x80
10002ec0:	0418      	lsls	r0, r3, #16
10002ec2:	2100      	movs	r1, #0
10002ec4:	4305      	orrs	r5, r0
10002ec6:	00ed      	lsls	r5, r5, #3
10002ec8:	3c7f      	subs	r4, #127	; 0x7f
10002eca:	4688      	mov	r8, r1
10002ecc:	468a      	mov	sl, r1
10002ece:	1c33      	adds	r3, r6, #0
10002ed0:	0058      	lsls	r0, r3, #1
10002ed2:	0276      	lsls	r6, r6, #9
10002ed4:	0fd9      	lsrs	r1, r3, #31
10002ed6:	0a76      	lsrs	r6, r6, #9
10002ed8:	0e00      	lsrs	r0, r0, #24
10002eda:	468b      	mov	fp, r1
10002edc:	d14c      	bne.n	10002f78 <__aeabi_fdiv+0xec>
10002ede:	2201      	movs	r2, #1
10002ee0:	4694      	mov	ip, r2
10002ee2:	2e00      	cmp	r6, #0
10002ee4:	d000      	beq.n	10002ee8 <__aeabi_fdiv+0x5c>
10002ee6:	e081      	b.n	10002fec <__aeabi_fdiv+0x160>
10002ee8:	465b      	mov	r3, fp
10002eea:	407b      	eors	r3, r7
10002eec:	4662      	mov	r2, ip
10002eee:	4641      	mov	r1, r8
10002ef0:	9301      	str	r3, [sp, #4]
10002ef2:	430a      	orrs	r2, r1
10002ef4:	2a0f      	cmp	r2, #15
10002ef6:	d950      	bls.n	10002f9a <__aeabi_fdiv+0x10e>
10002ef8:	1a20      	subs	r0, r4, r0
10002efa:	0169      	lsls	r1, r5, #5
10002efc:	4681      	mov	r9, r0
10002efe:	0175      	lsls	r5, r6, #5
10002f00:	42a9      	cmp	r1, r5
10002f02:	d300      	bcc.n	10002f06 <__aeabi_fdiv+0x7a>
10002f04:	e0b3      	b.n	1000306e <__aeabi_fdiv+0x1e2>
10002f06:	2201      	movs	r2, #1
10002f08:	4253      	negs	r3, r2
10002f0a:	4499      	add	r9, r3
10002f0c:	241b      	movs	r4, #27
10002f0e:	2600      	movs	r6, #0
10002f10:	2701      	movs	r7, #1
10002f12:	1e62      	subs	r2, r4, #1
10002f14:	1c38      	adds	r0, r7, #0
10002f16:	4010      	ands	r0, r2
10002f18:	004b      	lsls	r3, r1, #1
10002f1a:	0076      	lsls	r6, r6, #1
10002f1c:	2900      	cmp	r1, #0
10002f1e:	da00      	bge.n	10002f22 <__aeabi_fdiv+0x96>
10002f20:	e0a9      	b.n	10003076 <__aeabi_fdiv+0x1ea>
10002f22:	429d      	cmp	r5, r3
10002f24:	d800      	bhi.n	10002f28 <__aeabi_fdiv+0x9c>
10002f26:	e0a6      	b.n	10003076 <__aeabi_fdiv+0x1ea>
10002f28:	3c01      	subs	r4, #1
10002f2a:	2c00      	cmp	r4, #0
10002f2c:	dc00      	bgt.n	10002f30 <__aeabi_fdiv+0xa4>
10002f2e:	e0ab      	b.n	10003088 <__aeabi_fdiv+0x1fc>
10002f30:	2800      	cmp	r0, #0
10002f32:	d00c      	beq.n	10002f4e <__aeabi_fdiv+0xc2>
10002f34:	1c19      	adds	r1, r3, #0
10002f36:	0076      	lsls	r6, r6, #1
10002f38:	005b      	lsls	r3, r3, #1
10002f3a:	2900      	cmp	r1, #0
10002f3c:	db01      	blt.n	10002f42 <__aeabi_fdiv+0xb6>
10002f3e:	429d      	cmp	r5, r3
10002f40:	d801      	bhi.n	10002f46 <__aeabi_fdiv+0xba>
10002f42:	1b5b      	subs	r3, r3, r5
10002f44:	433e      	orrs	r6, r7
10002f46:	3c01      	subs	r4, #1
10002f48:	2c00      	cmp	r4, #0
10002f4a:	dc00      	bgt.n	10002f4e <__aeabi_fdiv+0xc2>
10002f4c:	e09c      	b.n	10003088 <__aeabi_fdiv+0x1fc>
10002f4e:	0059      	lsls	r1, r3, #1
10002f50:	0072      	lsls	r2, r6, #1
10002f52:	2b00      	cmp	r3, #0
10002f54:	db01      	blt.n	10002f5a <__aeabi_fdiv+0xce>
10002f56:	428d      	cmp	r5, r1
10002f58:	d801      	bhi.n	10002f5e <__aeabi_fdiv+0xd2>
10002f5a:	1b49      	subs	r1, r1, r5
10002f5c:	433a      	orrs	r2, r7
10002f5e:	3c01      	subs	r4, #1
10002f60:	004b      	lsls	r3, r1, #1
10002f62:	0056      	lsls	r6, r2, #1
10002f64:	2900      	cmp	r1, #0
10002f66:	daea      	bge.n	10002f3e <__aeabi_fdiv+0xb2>
10002f68:	e7eb      	b.n	10002f42 <__aeabi_fdiv+0xb6>
10002f6a:	2d00      	cmp	r5, #0
10002f6c:	d12d      	bne.n	10002fca <__aeabi_fdiv+0x13e>
10002f6e:	2008      	movs	r0, #8
10002f70:	2102      	movs	r1, #2
10002f72:	4680      	mov	r8, r0
10002f74:	468a      	mov	sl, r1
10002f76:	e7aa      	b.n	10002ece <__aeabi_fdiv+0x42>
10002f78:	28ff      	cmp	r0, #255	; 0xff
10002f7a:	d020      	beq.n	10002fbe <__aeabi_fdiv+0x132>
10002f7c:	2280      	movs	r2, #128	; 0x80
10002f7e:	0413      	lsls	r3, r2, #16
10002f80:	2100      	movs	r1, #0
10002f82:	431e      	orrs	r6, r3
10002f84:	468c      	mov	ip, r1
10002f86:	465b      	mov	r3, fp
10002f88:	407b      	eors	r3, r7
10002f8a:	4662      	mov	r2, ip
10002f8c:	4641      	mov	r1, r8
10002f8e:	00f6      	lsls	r6, r6, #3
10002f90:	387f      	subs	r0, #127	; 0x7f
10002f92:	9301      	str	r3, [sp, #4]
10002f94:	430a      	orrs	r2, r1
10002f96:	2a0f      	cmp	r2, #15
10002f98:	d8ae      	bhi.n	10002ef8 <__aeabi_fdiv+0x6c>
10002f9a:	4956      	ldr	r1, [pc, #344]	; (100030f4 <__aeabi_fdiv+0x268>)
10002f9c:	0092      	lsls	r2, r2, #2
10002f9e:	588a      	ldr	r2, [r1, r2]
10002fa0:	4697      	mov	pc, r2
10002fa2:	9b01      	ldr	r3, [sp, #4]
10002fa4:	26ff      	movs	r6, #255	; 0xff
10002fa6:	2500      	movs	r5, #0
10002fa8:	05f0      	lsls	r0, r6, #23
10002faa:	4328      	orrs	r0, r5
10002fac:	07de      	lsls	r6, r3, #31
10002fae:	4330      	orrs	r0, r6
10002fb0:	b003      	add	sp, #12
10002fb2:	bc3c      	pop	{r2, r3, r4, r5}
10002fb4:	4690      	mov	r8, r2
10002fb6:	4699      	mov	r9, r3
10002fb8:	46a2      	mov	sl, r4
10002fba:	46ab      	mov	fp, r5
10002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002fbe:	1c33      	adds	r3, r6, #0
10002fc0:	1e5a      	subs	r2, r3, #1
10002fc2:	4193      	sbcs	r3, r2
10002fc4:	3302      	adds	r3, #2
10002fc6:	469c      	mov	ip, r3
10002fc8:	e78e      	b.n	10002ee8 <__aeabi_fdiv+0x5c>
10002fca:	220c      	movs	r2, #12
10002fcc:	2303      	movs	r3, #3
10002fce:	4690      	mov	r8, r2
10002fd0:	469a      	mov	sl, r3
10002fd2:	e77c      	b.n	10002ece <__aeabi_fdiv+0x42>
10002fd4:	1c28      	adds	r0, r5, #0
10002fd6:	f002 fbcb 	bl	10005770 <__clzsi2>
10002fda:	2276      	movs	r2, #118	; 0x76
10002fdc:	1f44      	subs	r4, r0, #5
10002fde:	4253      	negs	r3, r2
10002fe0:	40a5      	lsls	r5, r4
10002fe2:	1a1c      	subs	r4, r3, r0
10002fe4:	2000      	movs	r0, #0
10002fe6:	4680      	mov	r8, r0
10002fe8:	4682      	mov	sl, r0
10002fea:	e770      	b.n	10002ece <__aeabi_fdiv+0x42>
10002fec:	1c30      	adds	r0, r6, #0
10002fee:	f002 fbbf 	bl	10005770 <__clzsi2>
10002ff2:	2376      	movs	r3, #118	; 0x76
10002ff4:	1f41      	subs	r1, r0, #5
10002ff6:	408e      	lsls	r6, r1
10002ff8:	425a      	negs	r2, r3
10002ffa:	2100      	movs	r1, #0
10002ffc:	1a10      	subs	r0, r2, r0
10002ffe:	468c      	mov	ip, r1
10003000:	e772      	b.n	10002ee8 <__aeabi_fdiv+0x5c>
10003002:	2300      	movs	r3, #0
10003004:	4d3c      	ldr	r5, [pc, #240]	; (100030f8 <__aeabi_fdiv+0x26c>)
10003006:	26ff      	movs	r6, #255	; 0xff
10003008:	e7ce      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
1000300a:	465f      	mov	r7, fp
1000300c:	1c35      	adds	r5, r6, #0
1000300e:	9701      	str	r7, [sp, #4]
10003010:	4663      	mov	r3, ip
10003012:	2b02      	cmp	r3, #2
10003014:	d0c5      	beq.n	10002fa2 <__aeabi_fdiv+0x116>
10003016:	2b03      	cmp	r3, #3
10003018:	d063      	beq.n	100030e2 <__aeabi_fdiv+0x256>
1000301a:	2b01      	cmp	r3, #1
1000301c:	d043      	beq.n	100030a6 <__aeabi_fdiv+0x21a>
1000301e:	4649      	mov	r1, r9
10003020:	317f      	adds	r1, #127	; 0x7f
10003022:	2900      	cmp	r1, #0
10003024:	dd35      	ble.n	10003092 <__aeabi_fdiv+0x206>
10003026:	270f      	movs	r7, #15
10003028:	402f      	ands	r7, r5
1000302a:	2f04      	cmp	r7, #4
1000302c:	d000      	beq.n	10003030 <__aeabi_fdiv+0x1a4>
1000302e:	3504      	adds	r5, #4
10003030:	012b      	lsls	r3, r5, #4
10003032:	d503      	bpl.n	1000303c <__aeabi_fdiv+0x1b0>
10003034:	4a31      	ldr	r2, [pc, #196]	; (100030fc <__aeabi_fdiv+0x270>)
10003036:	4649      	mov	r1, r9
10003038:	4015      	ands	r5, r2
1000303a:	3180      	adds	r1, #128	; 0x80
1000303c:	29fe      	cmp	r1, #254	; 0xfe
1000303e:	dcb0      	bgt.n	10002fa2 <__aeabi_fdiv+0x116>
10003040:	01a8      	lsls	r0, r5, #6
10003042:	0a45      	lsrs	r5, r0, #9
10003044:	b2ce      	uxtb	r6, r1
10003046:	9b01      	ldr	r3, [sp, #4]
10003048:	e7ae      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
1000304a:	2600      	movs	r6, #0
1000304c:	2500      	movs	r5, #0
1000304e:	e7ab      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
10003050:	2080      	movs	r0, #128	; 0x80
10003052:	03c1      	lsls	r1, r0, #15
10003054:	420d      	tst	r5, r1
10003056:	d011      	beq.n	1000307c <__aeabi_fdiv+0x1f0>
10003058:	420e      	tst	r6, r1
1000305a:	d10f      	bne.n	1000307c <__aeabi_fdiv+0x1f0>
1000305c:	430e      	orrs	r6, r1
1000305e:	0273      	lsls	r3, r6, #9
10003060:	0a5d      	lsrs	r5, r3, #9
10003062:	26ff      	movs	r6, #255	; 0xff
10003064:	465b      	mov	r3, fp
10003066:	e79f      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
10003068:	9701      	str	r7, [sp, #4]
1000306a:	4653      	mov	r3, sl
1000306c:	e7d1      	b.n	10003012 <__aeabi_fdiv+0x186>
1000306e:	1b49      	subs	r1, r1, r5
10003070:	241a      	movs	r4, #26
10003072:	2601      	movs	r6, #1
10003074:	e74c      	b.n	10002f10 <__aeabi_fdiv+0x84>
10003076:	1b5b      	subs	r3, r3, r5
10003078:	433e      	orrs	r6, r7
1000307a:	e755      	b.n	10002f28 <__aeabi_fdiv+0x9c>
1000307c:	430d      	orrs	r5, r1
1000307e:	026a      	lsls	r2, r5, #9
10003080:	0a55      	lsrs	r5, r2, #9
10003082:	1c3b      	adds	r3, r7, #0
10003084:	26ff      	movs	r6, #255	; 0xff
10003086:	e78f      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
10003088:	1c1d      	adds	r5, r3, #0
1000308a:	1e6b      	subs	r3, r5, #1
1000308c:	419d      	sbcs	r5, r3
1000308e:	4335      	orrs	r5, r6
10003090:	e7c5      	b.n	1000301e <__aeabi_fdiv+0x192>
10003092:	247e      	movs	r4, #126	; 0x7e
10003094:	4267      	negs	r7, r4
10003096:	464a      	mov	r2, r9
10003098:	1ab9      	subs	r1, r7, r2
1000309a:	291b      	cmp	r1, #27
1000309c:	dd08      	ble.n	100030b0 <__aeabi_fdiv+0x224>
1000309e:	9b01      	ldr	r3, [sp, #4]
100030a0:	2600      	movs	r6, #0
100030a2:	2500      	movs	r5, #0
100030a4:	e780      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
100030a6:	9d01      	ldr	r5, [sp, #4]
100030a8:	2600      	movs	r6, #0
100030aa:	402b      	ands	r3, r5
100030ac:	2500      	movs	r5, #0
100030ae:	e77b      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
100030b0:	464e      	mov	r6, r9
100030b2:	369e      	adds	r6, #158	; 0x9e
100030b4:	1c28      	adds	r0, r5, #0
100030b6:	40b5      	lsls	r5, r6
100030b8:	1c2b      	adds	r3, r5, #0
100030ba:	1e5d      	subs	r5, r3, #1
100030bc:	41ab      	sbcs	r3, r5
100030be:	40c8      	lsrs	r0, r1
100030c0:	4303      	orrs	r3, r0
100030c2:	250f      	movs	r5, #15
100030c4:	401d      	ands	r5, r3
100030c6:	2d04      	cmp	r5, #4
100030c8:	d000      	beq.n	100030cc <__aeabi_fdiv+0x240>
100030ca:	3304      	adds	r3, #4
100030cc:	015a      	lsls	r2, r3, #5
100030ce:	d503      	bpl.n	100030d8 <__aeabi_fdiv+0x24c>
100030d0:	9b01      	ldr	r3, [sp, #4]
100030d2:	2601      	movs	r6, #1
100030d4:	2500      	movs	r5, #0
100030d6:	e767      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
100030d8:	019c      	lsls	r4, r3, #6
100030da:	0a65      	lsrs	r5, r4, #9
100030dc:	9b01      	ldr	r3, [sp, #4]
100030de:	2600      	movs	r6, #0
100030e0:	e762      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
100030e2:	2780      	movs	r7, #128	; 0x80
100030e4:	03fc      	lsls	r4, r7, #15
100030e6:	4325      	orrs	r5, r4
100030e8:	026e      	lsls	r6, r5, #9
100030ea:	0a75      	lsrs	r5, r6, #9
100030ec:	9b01      	ldr	r3, [sp, #4]
100030ee:	26ff      	movs	r6, #255	; 0xff
100030f0:	e75a      	b.n	10002fa8 <__aeabi_fdiv+0x11c>
100030f2:	46c0      	nop			; (mov r8, r8)
100030f4:	10005834 	.word	0x10005834
100030f8:	007fffff 	.word	0x007fffff
100030fc:	f7ffffff 	.word	0xf7ffffff

10003100 <__eqsf2>:
10003100:	0243      	lsls	r3, r0, #9
10003102:	0042      	lsls	r2, r0, #1
10003104:	b570      	push	{r4, r5, r6, lr}
10003106:	0a5c      	lsrs	r4, r3, #9
10003108:	0fc6      	lsrs	r6, r0, #31
1000310a:	0e13      	lsrs	r3, r2, #24
1000310c:	0248      	lsls	r0, r1, #9
1000310e:	004a      	lsls	r2, r1, #1
10003110:	0a45      	lsrs	r5, r0, #9
10003112:	0e12      	lsrs	r2, r2, #24
10003114:	0fc9      	lsrs	r1, r1, #31
10003116:	2bff      	cmp	r3, #255	; 0xff
10003118:	d005      	beq.n	10003126 <__eqsf2+0x26>
1000311a:	2aff      	cmp	r2, #255	; 0xff
1000311c:	d008      	beq.n	10003130 <__eqsf2+0x30>
1000311e:	2001      	movs	r0, #1
10003120:	4293      	cmp	r3, r2
10003122:	d00b      	beq.n	1000313c <__eqsf2+0x3c>
10003124:	bd70      	pop	{r4, r5, r6, pc}
10003126:	2001      	movs	r0, #1
10003128:	2c00      	cmp	r4, #0
1000312a:	d1fb      	bne.n	10003124 <__eqsf2+0x24>
1000312c:	2aff      	cmp	r2, #255	; 0xff
1000312e:	d1f6      	bne.n	1000311e <__eqsf2+0x1e>
10003130:	2001      	movs	r0, #1
10003132:	2d00      	cmp	r5, #0
10003134:	d1f6      	bne.n	10003124 <__eqsf2+0x24>
10003136:	2001      	movs	r0, #1
10003138:	4293      	cmp	r3, r2
1000313a:	d1f3      	bne.n	10003124 <__eqsf2+0x24>
1000313c:	42ac      	cmp	r4, r5
1000313e:	d1f1      	bne.n	10003124 <__eqsf2+0x24>
10003140:	428e      	cmp	r6, r1
10003142:	d003      	beq.n	1000314c <__eqsf2+0x4c>
10003144:	2b00      	cmp	r3, #0
10003146:	d1ed      	bne.n	10003124 <__eqsf2+0x24>
10003148:	2c00      	cmp	r4, #0
1000314a:	d1eb      	bne.n	10003124 <__eqsf2+0x24>
1000314c:	2000      	movs	r0, #0
1000314e:	e7e9      	b.n	10003124 <__eqsf2+0x24>

10003150 <__gesf2>:
10003150:	b5f0      	push	{r4, r5, r6, r7, lr}
10003152:	0243      	lsls	r3, r0, #9
10003154:	0042      	lsls	r2, r0, #1
10003156:	004f      	lsls	r7, r1, #1
10003158:	0fc6      	lsrs	r6, r0, #31
1000315a:	0248      	lsls	r0, r1, #9
1000315c:	0a5c      	lsrs	r4, r3, #9
1000315e:	0a45      	lsrs	r5, r0, #9
10003160:	0e13      	lsrs	r3, r2, #24
10003162:	0fc9      	lsrs	r1, r1, #31
10003164:	0e3a      	lsrs	r2, r7, #24
10003166:	2bff      	cmp	r3, #255	; 0xff
10003168:	d026      	beq.n	100031b8 <__gesf2+0x68>
1000316a:	2aff      	cmp	r2, #255	; 0xff
1000316c:	d029      	beq.n	100031c2 <__gesf2+0x72>
1000316e:	2b00      	cmp	r3, #0
10003170:	d10c      	bne.n	1000318c <__gesf2+0x3c>
10003172:	4260      	negs	r0, r4
10003174:	4160      	adcs	r0, r4
10003176:	4684      	mov	ip, r0
10003178:	2a00      	cmp	r2, #0
1000317a:	d00a      	beq.n	10003192 <__gesf2+0x42>
1000317c:	2800      	cmp	r0, #0
1000317e:	d116      	bne.n	100031ae <__gesf2+0x5e>
10003180:	428e      	cmp	r6, r1
10003182:	d021      	beq.n	100031c8 <__gesf2+0x78>
10003184:	2e00      	cmp	r6, #0
10003186:	d114      	bne.n	100031b2 <__gesf2+0x62>
10003188:	2001      	movs	r0, #1
1000318a:	e014      	b.n	100031b6 <__gesf2+0x66>
1000318c:	2a00      	cmp	r2, #0
1000318e:	d1f7      	bne.n	10003180 <__gesf2+0x30>
10003190:	4694      	mov	ip, r2
10003192:	426f      	negs	r7, r5
10003194:	416f      	adcs	r7, r5
10003196:	4660      	mov	r0, ip
10003198:	2800      	cmp	r0, #0
1000319a:	d105      	bne.n	100031a8 <__gesf2+0x58>
1000319c:	2f00      	cmp	r7, #0
1000319e:	d0ef      	beq.n	10003180 <__gesf2+0x30>
100031a0:	2001      	movs	r0, #1
100031a2:	2e00      	cmp	r6, #0
100031a4:	d007      	beq.n	100031b6 <__gesf2+0x66>
100031a6:	e004      	b.n	100031b2 <__gesf2+0x62>
100031a8:	2000      	movs	r0, #0
100031aa:	2f00      	cmp	r7, #0
100031ac:	d103      	bne.n	100031b6 <__gesf2+0x66>
100031ae:	2900      	cmp	r1, #0
100031b0:	d1ea      	bne.n	10003188 <__gesf2+0x38>
100031b2:	2101      	movs	r1, #1
100031b4:	4248      	negs	r0, r1
100031b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031b8:	2c00      	cmp	r4, #0
100031ba:	d0d6      	beq.n	1000316a <__gesf2+0x1a>
100031bc:	2202      	movs	r2, #2
100031be:	4250      	negs	r0, r2
100031c0:	e7f9      	b.n	100031b6 <__gesf2+0x66>
100031c2:	2d00      	cmp	r5, #0
100031c4:	d0d3      	beq.n	1000316e <__gesf2+0x1e>
100031c6:	e7f9      	b.n	100031bc <__gesf2+0x6c>
100031c8:	4293      	cmp	r3, r2
100031ca:	dcdb      	bgt.n	10003184 <__gesf2+0x34>
100031cc:	db04      	blt.n	100031d8 <__gesf2+0x88>
100031ce:	42ac      	cmp	r4, r5
100031d0:	d8d8      	bhi.n	10003184 <__gesf2+0x34>
100031d2:	2000      	movs	r0, #0
100031d4:	42ac      	cmp	r4, r5
100031d6:	d2ee      	bcs.n	100031b6 <__gesf2+0x66>
100031d8:	2e00      	cmp	r6, #0
100031da:	d0ea      	beq.n	100031b2 <__gesf2+0x62>
100031dc:	2001      	movs	r0, #1
100031de:	e7ea      	b.n	100031b6 <__gesf2+0x66>

100031e0 <__lesf2>:
100031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100031e2:	0243      	lsls	r3, r0, #9
100031e4:	0042      	lsls	r2, r0, #1
100031e6:	004f      	lsls	r7, r1, #1
100031e8:	0fc6      	lsrs	r6, r0, #31
100031ea:	0248      	lsls	r0, r1, #9
100031ec:	0a5c      	lsrs	r4, r3, #9
100031ee:	0a45      	lsrs	r5, r0, #9
100031f0:	0e13      	lsrs	r3, r2, #24
100031f2:	0fc9      	lsrs	r1, r1, #31
100031f4:	0e3a      	lsrs	r2, r7, #24
100031f6:	2bff      	cmp	r3, #255	; 0xff
100031f8:	d026      	beq.n	10003248 <__lesf2+0x68>
100031fa:	2aff      	cmp	r2, #255	; 0xff
100031fc:	d028      	beq.n	10003250 <__lesf2+0x70>
100031fe:	2b00      	cmp	r3, #0
10003200:	d00f      	beq.n	10003222 <__lesf2+0x42>
10003202:	2a00      	cmp	r2, #0
10003204:	d114      	bne.n	10003230 <__lesf2+0x50>
10003206:	4694      	mov	ip, r2
10003208:	426f      	negs	r7, r5
1000320a:	416f      	adcs	r7, r5
1000320c:	4660      	mov	r0, ip
1000320e:	2800      	cmp	r0, #0
10003210:	d014      	beq.n	1000323c <__lesf2+0x5c>
10003212:	2000      	movs	r0, #0
10003214:	2f00      	cmp	r7, #0
10003216:	d103      	bne.n	10003220 <__lesf2+0x40>
10003218:	2900      	cmp	r1, #0
1000321a:	d10d      	bne.n	10003238 <__lesf2+0x58>
1000321c:	2101      	movs	r1, #1
1000321e:	4248      	negs	r0, r1
10003220:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003222:	4260      	negs	r0, r4
10003224:	4160      	adcs	r0, r4
10003226:	4684      	mov	ip, r0
10003228:	2a00      	cmp	r2, #0
1000322a:	d0ed      	beq.n	10003208 <__lesf2+0x28>
1000322c:	2800      	cmp	r0, #0
1000322e:	d1f3      	bne.n	10003218 <__lesf2+0x38>
10003230:	428e      	cmp	r6, r1
10003232:	d011      	beq.n	10003258 <__lesf2+0x78>
10003234:	2e00      	cmp	r6, #0
10003236:	d1f1      	bne.n	1000321c <__lesf2+0x3c>
10003238:	2001      	movs	r0, #1
1000323a:	e7f1      	b.n	10003220 <__lesf2+0x40>
1000323c:	2f00      	cmp	r7, #0
1000323e:	d0f7      	beq.n	10003230 <__lesf2+0x50>
10003240:	2001      	movs	r0, #1
10003242:	2e00      	cmp	r6, #0
10003244:	d0ec      	beq.n	10003220 <__lesf2+0x40>
10003246:	e7e9      	b.n	1000321c <__lesf2+0x3c>
10003248:	2002      	movs	r0, #2
1000324a:	2c00      	cmp	r4, #0
1000324c:	d1e8      	bne.n	10003220 <__lesf2+0x40>
1000324e:	e7d4      	b.n	100031fa <__lesf2+0x1a>
10003250:	2002      	movs	r0, #2
10003252:	2d00      	cmp	r5, #0
10003254:	d1e4      	bne.n	10003220 <__lesf2+0x40>
10003256:	e7d2      	b.n	100031fe <__lesf2+0x1e>
10003258:	4293      	cmp	r3, r2
1000325a:	dceb      	bgt.n	10003234 <__lesf2+0x54>
1000325c:	db04      	blt.n	10003268 <__lesf2+0x88>
1000325e:	42ac      	cmp	r4, r5
10003260:	d8e8      	bhi.n	10003234 <__lesf2+0x54>
10003262:	2000      	movs	r0, #0
10003264:	42ac      	cmp	r4, r5
10003266:	d2db      	bcs.n	10003220 <__lesf2+0x40>
10003268:	2e00      	cmp	r6, #0
1000326a:	d0d7      	beq.n	1000321c <__lesf2+0x3c>
1000326c:	2001      	movs	r0, #1
1000326e:	e7d7      	b.n	10003220 <__lesf2+0x40>

10003270 <__aeabi_fmul>:
10003270:	b5f0      	push	{r4, r5, r6, r7, lr}
10003272:	465f      	mov	r7, fp
10003274:	4656      	mov	r6, sl
10003276:	464d      	mov	r5, r9
10003278:	4644      	mov	r4, r8
1000327a:	b4f0      	push	{r4, r5, r6, r7}
1000327c:	0245      	lsls	r5, r0, #9
1000327e:	0046      	lsls	r6, r0, #1
10003280:	b083      	sub	sp, #12
10003282:	1c0f      	adds	r7, r1, #0
10003284:	0a6d      	lsrs	r5, r5, #9
10003286:	0e36      	lsrs	r6, r6, #24
10003288:	0fc4      	lsrs	r4, r0, #31
1000328a:	2e00      	cmp	r6, #0
1000328c:	d106      	bne.n	1000329c <__aeabi_fmul+0x2c>
1000328e:	2d00      	cmp	r5, #0
10003290:	d170      	bne.n	10003374 <__aeabi_fmul+0x104>
10003292:	2104      	movs	r1, #4
10003294:	2201      	movs	r2, #1
10003296:	4688      	mov	r8, r1
10003298:	4692      	mov	sl, r2
1000329a:	e009      	b.n	100032b0 <__aeabi_fmul+0x40>
1000329c:	2eff      	cmp	r6, #255	; 0xff
1000329e:	d043      	beq.n	10003328 <__aeabi_fmul+0xb8>
100032a0:	2380      	movs	r3, #128	; 0x80
100032a2:	0418      	lsls	r0, r3, #16
100032a4:	2100      	movs	r1, #0
100032a6:	4305      	orrs	r5, r0
100032a8:	00ed      	lsls	r5, r5, #3
100032aa:	3e7f      	subs	r6, #127	; 0x7f
100032ac:	4688      	mov	r8, r1
100032ae:	468a      	mov	sl, r1
100032b0:	1c38      	adds	r0, r7, #0
100032b2:	0043      	lsls	r3, r0, #1
100032b4:	027f      	lsls	r7, r7, #9
100032b6:	0fc1      	lsrs	r1, r0, #31
100032b8:	0a7f      	lsrs	r7, r7, #9
100032ba:	0e1b      	lsrs	r3, r3, #24
100032bc:	468b      	mov	fp, r1
100032be:	d13a      	bne.n	10003336 <__aeabi_fmul+0xc6>
100032c0:	2101      	movs	r1, #1
100032c2:	2f00      	cmp	r7, #0
100032c4:	d162      	bne.n	1000338c <__aeabi_fmul+0x11c>
100032c6:	4658      	mov	r0, fp
100032c8:	4060      	eors	r0, r4
100032ca:	4642      	mov	r2, r8
100032cc:	9001      	str	r0, [sp, #4]
100032ce:	430a      	orrs	r2, r1
100032d0:	2a0f      	cmp	r2, #15
100032d2:	d93f      	bls.n	10003354 <__aeabi_fmul+0xe4>
100032d4:	042c      	lsls	r4, r5, #16
100032d6:	18f0      	adds	r0, r6, r3
100032d8:	0c26      	lsrs	r6, r4, #16
100032da:	043b      	lsls	r3, r7, #16
100032dc:	0c1a      	lsrs	r2, r3, #16
100032de:	1c31      	adds	r1, r6, #0
100032e0:	4351      	muls	r1, r2
100032e2:	0c3f      	lsrs	r7, r7, #16
100032e4:	0c2d      	lsrs	r5, r5, #16
100032e6:	437e      	muls	r6, r7
100032e8:	436a      	muls	r2, r5
100032ea:	4681      	mov	r9, r0
100032ec:	0c08      	lsrs	r0, r1, #16
100032ee:	1836      	adds	r6, r6, r0
100032f0:	1c2c      	adds	r4, r5, #0
100032f2:	18b3      	adds	r3, r6, r2
100032f4:	437c      	muls	r4, r7
100032f6:	429a      	cmp	r2, r3
100032f8:	d900      	bls.n	100032fc <__aeabi_fmul+0x8c>
100032fa:	e09a      	b.n	10003432 <__aeabi_fmul+0x1c2>
100032fc:	0409      	lsls	r1, r1, #16
100032fe:	041d      	lsls	r5, r3, #16
10003300:	0c08      	lsrs	r0, r1, #16
10003302:	182e      	adds	r6, r5, r0
10003304:	01b5      	lsls	r5, r6, #6
10003306:	0c1b      	lsrs	r3, r3, #16
10003308:	1e69      	subs	r1, r5, #1
1000330a:	418d      	sbcs	r5, r1
1000330c:	0eb2      	lsrs	r2, r6, #26
1000330e:	18e7      	adds	r7, r4, r3
10003310:	4315      	orrs	r5, r2
10003312:	01bc      	lsls	r4, r7, #6
10003314:	4325      	orrs	r5, r4
10003316:	012b      	lsls	r3, r5, #4
10003318:	d54b      	bpl.n	100033b2 <__aeabi_fmul+0x142>
1000331a:	2001      	movs	r0, #1
1000331c:	4028      	ands	r0, r5
1000331e:	2101      	movs	r1, #1
10003320:	086d      	lsrs	r5, r5, #1
10003322:	4489      	add	r9, r1
10003324:	4305      	orrs	r5, r0
10003326:	e044      	b.n	100033b2 <__aeabi_fmul+0x142>
10003328:	2d00      	cmp	r5, #0
1000332a:	d11e      	bne.n	1000336a <__aeabi_fmul+0xfa>
1000332c:	2008      	movs	r0, #8
1000332e:	2102      	movs	r1, #2
10003330:	4680      	mov	r8, r0
10003332:	468a      	mov	sl, r1
10003334:	e7bc      	b.n	100032b0 <__aeabi_fmul+0x40>
10003336:	2bff      	cmp	r3, #255	; 0xff
10003338:	d012      	beq.n	10003360 <__aeabi_fmul+0xf0>
1000333a:	2280      	movs	r2, #128	; 0x80
1000333c:	0410      	lsls	r0, r2, #16
1000333e:	4307      	orrs	r7, r0
10003340:	4658      	mov	r0, fp
10003342:	2100      	movs	r1, #0
10003344:	4060      	eors	r0, r4
10003346:	4642      	mov	r2, r8
10003348:	00ff      	lsls	r7, r7, #3
1000334a:	3b7f      	subs	r3, #127	; 0x7f
1000334c:	9001      	str	r0, [sp, #4]
1000334e:	430a      	orrs	r2, r1
10003350:	2a0f      	cmp	r2, #15
10003352:	d8bf      	bhi.n	100032d4 <__aeabi_fmul+0x64>
10003354:	0090      	lsls	r0, r2, #2
10003356:	4a5b      	ldr	r2, [pc, #364]	; (100034c4 <__aeabi_fmul+0x254>)
10003358:	4684      	mov	ip, r0
1000335a:	4462      	add	r2, ip
1000335c:	6810      	ldr	r0, [r2, #0]
1000335e:	4687      	mov	pc, r0
10003360:	1c39      	adds	r1, r7, #0
10003362:	1e4a      	subs	r2, r1, #1
10003364:	4191      	sbcs	r1, r2
10003366:	3102      	adds	r1, #2
10003368:	e7ad      	b.n	100032c6 <__aeabi_fmul+0x56>
1000336a:	220c      	movs	r2, #12
1000336c:	2303      	movs	r3, #3
1000336e:	4690      	mov	r8, r2
10003370:	469a      	mov	sl, r3
10003372:	e79d      	b.n	100032b0 <__aeabi_fmul+0x40>
10003374:	1c28      	adds	r0, r5, #0
10003376:	f002 f9fb 	bl	10005770 <__clzsi2>
1000337a:	2276      	movs	r2, #118	; 0x76
1000337c:	1f46      	subs	r6, r0, #5
1000337e:	4253      	negs	r3, r2
10003380:	40b5      	lsls	r5, r6
10003382:	1a1e      	subs	r6, r3, r0
10003384:	2000      	movs	r0, #0
10003386:	4680      	mov	r8, r0
10003388:	4682      	mov	sl, r0
1000338a:	e791      	b.n	100032b0 <__aeabi_fmul+0x40>
1000338c:	1c38      	adds	r0, r7, #0
1000338e:	f002 f9ef 	bl	10005770 <__clzsi2>
10003392:	2176      	movs	r1, #118	; 0x76
10003394:	1f43      	subs	r3, r0, #5
10003396:	424a      	negs	r2, r1
10003398:	409f      	lsls	r7, r3
1000339a:	2100      	movs	r1, #0
1000339c:	1a13      	subs	r3, r2, r0
1000339e:	e792      	b.n	100032c6 <__aeabi_fmul+0x56>
100033a0:	9401      	str	r4, [sp, #4]
100033a2:	4651      	mov	r1, sl
100033a4:	2902      	cmp	r1, #2
100033a6:	d02c      	beq.n	10003402 <__aeabi_fmul+0x192>
100033a8:	2903      	cmp	r1, #3
100033aa:	d100      	bne.n	100033ae <__aeabi_fmul+0x13e>
100033ac:	e080      	b.n	100034b0 <__aeabi_fmul+0x240>
100033ae:	2901      	cmp	r1, #1
100033b0:	d048      	beq.n	10003444 <__aeabi_fmul+0x1d4>
100033b2:	464e      	mov	r6, r9
100033b4:	367f      	adds	r6, #127	; 0x7f
100033b6:	2e00      	cmp	r6, #0
100033b8:	dd51      	ble.n	1000345e <__aeabi_fmul+0x1ee>
100033ba:	240f      	movs	r4, #15
100033bc:	402c      	ands	r4, r5
100033be:	2c04      	cmp	r4, #4
100033c0:	d000      	beq.n	100033c4 <__aeabi_fmul+0x154>
100033c2:	3504      	adds	r5, #4
100033c4:	012a      	lsls	r2, r5, #4
100033c6:	d503      	bpl.n	100033d0 <__aeabi_fmul+0x160>
100033c8:	493f      	ldr	r1, [pc, #252]	; (100034c8 <__aeabi_fmul+0x258>)
100033ca:	464e      	mov	r6, r9
100033cc:	400d      	ands	r5, r1
100033ce:	3680      	adds	r6, #128	; 0x80
100033d0:	2efe      	cmp	r6, #254	; 0xfe
100033d2:	dd3d      	ble.n	10003450 <__aeabi_fmul+0x1e0>
100033d4:	9b01      	ldr	r3, [sp, #4]
100033d6:	2401      	movs	r4, #1
100033d8:	401c      	ands	r4, r3
100033da:	21ff      	movs	r1, #255	; 0xff
100033dc:	2500      	movs	r5, #0
100033de:	05c8      	lsls	r0, r1, #23
100033e0:	07e2      	lsls	r2, r4, #31
100033e2:	4328      	orrs	r0, r5
100033e4:	4310      	orrs	r0, r2
100033e6:	b003      	add	sp, #12
100033e8:	bc3c      	pop	{r2, r3, r4, r5}
100033ea:	4690      	mov	r8, r2
100033ec:	4699      	mov	r9, r3
100033ee:	46a2      	mov	sl, r4
100033f0:	46ab      	mov	fp, r5
100033f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100033f4:	2400      	movs	r4, #0
100033f6:	4d35      	ldr	r5, [pc, #212]	; (100034cc <__aeabi_fmul+0x25c>)
100033f8:	21ff      	movs	r1, #255	; 0xff
100033fa:	e7f0      	b.n	100033de <__aeabi_fmul+0x16e>
100033fc:	4651      	mov	r1, sl
100033fe:	2902      	cmp	r1, #2
10003400:	d1d2      	bne.n	100033a8 <__aeabi_fmul+0x138>
10003402:	9d01      	ldr	r5, [sp, #4]
10003404:	2401      	movs	r4, #1
10003406:	402c      	ands	r4, r5
10003408:	21ff      	movs	r1, #255	; 0xff
1000340a:	2500      	movs	r5, #0
1000340c:	e7e7      	b.n	100033de <__aeabi_fmul+0x16e>
1000340e:	465e      	mov	r6, fp
10003410:	1c3d      	adds	r5, r7, #0
10003412:	9601      	str	r6, [sp, #4]
10003414:	e7c6      	b.n	100033a4 <__aeabi_fmul+0x134>
10003416:	1c3d      	adds	r5, r7, #0
10003418:	e7c4      	b.n	100033a4 <__aeabi_fmul+0x134>
1000341a:	2680      	movs	r6, #128	; 0x80
1000341c:	03f3      	lsls	r3, r6, #15
1000341e:	421d      	tst	r5, r3
10003420:	d00b      	beq.n	1000343a <__aeabi_fmul+0x1ca>
10003422:	421f      	tst	r7, r3
10003424:	d109      	bne.n	1000343a <__aeabi_fmul+0x1ca>
10003426:	431f      	orrs	r7, r3
10003428:	027a      	lsls	r2, r7, #9
1000342a:	0a55      	lsrs	r5, r2, #9
1000342c:	465c      	mov	r4, fp
1000342e:	21ff      	movs	r1, #255	; 0xff
10003430:	e7d5      	b.n	100033de <__aeabi_fmul+0x16e>
10003432:	2280      	movs	r2, #128	; 0x80
10003434:	0257      	lsls	r7, r2, #9
10003436:	19e4      	adds	r4, r4, r7
10003438:	e760      	b.n	100032fc <__aeabi_fmul+0x8c>
1000343a:	431d      	orrs	r5, r3
1000343c:	026f      	lsls	r7, r5, #9
1000343e:	0a7d      	lsrs	r5, r7, #9
10003440:	21ff      	movs	r1, #255	; 0xff
10003442:	e7cc      	b.n	100033de <__aeabi_fmul+0x16e>
10003444:	9b01      	ldr	r3, [sp, #4]
10003446:	2500      	movs	r5, #0
10003448:	4019      	ands	r1, r3
1000344a:	b2cc      	uxtb	r4, r1
1000344c:	2100      	movs	r1, #0
1000344e:	e7c6      	b.n	100033de <__aeabi_fmul+0x16e>
10003450:	9801      	ldr	r0, [sp, #4]
10003452:	01ad      	lsls	r5, r5, #6
10003454:	2401      	movs	r4, #1
10003456:	0a6d      	lsrs	r5, r5, #9
10003458:	b2f1      	uxtb	r1, r6
1000345a:	4004      	ands	r4, r0
1000345c:	e7bf      	b.n	100033de <__aeabi_fmul+0x16e>
1000345e:	267e      	movs	r6, #126	; 0x7e
10003460:	4273      	negs	r3, r6
10003462:	464a      	mov	r2, r9
10003464:	1a9f      	subs	r7, r3, r2
10003466:	2f1b      	cmp	r7, #27
10003468:	dd05      	ble.n	10003476 <__aeabi_fmul+0x206>
1000346a:	9d01      	ldr	r5, [sp, #4]
1000346c:	2401      	movs	r4, #1
1000346e:	402c      	ands	r4, r5
10003470:	2100      	movs	r1, #0
10003472:	2500      	movs	r5, #0
10003474:	e7b3      	b.n	100033de <__aeabi_fmul+0x16e>
10003476:	4649      	mov	r1, r9
10003478:	319e      	adds	r1, #158	; 0x9e
1000347a:	1c2c      	adds	r4, r5, #0
1000347c:	408d      	lsls	r5, r1
1000347e:	1c2e      	adds	r6, r5, #0
10003480:	40fc      	lsrs	r4, r7
10003482:	1e75      	subs	r5, r6, #1
10003484:	41ae      	sbcs	r6, r5
10003486:	4326      	orrs	r6, r4
10003488:	200f      	movs	r0, #15
1000348a:	4030      	ands	r0, r6
1000348c:	2804      	cmp	r0, #4
1000348e:	d000      	beq.n	10003492 <__aeabi_fmul+0x222>
10003490:	3604      	adds	r6, #4
10003492:	0170      	lsls	r0, r6, #5
10003494:	d505      	bpl.n	100034a2 <__aeabi_fmul+0x232>
10003496:	9f01      	ldr	r7, [sp, #4]
10003498:	2401      	movs	r4, #1
1000349a:	403c      	ands	r4, r7
1000349c:	2101      	movs	r1, #1
1000349e:	2500      	movs	r5, #0
100034a0:	e79d      	b.n	100033de <__aeabi_fmul+0x16e>
100034a2:	9a01      	ldr	r2, [sp, #4]
100034a4:	01b3      	lsls	r3, r6, #6
100034a6:	2401      	movs	r4, #1
100034a8:	0a5d      	lsrs	r5, r3, #9
100034aa:	4014      	ands	r4, r2
100034ac:	2100      	movs	r1, #0
100034ae:	e796      	b.n	100033de <__aeabi_fmul+0x16e>
100034b0:	2280      	movs	r2, #128	; 0x80
100034b2:	03d0      	lsls	r0, r2, #15
100034b4:	4305      	orrs	r5, r0
100034b6:	026c      	lsls	r4, r5, #9
100034b8:	9901      	ldr	r1, [sp, #4]
100034ba:	0a65      	lsrs	r5, r4, #9
100034bc:	2401      	movs	r4, #1
100034be:	400c      	ands	r4, r1
100034c0:	21ff      	movs	r1, #255	; 0xff
100034c2:	e78c      	b.n	100033de <__aeabi_fmul+0x16e>
100034c4:	10005874 	.word	0x10005874
100034c8:	f7ffffff 	.word	0xf7ffffff
100034cc:	007fffff 	.word	0x007fffff

100034d0 <__aeabi_fsub>:
100034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100034d2:	0243      	lsls	r3, r0, #9
100034d4:	0045      	lsls	r5, r0, #1
100034d6:	024f      	lsls	r7, r1, #9
100034d8:	004c      	lsls	r4, r1, #1
100034da:	0fc2      	lsrs	r2, r0, #31
100034dc:	0998      	lsrs	r0, r3, #6
100034de:	4684      	mov	ip, r0
100034e0:	0e2d      	lsrs	r5, r5, #24
100034e2:	0e20      	lsrs	r0, r4, #24
100034e4:	0fc9      	lsrs	r1, r1, #31
100034e6:	09bf      	lsrs	r7, r7, #6
100034e8:	28ff      	cmp	r0, #255	; 0xff
100034ea:	d054      	beq.n	10003596 <__aeabi_fsub+0xc6>
100034ec:	2601      	movs	r6, #1
100034ee:	4071      	eors	r1, r6
100034f0:	428a      	cmp	r2, r1
100034f2:	d03b      	beq.n	1000356c <__aeabi_fsub+0x9c>
100034f4:	1a2c      	subs	r4, r5, r0
100034f6:	2c00      	cmp	r4, #0
100034f8:	dc00      	bgt.n	100034fc <__aeabi_fsub+0x2c>
100034fa:	e089      	b.n	10003610 <__aeabi_fsub+0x140>
100034fc:	2800      	cmp	r0, #0
100034fe:	d125      	bne.n	1000354c <__aeabi_fsub+0x7c>
10003500:	2f00      	cmp	r7, #0
10003502:	d14b      	bne.n	1000359c <__aeabi_fsub+0xcc>
10003504:	1c6e      	adds	r6, r5, #1
10003506:	1c2c      	adds	r4, r5, #0
10003508:	4663      	mov	r3, ip
1000350a:	1c15      	adds	r5, r2, #0
1000350c:	220f      	movs	r2, #15
1000350e:	401a      	ands	r2, r3
10003510:	2a04      	cmp	r2, #4
10003512:	d000      	beq.n	10003516 <__aeabi_fsub+0x46>
10003514:	3304      	adds	r3, #4
10003516:	2780      	movs	r7, #128	; 0x80
10003518:	04f9      	lsls	r1, r7, #19
1000351a:	2201      	movs	r2, #1
1000351c:	4019      	ands	r1, r3
1000351e:	402a      	ands	r2, r5
10003520:	2900      	cmp	r1, #0
10003522:	d006      	beq.n	10003532 <__aeabi_fsub+0x62>
10003524:	2eff      	cmp	r6, #255	; 0xff
10003526:	d100      	bne.n	1000352a <__aeabi_fsub+0x5a>
10003528:	e081      	b.n	1000362e <__aeabi_fsub+0x15e>
1000352a:	4db1      	ldr	r5, [pc, #708]	; (100037f0 <__aeabi_fsub+0x320>)
1000352c:	1c34      	adds	r4, r6, #0
1000352e:	402b      	ands	r3, r5
10003530:	3601      	adds	r6, #1
10003532:	b2f6      	uxtb	r6, r6
10003534:	08dd      	lsrs	r5, r3, #3
10003536:	2e01      	cmp	r6, #1
10003538:	dd62      	ble.n	10003600 <__aeabi_fsub+0x130>
1000353a:	026b      	lsls	r3, r5, #9
1000353c:	0a5d      	lsrs	r5, r3, #9
1000353e:	b2e4      	uxtb	r4, r4
10003540:	05e4      	lsls	r4, r4, #23
10003542:	4325      	orrs	r5, r4
10003544:	1c28      	adds	r0, r5, #0
10003546:	07d2      	lsls	r2, r2, #31
10003548:	4310      	orrs	r0, r2
1000354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000354c:	2dff      	cmp	r5, #255	; 0xff
1000354e:	d051      	beq.n	100035f4 <__aeabi_fsub+0x124>
10003550:	2180      	movs	r1, #128	; 0x80
10003552:	04cb      	lsls	r3, r1, #19
10003554:	431f      	orrs	r7, r3
10003556:	2601      	movs	r6, #1
10003558:	2c1b      	cmp	r4, #27
1000355a:	dd70      	ble.n	1000363e <__aeabi_fsub+0x16e>
1000355c:	4667      	mov	r7, ip
1000355e:	1c2c      	adds	r4, r5, #0
10003560:	1bbb      	subs	r3, r7, r6
10003562:	1c15      	adds	r5, r2, #0
10003564:	0158      	lsls	r0, r3, #5
10003566:	d422      	bmi.n	100035ae <__aeabi_fsub+0xde>
10003568:	1c66      	adds	r6, r4, #1
1000356a:	e7cf      	b.n	1000350c <__aeabi_fsub+0x3c>
1000356c:	1a2e      	subs	r6, r5, r0
1000356e:	2e00      	cmp	r6, #0
10003570:	dd76      	ble.n	10003660 <__aeabi_fsub+0x190>
10003572:	2800      	cmp	r0, #0
10003574:	d032      	beq.n	100035dc <__aeabi_fsub+0x10c>
10003576:	2dff      	cmp	r5, #255	; 0xff
10003578:	d03c      	beq.n	100035f4 <__aeabi_fsub+0x124>
1000357a:	2480      	movs	r4, #128	; 0x80
1000357c:	04e1      	lsls	r1, r4, #19
1000357e:	430f      	orrs	r7, r1
10003580:	2301      	movs	r3, #1
10003582:	2e1b      	cmp	r6, #27
10003584:	dc00      	bgt.n	10003588 <__aeabi_fsub+0xb8>
10003586:	e0d1      	b.n	1000372c <__aeabi_fsub+0x25c>
10003588:	4463      	add	r3, ip
1000358a:	1c2c      	adds	r4, r5, #0
1000358c:	0158      	lsls	r0, r3, #5
1000358e:	d47a      	bmi.n	10003686 <__aeabi_fsub+0x1b6>
10003590:	1c66      	adds	r6, r4, #1
10003592:	1c15      	adds	r5, r2, #0
10003594:	e7ba      	b.n	1000350c <__aeabi_fsub+0x3c>
10003596:	2f00      	cmp	r7, #0
10003598:	d1aa      	bne.n	100034f0 <__aeabi_fsub+0x20>
1000359a:	e7a7      	b.n	100034ec <__aeabi_fsub+0x1c>
1000359c:	3c01      	subs	r4, #1
1000359e:	2c00      	cmp	r4, #0
100035a0:	d16d      	bne.n	1000367e <__aeabi_fsub+0x1ae>
100035a2:	4663      	mov	r3, ip
100035a4:	1c2c      	adds	r4, r5, #0
100035a6:	1bdb      	subs	r3, r3, r7
100035a8:	1c15      	adds	r5, r2, #0
100035aa:	0158      	lsls	r0, r3, #5
100035ac:	d5dc      	bpl.n	10003568 <__aeabi_fsub+0x98>
100035ae:	019a      	lsls	r2, r3, #6
100035b0:	0996      	lsrs	r6, r2, #6
100035b2:	1c30      	adds	r0, r6, #0
100035b4:	f002 f8dc 	bl	10005770 <__clzsi2>
100035b8:	3805      	subs	r0, #5
100035ba:	4086      	lsls	r6, r0
100035bc:	4284      	cmp	r4, r0
100035be:	dc39      	bgt.n	10003634 <__aeabi_fsub+0x164>
100035c0:	1b00      	subs	r0, r0, r4
100035c2:	231f      	movs	r3, #31
100035c4:	1a1a      	subs	r2, r3, r0
100035c6:	1c33      	adds	r3, r6, #0
100035c8:	1c31      	adds	r1, r6, #0
100035ca:	1c44      	adds	r4, r0, #1
100035cc:	4093      	lsls	r3, r2
100035ce:	40e1      	lsrs	r1, r4
100035d0:	1e5e      	subs	r6, r3, #1
100035d2:	41b3      	sbcs	r3, r6
100035d4:	430b      	orrs	r3, r1
100035d6:	2601      	movs	r6, #1
100035d8:	2400      	movs	r4, #0
100035da:	e797      	b.n	1000350c <__aeabi_fsub+0x3c>
100035dc:	2f00      	cmp	r7, #0
100035de:	d100      	bne.n	100035e2 <__aeabi_fsub+0x112>
100035e0:	e790      	b.n	10003504 <__aeabi_fsub+0x34>
100035e2:	3e01      	subs	r6, #1
100035e4:	2e00      	cmp	r6, #0
100035e6:	d103      	bne.n	100035f0 <__aeabi_fsub+0x120>
100035e8:	4664      	mov	r4, ip
100035ea:	193b      	adds	r3, r7, r4
100035ec:	1c2c      	adds	r4, r5, #0
100035ee:	e7cd      	b.n	1000358c <__aeabi_fsub+0xbc>
100035f0:	2dff      	cmp	r5, #255	; 0xff
100035f2:	d1c5      	bne.n	10003580 <__aeabi_fsub+0xb0>
100035f4:	1c15      	adds	r5, r2, #0
100035f6:	2280      	movs	r2, #128	; 0x80
100035f8:	4663      	mov	r3, ip
100035fa:	0056      	lsls	r6, r2, #1
100035fc:	24ff      	movs	r4, #255	; 0xff
100035fe:	e785      	b.n	1000350c <__aeabi_fsub+0x3c>
10003600:	2d00      	cmp	r5, #0
10003602:	d09c      	beq.n	1000353e <__aeabi_fsub+0x6e>
10003604:	2c00      	cmp	r4, #0
10003606:	d028      	beq.n	1000365a <__aeabi_fsub+0x18a>
10003608:	2080      	movs	r0, #128	; 0x80
1000360a:	03c7      	lsls	r7, r0, #15
1000360c:	433d      	orrs	r5, r7
1000360e:	e794      	b.n	1000353a <__aeabi_fsub+0x6a>
10003610:	2c00      	cmp	r4, #0
10003612:	d145      	bne.n	100036a0 <__aeabi_fsub+0x1d0>
10003614:	1c6b      	adds	r3, r5, #1
10003616:	b2d8      	uxtb	r0, r3
10003618:	2801      	cmp	r0, #1
1000361a:	dc00      	bgt.n	1000361e <__aeabi_fsub+0x14e>
1000361c:	e090      	b.n	10003740 <__aeabi_fsub+0x270>
1000361e:	4664      	mov	r4, ip
10003620:	1be6      	subs	r6, r4, r7
10003622:	0173      	lsls	r3, r6, #5
10003624:	d557      	bpl.n	100036d6 <__aeabi_fsub+0x206>
10003626:	1b3e      	subs	r6, r7, r4
10003628:	1c2c      	adds	r4, r5, #0
1000362a:	1c0d      	adds	r5, r1, #0
1000362c:	e7c1      	b.n	100035b2 <__aeabi_fsub+0xe2>
1000362e:	24ff      	movs	r4, #255	; 0xff
10003630:	2500      	movs	r5, #0
10003632:	e785      	b.n	10003540 <__aeabi_fsub+0x70>
10003634:	4b6e      	ldr	r3, [pc, #440]	; (100037f0 <__aeabi_fsub+0x320>)
10003636:	1a24      	subs	r4, r4, r0
10003638:	4033      	ands	r3, r6
1000363a:	1c66      	adds	r6, r4, #1
1000363c:	e766      	b.n	1000350c <__aeabi_fsub+0x3c>
1000363e:	1c38      	adds	r0, r7, #0
10003640:	2120      	movs	r1, #32
10003642:	40e0      	lsrs	r0, r4
10003644:	1b0c      	subs	r4, r1, r4
10003646:	40a7      	lsls	r7, r4
10003648:	1c3e      	adds	r6, r7, #0
1000364a:	1e77      	subs	r7, r6, #1
1000364c:	41be      	sbcs	r6, r7
1000364e:	4306      	orrs	r6, r0
10003650:	4667      	mov	r7, ip
10003652:	1c2c      	adds	r4, r5, #0
10003654:	1bbb      	subs	r3, r7, r6
10003656:	1c15      	adds	r5, r2, #0
10003658:	e784      	b.n	10003564 <__aeabi_fsub+0x94>
1000365a:	0269      	lsls	r1, r5, #9
1000365c:	0a4d      	lsrs	r5, r1, #9
1000365e:	e76f      	b.n	10003540 <__aeabi_fsub+0x70>
10003660:	2e00      	cmp	r6, #0
10003662:	d179      	bne.n	10003758 <__aeabi_fsub+0x288>
10003664:	1c6c      	adds	r4, r5, #1
10003666:	b2e0      	uxtb	r0, r4
10003668:	2801      	cmp	r0, #1
1000366a:	dd4b      	ble.n	10003704 <__aeabi_fsub+0x234>
1000366c:	2cff      	cmp	r4, #255	; 0xff
1000366e:	d100      	bne.n	10003672 <__aeabi_fsub+0x1a2>
10003670:	e098      	b.n	100037a4 <__aeabi_fsub+0x2d4>
10003672:	4661      	mov	r1, ip
10003674:	187f      	adds	r7, r7, r1
10003676:	1cae      	adds	r6, r5, #2
10003678:	087b      	lsrs	r3, r7, #1
1000367a:	1c15      	adds	r5, r2, #0
1000367c:	e746      	b.n	1000350c <__aeabi_fsub+0x3c>
1000367e:	2dff      	cmp	r5, #255	; 0xff
10003680:	d000      	beq.n	10003684 <__aeabi_fsub+0x1b4>
10003682:	e768      	b.n	10003556 <__aeabi_fsub+0x86>
10003684:	e7b6      	b.n	100035f4 <__aeabi_fsub+0x124>
10003686:	1c67      	adds	r7, r4, #1
10003688:	2fff      	cmp	r7, #255	; 0xff
1000368a:	d036      	beq.n	100036fa <__aeabi_fsub+0x22a>
1000368c:	4858      	ldr	r0, [pc, #352]	; (100037f0 <__aeabi_fsub+0x320>)
1000368e:	2101      	movs	r1, #1
10003690:	4019      	ands	r1, r3
10003692:	4003      	ands	r3, r0
10003694:	085b      	lsrs	r3, r3, #1
10003696:	1ca6      	adds	r6, r4, #2
10003698:	430b      	orrs	r3, r1
1000369a:	1c3c      	adds	r4, r7, #0
1000369c:	1c15      	adds	r5, r2, #0
1000369e:	e735      	b.n	1000350c <__aeabi_fsub+0x3c>
100036a0:	4266      	negs	r6, r4
100036a2:	2d00      	cmp	r5, #0
100036a4:	d01e      	beq.n	100036e4 <__aeabi_fsub+0x214>
100036a6:	28ff      	cmp	r0, #255	; 0xff
100036a8:	d06f      	beq.n	1000378a <__aeabi_fsub+0x2ba>
100036aa:	2580      	movs	r5, #128	; 0x80
100036ac:	4662      	mov	r2, ip
100036ae:	04eb      	lsls	r3, r5, #19
100036b0:	431a      	orrs	r2, r3
100036b2:	4694      	mov	ip, r2
100036b4:	2501      	movs	r5, #1
100036b6:	2e1b      	cmp	r6, #27
100036b8:	dc09      	bgt.n	100036ce <__aeabi_fsub+0x1fe>
100036ba:	4662      	mov	r2, ip
100036bc:	2320      	movs	r3, #32
100036be:	40f2      	lsrs	r2, r6
100036c0:	4664      	mov	r4, ip
100036c2:	1b9e      	subs	r6, r3, r6
100036c4:	40b4      	lsls	r4, r6
100036c6:	1c25      	adds	r5, r4, #0
100036c8:	1e6c      	subs	r4, r5, #1
100036ca:	41a5      	sbcs	r5, r4
100036cc:	4315      	orrs	r5, r2
100036ce:	1b7b      	subs	r3, r7, r5
100036d0:	1c04      	adds	r4, r0, #0
100036d2:	1c0d      	adds	r5, r1, #0
100036d4:	e769      	b.n	100035aa <__aeabi_fsub+0xda>
100036d6:	2e00      	cmp	r6, #0
100036d8:	d10c      	bne.n	100036f4 <__aeabi_fsub+0x224>
100036da:	2200      	movs	r2, #0
100036dc:	2601      	movs	r6, #1
100036de:	2304      	movs	r3, #4
100036e0:	2400      	movs	r4, #0
100036e2:	e726      	b.n	10003532 <__aeabi_fsub+0x62>
100036e4:	4664      	mov	r4, ip
100036e6:	2c00      	cmp	r4, #0
100036e8:	d155      	bne.n	10003796 <__aeabi_fsub+0x2c6>
100036ea:	1c46      	adds	r6, r0, #1
100036ec:	1c3b      	adds	r3, r7, #0
100036ee:	1c04      	adds	r4, r0, #0
100036f0:	1c0d      	adds	r5, r1, #0
100036f2:	e70b      	b.n	1000350c <__aeabi_fsub+0x3c>
100036f4:	1c2c      	adds	r4, r5, #0
100036f6:	1c15      	adds	r5, r2, #0
100036f8:	e75b      	b.n	100035b2 <__aeabi_fsub+0xe2>
100036fa:	2380      	movs	r3, #128	; 0x80
100036fc:	005e      	lsls	r6, r3, #1
100036fe:	24ff      	movs	r4, #255	; 0xff
10003700:	2304      	movs	r3, #4
10003702:	e716      	b.n	10003532 <__aeabi_fsub+0x62>
10003704:	2d00      	cmp	r5, #0
10003706:	d000      	beq.n	1000370a <__aeabi_fsub+0x23a>
10003708:	e08d      	b.n	10003826 <__aeabi_fsub+0x356>
1000370a:	4665      	mov	r5, ip
1000370c:	2d00      	cmp	r5, #0
1000370e:	d100      	bne.n	10003712 <__aeabi_fsub+0x242>
10003710:	e0ad      	b.n	1000386e <__aeabi_fsub+0x39e>
10003712:	2f00      	cmp	r7, #0
10003714:	d100      	bne.n	10003718 <__aeabi_fsub+0x248>
10003716:	e081      	b.n	1000381c <__aeabi_fsub+0x34c>
10003718:	197b      	adds	r3, r7, r5
1000371a:	015c      	lsls	r4, r3, #5
1000371c:	d400      	bmi.n	10003720 <__aeabi_fsub+0x250>
1000371e:	e07e      	b.n	1000381e <__aeabi_fsub+0x34e>
10003720:	4f33      	ldr	r7, [pc, #204]	; (100037f0 <__aeabi_fsub+0x320>)
10003722:	1c15      	adds	r5, r2, #0
10003724:	403b      	ands	r3, r7
10003726:	2602      	movs	r6, #2
10003728:	2401      	movs	r4, #1
1000372a:	e6ef      	b.n	1000350c <__aeabi_fsub+0x3c>
1000372c:	1c38      	adds	r0, r7, #0
1000372e:	2320      	movs	r3, #32
10003730:	40f0      	lsrs	r0, r6
10003732:	1b9e      	subs	r6, r3, r6
10003734:	40b7      	lsls	r7, r6
10003736:	1c3b      	adds	r3, r7, #0
10003738:	1e5f      	subs	r7, r3, #1
1000373a:	41bb      	sbcs	r3, r7
1000373c:	4303      	orrs	r3, r0
1000373e:	e723      	b.n	10003588 <__aeabi_fsub+0xb8>
10003740:	2d00      	cmp	r5, #0
10003742:	d115      	bne.n	10003770 <__aeabi_fsub+0x2a0>
10003744:	4665      	mov	r5, ip
10003746:	2d00      	cmp	r5, #0
10003748:	d147      	bne.n	100037da <__aeabi_fsub+0x30a>
1000374a:	2f00      	cmp	r7, #0
1000374c:	d0c5      	beq.n	100036da <__aeabi_fsub+0x20a>
1000374e:	1c3b      	adds	r3, r7, #0
10003750:	1c0d      	adds	r5, r1, #0
10003752:	2601      	movs	r6, #1
10003754:	2400      	movs	r4, #0
10003756:	e6d9      	b.n	1000350c <__aeabi_fsub+0x3c>
10003758:	4276      	negs	r6, r6
1000375a:	2d00      	cmp	r5, #0
1000375c:	d126      	bne.n	100037ac <__aeabi_fsub+0x2dc>
1000375e:	4665      	mov	r5, ip
10003760:	2d00      	cmp	r5, #0
10003762:	d000      	beq.n	10003766 <__aeabi_fsub+0x296>
10003764:	e07d      	b.n	10003862 <__aeabi_fsub+0x392>
10003766:	1c46      	adds	r6, r0, #1
10003768:	1c3b      	adds	r3, r7, #0
1000376a:	1c04      	adds	r4, r0, #0
1000376c:	1c15      	adds	r5, r2, #0
1000376e:	e6cd      	b.n	1000350c <__aeabi_fsub+0x3c>
10003770:	4665      	mov	r5, ip
10003772:	2d00      	cmp	r5, #0
10003774:	d140      	bne.n	100037f8 <__aeabi_fsub+0x328>
10003776:	2f00      	cmp	r7, #0
10003778:	d107      	bne.n	1000378a <__aeabi_fsub+0x2ba>
1000377a:	2180      	movs	r1, #128	; 0x80
1000377c:	2200      	movs	r2, #0
1000377e:	004e      	lsls	r6, r1, #1
10003780:	4b1c      	ldr	r3, [pc, #112]	; (100037f4 <__aeabi_fsub+0x324>)
10003782:	24ff      	movs	r4, #255	; 0xff
10003784:	e6d5      	b.n	10003532 <__aeabi_fsub+0x62>
10003786:	28ff      	cmp	r0, #255	; 0xff
10003788:	d194      	bne.n	100036b4 <__aeabi_fsub+0x1e4>
1000378a:	2080      	movs	r0, #128	; 0x80
1000378c:	1c3b      	adds	r3, r7, #0
1000378e:	1c0d      	adds	r5, r1, #0
10003790:	0046      	lsls	r6, r0, #1
10003792:	24ff      	movs	r4, #255	; 0xff
10003794:	e6ba      	b.n	1000350c <__aeabi_fsub+0x3c>
10003796:	3e01      	subs	r6, #1
10003798:	2e00      	cmp	r6, #0
1000379a:	d1f4      	bne.n	10003786 <__aeabi_fsub+0x2b6>
1000379c:	1b3b      	subs	r3, r7, r4
1000379e:	1c0d      	adds	r5, r1, #0
100037a0:	1c04      	adds	r4, r0, #0
100037a2:	e702      	b.n	100035aa <__aeabi_fsub+0xda>
100037a4:	2580      	movs	r5, #128	; 0x80
100037a6:	006e      	lsls	r6, r5, #1
100037a8:	2304      	movs	r3, #4
100037aa:	e6c2      	b.n	10003532 <__aeabi_fsub+0x62>
100037ac:	28ff      	cmp	r0, #255	; 0xff
100037ae:	d052      	beq.n	10003856 <__aeabi_fsub+0x386>
100037b0:	2480      	movs	r4, #128	; 0x80
100037b2:	4661      	mov	r1, ip
100037b4:	04e3      	lsls	r3, r4, #19
100037b6:	4319      	orrs	r1, r3
100037b8:	468c      	mov	ip, r1
100037ba:	2301      	movs	r3, #1
100037bc:	2e1b      	cmp	r6, #27
100037be:	dc09      	bgt.n	100037d4 <__aeabi_fsub+0x304>
100037c0:	2120      	movs	r1, #32
100037c2:	4664      	mov	r4, ip
100037c4:	40f4      	lsrs	r4, r6
100037c6:	4665      	mov	r5, ip
100037c8:	1b8e      	subs	r6, r1, r6
100037ca:	40b5      	lsls	r5, r6
100037cc:	1c2b      	adds	r3, r5, #0
100037ce:	1e59      	subs	r1, r3, #1
100037d0:	418b      	sbcs	r3, r1
100037d2:	4323      	orrs	r3, r4
100037d4:	19db      	adds	r3, r3, r7
100037d6:	1c04      	adds	r4, r0, #0
100037d8:	e6d8      	b.n	1000358c <__aeabi_fsub+0xbc>
100037da:	2f00      	cmp	r7, #0
100037dc:	d01e      	beq.n	1000381c <__aeabi_fsub+0x34c>
100037de:	1beb      	subs	r3, r5, r7
100037e0:	0158      	lsls	r0, r3, #5
100037e2:	d54b      	bpl.n	1000387c <__aeabi_fsub+0x3ac>
100037e4:	1b7b      	subs	r3, r7, r5
100037e6:	2601      	movs	r6, #1
100037e8:	1c0d      	adds	r5, r1, #0
100037ea:	2400      	movs	r4, #0
100037ec:	e68e      	b.n	1000350c <__aeabi_fsub+0x3c>
100037ee:	46c0      	nop			; (mov r8, r8)
100037f0:	fbffffff 	.word	0xfbffffff
100037f4:	03fffffc 	.word	0x03fffffc
100037f8:	2f00      	cmp	r7, #0
100037fa:	d100      	bne.n	100037fe <__aeabi_fsub+0x32e>
100037fc:	e6fa      	b.n	100035f4 <__aeabi_fsub+0x124>
100037fe:	2080      	movs	r0, #128	; 0x80
10003800:	08eb      	lsrs	r3, r5, #3
10003802:	03c4      	lsls	r4, r0, #15
10003804:	4223      	tst	r3, r4
10003806:	d037      	beq.n	10003878 <__aeabi_fsub+0x3a8>
10003808:	08ff      	lsrs	r7, r7, #3
1000380a:	4227      	tst	r7, r4
1000380c:	d134      	bne.n	10003878 <__aeabi_fsub+0x3a8>
1000380e:	1c3b      	adds	r3, r7, #0
10003810:	1c0d      	adds	r5, r1, #0
10003812:	2280      	movs	r2, #128	; 0x80
10003814:	00db      	lsls	r3, r3, #3
10003816:	0056      	lsls	r6, r2, #1
10003818:	24ff      	movs	r4, #255	; 0xff
1000381a:	e677      	b.n	1000350c <__aeabi_fsub+0x3c>
1000381c:	4663      	mov	r3, ip
1000381e:	1c15      	adds	r5, r2, #0
10003820:	2601      	movs	r6, #1
10003822:	2400      	movs	r4, #0
10003824:	e672      	b.n	1000350c <__aeabi_fsub+0x3c>
10003826:	4664      	mov	r4, ip
10003828:	2c00      	cmp	r4, #0
1000382a:	d014      	beq.n	10003856 <__aeabi_fsub+0x386>
1000382c:	2f00      	cmp	r7, #0
1000382e:	d100      	bne.n	10003832 <__aeabi_fsub+0x362>
10003830:	e6e0      	b.n	100035f4 <__aeabi_fsub+0x124>
10003832:	2380      	movs	r3, #128	; 0x80
10003834:	08e6      	lsrs	r6, r4, #3
10003836:	03d8      	lsls	r0, r3, #15
10003838:	1c31      	adds	r1, r6, #0
1000383a:	4206      	tst	r6, r0
1000383c:	d003      	beq.n	10003846 <__aeabi_fsub+0x376>
1000383e:	08f9      	lsrs	r1, r7, #3
10003840:	4201      	tst	r1, r0
10003842:	d000      	beq.n	10003846 <__aeabi_fsub+0x376>
10003844:	1c31      	adds	r1, r6, #0
10003846:	1c15      	adds	r5, r2, #0
10003848:	2280      	movs	r2, #128	; 0x80
1000384a:	00cb      	lsls	r3, r1, #3
1000384c:	0056      	lsls	r6, r2, #1
1000384e:	24ff      	movs	r4, #255	; 0xff
10003850:	e65c      	b.n	1000350c <__aeabi_fsub+0x3c>
10003852:	28ff      	cmp	r0, #255	; 0xff
10003854:	d1b1      	bne.n	100037ba <__aeabi_fsub+0x2ea>
10003856:	2080      	movs	r0, #128	; 0x80
10003858:	1c3b      	adds	r3, r7, #0
1000385a:	1c15      	adds	r5, r2, #0
1000385c:	0046      	lsls	r6, r0, #1
1000385e:	24ff      	movs	r4, #255	; 0xff
10003860:	e654      	b.n	1000350c <__aeabi_fsub+0x3c>
10003862:	3e01      	subs	r6, #1
10003864:	2e00      	cmp	r6, #0
10003866:	d1f4      	bne.n	10003852 <__aeabi_fsub+0x382>
10003868:	197b      	adds	r3, r7, r5
1000386a:	1c04      	adds	r4, r0, #0
1000386c:	e68e      	b.n	1000358c <__aeabi_fsub+0xbc>
1000386e:	1c3b      	adds	r3, r7, #0
10003870:	1c15      	adds	r5, r2, #0
10003872:	2601      	movs	r6, #1
10003874:	2400      	movs	r4, #0
10003876:	e649      	b.n	1000350c <__aeabi_fsub+0x3c>
10003878:	1c15      	adds	r5, r2, #0
1000387a:	e7ca      	b.n	10003812 <__aeabi_fsub+0x342>
1000387c:	2b00      	cmp	r3, #0
1000387e:	d100      	bne.n	10003882 <__aeabi_fsub+0x3b2>
10003880:	e72b      	b.n	100036da <__aeabi_fsub+0x20a>
10003882:	e7cc      	b.n	1000381e <__aeabi_fsub+0x34e>

10003884 <__aeabi_f2iz>:
10003884:	0243      	lsls	r3, r0, #9
10003886:	0042      	lsls	r2, r0, #1
10003888:	0a59      	lsrs	r1, r3, #9
1000388a:	0e13      	lsrs	r3, r2, #24
1000388c:	0fc2      	lsrs	r2, r0, #31
1000388e:	2000      	movs	r0, #0
10003890:	2b7e      	cmp	r3, #126	; 0x7e
10003892:	dd0d      	ble.n	100038b0 <__aeabi_f2iz+0x2c>
10003894:	2b9d      	cmp	r3, #157	; 0x9d
10003896:	dc0c      	bgt.n	100038b2 <__aeabi_f2iz+0x2e>
10003898:	2080      	movs	r0, #128	; 0x80
1000389a:	0400      	lsls	r0, r0, #16
1000389c:	4301      	orrs	r1, r0
1000389e:	2b95      	cmp	r3, #149	; 0x95
100038a0:	dc0a      	bgt.n	100038b8 <__aeabi_f2iz+0x34>
100038a2:	2096      	movs	r0, #150	; 0x96
100038a4:	1ac3      	subs	r3, r0, r3
100038a6:	40d9      	lsrs	r1, r3
100038a8:	4248      	negs	r0, r1
100038aa:	2a00      	cmp	r2, #0
100038ac:	d100      	bne.n	100038b0 <__aeabi_f2iz+0x2c>
100038ae:	1c08      	adds	r0, r1, #0
100038b0:	4770      	bx	lr
100038b2:	4903      	ldr	r1, [pc, #12]	; (100038c0 <__aeabi_f2iz+0x3c>)
100038b4:	1850      	adds	r0, r2, r1
100038b6:	e7fb      	b.n	100038b0 <__aeabi_f2iz+0x2c>
100038b8:	3b96      	subs	r3, #150	; 0x96
100038ba:	4099      	lsls	r1, r3
100038bc:	e7f4      	b.n	100038a8 <__aeabi_f2iz+0x24>
100038be:	46c0      	nop			; (mov r8, r8)
100038c0:	7fffffff 	.word	0x7fffffff

100038c4 <__aeabi_ui2f>:
100038c4:	b510      	push	{r4, lr}
100038c6:	1e04      	subs	r4, r0, #0
100038c8:	d034      	beq.n	10003934 <__aeabi_ui2f+0x70>
100038ca:	f001 ff51 	bl	10005770 <__clzsi2>
100038ce:	239e      	movs	r3, #158	; 0x9e
100038d0:	1a1b      	subs	r3, r3, r0
100038d2:	2b96      	cmp	r3, #150	; 0x96
100038d4:	dc07      	bgt.n	100038e6 <__aeabi_ui2f+0x22>
100038d6:	3808      	subs	r0, #8
100038d8:	4084      	lsls	r4, r0
100038da:	0264      	lsls	r4, r4, #9
100038dc:	0a61      	lsrs	r1, r4, #9
100038de:	b2db      	uxtb	r3, r3
100038e0:	05d8      	lsls	r0, r3, #23
100038e2:	4308      	orrs	r0, r1
100038e4:	bd10      	pop	{r4, pc}
100038e6:	2b99      	cmp	r3, #153	; 0x99
100038e8:	dd0a      	ble.n	10003900 <__aeabi_ui2f+0x3c>
100038ea:	1c02      	adds	r2, r0, #0
100038ec:	321b      	adds	r2, #27
100038ee:	1c21      	adds	r1, r4, #0
100038f0:	4091      	lsls	r1, r2
100038f2:	1c0a      	adds	r2, r1, #0
100038f4:	1e51      	subs	r1, r2, #1
100038f6:	418a      	sbcs	r2, r1
100038f8:	2105      	movs	r1, #5
100038fa:	1a09      	subs	r1, r1, r0
100038fc:	40cc      	lsrs	r4, r1
100038fe:	4314      	orrs	r4, r2
10003900:	2805      	cmp	r0, #5
10003902:	dc1a      	bgt.n	1000393a <__aeabi_ui2f+0x76>
10003904:	4a18      	ldr	r2, [pc, #96]	; (10003968 <__aeabi_ui2f+0xa4>)
10003906:	210f      	movs	r1, #15
10003908:	4022      	ands	r2, r4
1000390a:	400c      	ands	r4, r1
1000390c:	2c04      	cmp	r4, #4
1000390e:	d000      	beq.n	10003912 <__aeabi_ui2f+0x4e>
10003910:	3204      	adds	r2, #4
10003912:	0151      	lsls	r1, r2, #5
10003914:	d505      	bpl.n	10003922 <__aeabi_ui2f+0x5e>
10003916:	249f      	movs	r4, #159	; 0x9f
10003918:	1a23      	subs	r3, r4, r0
1000391a:	2bff      	cmp	r3, #255	; 0xff
1000391c:	d021      	beq.n	10003962 <__aeabi_ui2f+0x9e>
1000391e:	4812      	ldr	r0, [pc, #72]	; (10003968 <__aeabi_ui2f+0xa4>)
10003920:	4002      	ands	r2, r0
10003922:	1c59      	adds	r1, r3, #1
10003924:	b2cc      	uxtb	r4, r1
10003926:	08d2      	lsrs	r2, r2, #3
10003928:	2c01      	cmp	r4, #1
1000392a:	dd09      	ble.n	10003940 <__aeabi_ui2f+0x7c>
1000392c:	0250      	lsls	r0, r2, #9
1000392e:	0a41      	lsrs	r1, r0, #9
10003930:	b2db      	uxtb	r3, r3
10003932:	e7d5      	b.n	100038e0 <__aeabi_ui2f+0x1c>
10003934:	2300      	movs	r3, #0
10003936:	2100      	movs	r1, #0
10003938:	e7d2      	b.n	100038e0 <__aeabi_ui2f+0x1c>
1000393a:	1f42      	subs	r2, r0, #5
1000393c:	4094      	lsls	r4, r2
1000393e:	e7e1      	b.n	10003904 <__aeabi_ui2f+0x40>
10003940:	2a00      	cmp	r2, #0
10003942:	d00b      	beq.n	1000395c <__aeabi_ui2f+0x98>
10003944:	2b00      	cmp	r3, #0
10003946:	d006      	beq.n	10003956 <__aeabi_ui2f+0x92>
10003948:	2180      	movs	r1, #128	; 0x80
1000394a:	03cc      	lsls	r4, r1, #15
1000394c:	4322      	orrs	r2, r4
1000394e:	0252      	lsls	r2, r2, #9
10003950:	0a51      	lsrs	r1, r2, #9
10003952:	b2db      	uxtb	r3, r3
10003954:	e7c4      	b.n	100038e0 <__aeabi_ui2f+0x1c>
10003956:	0250      	lsls	r0, r2, #9
10003958:	0a41      	lsrs	r1, r0, #9
1000395a:	e7c1      	b.n	100038e0 <__aeabi_ui2f+0x1c>
1000395c:	b2db      	uxtb	r3, r3
1000395e:	2100      	movs	r1, #0
10003960:	e7be      	b.n	100038e0 <__aeabi_ui2f+0x1c>
10003962:	23ff      	movs	r3, #255	; 0xff
10003964:	2100      	movs	r1, #0
10003966:	e7bb      	b.n	100038e0 <__aeabi_ui2f+0x1c>
10003968:	fbffffff 	.word	0xfbffffff

1000396c <__aeabi_dadd>:
1000396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000396e:	465f      	mov	r7, fp
10003970:	4656      	mov	r6, sl
10003972:	464d      	mov	r5, r9
10003974:	4644      	mov	r4, r8
10003976:	b4f0      	push	{r4, r5, r6, r7}
10003978:	030c      	lsls	r4, r1, #12
1000397a:	0f46      	lsrs	r6, r0, #29
1000397c:	0a64      	lsrs	r4, r4, #9
1000397e:	4334      	orrs	r4, r6
10003980:	46a3      	mov	fp, r4
10003982:	005e      	lsls	r6, r3, #1
10003984:	031c      	lsls	r4, r3, #12
10003986:	0fdb      	lsrs	r3, r3, #31
10003988:	469c      	mov	ip, r3
1000398a:	0a63      	lsrs	r3, r4, #9
1000398c:	4698      	mov	r8, r3
1000398e:	004d      	lsls	r5, r1, #1
10003990:	0f53      	lsrs	r3, r2, #29
10003992:	4644      	mov	r4, r8
10003994:	431c      	orrs	r4, r3
10003996:	0d6d      	lsrs	r5, r5, #21
10003998:	0fc9      	lsrs	r1, r1, #31
1000399a:	0d76      	lsrs	r6, r6, #21
1000399c:	00d2      	lsls	r2, r2, #3
1000399e:	1c0f      	adds	r7, r1, #0
100039a0:	00c0      	lsls	r0, r0, #3
100039a2:	46a1      	mov	r9, r4
100039a4:	4692      	mov	sl, r2
100039a6:	1bab      	subs	r3, r5, r6
100039a8:	4561      	cmp	r1, ip
100039aa:	d100      	bne.n	100039ae <__aeabi_dadd+0x42>
100039ac:	e0a4      	b.n	10003af8 <__aeabi_dadd+0x18c>
100039ae:	2b00      	cmp	r3, #0
100039b0:	dc00      	bgt.n	100039b4 <__aeabi_dadd+0x48>
100039b2:	e0f5      	b.n	10003ba0 <__aeabi_dadd+0x234>
100039b4:	2e00      	cmp	r6, #0
100039b6:	d10c      	bne.n	100039d2 <__aeabi_dadd+0x66>
100039b8:	1c26      	adds	r6, r4, #0
100039ba:	4316      	orrs	r6, r2
100039bc:	d100      	bne.n	100039c0 <__aeabi_dadd+0x54>
100039be:	e0c2      	b.n	10003b46 <__aeabi_dadd+0x1da>
100039c0:	3b01      	subs	r3, #1
100039c2:	2b00      	cmp	r3, #0
100039c4:	d000      	beq.n	100039c8 <__aeabi_dadd+0x5c>
100039c6:	e146      	b.n	10003c56 <__aeabi_dadd+0x2ea>
100039c8:	465c      	mov	r4, fp
100039ca:	464b      	mov	r3, r9
100039cc:	1a82      	subs	r2, r0, r2
100039ce:	1ae7      	subs	r7, r4, r3
100039d0:	e021      	b.n	10003a16 <__aeabi_dadd+0xaa>
100039d2:	4ed2      	ldr	r6, [pc, #840]	; (10003d1c <__aeabi_dadd+0x3b0>)
100039d4:	42b5      	cmp	r5, r6
100039d6:	d100      	bne.n	100039da <__aeabi_dadd+0x6e>
100039d8:	e0cd      	b.n	10003b76 <__aeabi_dadd+0x20a>
100039da:	2480      	movs	r4, #128	; 0x80
100039dc:	464a      	mov	r2, r9
100039de:	0427      	lsls	r7, r4, #16
100039e0:	433a      	orrs	r2, r7
100039e2:	4691      	mov	r9, r2
100039e4:	2b38      	cmp	r3, #56	; 0x38
100039e6:	dd00      	ble.n	100039ea <__aeabi_dadd+0x7e>
100039e8:	e10f      	b.n	10003c0a <__aeabi_dadd+0x29e>
100039ea:	2b1f      	cmp	r3, #31
100039ec:	dd00      	ble.n	100039f0 <__aeabi_dadd+0x84>
100039ee:	e150      	b.n	10003c92 <__aeabi_dadd+0x326>
100039f0:	2620      	movs	r6, #32
100039f2:	1af6      	subs	r6, r6, r3
100039f4:	464c      	mov	r4, r9
100039f6:	4652      	mov	r2, sl
100039f8:	4657      	mov	r7, sl
100039fa:	40b4      	lsls	r4, r6
100039fc:	40b7      	lsls	r7, r6
100039fe:	40da      	lsrs	r2, r3
10003a00:	4322      	orrs	r2, r4
10003a02:	1c3e      	adds	r6, r7, #0
10003a04:	464c      	mov	r4, r9
10003a06:	1e77      	subs	r7, r6, #1
10003a08:	41be      	sbcs	r6, r7
10003a0a:	40dc      	lsrs	r4, r3
10003a0c:	4332      	orrs	r2, r6
10003a0e:	1c26      	adds	r6, r4, #0
10003a10:	465b      	mov	r3, fp
10003a12:	1a82      	subs	r2, r0, r2
10003a14:	1b9f      	subs	r7, r3, r6
10003a16:	4290      	cmp	r0, r2
10003a18:	4180      	sbcs	r0, r0
10003a1a:	4246      	negs	r6, r0
10003a1c:	1bbb      	subs	r3, r7, r6
10003a1e:	1c14      	adds	r4, r2, #0
10003a20:	1c2e      	adds	r6, r5, #0
10003a22:	1c0f      	adds	r7, r1, #0
10003a24:	0218      	lsls	r0, r3, #8
10003a26:	d400      	bmi.n	10003a2a <__aeabi_dadd+0xbe>
10003a28:	e0ae      	b.n	10003b88 <__aeabi_dadd+0x21c>
10003a2a:	025d      	lsls	r5, r3, #9
10003a2c:	0a69      	lsrs	r1, r5, #9
10003a2e:	4688      	mov	r8, r1
10003a30:	4642      	mov	r2, r8
10003a32:	2a00      	cmp	r2, #0
10003a34:	d100      	bne.n	10003a38 <__aeabi_dadd+0xcc>
10003a36:	e0d9      	b.n	10003bec <__aeabi_dadd+0x280>
10003a38:	4640      	mov	r0, r8
10003a3a:	f001 fe99 	bl	10005770 <__clzsi2>
10003a3e:	1c05      	adds	r5, r0, #0
10003a40:	3d08      	subs	r5, #8
10003a42:	2d1f      	cmp	r5, #31
10003a44:	dd00      	ble.n	10003a48 <__aeabi_dadd+0xdc>
10003a46:	e0da      	b.n	10003bfe <__aeabi_dadd+0x292>
10003a48:	2228      	movs	r2, #40	; 0x28
10003a4a:	1a13      	subs	r3, r2, r0
10003a4c:	1c20      	adds	r0, r4, #0
10003a4e:	4641      	mov	r1, r8
10003a50:	40d8      	lsrs	r0, r3
10003a52:	40a9      	lsls	r1, r5
10003a54:	1c03      	adds	r3, r0, #0
10003a56:	430b      	orrs	r3, r1
10003a58:	40ac      	lsls	r4, r5
10003a5a:	42ae      	cmp	r6, r5
10003a5c:	dd00      	ble.n	10003a60 <__aeabi_dadd+0xf4>
10003a5e:	e090      	b.n	10003b82 <__aeabi_dadd+0x216>
10003a60:	1bae      	subs	r6, r5, r6
10003a62:	1c71      	adds	r1, r6, #1
10003a64:	291f      	cmp	r1, #31
10003a66:	dd00      	ble.n	10003a6a <__aeabi_dadd+0xfe>
10003a68:	e100      	b.n	10003c6c <__aeabi_dadd+0x300>
10003a6a:	201f      	movs	r0, #31
10003a6c:	1b85      	subs	r5, r0, r6
10003a6e:	1c1a      	adds	r2, r3, #0
10003a70:	1c20      	adds	r0, r4, #0
10003a72:	40aa      	lsls	r2, r5
10003a74:	40c8      	lsrs	r0, r1
10003a76:	40ac      	lsls	r4, r5
10003a78:	4310      	orrs	r0, r2
10003a7a:	1e66      	subs	r6, r4, #1
10003a7c:	41b4      	sbcs	r4, r6
10003a7e:	4304      	orrs	r4, r0
10003a80:	40cb      	lsrs	r3, r1
10003a82:	2201      	movs	r2, #1
10003a84:	2600      	movs	r6, #0
10003a86:	200f      	movs	r0, #15
10003a88:	4020      	ands	r0, r4
10003a8a:	2804      	cmp	r0, #4
10003a8c:	d064      	beq.n	10003b58 <__aeabi_dadd+0x1ec>
10003a8e:	1d20      	adds	r0, r4, #4
10003a90:	42a0      	cmp	r0, r4
10003a92:	41a4      	sbcs	r4, r4
10003a94:	4265      	negs	r5, r4
10003a96:	2180      	movs	r1, #128	; 0x80
10003a98:	195b      	adds	r3, r3, r5
10003a9a:	2401      	movs	r4, #1
10003a9c:	040d      	lsls	r5, r1, #16
10003a9e:	401d      	ands	r5, r3
10003aa0:	4027      	ands	r7, r4
10003aa2:	2d00      	cmp	r5, #0
10003aa4:	d007      	beq.n	10003ab6 <__aeabi_dadd+0x14a>
10003aa6:	4e9d      	ldr	r6, [pc, #628]	; (10003d1c <__aeabi_dadd+0x3b0>)
10003aa8:	42b2      	cmp	r2, r6
10003aaa:	d100      	bne.n	10003aae <__aeabi_dadd+0x142>
10003aac:	e09a      	b.n	10003be4 <__aeabi_dadd+0x278>
10003aae:	499c      	ldr	r1, [pc, #624]	; (10003d20 <__aeabi_dadd+0x3b4>)
10003ab0:	1c16      	adds	r6, r2, #0
10003ab2:	400b      	ands	r3, r1
10003ab4:	3201      	adds	r2, #1
10003ab6:	075c      	lsls	r4, r3, #29
10003ab8:	08c0      	lsrs	r0, r0, #3
10003aba:	0552      	lsls	r2, r2, #21
10003abc:	4304      	orrs	r4, r0
10003abe:	08db      	lsrs	r3, r3, #3
10003ac0:	0d55      	lsrs	r5, r2, #21
10003ac2:	2d01      	cmp	r5, #1
10003ac4:	dd62      	ble.n	10003b8c <__aeabi_dadd+0x220>
10003ac6:	031b      	lsls	r3, r3, #12
10003ac8:	0576      	lsls	r6, r6, #21
10003aca:	0b1b      	lsrs	r3, r3, #12
10003acc:	0d76      	lsrs	r6, r6, #21
10003ace:	2000      	movs	r0, #0
10003ad0:	2100      	movs	r1, #0
10003ad2:	0d09      	lsrs	r1, r1, #20
10003ad4:	1c20      	adds	r0, r4, #0
10003ad6:	050a      	lsls	r2, r1, #20
10003ad8:	4c92      	ldr	r4, [pc, #584]	; (10003d24 <__aeabi_dadd+0x3b8>)
10003ada:	4313      	orrs	r3, r2
10003adc:	0576      	lsls	r6, r6, #21
10003ade:	0875      	lsrs	r5, r6, #1
10003ae0:	401c      	ands	r4, r3
10003ae2:	432c      	orrs	r4, r5
10003ae4:	0063      	lsls	r3, r4, #1
10003ae6:	07ff      	lsls	r7, r7, #31
10003ae8:	0859      	lsrs	r1, r3, #1
10003aea:	4339      	orrs	r1, r7
10003aec:	bc3c      	pop	{r2, r3, r4, r5}
10003aee:	4690      	mov	r8, r2
10003af0:	4699      	mov	r9, r3
10003af2:	46a2      	mov	sl, r4
10003af4:	46ab      	mov	fp, r5
10003af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003af8:	2b00      	cmp	r3, #0
10003afa:	dc00      	bgt.n	10003afe <__aeabi_dadd+0x192>
10003afc:	e091      	b.n	10003c22 <__aeabi_dadd+0x2b6>
10003afe:	2e00      	cmp	r6, #0
10003b00:	d031      	beq.n	10003b66 <__aeabi_dadd+0x1fa>
10003b02:	4e86      	ldr	r6, [pc, #536]	; (10003d1c <__aeabi_dadd+0x3b0>)
10003b04:	42b5      	cmp	r5, r6
10003b06:	d100      	bne.n	10003b0a <__aeabi_dadd+0x19e>
10003b08:	e0a9      	b.n	10003c5e <__aeabi_dadd+0x2f2>
10003b0a:	2480      	movs	r4, #128	; 0x80
10003b0c:	464e      	mov	r6, r9
10003b0e:	0422      	lsls	r2, r4, #16
10003b10:	4316      	orrs	r6, r2
10003b12:	46b1      	mov	r9, r6
10003b14:	2b38      	cmp	r3, #56	; 0x38
10003b16:	dd00      	ble.n	10003b1a <__aeabi_dadd+0x1ae>
10003b18:	e118      	b.n	10003d4c <__aeabi_dadd+0x3e0>
10003b1a:	2b1f      	cmp	r3, #31
10003b1c:	dd00      	ble.n	10003b20 <__aeabi_dadd+0x1b4>
10003b1e:	e173      	b.n	10003e08 <__aeabi_dadd+0x49c>
10003b20:	2620      	movs	r6, #32
10003b22:	1af6      	subs	r6, r6, r3
10003b24:	464a      	mov	r2, r9
10003b26:	40b2      	lsls	r2, r6
10003b28:	4690      	mov	r8, r2
10003b2a:	4652      	mov	r2, sl
10003b2c:	4644      	mov	r4, r8
10003b2e:	40da      	lsrs	r2, r3
10003b30:	4322      	orrs	r2, r4
10003b32:	4654      	mov	r4, sl
10003b34:	40b4      	lsls	r4, r6
10003b36:	1c26      	adds	r6, r4, #0
10003b38:	1e74      	subs	r4, r6, #1
10003b3a:	41a6      	sbcs	r6, r4
10003b3c:	464c      	mov	r4, r9
10003b3e:	4332      	orrs	r2, r6
10003b40:	40dc      	lsrs	r4, r3
10003b42:	1812      	adds	r2, r2, r0
10003b44:	e0f6      	b.n	10003d34 <__aeabi_dadd+0x3c8>
10003b46:	1c04      	adds	r4, r0, #0
10003b48:	200f      	movs	r0, #15
10003b4a:	1c6a      	adds	r2, r5, #1
10003b4c:	465b      	mov	r3, fp
10003b4e:	1c2e      	adds	r6, r5, #0
10003b50:	1c0f      	adds	r7, r1, #0
10003b52:	4020      	ands	r0, r4
10003b54:	2804      	cmp	r0, #4
10003b56:	d19a      	bne.n	10003a8e <__aeabi_dadd+0x122>
10003b58:	2580      	movs	r5, #128	; 0x80
10003b5a:	042d      	lsls	r5, r5, #16
10003b5c:	2101      	movs	r1, #1
10003b5e:	401d      	ands	r5, r3
10003b60:	400f      	ands	r7, r1
10003b62:	1c20      	adds	r0, r4, #0
10003b64:	e79d      	b.n	10003aa2 <__aeabi_dadd+0x136>
10003b66:	4314      	orrs	r4, r2
10003b68:	d000      	beq.n	10003b6c <__aeabi_dadd+0x200>
10003b6a:	e0dd      	b.n	10003d28 <__aeabi_dadd+0x3bc>
10003b6c:	1c6a      	adds	r2, r5, #1
10003b6e:	465b      	mov	r3, fp
10003b70:	1c04      	adds	r4, r0, #0
10003b72:	1c2e      	adds	r6, r5, #0
10003b74:	e787      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003b76:	2180      	movs	r1, #128	; 0x80
10003b78:	465b      	mov	r3, fp
10003b7a:	1c04      	adds	r4, r0, #0
10003b7c:	010a      	lsls	r2, r1, #4
10003b7e:	1c2e      	adds	r6, r5, #0
10003b80:	e781      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003b82:	1b76      	subs	r6, r6, r5
10003b84:	4d66      	ldr	r5, [pc, #408]	; (10003d20 <__aeabi_dadd+0x3b4>)
10003b86:	402b      	ands	r3, r5
10003b88:	1c72      	adds	r2, r6, #1
10003b8a:	e77c      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003b8c:	1c21      	adds	r1, r4, #0
10003b8e:	4319      	orrs	r1, r3
10003b90:	d100      	bne.n	10003b94 <__aeabi_dadd+0x228>
10003b92:	e267      	b.n	10004064 <__aeabi_dadd+0x6f8>
10003b94:	2e00      	cmp	r6, #0
10003b96:	d041      	beq.n	10003c1c <__aeabi_dadd+0x2b0>
10003b98:	2080      	movs	r0, #128	; 0x80
10003b9a:	0302      	lsls	r2, r0, #12
10003b9c:	4313      	orrs	r3, r2
10003b9e:	e792      	b.n	10003ac6 <__aeabi_dadd+0x15a>
10003ba0:	2b00      	cmp	r3, #0
10003ba2:	d000      	beq.n	10003ba6 <__aeabi_dadd+0x23a>
10003ba4:	e088      	b.n	10003cb8 <__aeabi_dadd+0x34c>
10003ba6:	1c69      	adds	r1, r5, #1
10003ba8:	054e      	lsls	r6, r1, #21
10003baa:	0d74      	lsrs	r4, r6, #21
10003bac:	2c01      	cmp	r4, #1
10003bae:	dc00      	bgt.n	10003bb2 <__aeabi_dadd+0x246>
10003bb0:	e11a      	b.n	10003de8 <__aeabi_dadd+0x47c>
10003bb2:	465b      	mov	r3, fp
10003bb4:	1c16      	adds	r6, r2, #0
10003bb6:	464c      	mov	r4, r9
10003bb8:	1a82      	subs	r2, r0, r2
10003bba:	1b19      	subs	r1, r3, r4
10003bbc:	4290      	cmp	r0, r2
10003bbe:	419b      	sbcs	r3, r3
10003bc0:	425b      	negs	r3, r3
10003bc2:	1ac9      	subs	r1, r1, r3
10003bc4:	4688      	mov	r8, r1
10003bc6:	020b      	lsls	r3, r1, #8
10003bc8:	d400      	bmi.n	10003bcc <__aeabi_dadd+0x260>
10003bca:	e09e      	b.n	10003d0a <__aeabi_dadd+0x39e>
10003bcc:	1a37      	subs	r7, r6, r0
10003bce:	45ba      	cmp	sl, r7
10003bd0:	4192      	sbcs	r2, r2
10003bd2:	465e      	mov	r6, fp
10003bd4:	1ba4      	subs	r4, r4, r6
10003bd6:	4253      	negs	r3, r2
10003bd8:	1ae1      	subs	r1, r4, r3
10003bda:	4688      	mov	r8, r1
10003bdc:	1c3c      	adds	r4, r7, #0
10003bde:	1c2e      	adds	r6, r5, #0
10003be0:	4667      	mov	r7, ip
10003be2:	e725      	b.n	10003a30 <__aeabi_dadd+0xc4>
10003be4:	1c16      	adds	r6, r2, #0
10003be6:	2300      	movs	r3, #0
10003be8:	2400      	movs	r4, #0
10003bea:	e770      	b.n	10003ace <__aeabi_dadd+0x162>
10003bec:	1c20      	adds	r0, r4, #0
10003bee:	f001 fdbf 	bl	10005770 <__clzsi2>
10003bf2:	3020      	adds	r0, #32
10003bf4:	1c05      	adds	r5, r0, #0
10003bf6:	3d08      	subs	r5, #8
10003bf8:	2d1f      	cmp	r5, #31
10003bfa:	dc00      	bgt.n	10003bfe <__aeabi_dadd+0x292>
10003bfc:	e724      	b.n	10003a48 <__aeabi_dadd+0xdc>
10003bfe:	1c03      	adds	r3, r0, #0
10003c00:	3b28      	subs	r3, #40	; 0x28
10003c02:	409c      	lsls	r4, r3
10003c04:	1c23      	adds	r3, r4, #0
10003c06:	2400      	movs	r4, #0
10003c08:	e727      	b.n	10003a5a <__aeabi_dadd+0xee>
10003c0a:	464a      	mov	r2, r9
10003c0c:	4653      	mov	r3, sl
10003c0e:	431a      	orrs	r2, r3
10003c10:	2600      	movs	r6, #0
10003c12:	2a00      	cmp	r2, #0
10003c14:	d100      	bne.n	10003c18 <__aeabi_dadd+0x2ac>
10003c16:	e6fb      	b.n	10003a10 <__aeabi_dadd+0xa4>
10003c18:	2201      	movs	r2, #1
10003c1a:	e6f9      	b.n	10003a10 <__aeabi_dadd+0xa4>
10003c1c:	031d      	lsls	r5, r3, #12
10003c1e:	0b2b      	lsrs	r3, r5, #12
10003c20:	e755      	b.n	10003ace <__aeabi_dadd+0x162>
10003c22:	2b00      	cmp	r3, #0
10003c24:	d000      	beq.n	10003c28 <__aeabi_dadd+0x2bc>
10003c26:	e104      	b.n	10003e32 <__aeabi_dadd+0x4c6>
10003c28:	1c6e      	adds	r6, r5, #1
10003c2a:	0574      	lsls	r4, r6, #21
10003c2c:	0d63      	lsrs	r3, r4, #21
10003c2e:	2b01      	cmp	r3, #1
10003c30:	dc00      	bgt.n	10003c34 <__aeabi_dadd+0x2c8>
10003c32:	e0aa      	b.n	10003d8a <__aeabi_dadd+0x41e>
10003c34:	4939      	ldr	r1, [pc, #228]	; (10003d1c <__aeabi_dadd+0x3b0>)
10003c36:	428e      	cmp	r6, r1
10003c38:	d100      	bne.n	10003c3c <__aeabi_dadd+0x2d0>
10003c3a:	e130      	b.n	10003e9e <__aeabi_dadd+0x532>
10003c3c:	1811      	adds	r1, r2, r0
10003c3e:	4281      	cmp	r1, r0
10003c40:	4180      	sbcs	r0, r0
10003c42:	464b      	mov	r3, r9
10003c44:	4242      	negs	r2, r0
10003c46:	445b      	add	r3, fp
10003c48:	189b      	adds	r3, r3, r2
10003c4a:	07dc      	lsls	r4, r3, #31
10003c4c:	0849      	lsrs	r1, r1, #1
10003c4e:	430c      	orrs	r4, r1
10003c50:	085b      	lsrs	r3, r3, #1
10003c52:	1caa      	adds	r2, r5, #2
10003c54:	e717      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003c56:	4f31      	ldr	r7, [pc, #196]	; (10003d1c <__aeabi_dadd+0x3b0>)
10003c58:	42bd      	cmp	r5, r7
10003c5a:	d000      	beq.n	10003c5e <__aeabi_dadd+0x2f2>
10003c5c:	e6c2      	b.n	100039e4 <__aeabi_dadd+0x78>
10003c5e:	1c04      	adds	r4, r0, #0
10003c60:	2080      	movs	r0, #128	; 0x80
10003c62:	465b      	mov	r3, fp
10003c64:	1c0f      	adds	r7, r1, #0
10003c66:	0102      	lsls	r2, r0, #4
10003c68:	1c2e      	adds	r6, r5, #0
10003c6a:	e70c      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003c6c:	1c30      	adds	r0, r6, #0
10003c6e:	381f      	subs	r0, #31
10003c70:	1c1a      	adds	r2, r3, #0
10003c72:	40c2      	lsrs	r2, r0
10003c74:	1c15      	adds	r5, r2, #0
10003c76:	2920      	cmp	r1, #32
10003c78:	d100      	bne.n	10003c7c <__aeabi_dadd+0x310>
10003c7a:	e082      	b.n	10003d82 <__aeabi_dadd+0x416>
10003c7c:	213f      	movs	r1, #63	; 0x3f
10003c7e:	1b8e      	subs	r6, r1, r6
10003c80:	40b3      	lsls	r3, r6
10003c82:	431c      	orrs	r4, r3
10003c84:	1e63      	subs	r3, r4, #1
10003c86:	419c      	sbcs	r4, r3
10003c88:	432c      	orrs	r4, r5
10003c8a:	2201      	movs	r2, #1
10003c8c:	2300      	movs	r3, #0
10003c8e:	2600      	movs	r6, #0
10003c90:	e6f9      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003c92:	1c1c      	adds	r4, r3, #0
10003c94:	3c20      	subs	r4, #32
10003c96:	464f      	mov	r7, r9
10003c98:	40e7      	lsrs	r7, r4
10003c9a:	1c3e      	adds	r6, r7, #0
10003c9c:	2b20      	cmp	r3, #32
10003c9e:	d072      	beq.n	10003d86 <__aeabi_dadd+0x41a>
10003ca0:	2240      	movs	r2, #64	; 0x40
10003ca2:	1ad4      	subs	r4, r2, r3
10003ca4:	464b      	mov	r3, r9
10003ca6:	40a3      	lsls	r3, r4
10003ca8:	1c1a      	adds	r2, r3, #0
10003caa:	4657      	mov	r7, sl
10003cac:	433a      	orrs	r2, r7
10003cae:	1e53      	subs	r3, r2, #1
10003cb0:	419a      	sbcs	r2, r3
10003cb2:	4332      	orrs	r2, r6
10003cb4:	2600      	movs	r6, #0
10003cb6:	e6ab      	b.n	10003a10 <__aeabi_dadd+0xa4>
10003cb8:	425f      	negs	r7, r3
10003cba:	2d00      	cmp	r5, #0
10003cbc:	d050      	beq.n	10003d60 <__aeabi_dadd+0x3f4>
10003cbe:	4d17      	ldr	r5, [pc, #92]	; (10003d1c <__aeabi_dadd+0x3b0>)
10003cc0:	42ae      	cmp	r6, r5
10003cc2:	d100      	bne.n	10003cc6 <__aeabi_dadd+0x35a>
10003cc4:	e155      	b.n	10003f72 <__aeabi_dadd+0x606>
10003cc6:	2480      	movs	r4, #128	; 0x80
10003cc8:	465a      	mov	r2, fp
10003cca:	0421      	lsls	r1, r4, #16
10003ccc:	430a      	orrs	r2, r1
10003cce:	4693      	mov	fp, r2
10003cd0:	2f38      	cmp	r7, #56	; 0x38
10003cd2:	dd00      	ble.n	10003cd6 <__aeabi_dadd+0x36a>
10003cd4:	e0da      	b.n	10003e8c <__aeabi_dadd+0x520>
10003cd6:	2f1f      	cmp	r7, #31
10003cd8:	dd00      	ble.n	10003cdc <__aeabi_dadd+0x370>
10003cda:	e178      	b.n	10003fce <__aeabi_dadd+0x662>
10003cdc:	2120      	movs	r1, #32
10003cde:	1bcc      	subs	r4, r1, r7
10003ce0:	1c05      	adds	r5, r0, #0
10003ce2:	465a      	mov	r2, fp
10003ce4:	40a2      	lsls	r2, r4
10003ce6:	40fd      	lsrs	r5, r7
10003ce8:	40a0      	lsls	r0, r4
10003cea:	4315      	orrs	r5, r2
10003cec:	465b      	mov	r3, fp
10003cee:	1e42      	subs	r2, r0, #1
10003cf0:	4190      	sbcs	r0, r2
10003cf2:	4328      	orrs	r0, r5
10003cf4:	40fb      	lsrs	r3, r7
10003cf6:	4657      	mov	r7, sl
10003cf8:	1a3c      	subs	r4, r7, r0
10003cfa:	45a2      	cmp	sl, r4
10003cfc:	4192      	sbcs	r2, r2
10003cfe:	4648      	mov	r0, r9
10003d00:	1ac1      	subs	r1, r0, r3
10003d02:	4255      	negs	r5, r2
10003d04:	1b4b      	subs	r3, r1, r5
10003d06:	4667      	mov	r7, ip
10003d08:	e68c      	b.n	10003a24 <__aeabi_dadd+0xb8>
10003d0a:	1c08      	adds	r0, r1, #0
10003d0c:	4310      	orrs	r0, r2
10003d0e:	d130      	bne.n	10003d72 <__aeabi_dadd+0x406>
10003d10:	2700      	movs	r7, #0
10003d12:	2201      	movs	r2, #1
10003d14:	2300      	movs	r3, #0
10003d16:	2004      	movs	r0, #4
10003d18:	2600      	movs	r6, #0
10003d1a:	e6cc      	b.n	10003ab6 <__aeabi_dadd+0x14a>
10003d1c:	000007ff 	.word	0x000007ff
10003d20:	ff7fffff 	.word	0xff7fffff
10003d24:	800fffff 	.word	0x800fffff
10003d28:	3b01      	subs	r3, #1
10003d2a:	2b00      	cmp	r3, #0
10003d2c:	d124      	bne.n	10003d78 <__aeabi_dadd+0x40c>
10003d2e:	4653      	mov	r3, sl
10003d30:	181a      	adds	r2, r3, r0
10003d32:	464c      	mov	r4, r9
10003d34:	4282      	cmp	r2, r0
10003d36:	4180      	sbcs	r0, r0
10003d38:	445c      	add	r4, fp
10003d3a:	4243      	negs	r3, r0
10003d3c:	18e3      	adds	r3, r4, r3
10003d3e:	1c2e      	adds	r6, r5, #0
10003d40:	1c14      	adds	r4, r2, #0
10003d42:	0218      	lsls	r0, r3, #8
10003d44:	d43e      	bmi.n	10003dc4 <__aeabi_dadd+0x458>
10003d46:	1c72      	adds	r2, r6, #1
10003d48:	1c0f      	adds	r7, r1, #0
10003d4a:	e69c      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003d4c:	464a      	mov	r2, r9
10003d4e:	4653      	mov	r3, sl
10003d50:	431a      	orrs	r2, r3
10003d52:	2400      	movs	r4, #0
10003d54:	2a00      	cmp	r2, #0
10003d56:	d100      	bne.n	10003d5a <__aeabi_dadd+0x3ee>
10003d58:	e6f3      	b.n	10003b42 <__aeabi_dadd+0x1d6>
10003d5a:	2201      	movs	r2, #1
10003d5c:	1812      	adds	r2, r2, r0
10003d5e:	e7e9      	b.n	10003d34 <__aeabi_dadd+0x3c8>
10003d60:	465b      	mov	r3, fp
10003d62:	4303      	orrs	r3, r0
10003d64:	d000      	beq.n	10003d68 <__aeabi_dadd+0x3fc>
10003d66:	e083      	b.n	10003e70 <__aeabi_dadd+0x504>
10003d68:	1c23      	adds	r3, r4, #0
10003d6a:	1c72      	adds	r2, r6, #1
10003d6c:	4654      	mov	r4, sl
10003d6e:	4667      	mov	r7, ip
10003d70:	e689      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003d72:	1c14      	adds	r4, r2, #0
10003d74:	1c2e      	adds	r6, r5, #0
10003d76:	e65b      	b.n	10003a30 <__aeabi_dadd+0xc4>
10003d78:	4ecd      	ldr	r6, [pc, #820]	; (100040b0 <__aeabi_dadd+0x744>)
10003d7a:	42b5      	cmp	r5, r6
10003d7c:	d000      	beq.n	10003d80 <__aeabi_dadd+0x414>
10003d7e:	e6c9      	b.n	10003b14 <__aeabi_dadd+0x1a8>
10003d80:	e76d      	b.n	10003c5e <__aeabi_dadd+0x2f2>
10003d82:	2300      	movs	r3, #0
10003d84:	e77d      	b.n	10003c82 <__aeabi_dadd+0x316>
10003d86:	2200      	movs	r2, #0
10003d88:	e78f      	b.n	10003caa <__aeabi_dadd+0x33e>
10003d8a:	465e      	mov	r6, fp
10003d8c:	4306      	orrs	r6, r0
10003d8e:	2d00      	cmp	r5, #0
10003d90:	d000      	beq.n	10003d94 <__aeabi_dadd+0x428>
10003d92:	e0f4      	b.n	10003f7e <__aeabi_dadd+0x612>
10003d94:	2e00      	cmp	r6, #0
10003d96:	d100      	bne.n	10003d9a <__aeabi_dadd+0x42e>
10003d98:	e14c      	b.n	10004034 <__aeabi_dadd+0x6c8>
10003d9a:	464b      	mov	r3, r9
10003d9c:	4313      	orrs	r3, r2
10003d9e:	d100      	bne.n	10003da2 <__aeabi_dadd+0x436>
10003da0:	e17e      	b.n	100040a0 <__aeabi_dadd+0x734>
10003da2:	1815      	adds	r5, r2, r0
10003da4:	464e      	mov	r6, r9
10003da6:	4285      	cmp	r5, r0
10003da8:	4180      	sbcs	r0, r0
10003daa:	445e      	add	r6, fp
10003dac:	4242      	negs	r2, r0
10003dae:	18b3      	adds	r3, r6, r2
10003db0:	021e      	lsls	r6, r3, #8
10003db2:	d400      	bmi.n	10003db6 <__aeabi_dadd+0x44a>
10003db4:	e182      	b.n	100040bc <__aeabi_dadd+0x750>
10003db6:	4fbf      	ldr	r7, [pc, #764]	; (100040b4 <__aeabi_dadd+0x748>)
10003db8:	1c2c      	adds	r4, r5, #0
10003dba:	403b      	ands	r3, r7
10003dbc:	2202      	movs	r2, #2
10003dbe:	1c0f      	adds	r7, r1, #0
10003dc0:	2601      	movs	r6, #1
10003dc2:	e660      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003dc4:	4dba      	ldr	r5, [pc, #744]	; (100040b0 <__aeabi_dadd+0x744>)
10003dc6:	1c70      	adds	r0, r6, #1
10003dc8:	42a8      	cmp	r0, r5
10003dca:	d04b      	beq.n	10003e64 <__aeabi_dadd+0x4f8>
10003dcc:	4fb9      	ldr	r7, [pc, #740]	; (100040b4 <__aeabi_dadd+0x748>)
10003dce:	2501      	movs	r5, #1
10003dd0:	4025      	ands	r5, r4
10003dd2:	0862      	lsrs	r2, r4, #1
10003dd4:	403b      	ands	r3, r7
10003dd6:	1c2c      	adds	r4, r5, #0
10003dd8:	07df      	lsls	r7, r3, #31
10003dda:	4314      	orrs	r4, r2
10003ddc:	433c      	orrs	r4, r7
10003dde:	1cb2      	adds	r2, r6, #2
10003de0:	085b      	lsrs	r3, r3, #1
10003de2:	1c06      	adds	r6, r0, #0
10003de4:	1c0f      	adds	r7, r1, #0
10003de6:	e64e      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003de8:	465e      	mov	r6, fp
10003dea:	4306      	orrs	r6, r0
10003dec:	2d00      	cmp	r5, #0
10003dee:	d12c      	bne.n	10003e4a <__aeabi_dadd+0x4de>
10003df0:	2e00      	cmp	r6, #0
10003df2:	d000      	beq.n	10003df6 <__aeabi_dadd+0x48a>
10003df4:	e07d      	b.n	10003ef2 <__aeabi_dadd+0x586>
10003df6:	464e      	mov	r6, r9
10003df8:	1c14      	adds	r4, r2, #0
10003dfa:	4316      	orrs	r6, r2
10003dfc:	d088      	beq.n	10003d10 <__aeabi_dadd+0x3a4>
10003dfe:	464b      	mov	r3, r9
10003e00:	4667      	mov	r7, ip
10003e02:	2201      	movs	r2, #1
10003e04:	2600      	movs	r6, #0
10003e06:	e63e      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003e08:	1c1e      	adds	r6, r3, #0
10003e0a:	3e20      	subs	r6, #32
10003e0c:	464c      	mov	r4, r9
10003e0e:	40f4      	lsrs	r4, r6
10003e10:	1c26      	adds	r6, r4, #0
10003e12:	2b20      	cmp	r3, #32
10003e14:	d100      	bne.n	10003e18 <__aeabi_dadd+0x4ac>
10003e16:	e0d8      	b.n	10003fca <__aeabi_dadd+0x65e>
10003e18:	2240      	movs	r2, #64	; 0x40
10003e1a:	1ad4      	subs	r4, r2, r3
10003e1c:	464b      	mov	r3, r9
10003e1e:	40a3      	lsls	r3, r4
10003e20:	1c1a      	adds	r2, r3, #0
10003e22:	4654      	mov	r4, sl
10003e24:	4322      	orrs	r2, r4
10003e26:	1e53      	subs	r3, r2, #1
10003e28:	419a      	sbcs	r2, r3
10003e2a:	4332      	orrs	r2, r6
10003e2c:	2400      	movs	r4, #0
10003e2e:	1812      	adds	r2, r2, r0
10003e30:	e780      	b.n	10003d34 <__aeabi_dadd+0x3c8>
10003e32:	425b      	negs	r3, r3
10003e34:	2d00      	cmp	r5, #0
10003e36:	d137      	bne.n	10003ea8 <__aeabi_dadd+0x53c>
10003e38:	465c      	mov	r4, fp
10003e3a:	4304      	orrs	r4, r0
10003e3c:	d000      	beq.n	10003e40 <__aeabi_dadd+0x4d4>
10003e3e:	e0d7      	b.n	10003ff0 <__aeabi_dadd+0x684>
10003e40:	1c72      	adds	r2, r6, #1
10003e42:	464b      	mov	r3, r9
10003e44:	4654      	mov	r4, sl
10003e46:	1c0f      	adds	r7, r1, #0
10003e48:	e61d      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003e4a:	2e00      	cmp	r6, #0
10003e4c:	d16e      	bne.n	10003f2c <__aeabi_dadd+0x5c0>
10003e4e:	464b      	mov	r3, r9
10003e50:	1c14      	adds	r4, r2, #0
10003e52:	4313      	orrs	r3, r2
10003e54:	d100      	bne.n	10003e58 <__aeabi_dadd+0x4ec>
10003e56:	e0dc      	b.n	10004012 <__aeabi_dadd+0x6a6>
10003e58:	2580      	movs	r5, #128	; 0x80
10003e5a:	464b      	mov	r3, r9
10003e5c:	4667      	mov	r7, ip
10003e5e:	012a      	lsls	r2, r5, #4
10003e60:	4e93      	ldr	r6, [pc, #588]	; (100040b0 <__aeabi_dadd+0x744>)
10003e62:	e610      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003e64:	2180      	movs	r1, #128	; 0x80
10003e66:	1c06      	adds	r6, r0, #0
10003e68:	010a      	lsls	r2, r1, #4
10003e6a:	2300      	movs	r3, #0
10003e6c:	2004      	movs	r0, #4
10003e6e:	e622      	b.n	10003ab6 <__aeabi_dadd+0x14a>
10003e70:	3f01      	subs	r7, #1
10003e72:	2f00      	cmp	r7, #0
10003e74:	d179      	bne.n	10003f6a <__aeabi_dadd+0x5fe>
10003e76:	1a17      	subs	r7, r2, r0
10003e78:	465b      	mov	r3, fp
10003e7a:	45ba      	cmp	sl, r7
10003e7c:	41ad      	sbcs	r5, r5
10003e7e:	4649      	mov	r1, r9
10003e80:	1aca      	subs	r2, r1, r3
10003e82:	4268      	negs	r0, r5
10003e84:	1c3c      	adds	r4, r7, #0
10003e86:	1a13      	subs	r3, r2, r0
10003e88:	4667      	mov	r7, ip
10003e8a:	e5cb      	b.n	10003a24 <__aeabi_dadd+0xb8>
10003e8c:	465f      	mov	r7, fp
10003e8e:	4307      	orrs	r7, r0
10003e90:	2300      	movs	r3, #0
10003e92:	2000      	movs	r0, #0
10003e94:	2f00      	cmp	r7, #0
10003e96:	d100      	bne.n	10003e9a <__aeabi_dadd+0x52e>
10003e98:	e72d      	b.n	10003cf6 <__aeabi_dadd+0x38a>
10003e9a:	2001      	movs	r0, #1
10003e9c:	e72b      	b.n	10003cf6 <__aeabi_dadd+0x38a>
10003e9e:	2580      	movs	r5, #128	; 0x80
10003ea0:	012a      	lsls	r2, r5, #4
10003ea2:	2300      	movs	r3, #0
10003ea4:	2004      	movs	r0, #4
10003ea6:	e606      	b.n	10003ab6 <__aeabi_dadd+0x14a>
10003ea8:	4d81      	ldr	r5, [pc, #516]	; (100040b0 <__aeabi_dadd+0x744>)
10003eaa:	42ae      	cmp	r6, r5
10003eac:	d100      	bne.n	10003eb0 <__aeabi_dadd+0x544>
10003eae:	e0d3      	b.n	10004058 <__aeabi_dadd+0x6ec>
10003eb0:	2480      	movs	r4, #128	; 0x80
10003eb2:	465d      	mov	r5, fp
10003eb4:	0422      	lsls	r2, r4, #16
10003eb6:	4315      	orrs	r5, r2
10003eb8:	46ab      	mov	fp, r5
10003eba:	2b38      	cmp	r3, #56	; 0x38
10003ebc:	dd00      	ble.n	10003ec0 <__aeabi_dadd+0x554>
10003ebe:	e0b0      	b.n	10004022 <__aeabi_dadd+0x6b6>
10003ec0:	2b1f      	cmp	r3, #31
10003ec2:	dd00      	ble.n	10003ec6 <__aeabi_dadd+0x55a>
10003ec4:	e0db      	b.n	1000407e <__aeabi_dadd+0x712>
10003ec6:	2520      	movs	r5, #32
10003ec8:	1aed      	subs	r5, r5, r3
10003eca:	1c02      	adds	r2, r0, #0
10003ecc:	465c      	mov	r4, fp
10003ece:	40ac      	lsls	r4, r5
10003ed0:	40da      	lsrs	r2, r3
10003ed2:	40a8      	lsls	r0, r5
10003ed4:	1e45      	subs	r5, r0, #1
10003ed6:	41a8      	sbcs	r0, r5
10003ed8:	4322      	orrs	r2, r4
10003eda:	4302      	orrs	r2, r0
10003edc:	4658      	mov	r0, fp
10003ede:	40d8      	lsrs	r0, r3
10003ee0:	1c03      	adds	r3, r0, #0
10003ee2:	4655      	mov	r5, sl
10003ee4:	1954      	adds	r4, r2, r5
10003ee6:	4554      	cmp	r4, sl
10003ee8:	4192      	sbcs	r2, r2
10003eea:	444b      	add	r3, r9
10003eec:	4250      	negs	r0, r2
10003eee:	181b      	adds	r3, r3, r0
10003ef0:	e727      	b.n	10003d42 <__aeabi_dadd+0x3d6>
10003ef2:	464a      	mov	r2, r9
10003ef4:	4656      	mov	r6, sl
10003ef6:	4332      	orrs	r2, r6
10003ef8:	d100      	bne.n	10003efc <__aeabi_dadd+0x590>
10003efa:	e085      	b.n	10004008 <__aeabi_dadd+0x69c>
10003efc:	1b85      	subs	r5, r0, r6
10003efe:	465b      	mov	r3, fp
10003f00:	464c      	mov	r4, r9
10003f02:	42a8      	cmp	r0, r5
10003f04:	4192      	sbcs	r2, r2
10003f06:	1b19      	subs	r1, r3, r4
10003f08:	4256      	negs	r6, r2
10003f0a:	1b8b      	subs	r3, r1, r6
10003f0c:	021e      	lsls	r6, r3, #8
10003f0e:	d400      	bmi.n	10003f12 <__aeabi_dadd+0x5a6>
10003f10:	e0ad      	b.n	1000406e <__aeabi_dadd+0x702>
10003f12:	4657      	mov	r7, sl
10003f14:	1a3d      	subs	r5, r7, r0
10003f16:	465b      	mov	r3, fp
10003f18:	45aa      	cmp	sl, r5
10003f1a:	4189      	sbcs	r1, r1
10003f1c:	1ae4      	subs	r4, r4, r3
10003f1e:	424a      	negs	r2, r1
10003f20:	1aa3      	subs	r3, r4, r2
10003f22:	4667      	mov	r7, ip
10003f24:	1c2c      	adds	r4, r5, #0
10003f26:	2201      	movs	r2, #1
10003f28:	2600      	movs	r6, #0
10003f2a:	e5ac      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003f2c:	464d      	mov	r5, r9
10003f2e:	1c16      	adds	r6, r2, #0
10003f30:	4315      	orrs	r5, r2
10003f32:	d044      	beq.n	10003fbe <__aeabi_dadd+0x652>
10003f34:	465c      	mov	r4, fp
10003f36:	2180      	movs	r1, #128	; 0x80
10003f38:	08c0      	lsrs	r0, r0, #3
10003f3a:	0762      	lsls	r2, r4, #29
10003f3c:	08e3      	lsrs	r3, r4, #3
10003f3e:	030d      	lsls	r5, r1, #12
10003f40:	4310      	orrs	r0, r2
10003f42:	422b      	tst	r3, r5
10003f44:	d100      	bne.n	10003f48 <__aeabi_dadd+0x5dc>
10003f46:	e081      	b.n	1000404c <__aeabi_dadd+0x6e0>
10003f48:	464c      	mov	r4, r9
10003f4a:	08e1      	lsrs	r1, r4, #3
10003f4c:	4229      	tst	r1, r5
10003f4e:	d17d      	bne.n	1000404c <__aeabi_dadd+0x6e0>
10003f50:	08f7      	lsrs	r7, r6, #3
10003f52:	0766      	lsls	r6, r4, #29
10003f54:	433e      	orrs	r6, r7
10003f56:	1c0b      	adds	r3, r1, #0
10003f58:	4667      	mov	r7, ip
10003f5a:	0f70      	lsrs	r0, r6, #29
10003f5c:	00db      	lsls	r3, r3, #3
10003f5e:	2280      	movs	r2, #128	; 0x80
10003f60:	00f4      	lsls	r4, r6, #3
10003f62:	4303      	orrs	r3, r0
10003f64:	0112      	lsls	r2, r2, #4
10003f66:	4e52      	ldr	r6, [pc, #328]	; (100040b0 <__aeabi_dadd+0x744>)
10003f68:	e58d      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003f6a:	4d51      	ldr	r5, [pc, #324]	; (100040b0 <__aeabi_dadd+0x744>)
10003f6c:	42ae      	cmp	r6, r5
10003f6e:	d000      	beq.n	10003f72 <__aeabi_dadd+0x606>
10003f70:	e6ae      	b.n	10003cd0 <__aeabi_dadd+0x364>
10003f72:	2080      	movs	r0, #128	; 0x80
10003f74:	464b      	mov	r3, r9
10003f76:	4654      	mov	r4, sl
10003f78:	4667      	mov	r7, ip
10003f7a:	0102      	lsls	r2, r0, #4
10003f7c:	e583      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003f7e:	2e00      	cmp	r6, #0
10003f80:	d05e      	beq.n	10004040 <__aeabi_dadd+0x6d4>
10003f82:	464c      	mov	r4, r9
10003f84:	4314      	orrs	r4, r2
10003f86:	d01a      	beq.n	10003fbe <__aeabi_dadd+0x652>
10003f88:	08c7      	lsrs	r7, r0, #3
10003f8a:	2580      	movs	r5, #128	; 0x80
10003f8c:	4658      	mov	r0, fp
10003f8e:	0743      	lsls	r3, r0, #29
10003f90:	032c      	lsls	r4, r5, #12
10003f92:	08c0      	lsrs	r0, r0, #3
10003f94:	431f      	orrs	r7, r3
10003f96:	4220      	tst	r0, r4
10003f98:	d008      	beq.n	10003fac <__aeabi_dadd+0x640>
10003f9a:	464e      	mov	r6, r9
10003f9c:	08f3      	lsrs	r3, r6, #3
10003f9e:	4223      	tst	r3, r4
10003fa0:	d104      	bne.n	10003fac <__aeabi_dadd+0x640>
10003fa2:	4652      	mov	r2, sl
10003fa4:	08d5      	lsrs	r5, r2, #3
10003fa6:	0777      	lsls	r7, r6, #29
10003fa8:	1c18      	adds	r0, r3, #0
10003faa:	432f      	orrs	r7, r5
10003fac:	00c3      	lsls	r3, r0, #3
10003fae:	00fc      	lsls	r4, r7, #3
10003fb0:	0f78      	lsrs	r0, r7, #29
10003fb2:	1c0f      	adds	r7, r1, #0
10003fb4:	2180      	movs	r1, #128	; 0x80
10003fb6:	4303      	orrs	r3, r0
10003fb8:	010a      	lsls	r2, r1, #4
10003fba:	4e3d      	ldr	r6, [pc, #244]	; (100040b0 <__aeabi_dadd+0x744>)
10003fbc:	e563      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003fbe:	2680      	movs	r6, #128	; 0x80
10003fc0:	0132      	lsls	r2, r6, #4
10003fc2:	465b      	mov	r3, fp
10003fc4:	1c04      	adds	r4, r0, #0
10003fc6:	4e3a      	ldr	r6, [pc, #232]	; (100040b0 <__aeabi_dadd+0x744>)
10003fc8:	e55d      	b.n	10003a86 <__aeabi_dadd+0x11a>
10003fca:	2200      	movs	r2, #0
10003fcc:	e729      	b.n	10003e22 <__aeabi_dadd+0x4b6>
10003fce:	1c39      	adds	r1, r7, #0
10003fd0:	3920      	subs	r1, #32
10003fd2:	465c      	mov	r4, fp
10003fd4:	40cc      	lsrs	r4, r1
10003fd6:	1c22      	adds	r2, r4, #0
10003fd8:	2f20      	cmp	r7, #32
10003fda:	d067      	beq.n	100040ac <__aeabi_dadd+0x740>
10003fdc:	2340      	movs	r3, #64	; 0x40
10003fde:	1bdf      	subs	r7, r3, r7
10003fe0:	465d      	mov	r5, fp
10003fe2:	40bd      	lsls	r5, r7
10003fe4:	4328      	orrs	r0, r5
10003fe6:	1e43      	subs	r3, r0, #1
10003fe8:	4198      	sbcs	r0, r3
10003fea:	4310      	orrs	r0, r2
10003fec:	2300      	movs	r3, #0
10003fee:	e682      	b.n	10003cf6 <__aeabi_dadd+0x38a>
10003ff0:	3b01      	subs	r3, #1
10003ff2:	2b00      	cmp	r3, #0
10003ff4:	d12c      	bne.n	10004050 <__aeabi_dadd+0x6e4>
10003ff6:	4450      	add	r0, sl
10003ff8:	465c      	mov	r4, fp
10003ffa:	4290      	cmp	r0, r2
10003ffc:	41ad      	sbcs	r5, r5
10003ffe:	444c      	add	r4, r9
10004000:	426a      	negs	r2, r5
10004002:	18a3      	adds	r3, r4, r2
10004004:	1c04      	adds	r4, r0, #0
10004006:	e69c      	b.n	10003d42 <__aeabi_dadd+0x3d6>
10004008:	465b      	mov	r3, fp
1000400a:	1c04      	adds	r4, r0, #0
1000400c:	2201      	movs	r2, #1
1000400e:	2600      	movs	r6, #0
10004010:	e539      	b.n	10003a86 <__aeabi_dadd+0x11a>
10004012:	2480      	movs	r4, #128	; 0x80
10004014:	2104      	movs	r1, #4
10004016:	2700      	movs	r7, #0
10004018:	0122      	lsls	r2, r4, #4
1000401a:	4b27      	ldr	r3, [pc, #156]	; (100040b8 <__aeabi_dadd+0x74c>)
1000401c:	4248      	negs	r0, r1
1000401e:	4e24      	ldr	r6, [pc, #144]	; (100040b0 <__aeabi_dadd+0x744>)
10004020:	e549      	b.n	10003ab6 <__aeabi_dadd+0x14a>
10004022:	465d      	mov	r5, fp
10004024:	4305      	orrs	r5, r0
10004026:	2300      	movs	r3, #0
10004028:	2200      	movs	r2, #0
1000402a:	2d00      	cmp	r5, #0
1000402c:	d100      	bne.n	10004030 <__aeabi_dadd+0x6c4>
1000402e:	e758      	b.n	10003ee2 <__aeabi_dadd+0x576>
10004030:	2201      	movs	r2, #1
10004032:	e756      	b.n	10003ee2 <__aeabi_dadd+0x576>
10004034:	1c14      	adds	r4, r2, #0
10004036:	464b      	mov	r3, r9
10004038:	1c0f      	adds	r7, r1, #0
1000403a:	2201      	movs	r2, #1
1000403c:	2600      	movs	r6, #0
1000403e:	e522      	b.n	10003a86 <__aeabi_dadd+0x11a>
10004040:	1c14      	adds	r4, r2, #0
10004042:	2280      	movs	r2, #128	; 0x80
10004044:	464b      	mov	r3, r9
10004046:	0112      	lsls	r2, r2, #4
10004048:	4e19      	ldr	r6, [pc, #100]	; (100040b0 <__aeabi_dadd+0x744>)
1000404a:	e51c      	b.n	10003a86 <__aeabi_dadd+0x11a>
1000404c:	1c06      	adds	r6, r0, #0
1000404e:	e784      	b.n	10003f5a <__aeabi_dadd+0x5ee>
10004050:	4a17      	ldr	r2, [pc, #92]	; (100040b0 <__aeabi_dadd+0x744>)
10004052:	4296      	cmp	r6, r2
10004054:	d000      	beq.n	10004058 <__aeabi_dadd+0x6ec>
10004056:	e730      	b.n	10003eba <__aeabi_dadd+0x54e>
10004058:	1c0f      	adds	r7, r1, #0
1000405a:	2180      	movs	r1, #128	; 0x80
1000405c:	464b      	mov	r3, r9
1000405e:	4654      	mov	r4, sl
10004060:	010a      	lsls	r2, r1, #4
10004062:	e510      	b.n	10003a86 <__aeabi_dadd+0x11a>
10004064:	0574      	lsls	r4, r6, #21
10004066:	0d66      	lsrs	r6, r4, #21
10004068:	2300      	movs	r3, #0
1000406a:	2400      	movs	r4, #0
1000406c:	e52f      	b.n	10003ace <__aeabi_dadd+0x162>
1000406e:	1c18      	adds	r0, r3, #0
10004070:	4328      	orrs	r0, r5
10004072:	d100      	bne.n	10004076 <__aeabi_dadd+0x70a>
10004074:	e64c      	b.n	10003d10 <__aeabi_dadd+0x3a4>
10004076:	1c2c      	adds	r4, r5, #0
10004078:	2201      	movs	r2, #1
1000407a:	2600      	movs	r6, #0
1000407c:	e503      	b.n	10003a86 <__aeabi_dadd+0x11a>
1000407e:	1c1c      	adds	r4, r3, #0
10004080:	3c20      	subs	r4, #32
10004082:	465d      	mov	r5, fp
10004084:	40e5      	lsrs	r5, r4
10004086:	1c2c      	adds	r4, r5, #0
10004088:	2b20      	cmp	r3, #32
1000408a:	d01c      	beq.n	100040c6 <__aeabi_dadd+0x75a>
1000408c:	2240      	movs	r2, #64	; 0x40
1000408e:	1ad3      	subs	r3, r2, r3
10004090:	465a      	mov	r2, fp
10004092:	409a      	lsls	r2, r3
10004094:	4302      	orrs	r2, r0
10004096:	1e50      	subs	r0, r2, #1
10004098:	4182      	sbcs	r2, r0
1000409a:	4322      	orrs	r2, r4
1000409c:	2300      	movs	r3, #0
1000409e:	e720      	b.n	10003ee2 <__aeabi_dadd+0x576>
100040a0:	465b      	mov	r3, fp
100040a2:	1c04      	adds	r4, r0, #0
100040a4:	1c0f      	adds	r7, r1, #0
100040a6:	2201      	movs	r2, #1
100040a8:	2600      	movs	r6, #0
100040aa:	e4ec      	b.n	10003a86 <__aeabi_dadd+0x11a>
100040ac:	2500      	movs	r5, #0
100040ae:	e799      	b.n	10003fe4 <__aeabi_dadd+0x678>
100040b0:	000007ff 	.word	0x000007ff
100040b4:	ff7fffff 	.word	0xff7fffff
100040b8:	007fffff 	.word	0x007fffff
100040bc:	1c2c      	adds	r4, r5, #0
100040be:	1c0f      	adds	r7, r1, #0
100040c0:	2201      	movs	r2, #1
100040c2:	2600      	movs	r6, #0
100040c4:	e4df      	b.n	10003a86 <__aeabi_dadd+0x11a>
100040c6:	2200      	movs	r2, #0
100040c8:	e7e4      	b.n	10004094 <__aeabi_dadd+0x728>
100040ca:	46c0      	nop			; (mov r8, r8)

100040cc <__aeabi_ddiv>:
100040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100040ce:	464d      	mov	r5, r9
100040d0:	4644      	mov	r4, r8
100040d2:	465f      	mov	r7, fp
100040d4:	4656      	mov	r6, sl
100040d6:	b4f0      	push	{r4, r5, r6, r7}
100040d8:	1c1d      	adds	r5, r3, #0
100040da:	004b      	lsls	r3, r1, #1
100040dc:	1c14      	adds	r4, r2, #0
100040de:	030e      	lsls	r6, r1, #12
100040e0:	0d5b      	lsrs	r3, r3, #21
100040e2:	0fca      	lsrs	r2, r1, #31
100040e4:	b087      	sub	sp, #28
100040e6:	1c07      	adds	r7, r0, #0
100040e8:	0b36      	lsrs	r6, r6, #12
100040ea:	4698      	mov	r8, r3
100040ec:	4691      	mov	r9, r2
100040ee:	2b00      	cmp	r3, #0
100040f0:	d11d      	bne.n	1000412e <__aeabi_ddiv+0x62>
100040f2:	1c32      	adds	r2, r6, #0
100040f4:	4302      	orrs	r2, r0
100040f6:	d100      	bne.n	100040fa <__aeabi_ddiv+0x2e>
100040f8:	e181      	b.n	100043fe <__aeabi_ddiv+0x332>
100040fa:	2e00      	cmp	r6, #0
100040fc:	d100      	bne.n	10004100 <__aeabi_ddiv+0x34>
100040fe:	e204      	b.n	1000450a <__aeabi_ddiv+0x43e>
10004100:	1c30      	adds	r0, r6, #0
10004102:	f001 fb35 	bl	10005770 <__clzsi2>
10004106:	2827      	cmp	r0, #39	; 0x27
10004108:	dd00      	ble.n	1000410c <__aeabi_ddiv+0x40>
1000410a:	e1f8      	b.n	100044fe <__aeabi_ddiv+0x432>
1000410c:	2128      	movs	r1, #40	; 0x28
1000410e:	1c03      	adds	r3, r0, #0
10004110:	3b08      	subs	r3, #8
10004112:	1a0a      	subs	r2, r1, r0
10004114:	1c39      	adds	r1, r7, #0
10004116:	409e      	lsls	r6, r3
10004118:	40d1      	lsrs	r1, r2
1000411a:	430e      	orrs	r6, r1
1000411c:	409f      	lsls	r7, r3
1000411e:	4bc1      	ldr	r3, [pc, #772]	; (10004424 <__aeabi_ddiv+0x358>)
10004120:	2100      	movs	r1, #0
10004122:	1a18      	subs	r0, r3, r0
10004124:	2200      	movs	r2, #0
10004126:	4680      	mov	r8, r0
10004128:	468a      	mov	sl, r1
1000412a:	9200      	str	r2, [sp, #0]
1000412c:	e00f      	b.n	1000414e <__aeabi_ddiv+0x82>
1000412e:	48be      	ldr	r0, [pc, #760]	; (10004428 <__aeabi_ddiv+0x35c>)
10004130:	4283      	cmp	r3, r0
10004132:	d031      	beq.n	10004198 <__aeabi_ddiv+0xcc>
10004134:	2180      	movs	r1, #128	; 0x80
10004136:	034b      	lsls	r3, r1, #13
10004138:	431e      	orrs	r6, r3
1000413a:	48bc      	ldr	r0, [pc, #752]	; (1000442c <__aeabi_ddiv+0x360>)
1000413c:	0f7a      	lsrs	r2, r7, #29
1000413e:	00f6      	lsls	r6, r6, #3
10004140:	2100      	movs	r1, #0
10004142:	2300      	movs	r3, #0
10004144:	4316      	orrs	r6, r2
10004146:	00ff      	lsls	r7, r7, #3
10004148:	4480      	add	r8, r0
1000414a:	468a      	mov	sl, r1
1000414c:	9300      	str	r3, [sp, #0]
1000414e:	1c29      	adds	r1, r5, #0
10004150:	1c20      	adds	r0, r4, #0
10004152:	1c25      	adds	r5, r4, #0
10004154:	004a      	lsls	r2, r1, #1
10004156:	030c      	lsls	r4, r1, #12
10004158:	0fcb      	lsrs	r3, r1, #31
1000415a:	0b24      	lsrs	r4, r4, #12
1000415c:	0d52      	lsrs	r2, r2, #21
1000415e:	469b      	mov	fp, r3
10004160:	d125      	bne.n	100041ae <__aeabi_ddiv+0xe2>
10004162:	1c21      	adds	r1, r4, #0
10004164:	4301      	orrs	r1, r0
10004166:	d100      	bne.n	1000416a <__aeabi_ddiv+0x9e>
10004168:	e150      	b.n	1000440c <__aeabi_ddiv+0x340>
1000416a:	2c00      	cmp	r4, #0
1000416c:	d100      	bne.n	10004170 <__aeabi_ddiv+0xa4>
1000416e:	e1c2      	b.n	100044f6 <__aeabi_ddiv+0x42a>
10004170:	1c20      	adds	r0, r4, #0
10004172:	f001 fafd 	bl	10005770 <__clzsi2>
10004176:	2827      	cmp	r0, #39	; 0x27
10004178:	dd00      	ble.n	1000417c <__aeabi_ddiv+0xb0>
1000417a:	e1b6      	b.n	100044ea <__aeabi_ddiv+0x41e>
1000417c:	1c03      	adds	r3, r0, #0
1000417e:	2228      	movs	r2, #40	; 0x28
10004180:	3b08      	subs	r3, #8
10004182:	1c29      	adds	r1, r5, #0
10004184:	1a12      	subs	r2, r2, r0
10004186:	409c      	lsls	r4, r3
10004188:	40d1      	lsrs	r1, r2
1000418a:	430c      	orrs	r4, r1
1000418c:	409d      	lsls	r5, r3
1000418e:	4ba5      	ldr	r3, [pc, #660]	; (10004424 <__aeabi_ddiv+0x358>)
10004190:	1a1a      	subs	r2, r3, r0
10004192:	2000      	movs	r0, #0
10004194:	9002      	str	r0, [sp, #8]
10004196:	e019      	b.n	100041cc <__aeabi_ddiv+0x100>
10004198:	1c32      	adds	r2, r6, #0
1000419a:	433a      	orrs	r2, r7
1000419c:	d000      	beq.n	100041a0 <__aeabi_ddiv+0xd4>
1000419e:	e129      	b.n	100043f4 <__aeabi_ddiv+0x328>
100041a0:	2708      	movs	r7, #8
100041a2:	2302      	movs	r3, #2
100041a4:	46ba      	mov	sl, r7
100041a6:	2600      	movs	r6, #0
100041a8:	2700      	movs	r7, #0
100041aa:	9300      	str	r3, [sp, #0]
100041ac:	e7cf      	b.n	1000414e <__aeabi_ddiv+0x82>
100041ae:	489e      	ldr	r0, [pc, #632]	; (10004428 <__aeabi_ddiv+0x35c>)
100041b0:	4282      	cmp	r2, r0
100041b2:	d100      	bne.n	100041b6 <__aeabi_ddiv+0xea>
100041b4:	e113      	b.n	100043de <__aeabi_ddiv+0x312>
100041b6:	2180      	movs	r1, #128	; 0x80
100041b8:	034b      	lsls	r3, r1, #13
100041ba:	431c      	orrs	r4, r3
100041bc:	499b      	ldr	r1, [pc, #620]	; (1000442c <__aeabi_ddiv+0x360>)
100041be:	0f68      	lsrs	r0, r5, #29
100041c0:	00e4      	lsls	r4, r4, #3
100041c2:	2300      	movs	r3, #0
100041c4:	4304      	orrs	r4, r0
100041c6:	00ed      	lsls	r5, r5, #3
100041c8:	1852      	adds	r2, r2, r1
100041ca:	9302      	str	r3, [sp, #8]
100041cc:	4648      	mov	r0, r9
100041ce:	465b      	mov	r3, fp
100041d0:	4043      	eors	r3, r0
100041d2:	9802      	ldr	r0, [sp, #8]
100041d4:	4651      	mov	r1, sl
100041d6:	9301      	str	r3, [sp, #4]
100041d8:	4301      	orrs	r1, r0
100041da:	290f      	cmp	r1, #15
100041dc:	d800      	bhi.n	100041e0 <__aeabi_ddiv+0x114>
100041de:	e0df      	b.n	100043a0 <__aeabi_ddiv+0x2d4>
100041e0:	4643      	mov	r3, r8
100041e2:	1a9a      	subs	r2, r3, r2
100041e4:	9204      	str	r2, [sp, #16]
100041e6:	42a6      	cmp	r6, r4
100041e8:	d800      	bhi.n	100041ec <__aeabi_ddiv+0x120>
100041ea:	e16e      	b.n	100044ca <__aeabi_ddiv+0x3fe>
100041ec:	0871      	lsrs	r1, r6, #1
100041ee:	087b      	lsrs	r3, r7, #1
100041f0:	07f6      	lsls	r6, r6, #31
100041f2:	4333      	orrs	r3, r6
100041f4:	07fa      	lsls	r2, r7, #31
100041f6:	4689      	mov	r9, r1
100041f8:	4698      	mov	r8, r3
100041fa:	9202      	str	r2, [sp, #8]
100041fc:	0e28      	lsrs	r0, r5, #24
100041fe:	0224      	lsls	r4, r4, #8
10004200:	4304      	orrs	r4, r0
10004202:	022d      	lsls	r5, r5, #8
10004204:	0427      	lsls	r7, r4, #16
10004206:	0c39      	lsrs	r1, r7, #16
10004208:	46ab      	mov	fp, r5
1000420a:	0c25      	lsrs	r5, r4, #16
1000420c:	9100      	str	r1, [sp, #0]
1000420e:	4648      	mov	r0, r9
10004210:	1c29      	adds	r1, r5, #0
10004212:	f7fe fb9d 	bl	10002950 <__aeabi_uidiv>
10004216:	9f00      	ldr	r7, [sp, #0]
10004218:	1c06      	adds	r6, r0, #0
1000421a:	4347      	muls	r7, r0
1000421c:	1c29      	adds	r1, r5, #0
1000421e:	4648      	mov	r0, r9
10004220:	f7fe fbda 	bl	100029d8 <__aeabi_uidivmod>
10004224:	4643      	mov	r3, r8
10004226:	0408      	lsls	r0, r1, #16
10004228:	0c1a      	lsrs	r2, r3, #16
1000422a:	4310      	orrs	r0, r2
1000422c:	4287      	cmp	r7, r0
1000422e:	d907      	bls.n	10004240 <__aeabi_ddiv+0x174>
10004230:	1900      	adds	r0, r0, r4
10004232:	3e01      	subs	r6, #1
10004234:	4284      	cmp	r4, r0
10004236:	d803      	bhi.n	10004240 <__aeabi_ddiv+0x174>
10004238:	4287      	cmp	r7, r0
1000423a:	d901      	bls.n	10004240 <__aeabi_ddiv+0x174>
1000423c:	3e01      	subs	r6, #1
1000423e:	1900      	adds	r0, r0, r4
10004240:	1bc1      	subs	r1, r0, r7
10004242:	468a      	mov	sl, r1
10004244:	1c08      	adds	r0, r1, #0
10004246:	1c29      	adds	r1, r5, #0
10004248:	f7fe fb82 	bl	10002950 <__aeabi_uidiv>
1000424c:	9b00      	ldr	r3, [sp, #0]
1000424e:	1c07      	adds	r7, r0, #0
10004250:	4343      	muls	r3, r0
10004252:	1c29      	adds	r1, r5, #0
10004254:	4650      	mov	r0, sl
10004256:	4699      	mov	r9, r3
10004258:	f7fe fbbe 	bl	100029d8 <__aeabi_uidivmod>
1000425c:	4642      	mov	r2, r8
1000425e:	0410      	lsls	r0, r2, #16
10004260:	040b      	lsls	r3, r1, #16
10004262:	0c01      	lsrs	r1, r0, #16
10004264:	430b      	orrs	r3, r1
10004266:	4599      	cmp	r9, r3
10004268:	d904      	bls.n	10004274 <__aeabi_ddiv+0x1a8>
1000426a:	191b      	adds	r3, r3, r4
1000426c:	3f01      	subs	r7, #1
1000426e:	429c      	cmp	r4, r3
10004270:	d800      	bhi.n	10004274 <__aeabi_ddiv+0x1a8>
10004272:	e164      	b.n	1000453e <__aeabi_ddiv+0x472>
10004274:	0436      	lsls	r6, r6, #16
10004276:	433e      	orrs	r6, r7
10004278:	465f      	mov	r7, fp
1000427a:	464a      	mov	r2, r9
1000427c:	0c39      	lsrs	r1, r7, #16
1000427e:	4689      	mov	r9, r1
10004280:	1a9b      	subs	r3, r3, r2
10004282:	4659      	mov	r1, fp
10004284:	0432      	lsls	r2, r6, #16
10004286:	0c17      	lsrs	r7, r2, #16
10004288:	040a      	lsls	r2, r1, #16
1000428a:	4649      	mov	r1, r9
1000428c:	4379      	muls	r1, r7
1000428e:	0c12      	lsrs	r2, r2, #16
10004290:	9203      	str	r2, [sp, #12]
10004292:	468c      	mov	ip, r1
10004294:	9903      	ldr	r1, [sp, #12]
10004296:	0c30      	lsrs	r0, r6, #16
10004298:	437a      	muls	r2, r7
1000429a:	4341      	muls	r1, r0
1000429c:	464f      	mov	r7, r9
1000429e:	4378      	muls	r0, r7
100042a0:	448c      	add	ip, r1
100042a2:	0c17      	lsrs	r7, r2, #16
100042a4:	4467      	add	r7, ip
100042a6:	42b9      	cmp	r1, r7
100042a8:	d902      	bls.n	100042b0 <__aeabi_ddiv+0x1e4>
100042aa:	2180      	movs	r1, #128	; 0x80
100042ac:	0249      	lsls	r1, r1, #9
100042ae:	1840      	adds	r0, r0, r1
100042b0:	0c39      	lsrs	r1, r7, #16
100042b2:	0412      	lsls	r2, r2, #16
100042b4:	1840      	adds	r0, r0, r1
100042b6:	043f      	lsls	r7, r7, #16
100042b8:	0c11      	lsrs	r1, r2, #16
100042ba:	187f      	adds	r7, r7, r1
100042bc:	4283      	cmp	r3, r0
100042be:	d200      	bcs.n	100042c2 <__aeabi_ddiv+0x1f6>
100042c0:	e127      	b.n	10004512 <__aeabi_ddiv+0x446>
100042c2:	d100      	bne.n	100042c6 <__aeabi_ddiv+0x1fa>
100042c4:	e141      	b.n	1000454a <__aeabi_ddiv+0x47e>
100042c6:	9902      	ldr	r1, [sp, #8]
100042c8:	1a1b      	subs	r3, r3, r0
100042ca:	1bcf      	subs	r7, r1, r7
100042cc:	42b9      	cmp	r1, r7
100042ce:	4180      	sbcs	r0, r0
100042d0:	4241      	negs	r1, r0
100042d2:	1a5a      	subs	r2, r3, r1
100042d4:	4690      	mov	r8, r2
100042d6:	42a2      	cmp	r2, r4
100042d8:	d100      	bne.n	100042dc <__aeabi_ddiv+0x210>
100042da:	e15f      	b.n	1000459c <__aeabi_ddiv+0x4d0>
100042dc:	1c10      	adds	r0, r2, #0
100042de:	1c29      	adds	r1, r5, #0
100042e0:	f7fe fb36 	bl	10002950 <__aeabi_uidiv>
100042e4:	9b00      	ldr	r3, [sp, #0]
100042e6:	9002      	str	r0, [sp, #8]
100042e8:	4343      	muls	r3, r0
100042ea:	1c29      	adds	r1, r5, #0
100042ec:	4640      	mov	r0, r8
100042ee:	469a      	mov	sl, r3
100042f0:	f7fe fb72 	bl	100029d8 <__aeabi_uidivmod>
100042f4:	0c38      	lsrs	r0, r7, #16
100042f6:	0409      	lsls	r1, r1, #16
100042f8:	4301      	orrs	r1, r0
100042fa:	458a      	cmp	sl, r1
100042fc:	d90a      	bls.n	10004314 <__aeabi_ddiv+0x248>
100042fe:	9a02      	ldr	r2, [sp, #8]
10004300:	1909      	adds	r1, r1, r4
10004302:	3a01      	subs	r2, #1
10004304:	9202      	str	r2, [sp, #8]
10004306:	428c      	cmp	r4, r1
10004308:	d804      	bhi.n	10004314 <__aeabi_ddiv+0x248>
1000430a:	458a      	cmp	sl, r1
1000430c:	d902      	bls.n	10004314 <__aeabi_ddiv+0x248>
1000430e:	3a01      	subs	r2, #1
10004310:	9202      	str	r2, [sp, #8]
10004312:	1909      	adds	r1, r1, r4
10004314:	4653      	mov	r3, sl
10004316:	1ac8      	subs	r0, r1, r3
10004318:	1c29      	adds	r1, r5, #0
1000431a:	9005      	str	r0, [sp, #20]
1000431c:	f7fe fb18 	bl	10002950 <__aeabi_uidiv>
10004320:	9a00      	ldr	r2, [sp, #0]
10004322:	1c29      	adds	r1, r5, #0
10004324:	4342      	muls	r2, r0
10004326:	4680      	mov	r8, r0
10004328:	9805      	ldr	r0, [sp, #20]
1000432a:	4692      	mov	sl, r2
1000432c:	f7fe fb54 	bl	100029d8 <__aeabi_uidivmod>
10004330:	043f      	lsls	r7, r7, #16
10004332:	040d      	lsls	r5, r1, #16
10004334:	0c3a      	lsrs	r2, r7, #16
10004336:	432a      	orrs	r2, r5
10004338:	4592      	cmp	sl, r2
1000433a:	d909      	bls.n	10004350 <__aeabi_ddiv+0x284>
1000433c:	2101      	movs	r1, #1
1000433e:	424b      	negs	r3, r1
10004340:	1912      	adds	r2, r2, r4
10004342:	4498      	add	r8, r3
10004344:	4294      	cmp	r4, r2
10004346:	d803      	bhi.n	10004350 <__aeabi_ddiv+0x284>
10004348:	4592      	cmp	sl, r2
1000434a:	d901      	bls.n	10004350 <__aeabi_ddiv+0x284>
1000434c:	4498      	add	r8, r3
1000434e:	1912      	adds	r2, r2, r4
10004350:	9d02      	ldr	r5, [sp, #8]
10004352:	4643      	mov	r3, r8
10004354:	042f      	lsls	r7, r5, #16
10004356:	431f      	orrs	r7, r3
10004358:	4650      	mov	r0, sl
1000435a:	1a11      	subs	r1, r2, r0
1000435c:	0438      	lsls	r0, r7, #16
1000435e:	0c03      	lsrs	r3, r0, #16
10004360:	464d      	mov	r5, r9
10004362:	435d      	muls	r5, r3
10004364:	9803      	ldr	r0, [sp, #12]
10004366:	46ac      	mov	ip, r5
10004368:	9d03      	ldr	r5, [sp, #12]
1000436a:	0c3a      	lsrs	r2, r7, #16
1000436c:	4358      	muls	r0, r3
1000436e:	4355      	muls	r5, r2
10004370:	464b      	mov	r3, r9
10004372:	435a      	muls	r2, r3
10004374:	44ac      	add	ip, r5
10004376:	0c03      	lsrs	r3, r0, #16
10004378:	4463      	add	r3, ip
1000437a:	429d      	cmp	r5, r3
1000437c:	d902      	bls.n	10004384 <__aeabi_ddiv+0x2b8>
1000437e:	2580      	movs	r5, #128	; 0x80
10004380:	026d      	lsls	r5, r5, #9
10004382:	1952      	adds	r2, r2, r5
10004384:	0c1d      	lsrs	r5, r3, #16
10004386:	0400      	lsls	r0, r0, #16
10004388:	1952      	adds	r2, r2, r5
1000438a:	041b      	lsls	r3, r3, #16
1000438c:	0c05      	lsrs	r5, r0, #16
1000438e:	195b      	adds	r3, r3, r5
10004390:	4291      	cmp	r1, r2
10004392:	d200      	bcs.n	10004396 <__aeabi_ddiv+0x2ca>
10004394:	e0e6      	b.n	10004564 <__aeabi_ddiv+0x498>
10004396:	d100      	bne.n	1000439a <__aeabi_ddiv+0x2ce>
10004398:	e13d      	b.n	10004616 <__aeabi_ddiv+0x54a>
1000439a:	2201      	movs	r2, #1
1000439c:	4317      	orrs	r7, r2
1000439e:	e05a      	b.n	10004456 <__aeabi_ddiv+0x38a>
100043a0:	0089      	lsls	r1, r1, #2
100043a2:	4823      	ldr	r0, [pc, #140]	; (10004430 <__aeabi_ddiv+0x364>)
100043a4:	468c      	mov	ip, r1
100043a6:	4460      	add	r0, ip
100043a8:	6801      	ldr	r1, [r0, #0]
100043aa:	468f      	mov	pc, r1
100043ac:	9b01      	ldr	r3, [sp, #4]
100043ae:	4a1e      	ldr	r2, [pc, #120]	; (10004428 <__aeabi_ddiv+0x35c>)
100043b0:	2600      	movs	r6, #0
100043b2:	2700      	movs	r7, #0
100043b4:	2000      	movs	r0, #0
100043b6:	2100      	movs	r1, #0
100043b8:	1c38      	adds	r0, r7, #0
100043ba:	0d0f      	lsrs	r7, r1, #20
100043bc:	053c      	lsls	r4, r7, #20
100043be:	4d1d      	ldr	r5, [pc, #116]	; (10004434 <__aeabi_ddiv+0x368>)
100043c0:	4334      	orrs	r4, r6
100043c2:	0512      	lsls	r2, r2, #20
100043c4:	4025      	ands	r5, r4
100043c6:	4315      	orrs	r5, r2
100043c8:	006e      	lsls	r6, r5, #1
100043ca:	07db      	lsls	r3, r3, #31
100043cc:	0871      	lsrs	r1, r6, #1
100043ce:	4319      	orrs	r1, r3
100043d0:	b007      	add	sp, #28
100043d2:	bc3c      	pop	{r2, r3, r4, r5}
100043d4:	4690      	mov	r8, r2
100043d6:	4699      	mov	r9, r3
100043d8:	46a2      	mov	sl, r4
100043da:	46ab      	mov	fp, r5
100043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100043de:	1c21      	adds	r1, r4, #0
100043e0:	2003      	movs	r0, #3
100043e2:	4329      	orrs	r1, r5
100043e4:	9002      	str	r0, [sp, #8]
100043e6:	d000      	beq.n	100043ea <__aeabi_ddiv+0x31e>
100043e8:	e6f0      	b.n	100041cc <__aeabi_ddiv+0x100>
100043ea:	2302      	movs	r3, #2
100043ec:	2400      	movs	r4, #0
100043ee:	2500      	movs	r5, #0
100043f0:	9302      	str	r3, [sp, #8]
100043f2:	e6eb      	b.n	100041cc <__aeabi_ddiv+0x100>
100043f4:	200c      	movs	r0, #12
100043f6:	2103      	movs	r1, #3
100043f8:	4682      	mov	sl, r0
100043fa:	9100      	str	r1, [sp, #0]
100043fc:	e6a7      	b.n	1000414e <__aeabi_ddiv+0x82>
100043fe:	2704      	movs	r7, #4
10004400:	2301      	movs	r3, #1
10004402:	46ba      	mov	sl, r7
10004404:	2600      	movs	r6, #0
10004406:	2700      	movs	r7, #0
10004408:	9300      	str	r3, [sp, #0]
1000440a:	e6a0      	b.n	1000414e <__aeabi_ddiv+0x82>
1000440c:	2101      	movs	r1, #1
1000440e:	2400      	movs	r4, #0
10004410:	2500      	movs	r5, #0
10004412:	9102      	str	r1, [sp, #8]
10004414:	e6da      	b.n	100041cc <__aeabi_ddiv+0x100>
10004416:	2701      	movs	r7, #1
10004418:	2300      	movs	r3, #0
1000441a:	4e07      	ldr	r6, [pc, #28]	; (10004438 <__aeabi_ddiv+0x36c>)
1000441c:	427f      	negs	r7, r7
1000441e:	4a02      	ldr	r2, [pc, #8]	; (10004428 <__aeabi_ddiv+0x35c>)
10004420:	e7c8      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
10004422:	46c0      	nop			; (mov r8, r8)
10004424:	fffffc0d 	.word	0xfffffc0d
10004428:	000007ff 	.word	0x000007ff
1000442c:	fffffc01 	.word	0xfffffc01
10004430:	100058b4 	.word	0x100058b4
10004434:	800fffff 	.word	0x800fffff
10004438:	000fffff 	.word	0x000fffff
1000443c:	1c2f      	adds	r7, r5, #0
1000443e:	465a      	mov	r2, fp
10004440:	9d02      	ldr	r5, [sp, #8]
10004442:	1c26      	adds	r6, r4, #0
10004444:	9201      	str	r2, [sp, #4]
10004446:	2d02      	cmp	r5, #2
10004448:	d0b0      	beq.n	100043ac <__aeabi_ddiv+0x2e0>
1000444a:	2d03      	cmp	r5, #3
1000444c:	d100      	bne.n	10004450 <__aeabi_ddiv+0x384>
1000444e:	e101      	b.n	10004654 <__aeabi_ddiv+0x588>
10004450:	2d01      	cmp	r5, #1
10004452:	d100      	bne.n	10004456 <__aeabi_ddiv+0x38a>
10004454:	e09c      	b.n	10004590 <__aeabi_ddiv+0x4c4>
10004456:	9b04      	ldr	r3, [sp, #16]
10004458:	4882      	ldr	r0, [pc, #520]	; (10004664 <__aeabi_ddiv+0x598>)
1000445a:	181a      	adds	r2, r3, r0
1000445c:	2a00      	cmp	r2, #0
1000445e:	dc00      	bgt.n	10004462 <__aeabi_ddiv+0x396>
10004460:	e08c      	b.n	1000457c <__aeabi_ddiv+0x4b0>
10004462:	240f      	movs	r4, #15
10004464:	403c      	ands	r4, r7
10004466:	2c04      	cmp	r4, #4
10004468:	d005      	beq.n	10004476 <__aeabi_ddiv+0x3aa>
1000446a:	1d3b      	adds	r3, r7, #4
1000446c:	42bb      	cmp	r3, r7
1000446e:	41bf      	sbcs	r7, r7
10004470:	427d      	negs	r5, r7
10004472:	1976      	adds	r6, r6, r5
10004474:	1c1f      	adds	r7, r3, #0
10004476:	01f1      	lsls	r1, r6, #7
10004478:	d505      	bpl.n	10004486 <__aeabi_ddiv+0x3ba>
1000447a:	4a7b      	ldr	r2, [pc, #492]	; (10004668 <__aeabi_ddiv+0x59c>)
1000447c:	9904      	ldr	r1, [sp, #16]
1000447e:	2080      	movs	r0, #128	; 0x80
10004480:	00c4      	lsls	r4, r0, #3
10004482:	4016      	ands	r6, r2
10004484:	190a      	adds	r2, r1, r4
10004486:	4b79      	ldr	r3, [pc, #484]	; (1000466c <__aeabi_ddiv+0x5a0>)
10004488:	429a      	cmp	r2, r3
1000448a:	dd00      	ble.n	1000448e <__aeabi_ddiv+0x3c2>
1000448c:	e78e      	b.n	100043ac <__aeabi_ddiv+0x2e0>
1000448e:	0775      	lsls	r5, r6, #29
10004490:	08ff      	lsrs	r7, r7, #3
10004492:	0276      	lsls	r6, r6, #9
10004494:	0551      	lsls	r1, r2, #21
10004496:	432f      	orrs	r7, r5
10004498:	0b36      	lsrs	r6, r6, #12
1000449a:	0d4a      	lsrs	r2, r1, #21
1000449c:	9b01      	ldr	r3, [sp, #4]
1000449e:	e789      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
100044a0:	2200      	movs	r2, #0
100044a2:	2600      	movs	r6, #0
100044a4:	2700      	movs	r7, #0
100044a6:	e785      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
100044a8:	2080      	movs	r0, #128	; 0x80
100044aa:	0301      	lsls	r1, r0, #12
100044ac:	420e      	tst	r6, r1
100044ae:	d016      	beq.n	100044de <__aeabi_ddiv+0x412>
100044b0:	420c      	tst	r4, r1
100044b2:	d114      	bne.n	100044de <__aeabi_ddiv+0x412>
100044b4:	430c      	orrs	r4, r1
100044b6:	0326      	lsls	r6, r4, #12
100044b8:	0b36      	lsrs	r6, r6, #12
100044ba:	465b      	mov	r3, fp
100044bc:	1c2f      	adds	r7, r5, #0
100044be:	4a6c      	ldr	r2, [pc, #432]	; (10004670 <__aeabi_ddiv+0x5a4>)
100044c0:	e778      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
100044c2:	464c      	mov	r4, r9
100044c4:	9401      	str	r4, [sp, #4]
100044c6:	9d00      	ldr	r5, [sp, #0]
100044c8:	e7bd      	b.n	10004446 <__aeabi_ddiv+0x37a>
100044ca:	42a6      	cmp	r6, r4
100044cc:	d043      	beq.n	10004556 <__aeabi_ddiv+0x48a>
100044ce:	9804      	ldr	r0, [sp, #16]
100044d0:	46b8      	mov	r8, r7
100044d2:	3801      	subs	r0, #1
100044d4:	2700      	movs	r7, #0
100044d6:	9004      	str	r0, [sp, #16]
100044d8:	46b1      	mov	r9, r6
100044da:	9702      	str	r7, [sp, #8]
100044dc:	e68e      	b.n	100041fc <__aeabi_ddiv+0x130>
100044de:	430e      	orrs	r6, r1
100044e0:	0333      	lsls	r3, r6, #12
100044e2:	0b1e      	lsrs	r6, r3, #12
100044e4:	4a62      	ldr	r2, [pc, #392]	; (10004670 <__aeabi_ddiv+0x5a4>)
100044e6:	464b      	mov	r3, r9
100044e8:	e764      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
100044ea:	1c04      	adds	r4, r0, #0
100044ec:	3c28      	subs	r4, #40	; 0x28
100044ee:	40a5      	lsls	r5, r4
100044f0:	1c2c      	adds	r4, r5, #0
100044f2:	2500      	movs	r5, #0
100044f4:	e64b      	b.n	1000418e <__aeabi_ddiv+0xc2>
100044f6:	f001 f93b 	bl	10005770 <__clzsi2>
100044fa:	3020      	adds	r0, #32
100044fc:	e63b      	b.n	10004176 <__aeabi_ddiv+0xaa>
100044fe:	1c06      	adds	r6, r0, #0
10004500:	3e28      	subs	r6, #40	; 0x28
10004502:	40b7      	lsls	r7, r6
10004504:	1c3e      	adds	r6, r7, #0
10004506:	2700      	movs	r7, #0
10004508:	e609      	b.n	1000411e <__aeabi_ddiv+0x52>
1000450a:	f001 f931 	bl	10005770 <__clzsi2>
1000450e:	3020      	adds	r0, #32
10004510:	e5f9      	b.n	10004106 <__aeabi_ddiv+0x3a>
10004512:	9a02      	ldr	r2, [sp, #8]
10004514:	3e01      	subs	r6, #1
10004516:	1c11      	adds	r1, r2, #0
10004518:	4459      	add	r1, fp
1000451a:	4559      	cmp	r1, fp
1000451c:	4192      	sbcs	r2, r2
1000451e:	4252      	negs	r2, r2
10004520:	1912      	adds	r2, r2, r4
10004522:	18d3      	adds	r3, r2, r3
10004524:	429c      	cmp	r4, r3
10004526:	d204      	bcs.n	10004532 <__aeabi_ddiv+0x466>
10004528:	4298      	cmp	r0, r3
1000452a:	d86b      	bhi.n	10004604 <__aeabi_ddiv+0x538>
1000452c:	d016      	beq.n	1000455c <__aeabi_ddiv+0x490>
1000452e:	1a1b      	subs	r3, r3, r0
10004530:	e6cb      	b.n	100042ca <__aeabi_ddiv+0x1fe>
10004532:	42a3      	cmp	r3, r4
10004534:	d1fb      	bne.n	1000452e <__aeabi_ddiv+0x462>
10004536:	458b      	cmp	fp, r1
10004538:	d9f6      	bls.n	10004528 <__aeabi_ddiv+0x45c>
1000453a:	1a23      	subs	r3, r4, r0
1000453c:	e6c5      	b.n	100042ca <__aeabi_ddiv+0x1fe>
1000453e:	4599      	cmp	r9, r3
10004540:	d800      	bhi.n	10004544 <__aeabi_ddiv+0x478>
10004542:	e697      	b.n	10004274 <__aeabi_ddiv+0x1a8>
10004544:	3f01      	subs	r7, #1
10004546:	191b      	adds	r3, r3, r4
10004548:	e694      	b.n	10004274 <__aeabi_ddiv+0x1a8>
1000454a:	9a02      	ldr	r2, [sp, #8]
1000454c:	42ba      	cmp	r2, r7
1000454e:	d3e0      	bcc.n	10004512 <__aeabi_ddiv+0x446>
10004550:	9902      	ldr	r1, [sp, #8]
10004552:	2300      	movs	r3, #0
10004554:	e6b9      	b.n	100042ca <__aeabi_ddiv+0x1fe>
10004556:	42af      	cmp	r7, r5
10004558:	d9b9      	bls.n	100044ce <__aeabi_ddiv+0x402>
1000455a:	e647      	b.n	100041ec <__aeabi_ddiv+0x120>
1000455c:	428f      	cmp	r7, r1
1000455e:	d851      	bhi.n	10004604 <__aeabi_ddiv+0x538>
10004560:	2300      	movs	r3, #0
10004562:	e6b2      	b.n	100042ca <__aeabi_ddiv+0x1fe>
10004564:	1909      	adds	r1, r1, r4
10004566:	3f01      	subs	r7, #1
10004568:	4658      	mov	r0, fp
1000456a:	428c      	cmp	r4, r1
1000456c:	d919      	bls.n	100045a2 <__aeabi_ddiv+0x4d6>
1000456e:	4291      	cmp	r1, r2
10004570:	d000      	beq.n	10004574 <__aeabi_ddiv+0x4a8>
10004572:	e712      	b.n	1000439a <__aeabi_ddiv+0x2ce>
10004574:	4298      	cmp	r0, r3
10004576:	d000      	beq.n	1000457a <__aeabi_ddiv+0x4ae>
10004578:	e70f      	b.n	1000439a <__aeabi_ddiv+0x2ce>
1000457a:	e76c      	b.n	10004456 <__aeabi_ddiv+0x38a>
1000457c:	4c3d      	ldr	r4, [pc, #244]	; (10004674 <__aeabi_ddiv+0x5a8>)
1000457e:	9d04      	ldr	r5, [sp, #16]
10004580:	1b63      	subs	r3, r4, r5
10004582:	2b38      	cmp	r3, #56	; 0x38
10004584:	dd1c      	ble.n	100045c0 <__aeabi_ddiv+0x4f4>
10004586:	9b01      	ldr	r3, [sp, #4]
10004588:	2200      	movs	r2, #0
1000458a:	2600      	movs	r6, #0
1000458c:	2700      	movs	r7, #0
1000458e:	e711      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
10004590:	9b01      	ldr	r3, [sp, #4]
10004592:	2200      	movs	r2, #0
10004594:	402b      	ands	r3, r5
10004596:	2600      	movs	r6, #0
10004598:	2700      	movs	r7, #0
1000459a:	e70b      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
1000459c:	2701      	movs	r7, #1
1000459e:	427f      	negs	r7, r7
100045a0:	e759      	b.n	10004456 <__aeabi_ddiv+0x38a>
100045a2:	428a      	cmp	r2, r1
100045a4:	d803      	bhi.n	100045ae <__aeabi_ddiv+0x4e2>
100045a6:	d000      	beq.n	100045aa <__aeabi_ddiv+0x4de>
100045a8:	e6f7      	b.n	1000439a <__aeabi_ddiv+0x2ce>
100045aa:	4298      	cmp	r0, r3
100045ac:	d2e2      	bcs.n	10004574 <__aeabi_ddiv+0x4a8>
100045ae:	465d      	mov	r5, fp
100045b0:	0068      	lsls	r0, r5, #1
100045b2:	4558      	cmp	r0, fp
100045b4:	41ad      	sbcs	r5, r5
100045b6:	426d      	negs	r5, r5
100045b8:	192c      	adds	r4, r5, r4
100045ba:	3f01      	subs	r7, #1
100045bc:	1909      	adds	r1, r1, r4
100045be:	e7d6      	b.n	1000456e <__aeabi_ddiv+0x4a2>
100045c0:	2b1f      	cmp	r3, #31
100045c2:	dc34      	bgt.n	1000462e <__aeabi_ddiv+0x562>
100045c4:	9c04      	ldr	r4, [sp, #16]
100045c6:	4a2c      	ldr	r2, [pc, #176]	; (10004678 <__aeabi_ddiv+0x5ac>)
100045c8:	1c38      	adds	r0, r7, #0
100045ca:	18a5      	adds	r5, r4, r2
100045cc:	1c31      	adds	r1, r6, #0
100045ce:	40af      	lsls	r7, r5
100045d0:	40d8      	lsrs	r0, r3
100045d2:	40a9      	lsls	r1, r5
100045d4:	1c3c      	adds	r4, r7, #0
100045d6:	4301      	orrs	r1, r0
100045d8:	1e67      	subs	r7, r4, #1
100045da:	41bc      	sbcs	r4, r7
100045dc:	1c0f      	adds	r7, r1, #0
100045de:	4327      	orrs	r7, r4
100045e0:	40de      	lsrs	r6, r3
100045e2:	230f      	movs	r3, #15
100045e4:	403b      	ands	r3, r7
100045e6:	2b04      	cmp	r3, #4
100045e8:	d005      	beq.n	100045f6 <__aeabi_ddiv+0x52a>
100045ea:	1d3a      	adds	r2, r7, #4
100045ec:	42ba      	cmp	r2, r7
100045ee:	41bf      	sbcs	r7, r7
100045f0:	427d      	negs	r5, r7
100045f2:	1976      	adds	r6, r6, r5
100045f4:	1c17      	adds	r7, r2, #0
100045f6:	0232      	lsls	r2, r6, #8
100045f8:	d511      	bpl.n	1000461e <__aeabi_ddiv+0x552>
100045fa:	9b01      	ldr	r3, [sp, #4]
100045fc:	2201      	movs	r2, #1
100045fe:	2600      	movs	r6, #0
10004600:	2700      	movs	r7, #0
10004602:	e6d7      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
10004604:	4459      	add	r1, fp
10004606:	4559      	cmp	r1, fp
10004608:	4192      	sbcs	r2, r2
1000460a:	4252      	negs	r2, r2
1000460c:	1912      	adds	r2, r2, r4
1000460e:	18d3      	adds	r3, r2, r3
10004610:	3e01      	subs	r6, #1
10004612:	1a1b      	subs	r3, r3, r0
10004614:	e659      	b.n	100042ca <__aeabi_ddiv+0x1fe>
10004616:	2b00      	cmp	r3, #0
10004618:	d1a4      	bne.n	10004564 <__aeabi_ddiv+0x498>
1000461a:	2000      	movs	r0, #0
1000461c:	e7aa      	b.n	10004574 <__aeabi_ddiv+0x4a8>
1000461e:	0770      	lsls	r0, r6, #29
10004620:	08ff      	lsrs	r7, r7, #3
10004622:	0271      	lsls	r1, r6, #9
10004624:	4307      	orrs	r7, r0
10004626:	0b0e      	lsrs	r6, r1, #12
10004628:	9b01      	ldr	r3, [sp, #4]
1000462a:	2200      	movs	r2, #0
1000462c:	e6c2      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
1000462e:	4913      	ldr	r1, [pc, #76]	; (1000467c <__aeabi_ddiv+0x5b0>)
10004630:	9c04      	ldr	r4, [sp, #16]
10004632:	1c30      	adds	r0, r6, #0
10004634:	1b0a      	subs	r2, r1, r4
10004636:	40d0      	lsrs	r0, r2
10004638:	1c05      	adds	r5, r0, #0
1000463a:	2b20      	cmp	r3, #32
1000463c:	d008      	beq.n	10004650 <__aeabi_ddiv+0x584>
1000463e:	4b10      	ldr	r3, [pc, #64]	; (10004680 <__aeabi_ddiv+0x5b4>)
10004640:	18e1      	adds	r1, r4, r3
10004642:	408e      	lsls	r6, r1
10004644:	4337      	orrs	r7, r6
10004646:	1e7b      	subs	r3, r7, #1
10004648:	419f      	sbcs	r7, r3
1000464a:	432f      	orrs	r7, r5
1000464c:	2600      	movs	r6, #0
1000464e:	e7c8      	b.n	100045e2 <__aeabi_ddiv+0x516>
10004650:	2600      	movs	r6, #0
10004652:	e7f7      	b.n	10004644 <__aeabi_ddiv+0x578>
10004654:	2280      	movs	r2, #128	; 0x80
10004656:	0310      	lsls	r0, r2, #12
10004658:	4306      	orrs	r6, r0
1000465a:	0331      	lsls	r1, r6, #12
1000465c:	0b0e      	lsrs	r6, r1, #12
1000465e:	9b01      	ldr	r3, [sp, #4]
10004660:	4a03      	ldr	r2, [pc, #12]	; (10004670 <__aeabi_ddiv+0x5a4>)
10004662:	e6a7      	b.n	100043b4 <__aeabi_ddiv+0x2e8>
10004664:	000003ff 	.word	0x000003ff
10004668:	feffffff 	.word	0xfeffffff
1000466c:	000007fe 	.word	0x000007fe
10004670:	000007ff 	.word	0x000007ff
10004674:	fffffc02 	.word	0xfffffc02
10004678:	0000041e 	.word	0x0000041e
1000467c:	fffffbe2 	.word	0xfffffbe2
10004680:	0000043e 	.word	0x0000043e

10004684 <__eqdf2>:
10004684:	b5f0      	push	{r4, r5, r6, r7, lr}
10004686:	4694      	mov	ip, r2
10004688:	4647      	mov	r7, r8
1000468a:	031a      	lsls	r2, r3, #12
1000468c:	1c06      	adds	r6, r0, #0
1000468e:	0058      	lsls	r0, r3, #1
10004690:	b480      	push	{r7}
10004692:	0b17      	lsrs	r7, r2, #12
10004694:	0d42      	lsrs	r2, r0, #21
10004696:	4819      	ldr	r0, [pc, #100]	; (100046fc <__eqdf2+0x78>)
10004698:	030d      	lsls	r5, r1, #12
1000469a:	004c      	lsls	r4, r1, #1
1000469c:	0fdb      	lsrs	r3, r3, #31
1000469e:	0b2d      	lsrs	r5, r5, #12
100046a0:	0d64      	lsrs	r4, r4, #21
100046a2:	0fc9      	lsrs	r1, r1, #31
100046a4:	4698      	mov	r8, r3
100046a6:	4284      	cmp	r4, r0
100046a8:	d008      	beq.n	100046bc <__eqdf2+0x38>
100046aa:	4814      	ldr	r0, [pc, #80]	; (100046fc <__eqdf2+0x78>)
100046ac:	4282      	cmp	r2, r0
100046ae:	d00d      	beq.n	100046cc <__eqdf2+0x48>
100046b0:	2001      	movs	r0, #1
100046b2:	4294      	cmp	r4, r2
100046b4:	d012      	beq.n	100046dc <__eqdf2+0x58>
100046b6:	bc04      	pop	{r2}
100046b8:	4690      	mov	r8, r2
100046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100046bc:	1c2b      	adds	r3, r5, #0
100046be:	4333      	orrs	r3, r6
100046c0:	2001      	movs	r0, #1
100046c2:	2b00      	cmp	r3, #0
100046c4:	d1f7      	bne.n	100046b6 <__eqdf2+0x32>
100046c6:	480d      	ldr	r0, [pc, #52]	; (100046fc <__eqdf2+0x78>)
100046c8:	4282      	cmp	r2, r0
100046ca:	d1f1      	bne.n	100046b0 <__eqdf2+0x2c>
100046cc:	4663      	mov	r3, ip
100046ce:	433b      	orrs	r3, r7
100046d0:	2001      	movs	r0, #1
100046d2:	2b00      	cmp	r3, #0
100046d4:	d1ef      	bne.n	100046b6 <__eqdf2+0x32>
100046d6:	2001      	movs	r0, #1
100046d8:	4294      	cmp	r4, r2
100046da:	d1ec      	bne.n	100046b6 <__eqdf2+0x32>
100046dc:	42bd      	cmp	r5, r7
100046de:	d1ea      	bne.n	100046b6 <__eqdf2+0x32>
100046e0:	4566      	cmp	r6, ip
100046e2:	d1e8      	bne.n	100046b6 <__eqdf2+0x32>
100046e4:	4541      	cmp	r1, r8
100046e6:	d006      	beq.n	100046f6 <__eqdf2+0x72>
100046e8:	2c00      	cmp	r4, #0
100046ea:	d1e4      	bne.n	100046b6 <__eqdf2+0x32>
100046ec:	1c28      	adds	r0, r5, #0
100046ee:	4330      	orrs	r0, r6
100046f0:	1e45      	subs	r5, r0, #1
100046f2:	41a8      	sbcs	r0, r5
100046f4:	e7df      	b.n	100046b6 <__eqdf2+0x32>
100046f6:	2000      	movs	r0, #0
100046f8:	e7dd      	b.n	100046b6 <__eqdf2+0x32>
100046fa:	46c0      	nop			; (mov r8, r8)
100046fc:	000007ff 	.word	0x000007ff

10004700 <__gedf2>:
10004700:	b5f0      	push	{r4, r5, r6, r7, lr}
10004702:	4657      	mov	r7, sl
10004704:	464e      	mov	r6, r9
10004706:	4645      	mov	r5, r8
10004708:	b4e0      	push	{r5, r6, r7}
1000470a:	1c04      	adds	r4, r0, #0
1000470c:	004e      	lsls	r6, r1, #1
1000470e:	0308      	lsls	r0, r1, #12
10004710:	0fc9      	lsrs	r1, r1, #31
10004712:	468a      	mov	sl, r1
10004714:	1c17      	adds	r7, r2, #0
10004716:	0059      	lsls	r1, r3, #1
10004718:	031a      	lsls	r2, r3, #12
1000471a:	0b05      	lsrs	r5, r0, #12
1000471c:	0d70      	lsrs	r0, r6, #21
1000471e:	0b16      	lsrs	r6, r2, #12
10004720:	0d4a      	lsrs	r2, r1, #21
10004722:	4930      	ldr	r1, [pc, #192]	; (100047e4 <__gedf2+0xe4>)
10004724:	0fdb      	lsrs	r3, r3, #31
10004726:	469c      	mov	ip, r3
10004728:	4288      	cmp	r0, r1
1000472a:	d032      	beq.n	10004792 <__gedf2+0x92>
1000472c:	492d      	ldr	r1, [pc, #180]	; (100047e4 <__gedf2+0xe4>)
1000472e:	428a      	cmp	r2, r1
10004730:	d035      	beq.n	1000479e <__gedf2+0x9e>
10004732:	2800      	cmp	r0, #0
10004734:	d10f      	bne.n	10004756 <__gedf2+0x56>
10004736:	1c29      	adds	r1, r5, #0
10004738:	4321      	orrs	r1, r4
1000473a:	424b      	negs	r3, r1
1000473c:	414b      	adcs	r3, r1
1000473e:	4698      	mov	r8, r3
10004740:	2a00      	cmp	r2, #0
10004742:	d00b      	beq.n	1000475c <__gedf2+0x5c>
10004744:	2b00      	cmp	r3, #0
10004746:	d11a      	bne.n	1000477e <__gedf2+0x7e>
10004748:	45e2      	cmp	sl, ip
1000474a:	d02c      	beq.n	100047a6 <__gedf2+0xa6>
1000474c:	4655      	mov	r5, sl
1000474e:	2d00      	cmp	r5, #0
10004750:	d118      	bne.n	10004784 <__gedf2+0x84>
10004752:	2001      	movs	r0, #1
10004754:	e018      	b.n	10004788 <__gedf2+0x88>
10004756:	2a00      	cmp	r2, #0
10004758:	d1f6      	bne.n	10004748 <__gedf2+0x48>
1000475a:	4690      	mov	r8, r2
1000475c:	1c31      	adds	r1, r6, #0
1000475e:	4339      	orrs	r1, r7
10004760:	424b      	negs	r3, r1
10004762:	414b      	adcs	r3, r1
10004764:	4641      	mov	r1, r8
10004766:	2900      	cmp	r1, #0
10004768:	d106      	bne.n	10004778 <__gedf2+0x78>
1000476a:	2b00      	cmp	r3, #0
1000476c:	d0ec      	beq.n	10004748 <__gedf2+0x48>
1000476e:	4656      	mov	r6, sl
10004770:	2001      	movs	r0, #1
10004772:	2e00      	cmp	r6, #0
10004774:	d008      	beq.n	10004788 <__gedf2+0x88>
10004776:	e005      	b.n	10004784 <__gedf2+0x84>
10004778:	2000      	movs	r0, #0
1000477a:	2b00      	cmp	r3, #0
1000477c:	d104      	bne.n	10004788 <__gedf2+0x88>
1000477e:	4667      	mov	r7, ip
10004780:	2f00      	cmp	r7, #0
10004782:	d1e6      	bne.n	10004752 <__gedf2+0x52>
10004784:	2301      	movs	r3, #1
10004786:	4258      	negs	r0, r3
10004788:	bc1c      	pop	{r2, r3, r4}
1000478a:	4690      	mov	r8, r2
1000478c:	4699      	mov	r9, r3
1000478e:	46a2      	mov	sl, r4
10004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004792:	1c2b      	adds	r3, r5, #0
10004794:	4323      	orrs	r3, r4
10004796:	d0c9      	beq.n	1000472c <__gedf2+0x2c>
10004798:	2102      	movs	r1, #2
1000479a:	4248      	negs	r0, r1
1000479c:	e7f4      	b.n	10004788 <__gedf2+0x88>
1000479e:	1c33      	adds	r3, r6, #0
100047a0:	433b      	orrs	r3, r7
100047a2:	d0c6      	beq.n	10004732 <__gedf2+0x32>
100047a4:	e7f8      	b.n	10004798 <__gedf2+0x98>
100047a6:	4290      	cmp	r0, r2
100047a8:	dc05      	bgt.n	100047b6 <__gedf2+0xb6>
100047aa:	da09      	bge.n	100047c0 <__gedf2+0xc0>
100047ac:	4652      	mov	r2, sl
100047ae:	2a00      	cmp	r2, #0
100047b0:	d0e8      	beq.n	10004784 <__gedf2+0x84>
100047b2:	2001      	movs	r0, #1
100047b4:	e7e8      	b.n	10004788 <__gedf2+0x88>
100047b6:	4654      	mov	r4, sl
100047b8:	2c00      	cmp	r4, #0
100047ba:	d1e3      	bne.n	10004784 <__gedf2+0x84>
100047bc:	2001      	movs	r0, #1
100047be:	e7e3      	b.n	10004788 <__gedf2+0x88>
100047c0:	42b5      	cmp	r5, r6
100047c2:	d8c3      	bhi.n	1000474c <__gedf2+0x4c>
100047c4:	d007      	beq.n	100047d6 <__gedf2+0xd6>
100047c6:	2000      	movs	r0, #0
100047c8:	42b5      	cmp	r5, r6
100047ca:	d2dd      	bcs.n	10004788 <__gedf2+0x88>
100047cc:	4650      	mov	r0, sl
100047ce:	2800      	cmp	r0, #0
100047d0:	d0d8      	beq.n	10004784 <__gedf2+0x84>
100047d2:	2001      	movs	r0, #1
100047d4:	e7d8      	b.n	10004788 <__gedf2+0x88>
100047d6:	42bc      	cmp	r4, r7
100047d8:	d8b8      	bhi.n	1000474c <__gedf2+0x4c>
100047da:	2000      	movs	r0, #0
100047dc:	42bc      	cmp	r4, r7
100047de:	d3f5      	bcc.n	100047cc <__gedf2+0xcc>
100047e0:	e7d2      	b.n	10004788 <__gedf2+0x88>
100047e2:	46c0      	nop			; (mov r8, r8)
100047e4:	000007ff 	.word	0x000007ff

100047e8 <__ledf2>:
100047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100047ea:	4644      	mov	r4, r8
100047ec:	465f      	mov	r7, fp
100047ee:	4656      	mov	r6, sl
100047f0:	464d      	mov	r5, r9
100047f2:	b4f0      	push	{r4, r5, r6, r7}
100047f4:	4694      	mov	ip, r2
100047f6:	1c06      	adds	r6, r0, #0
100047f8:	031a      	lsls	r2, r3, #12
100047fa:	0058      	lsls	r0, r3, #1
100047fc:	0b17      	lsrs	r7, r2, #12
100047fe:	0d42      	lsrs	r2, r0, #21
10004800:	482e      	ldr	r0, [pc, #184]	; (100048bc <__ledf2+0xd4>)
10004802:	030d      	lsls	r5, r1, #12
10004804:	004c      	lsls	r4, r1, #1
10004806:	0fdb      	lsrs	r3, r3, #31
10004808:	0b2d      	lsrs	r5, r5, #12
1000480a:	0d64      	lsrs	r4, r4, #21
1000480c:	0fc9      	lsrs	r1, r1, #31
1000480e:	4698      	mov	r8, r3
10004810:	4284      	cmp	r4, r0
10004812:	d033      	beq.n	1000487c <__ledf2+0x94>
10004814:	4829      	ldr	r0, [pc, #164]	; (100048bc <__ledf2+0xd4>)
10004816:	4282      	cmp	r2, r0
10004818:	d036      	beq.n	10004888 <__ledf2+0xa0>
1000481a:	2c00      	cmp	r4, #0
1000481c:	d019      	beq.n	10004852 <__ledf2+0x6a>
1000481e:	2a00      	cmp	r2, #0
10004820:	d120      	bne.n	10004864 <__ledf2+0x7c>
10004822:	4693      	mov	fp, r2
10004824:	4663      	mov	r3, ip
10004826:	433b      	orrs	r3, r7
10004828:	4258      	negs	r0, r3
1000482a:	4158      	adcs	r0, r3
1000482c:	465b      	mov	r3, fp
1000482e:	4682      	mov	sl, r0
10004830:	2b00      	cmp	r3, #0
10004832:	d01d      	beq.n	10004870 <__ledf2+0x88>
10004834:	4651      	mov	r1, sl
10004836:	2000      	movs	r0, #0
10004838:	2900      	cmp	r1, #0
1000483a:	d104      	bne.n	10004846 <__ledf2+0x5e>
1000483c:	4642      	mov	r2, r8
1000483e:	2a00      	cmp	r2, #0
10004840:	d114      	bne.n	1000486c <__ledf2+0x84>
10004842:	2401      	movs	r4, #1
10004844:	4260      	negs	r0, r4
10004846:	bc3c      	pop	{r2, r3, r4, r5}
10004848:	4690      	mov	r8, r2
1000484a:	4699      	mov	r9, r3
1000484c:	46a2      	mov	sl, r4
1000484e:	46ab      	mov	fp, r5
10004850:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004852:	1c2b      	adds	r3, r5, #0
10004854:	4333      	orrs	r3, r6
10004856:	4258      	negs	r0, r3
10004858:	4143      	adcs	r3, r0
1000485a:	469b      	mov	fp, r3
1000485c:	2a00      	cmp	r2, #0
1000485e:	d0e1      	beq.n	10004824 <__ledf2+0x3c>
10004860:	2b00      	cmp	r3, #0
10004862:	d1eb      	bne.n	1000483c <__ledf2+0x54>
10004864:	4541      	cmp	r1, r8
10004866:	d015      	beq.n	10004894 <__ledf2+0xac>
10004868:	2900      	cmp	r1, #0
1000486a:	d1ea      	bne.n	10004842 <__ledf2+0x5a>
1000486c:	2001      	movs	r0, #1
1000486e:	e7ea      	b.n	10004846 <__ledf2+0x5e>
10004870:	2800      	cmp	r0, #0
10004872:	d0f7      	beq.n	10004864 <__ledf2+0x7c>
10004874:	2001      	movs	r0, #1
10004876:	2900      	cmp	r1, #0
10004878:	d0e5      	beq.n	10004846 <__ledf2+0x5e>
1000487a:	e7e2      	b.n	10004842 <__ledf2+0x5a>
1000487c:	1c2b      	adds	r3, r5, #0
1000487e:	4333      	orrs	r3, r6
10004880:	2002      	movs	r0, #2
10004882:	2b00      	cmp	r3, #0
10004884:	d1df      	bne.n	10004846 <__ledf2+0x5e>
10004886:	e7c5      	b.n	10004814 <__ledf2+0x2c>
10004888:	4663      	mov	r3, ip
1000488a:	433b      	orrs	r3, r7
1000488c:	2002      	movs	r0, #2
1000488e:	2b00      	cmp	r3, #0
10004890:	d1d9      	bne.n	10004846 <__ledf2+0x5e>
10004892:	e7c2      	b.n	1000481a <__ledf2+0x32>
10004894:	4294      	cmp	r4, r2
10004896:	dce7      	bgt.n	10004868 <__ledf2+0x80>
10004898:	db05      	blt.n	100048a6 <__ledf2+0xbe>
1000489a:	42bd      	cmp	r5, r7
1000489c:	d8e4      	bhi.n	10004868 <__ledf2+0x80>
1000489e:	d006      	beq.n	100048ae <__ledf2+0xc6>
100048a0:	2000      	movs	r0, #0
100048a2:	42bd      	cmp	r5, r7
100048a4:	d2cf      	bcs.n	10004846 <__ledf2+0x5e>
100048a6:	2900      	cmp	r1, #0
100048a8:	d0cb      	beq.n	10004842 <__ledf2+0x5a>
100048aa:	2001      	movs	r0, #1
100048ac:	e7cb      	b.n	10004846 <__ledf2+0x5e>
100048ae:	4566      	cmp	r6, ip
100048b0:	d8da      	bhi.n	10004868 <__ledf2+0x80>
100048b2:	2000      	movs	r0, #0
100048b4:	4566      	cmp	r6, ip
100048b6:	d3f6      	bcc.n	100048a6 <__ledf2+0xbe>
100048b8:	e7c5      	b.n	10004846 <__ledf2+0x5e>
100048ba:	46c0      	nop			; (mov r8, r8)
100048bc:	000007ff 	.word	0x000007ff

100048c0 <__aeabi_dmul>:
100048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100048c2:	4656      	mov	r6, sl
100048c4:	4644      	mov	r4, r8
100048c6:	465f      	mov	r7, fp
100048c8:	464d      	mov	r5, r9
100048ca:	b4f0      	push	{r4, r5, r6, r7}
100048cc:	004f      	lsls	r7, r1, #1
100048ce:	1c1d      	adds	r5, r3, #0
100048d0:	030b      	lsls	r3, r1, #12
100048d2:	1c14      	adds	r4, r2, #0
100048d4:	0b1a      	lsrs	r2, r3, #12
100048d6:	0d7b      	lsrs	r3, r7, #21
100048d8:	b087      	sub	sp, #28
100048da:	1c06      	adds	r6, r0, #0
100048dc:	4692      	mov	sl, r2
100048de:	4698      	mov	r8, r3
100048e0:	0fcf      	lsrs	r7, r1, #31
100048e2:	2b00      	cmp	r3, #0
100048e4:	d121      	bne.n	1000492a <__aeabi_dmul+0x6a>
100048e6:	4302      	orrs	r2, r0
100048e8:	d100      	bne.n	100048ec <__aeabi_dmul+0x2c>
100048ea:	e149      	b.n	10004b80 <__aeabi_dmul+0x2c0>
100048ec:	4653      	mov	r3, sl
100048ee:	2b00      	cmp	r3, #0
100048f0:	d100      	bne.n	100048f4 <__aeabi_dmul+0x34>
100048f2:	e1e4      	b.n	10004cbe <__aeabi_dmul+0x3fe>
100048f4:	4650      	mov	r0, sl
100048f6:	f000 ff3b 	bl	10005770 <__clzsi2>
100048fa:	1e03      	subs	r3, r0, #0
100048fc:	2b27      	cmp	r3, #39	; 0x27
100048fe:	dd00      	ble.n	10004902 <__aeabi_dmul+0x42>
10004900:	e1d8      	b.n	10004cb4 <__aeabi_dmul+0x3f4>
10004902:	3b08      	subs	r3, #8
10004904:	4651      	mov	r1, sl
10004906:	4099      	lsls	r1, r3
10004908:	2228      	movs	r2, #40	; 0x28
1000490a:	4688      	mov	r8, r1
1000490c:	1a11      	subs	r1, r2, r0
1000490e:	1c32      	adds	r2, r6, #0
10004910:	40ca      	lsrs	r2, r1
10004912:	4641      	mov	r1, r8
10004914:	430a      	orrs	r2, r1
10004916:	4692      	mov	sl, r2
10004918:	409e      	lsls	r6, r3
1000491a:	4bd8      	ldr	r3, [pc, #864]	; (10004c7c <__aeabi_dmul+0x3bc>)
1000491c:	2200      	movs	r2, #0
1000491e:	1a18      	subs	r0, r3, r0
10004920:	2100      	movs	r1, #0
10004922:	4680      	mov	r8, r0
10004924:	4691      	mov	r9, r2
10004926:	9103      	str	r1, [sp, #12]
10004928:	e011      	b.n	1000494e <__aeabi_dmul+0x8e>
1000492a:	48d5      	ldr	r0, [pc, #852]	; (10004c80 <__aeabi_dmul+0x3c0>)
1000492c:	4283      	cmp	r3, r0
1000492e:	d03e      	beq.n	100049ae <__aeabi_dmul+0xee>
10004930:	2180      	movs	r1, #128	; 0x80
10004932:	4653      	mov	r3, sl
10004934:	034a      	lsls	r2, r1, #13
10004936:	431a      	orrs	r2, r3
10004938:	00d0      	lsls	r0, r2, #3
1000493a:	0f71      	lsrs	r1, r6, #29
1000493c:	4308      	orrs	r0, r1
1000493e:	4ad1      	ldr	r2, [pc, #836]	; (10004c84 <__aeabi_dmul+0x3c4>)
10004940:	4682      	mov	sl, r0
10004942:	2300      	movs	r3, #0
10004944:	2000      	movs	r0, #0
10004946:	00f6      	lsls	r6, r6, #3
10004948:	4490      	add	r8, r2
1000494a:	4699      	mov	r9, r3
1000494c:	9003      	str	r0, [sp, #12]
1000494e:	1c29      	adds	r1, r5, #0
10004950:	1c20      	adds	r0, r4, #0
10004952:	1c25      	adds	r5, r4, #0
10004954:	004a      	lsls	r2, r1, #1
10004956:	030c      	lsls	r4, r1, #12
10004958:	0fcb      	lsrs	r3, r1, #31
1000495a:	0b24      	lsrs	r4, r4, #12
1000495c:	0d52      	lsrs	r2, r2, #21
1000495e:	469b      	mov	fp, r3
10004960:	d131      	bne.n	100049c6 <__aeabi_dmul+0x106>
10004962:	1c21      	adds	r1, r4, #0
10004964:	4301      	orrs	r1, r0
10004966:	d100      	bne.n	1000496a <__aeabi_dmul+0xaa>
10004968:	e112      	b.n	10004b90 <__aeabi_dmul+0x2d0>
1000496a:	2c00      	cmp	r4, #0
1000496c:	d100      	bne.n	10004970 <__aeabi_dmul+0xb0>
1000496e:	e19d      	b.n	10004cac <__aeabi_dmul+0x3ec>
10004970:	1c20      	adds	r0, r4, #0
10004972:	f000 fefd 	bl	10005770 <__clzsi2>
10004976:	2827      	cmp	r0, #39	; 0x27
10004978:	dd00      	ble.n	1000497c <__aeabi_dmul+0xbc>
1000497a:	e191      	b.n	10004ca0 <__aeabi_dmul+0x3e0>
1000497c:	1c03      	adds	r3, r0, #0
1000497e:	2228      	movs	r2, #40	; 0x28
10004980:	3b08      	subs	r3, #8
10004982:	1c29      	adds	r1, r5, #0
10004984:	1a12      	subs	r2, r2, r0
10004986:	409c      	lsls	r4, r3
10004988:	40d1      	lsrs	r1, r2
1000498a:	430c      	orrs	r4, r1
1000498c:	409d      	lsls	r5, r3
1000498e:	4bbb      	ldr	r3, [pc, #748]	; (10004c7c <__aeabi_dmul+0x3bc>)
10004990:	4659      	mov	r1, fp
10004992:	1a1a      	subs	r2, r3, r0
10004994:	4079      	eors	r1, r7
10004996:	2000      	movs	r0, #0
10004998:	464b      	mov	r3, r9
1000499a:	9101      	str	r1, [sp, #4]
1000499c:	4303      	orrs	r3, r0
1000499e:	2b0f      	cmp	r3, #15
100049a0:	d826      	bhi.n	100049f0 <__aeabi_dmul+0x130>
100049a2:	0099      	lsls	r1, r3, #2
100049a4:	4bb8      	ldr	r3, [pc, #736]	; (10004c88 <__aeabi_dmul+0x3c8>)
100049a6:	468c      	mov	ip, r1
100049a8:	4463      	add	r3, ip
100049aa:	6819      	ldr	r1, [r3, #0]
100049ac:	468f      	mov	pc, r1
100049ae:	1c11      	adds	r1, r2, #0
100049b0:	4331      	orrs	r1, r6
100049b2:	d000      	beq.n	100049b6 <__aeabi_dmul+0xf6>
100049b4:	e0df      	b.n	10004b76 <__aeabi_dmul+0x2b6>
100049b6:	2608      	movs	r6, #8
100049b8:	2000      	movs	r0, #0
100049ba:	2102      	movs	r1, #2
100049bc:	46b1      	mov	r9, r6
100049be:	4682      	mov	sl, r0
100049c0:	2600      	movs	r6, #0
100049c2:	9103      	str	r1, [sp, #12]
100049c4:	e7c3      	b.n	1000494e <__aeabi_dmul+0x8e>
100049c6:	48ae      	ldr	r0, [pc, #696]	; (10004c80 <__aeabi_dmul+0x3c0>)
100049c8:	4282      	cmp	r2, r0
100049ca:	d100      	bne.n	100049ce <__aeabi_dmul+0x10e>
100049cc:	e0c9      	b.n	10004b62 <__aeabi_dmul+0x2a2>
100049ce:	2180      	movs	r1, #128	; 0x80
100049d0:	034b      	lsls	r3, r1, #13
100049d2:	431c      	orrs	r4, r3
100049d4:	49ab      	ldr	r1, [pc, #684]	; (10004c84 <__aeabi_dmul+0x3c4>)
100049d6:	0f68      	lsrs	r0, r5, #29
100049d8:	00e4      	lsls	r4, r4, #3
100049da:	4304      	orrs	r4, r0
100049dc:	00ed      	lsls	r5, r5, #3
100049de:	1852      	adds	r2, r2, r1
100049e0:	2000      	movs	r0, #0
100049e2:	4659      	mov	r1, fp
100049e4:	4079      	eors	r1, r7
100049e6:	464b      	mov	r3, r9
100049e8:	9101      	str	r1, [sp, #4]
100049ea:	4303      	orrs	r3, r0
100049ec:	2b0f      	cmp	r3, #15
100049ee:	d9d8      	bls.n	100049a2 <__aeabi_dmul+0xe2>
100049f0:	4442      	add	r2, r8
100049f2:	0433      	lsls	r3, r6, #16
100049f4:	0429      	lsls	r1, r5, #16
100049f6:	9204      	str	r2, [sp, #16]
100049f8:	0c1a      	lsrs	r2, r3, #16
100049fa:	0c0f      	lsrs	r7, r1, #16
100049fc:	1c10      	adds	r0, r2, #0
100049fe:	4378      	muls	r0, r7
10004a00:	0c36      	lsrs	r6, r6, #16
10004a02:	1c33      	adds	r3, r6, #0
10004a04:	4680      	mov	r8, r0
10004a06:	0c2d      	lsrs	r5, r5, #16
10004a08:	437b      	muls	r3, r7
10004a0a:	1c30      	adds	r0, r6, #0
10004a0c:	4368      	muls	r0, r5
10004a0e:	1c11      	adds	r1, r2, #0
10004a10:	4369      	muls	r1, r5
10004a12:	469c      	mov	ip, r3
10004a14:	4643      	mov	r3, r8
10004a16:	4683      	mov	fp, r0
10004a18:	0c18      	lsrs	r0, r3, #16
10004a1a:	1808      	adds	r0, r1, r0
10004a1c:	4460      	add	r0, ip
10004a1e:	4584      	cmp	ip, r0
10004a20:	d900      	bls.n	10004a24 <__aeabi_dmul+0x164>
10004a22:	e11f      	b.n	10004c64 <__aeabi_dmul+0x3a4>
10004a24:	0c01      	lsrs	r1, r0, #16
10004a26:	4643      	mov	r3, r8
10004a28:	9103      	str	r1, [sp, #12]
10004a2a:	0419      	lsls	r1, r3, #16
10004a2c:	0c0b      	lsrs	r3, r1, #16
10004a2e:	0400      	lsls	r0, r0, #16
10004a30:	18c0      	adds	r0, r0, r3
10004a32:	0421      	lsls	r1, r4, #16
10004a34:	0c24      	lsrs	r4, r4, #16
10004a36:	9005      	str	r0, [sp, #20]
10004a38:	1c10      	adds	r0, r2, #0
10004a3a:	4362      	muls	r2, r4
10004a3c:	0c09      	lsrs	r1, r1, #16
10004a3e:	9202      	str	r2, [sp, #8]
10004a40:	4348      	muls	r0, r1
10004a42:	1c32      	adds	r2, r6, #0
10004a44:	4366      	muls	r6, r4
10004a46:	434a      	muls	r2, r1
10004a48:	9b02      	ldr	r3, [sp, #8]
10004a4a:	46b1      	mov	r9, r6
10004a4c:	0c06      	lsrs	r6, r0, #16
10004a4e:	4690      	mov	r8, r2
10004a50:	46b4      	mov	ip, r6
10004a52:	1c1a      	adds	r2, r3, #0
10004a54:	4462      	add	r2, ip
10004a56:	4442      	add	r2, r8
10004a58:	4590      	cmp	r8, r2
10004a5a:	d902      	bls.n	10004a62 <__aeabi_dmul+0x1a2>
10004a5c:	2680      	movs	r6, #128	; 0x80
10004a5e:	0273      	lsls	r3, r6, #9
10004a60:	4499      	add	r9, r3
10004a62:	0c16      	lsrs	r6, r2, #16
10004a64:	46b0      	mov	r8, r6
10004a66:	44c1      	add	r9, r8
10004a68:	0400      	lsls	r0, r0, #16
10004a6a:	464b      	mov	r3, r9
10004a6c:	0c06      	lsrs	r6, r0, #16
10004a6e:	0412      	lsls	r2, r2, #16
10004a70:	9302      	str	r3, [sp, #8]
10004a72:	1993      	adds	r3, r2, r6
10004a74:	4656      	mov	r6, sl
10004a76:	0432      	lsls	r2, r6, #16
10004a78:	0c10      	lsrs	r0, r2, #16
10004a7a:	1c02      	adds	r2, r0, #0
10004a7c:	436a      	muls	r2, r5
10004a7e:	469c      	mov	ip, r3
10004a80:	1c03      	adds	r3, r0, #0
10004a82:	437b      	muls	r3, r7
10004a84:	4691      	mov	r9, r2
10004a86:	0c32      	lsrs	r2, r6, #16
10004a88:	4357      	muls	r7, r2
10004a8a:	4698      	mov	r8, r3
10004a8c:	0c1b      	lsrs	r3, r3, #16
10004a8e:	469a      	mov	sl, r3
10004a90:	44d1      	add	r9, sl
10004a92:	44b9      	add	r9, r7
10004a94:	4355      	muls	r5, r2
10004a96:	454f      	cmp	r7, r9
10004a98:	d902      	bls.n	10004aa0 <__aeabi_dmul+0x1e0>
10004a9a:	2780      	movs	r7, #128	; 0x80
10004a9c:	027e      	lsls	r6, r7, #9
10004a9e:	19ad      	adds	r5, r5, r6
10004aa0:	464b      	mov	r3, r9
10004aa2:	0c1f      	lsrs	r7, r3, #16
10004aa4:	4646      	mov	r6, r8
10004aa6:	19ed      	adds	r5, r5, r7
10004aa8:	041f      	lsls	r7, r3, #16
10004aaa:	0433      	lsls	r3, r6, #16
10004aac:	0c1e      	lsrs	r6, r3, #16
10004aae:	1c03      	adds	r3, r0, #0
10004ab0:	434b      	muls	r3, r1
10004ab2:	4360      	muls	r0, r4
10004ab4:	4351      	muls	r1, r2
10004ab6:	4354      	muls	r4, r2
10004ab8:	0c1a      	lsrs	r2, r3, #16
10004aba:	1880      	adds	r0, r0, r2
10004abc:	46b0      	mov	r8, r6
10004abe:	1840      	adds	r0, r0, r1
10004ac0:	4447      	add	r7, r8
10004ac2:	469a      	mov	sl, r3
10004ac4:	4281      	cmp	r1, r0
10004ac6:	d902      	bls.n	10004ace <__aeabi_dmul+0x20e>
10004ac8:	2180      	movs	r1, #128	; 0x80
10004aca:	024e      	lsls	r6, r1, #9
10004acc:	19a4      	adds	r4, r4, r6
10004ace:	9b03      	ldr	r3, [sp, #12]
10004ad0:	1c1a      	adds	r2, r3, #0
10004ad2:	4462      	add	r2, ip
10004ad4:	445a      	add	r2, fp
10004ad6:	4562      	cmp	r2, ip
10004ad8:	4189      	sbcs	r1, r1
10004ada:	424e      	negs	r6, r1
10004adc:	4651      	mov	r1, sl
10004ade:	46b3      	mov	fp, r6
10004ae0:	0403      	lsls	r3, r0, #16
10004ae2:	040e      	lsls	r6, r1, #16
10004ae4:	469c      	mov	ip, r3
10004ae6:	9902      	ldr	r1, [sp, #8]
10004ae8:	0c33      	lsrs	r3, r6, #16
10004aea:	4463      	add	r3, ip
10004aec:	18ce      	adds	r6, r1, r3
10004aee:	46b0      	mov	r8, r6
10004af0:	46c2      	mov	sl, r8
10004af2:	44da      	add	sl, fp
10004af4:	19d2      	adds	r2, r2, r7
10004af6:	42ba      	cmp	r2, r7
10004af8:	41bf      	sbcs	r7, r7
10004afa:	4651      	mov	r1, sl
10004afc:	427b      	negs	r3, r7
10004afe:	186f      	adds	r7, r5, r1
10004b00:	18f9      	adds	r1, r7, r3
10004b02:	4699      	mov	r9, r3
10004b04:	45da      	cmp	sl, fp
10004b06:	419b      	sbcs	r3, r3
10004b08:	425e      	negs	r6, r3
10004b0a:	9b02      	ldr	r3, [sp, #8]
10004b0c:	46b3      	mov	fp, r6
10004b0e:	4598      	cmp	r8, r3
10004b10:	41b6      	sbcs	r6, r6
10004b12:	4276      	negs	r6, r6
10004b14:	465b      	mov	r3, fp
10004b16:	431e      	orrs	r6, r3
10004b18:	0c00      	lsrs	r0, r0, #16
10004b1a:	4549      	cmp	r1, r9
10004b1c:	419b      	sbcs	r3, r3
10004b1e:	42af      	cmp	r7, r5
10004b20:	41ad      	sbcs	r5, r5
10004b22:	1836      	adds	r6, r6, r0
10004b24:	426f      	negs	r7, r5
10004b26:	4258      	negs	r0, r3
10004b28:	4338      	orrs	r0, r7
10004b2a:	1836      	adds	r6, r6, r0
10004b2c:	9805      	ldr	r0, [sp, #20]
10004b2e:	1934      	adds	r4, r6, r4
10004b30:	0256      	lsls	r6, r2, #9
10004b32:	4306      	orrs	r6, r0
10004b34:	0dcb      	lsrs	r3, r1, #23
10004b36:	0264      	lsls	r4, r4, #9
10004b38:	1e70      	subs	r0, r6, #1
10004b3a:	4186      	sbcs	r6, r0
10004b3c:	0dd2      	lsrs	r2, r2, #23
10004b3e:	4316      	orrs	r6, r2
10004b40:	0249      	lsls	r1, r1, #9
10004b42:	431c      	orrs	r4, r3
10004b44:	430e      	orrs	r6, r1
10004b46:	01e0      	lsls	r0, r4, #7
10004b48:	d52f      	bpl.n	10004baa <__aeabi_dmul+0x2ea>
10004b4a:	2701      	movs	r7, #1
10004b4c:	9d04      	ldr	r5, [sp, #16]
10004b4e:	4037      	ands	r7, r6
10004b50:	0873      	lsrs	r3, r6, #1
10004b52:	1c3e      	adds	r6, r7, #0
10004b54:	07e0      	lsls	r0, r4, #31
10004b56:	3501      	adds	r5, #1
10004b58:	431e      	orrs	r6, r3
10004b5a:	9504      	str	r5, [sp, #16]
10004b5c:	4306      	orrs	r6, r0
10004b5e:	0864      	lsrs	r4, r4, #1
10004b60:	e023      	b.n	10004baa <__aeabi_dmul+0x2ea>
10004b62:	1c23      	adds	r3, r4, #0
10004b64:	432b      	orrs	r3, r5
10004b66:	2003      	movs	r0, #3
10004b68:	2b00      	cmp	r3, #0
10004b6a:	d000      	beq.n	10004b6e <__aeabi_dmul+0x2ae>
10004b6c:	e739      	b.n	100049e2 <__aeabi_dmul+0x122>
10004b6e:	2400      	movs	r4, #0
10004b70:	2500      	movs	r5, #0
10004b72:	2002      	movs	r0, #2
10004b74:	e735      	b.n	100049e2 <__aeabi_dmul+0x122>
10004b76:	220c      	movs	r2, #12
10004b78:	2303      	movs	r3, #3
10004b7a:	4691      	mov	r9, r2
10004b7c:	9303      	str	r3, [sp, #12]
10004b7e:	e6e6      	b.n	1000494e <__aeabi_dmul+0x8e>
10004b80:	2604      	movs	r6, #4
10004b82:	2300      	movs	r3, #0
10004b84:	2001      	movs	r0, #1
10004b86:	46b1      	mov	r9, r6
10004b88:	469a      	mov	sl, r3
10004b8a:	2600      	movs	r6, #0
10004b8c:	9003      	str	r0, [sp, #12]
10004b8e:	e6de      	b.n	1000494e <__aeabi_dmul+0x8e>
10004b90:	2400      	movs	r4, #0
10004b92:	2500      	movs	r5, #0
10004b94:	2001      	movs	r0, #1
10004b96:	e724      	b.n	100049e2 <__aeabi_dmul+0x122>
10004b98:	9803      	ldr	r0, [sp, #12]
10004b9a:	4654      	mov	r4, sl
10004b9c:	2802      	cmp	r0, #2
10004b9e:	d044      	beq.n	10004c2a <__aeabi_dmul+0x36a>
10004ba0:	2803      	cmp	r0, #3
10004ba2:	d100      	bne.n	10004ba6 <__aeabi_dmul+0x2e6>
10004ba4:	e0ea      	b.n	10004d7c <__aeabi_dmul+0x4bc>
10004ba6:	2801      	cmp	r0, #1
10004ba8:	d060      	beq.n	10004c6c <__aeabi_dmul+0x3ac>
10004baa:	9a04      	ldr	r2, [sp, #16]
10004bac:	4937      	ldr	r1, [pc, #220]	; (10004c8c <__aeabi_dmul+0x3cc>)
10004bae:	1850      	adds	r0, r2, r1
10004bb0:	2800      	cmp	r0, #0
10004bb2:	dc00      	bgt.n	10004bb6 <__aeabi_dmul+0x2f6>
10004bb4:	e095      	b.n	10004ce2 <__aeabi_dmul+0x422>
10004bb6:	270f      	movs	r7, #15
10004bb8:	4037      	ands	r7, r6
10004bba:	2f04      	cmp	r7, #4
10004bbc:	d005      	beq.n	10004bca <__aeabi_dmul+0x30a>
10004bbe:	1d31      	adds	r1, r6, #4
10004bc0:	42b1      	cmp	r1, r6
10004bc2:	41b6      	sbcs	r6, r6
10004bc4:	4275      	negs	r5, r6
10004bc6:	1964      	adds	r4, r4, r5
10004bc8:	1c0e      	adds	r6, r1, #0
10004bca:	01e1      	lsls	r1, r4, #7
10004bcc:	d505      	bpl.n	10004bda <__aeabi_dmul+0x31a>
10004bce:	4830      	ldr	r0, [pc, #192]	; (10004c90 <__aeabi_dmul+0x3d0>)
10004bd0:	9a04      	ldr	r2, [sp, #16]
10004bd2:	2380      	movs	r3, #128	; 0x80
10004bd4:	00df      	lsls	r7, r3, #3
10004bd6:	4004      	ands	r4, r0
10004bd8:	19d0      	adds	r0, r2, r7
10004bda:	492e      	ldr	r1, [pc, #184]	; (10004c94 <__aeabi_dmul+0x3d4>)
10004bdc:	4288      	cmp	r0, r1
10004bde:	dc24      	bgt.n	10004c2a <__aeabi_dmul+0x36a>
10004be0:	9b01      	ldr	r3, [sp, #4]
10004be2:	0765      	lsls	r5, r4, #29
10004be4:	08f6      	lsrs	r6, r6, #3
10004be6:	0264      	lsls	r4, r4, #9
10004be8:	0542      	lsls	r2, r0, #21
10004bea:	2701      	movs	r7, #1
10004bec:	432e      	orrs	r6, r5
10004bee:	0b24      	lsrs	r4, r4, #12
10004bf0:	0d52      	lsrs	r2, r2, #21
10004bf2:	401f      	ands	r7, r3
10004bf4:	2000      	movs	r0, #0
10004bf6:	2100      	movs	r1, #0
10004bf8:	0d09      	lsrs	r1, r1, #20
10004bfa:	050d      	lsls	r5, r1, #20
10004bfc:	4325      	orrs	r5, r4
10004bfe:	4c26      	ldr	r4, [pc, #152]	; (10004c98 <__aeabi_dmul+0x3d8>)
10004c00:	0512      	lsls	r2, r2, #20
10004c02:	402c      	ands	r4, r5
10004c04:	4314      	orrs	r4, r2
10004c06:	0063      	lsls	r3, r4, #1
10004c08:	1c30      	adds	r0, r6, #0
10004c0a:	085e      	lsrs	r6, r3, #1
10004c0c:	07ff      	lsls	r7, r7, #31
10004c0e:	1c31      	adds	r1, r6, #0
10004c10:	4339      	orrs	r1, r7
10004c12:	b007      	add	sp, #28
10004c14:	bc3c      	pop	{r2, r3, r4, r5}
10004c16:	4690      	mov	r8, r2
10004c18:	4699      	mov	r9, r3
10004c1a:	46a2      	mov	sl, r4
10004c1c:	46ab      	mov	fp, r5
10004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004c20:	465a      	mov	r2, fp
10004c22:	1c2e      	adds	r6, r5, #0
10004c24:	9201      	str	r2, [sp, #4]
10004c26:	2802      	cmp	r0, #2
10004c28:	d1ba      	bne.n	10004ba0 <__aeabi_dmul+0x2e0>
10004c2a:	9e01      	ldr	r6, [sp, #4]
10004c2c:	2701      	movs	r7, #1
10004c2e:	4037      	ands	r7, r6
10004c30:	4a13      	ldr	r2, [pc, #76]	; (10004c80 <__aeabi_dmul+0x3c0>)
10004c32:	2400      	movs	r4, #0
10004c34:	2600      	movs	r6, #0
10004c36:	e7dd      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004c38:	4654      	mov	r4, sl
10004c3a:	9701      	str	r7, [sp, #4]
10004c3c:	9803      	ldr	r0, [sp, #12]
10004c3e:	e7ad      	b.n	10004b9c <__aeabi_dmul+0x2dc>
10004c40:	2601      	movs	r6, #1
10004c42:	2700      	movs	r7, #0
10004c44:	4c15      	ldr	r4, [pc, #84]	; (10004c9c <__aeabi_dmul+0x3dc>)
10004c46:	4276      	negs	r6, r6
10004c48:	4a0d      	ldr	r2, [pc, #52]	; (10004c80 <__aeabi_dmul+0x3c0>)
10004c4a:	e7d3      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004c4c:	1c2e      	adds	r6, r5, #0
10004c4e:	e7a5      	b.n	10004b9c <__aeabi_dmul+0x2dc>
10004c50:	2280      	movs	r2, #128	; 0x80
10004c52:	0313      	lsls	r3, r2, #12
10004c54:	4651      	mov	r1, sl
10004c56:	4219      	tst	r1, r3
10004c58:	d135      	bne.n	10004cc6 <__aeabi_dmul+0x406>
10004c5a:	430b      	orrs	r3, r1
10004c5c:	031d      	lsls	r5, r3, #12
10004c5e:	0b2c      	lsrs	r4, r5, #12
10004c60:	4a07      	ldr	r2, [pc, #28]	; (10004c80 <__aeabi_dmul+0x3c0>)
10004c62:	e7c7      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004c64:	2180      	movs	r1, #128	; 0x80
10004c66:	024b      	lsls	r3, r1, #9
10004c68:	449b      	add	fp, r3
10004c6a:	e6db      	b.n	10004a24 <__aeabi_dmul+0x164>
10004c6c:	9b01      	ldr	r3, [sp, #4]
10004c6e:	2200      	movs	r2, #0
10004c70:	4018      	ands	r0, r3
10004c72:	b2c7      	uxtb	r7, r0
10004c74:	2400      	movs	r4, #0
10004c76:	2600      	movs	r6, #0
10004c78:	e7bc      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004c7a:	46c0      	nop			; (mov r8, r8)
10004c7c:	fffffc0d 	.word	0xfffffc0d
10004c80:	000007ff 	.word	0x000007ff
10004c84:	fffffc01 	.word	0xfffffc01
10004c88:	100058f4 	.word	0x100058f4
10004c8c:	000003ff 	.word	0x000003ff
10004c90:	feffffff 	.word	0xfeffffff
10004c94:	000007fe 	.word	0x000007fe
10004c98:	800fffff 	.word	0x800fffff
10004c9c:	000fffff 	.word	0x000fffff
10004ca0:	1c04      	adds	r4, r0, #0
10004ca2:	3c28      	subs	r4, #40	; 0x28
10004ca4:	40a5      	lsls	r5, r4
10004ca6:	1c2c      	adds	r4, r5, #0
10004ca8:	2500      	movs	r5, #0
10004caa:	e670      	b.n	1000498e <__aeabi_dmul+0xce>
10004cac:	f000 fd60 	bl	10005770 <__clzsi2>
10004cb0:	3020      	adds	r0, #32
10004cb2:	e660      	b.n	10004976 <__aeabi_dmul+0xb6>
10004cb4:	3b28      	subs	r3, #40	; 0x28
10004cb6:	409e      	lsls	r6, r3
10004cb8:	46b2      	mov	sl, r6
10004cba:	2600      	movs	r6, #0
10004cbc:	e62d      	b.n	1000491a <__aeabi_dmul+0x5a>
10004cbe:	f000 fd57 	bl	10005770 <__clzsi2>
10004cc2:	3020      	adds	r0, #32
10004cc4:	e619      	b.n	100048fa <__aeabi_dmul+0x3a>
10004cc6:	421c      	tst	r4, r3
10004cc8:	d106      	bne.n	10004cd8 <__aeabi_dmul+0x418>
10004cca:	431c      	orrs	r4, r3
10004ccc:	0326      	lsls	r6, r4, #12
10004cce:	0b34      	lsrs	r4, r6, #12
10004cd0:	465f      	mov	r7, fp
10004cd2:	1c2e      	adds	r6, r5, #0
10004cd4:	4a2e      	ldr	r2, [pc, #184]	; (10004d90 <__aeabi_dmul+0x4d0>)
10004cd6:	e78d      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004cd8:	430b      	orrs	r3, r1
10004cda:	0318      	lsls	r0, r3, #12
10004cdc:	0b04      	lsrs	r4, r0, #12
10004cde:	4a2c      	ldr	r2, [pc, #176]	; (10004d90 <__aeabi_dmul+0x4d0>)
10004ce0:	e788      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004ce2:	4f2c      	ldr	r7, [pc, #176]	; (10004d94 <__aeabi_dmul+0x4d4>)
10004ce4:	9d04      	ldr	r5, [sp, #16]
10004ce6:	1b7b      	subs	r3, r7, r5
10004ce8:	2b38      	cmp	r3, #56	; 0x38
10004cea:	dd06      	ble.n	10004cfa <__aeabi_dmul+0x43a>
10004cec:	9e01      	ldr	r6, [sp, #4]
10004cee:	2701      	movs	r7, #1
10004cf0:	4037      	ands	r7, r6
10004cf2:	2200      	movs	r2, #0
10004cf4:	2400      	movs	r4, #0
10004cf6:	2600      	movs	r6, #0
10004cf8:	e77c      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004cfa:	2b1f      	cmp	r3, #31
10004cfc:	dc21      	bgt.n	10004d42 <__aeabi_dmul+0x482>
10004cfe:	9a04      	ldr	r2, [sp, #16]
10004d00:	4f25      	ldr	r7, [pc, #148]	; (10004d98 <__aeabi_dmul+0x4d8>)
10004d02:	1c35      	adds	r5, r6, #0
10004d04:	19d1      	adds	r1, r2, r7
10004d06:	1c20      	adds	r0, r4, #0
10004d08:	408e      	lsls	r6, r1
10004d0a:	40dd      	lsrs	r5, r3
10004d0c:	4088      	lsls	r0, r1
10004d0e:	1c32      	adds	r2, r6, #0
10004d10:	4328      	orrs	r0, r5
10004d12:	1e56      	subs	r6, r2, #1
10004d14:	41b2      	sbcs	r2, r6
10004d16:	1c06      	adds	r6, r0, #0
10004d18:	4316      	orrs	r6, r2
10004d1a:	40dc      	lsrs	r4, r3
10004d1c:	230f      	movs	r3, #15
10004d1e:	4033      	ands	r3, r6
10004d20:	2b04      	cmp	r3, #4
10004d22:	d005      	beq.n	10004d30 <__aeabi_dmul+0x470>
10004d24:	1d37      	adds	r7, r6, #4
10004d26:	42b7      	cmp	r7, r6
10004d28:	41b6      	sbcs	r6, r6
10004d2a:	4271      	negs	r1, r6
10004d2c:	1864      	adds	r4, r4, r1
10004d2e:	1c3e      	adds	r6, r7, #0
10004d30:	0225      	lsls	r5, r4, #8
10004d32:	d517      	bpl.n	10004d64 <__aeabi_dmul+0x4a4>
10004d34:	9b01      	ldr	r3, [sp, #4]
10004d36:	2701      	movs	r7, #1
10004d38:	401f      	ands	r7, r3
10004d3a:	2201      	movs	r2, #1
10004d3c:	2400      	movs	r4, #0
10004d3e:	2600      	movs	r6, #0
10004d40:	e758      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004d42:	4816      	ldr	r0, [pc, #88]	; (10004d9c <__aeabi_dmul+0x4dc>)
10004d44:	9a04      	ldr	r2, [sp, #16]
10004d46:	1c21      	adds	r1, r4, #0
10004d48:	1a87      	subs	r7, r0, r2
10004d4a:	40f9      	lsrs	r1, r7
10004d4c:	1c0d      	adds	r5, r1, #0
10004d4e:	2b20      	cmp	r3, #32
10004d50:	d012      	beq.n	10004d78 <__aeabi_dmul+0x4b8>
10004d52:	4b13      	ldr	r3, [pc, #76]	; (10004da0 <__aeabi_dmul+0x4e0>)
10004d54:	18d0      	adds	r0, r2, r3
10004d56:	4084      	lsls	r4, r0
10004d58:	4326      	orrs	r6, r4
10004d5a:	1e72      	subs	r2, r6, #1
10004d5c:	4196      	sbcs	r6, r2
10004d5e:	432e      	orrs	r6, r5
10004d60:	2400      	movs	r4, #0
10004d62:	e7db      	b.n	10004d1c <__aeabi_dmul+0x45c>
10004d64:	9a01      	ldr	r2, [sp, #4]
10004d66:	0765      	lsls	r5, r4, #29
10004d68:	08f6      	lsrs	r6, r6, #3
10004d6a:	0260      	lsls	r0, r4, #9
10004d6c:	2701      	movs	r7, #1
10004d6e:	4017      	ands	r7, r2
10004d70:	432e      	orrs	r6, r5
10004d72:	0b04      	lsrs	r4, r0, #12
10004d74:	2200      	movs	r2, #0
10004d76:	e73d      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004d78:	2400      	movs	r4, #0
10004d7a:	e7ed      	b.n	10004d58 <__aeabi_dmul+0x498>
10004d7c:	2180      	movs	r1, #128	; 0x80
10004d7e:	030f      	lsls	r7, r1, #12
10004d80:	433c      	orrs	r4, r7
10004d82:	9801      	ldr	r0, [sp, #4]
10004d84:	0324      	lsls	r4, r4, #12
10004d86:	2701      	movs	r7, #1
10004d88:	0b24      	lsrs	r4, r4, #12
10004d8a:	4007      	ands	r7, r0
10004d8c:	4a00      	ldr	r2, [pc, #0]	; (10004d90 <__aeabi_dmul+0x4d0>)
10004d8e:	e731      	b.n	10004bf4 <__aeabi_dmul+0x334>
10004d90:	000007ff 	.word	0x000007ff
10004d94:	fffffc02 	.word	0xfffffc02
10004d98:	0000041e 	.word	0x0000041e
10004d9c:	fffffbe2 	.word	0xfffffbe2
10004da0:	0000043e 	.word	0x0000043e

10004da4 <__aeabi_dsub>:
10004da4:	b5f0      	push	{r4, r5, r6, r7, lr}
10004da6:	4657      	mov	r7, sl
10004da8:	464e      	mov	r6, r9
10004daa:	4645      	mov	r5, r8
10004dac:	b4e0      	push	{r5, r6, r7}
10004dae:	1c07      	adds	r7, r0, #0
10004db0:	030d      	lsls	r5, r1, #12
10004db2:	004e      	lsls	r6, r1, #1
10004db4:	0a68      	lsrs	r0, r5, #9
10004db6:	0fcc      	lsrs	r4, r1, #31
10004db8:	0f79      	lsrs	r1, r7, #29
10004dba:	4308      	orrs	r0, r1
10004dbc:	4684      	mov	ip, r0
10004dbe:	1c11      	adds	r1, r2, #0
10004dc0:	0318      	lsls	r0, r3, #12
10004dc2:	005a      	lsls	r2, r3, #1
10004dc4:	00fd      	lsls	r5, r7, #3
10004dc6:	0a40      	lsrs	r0, r0, #9
10004dc8:	0fdf      	lsrs	r7, r3, #31
10004dca:	0f4b      	lsrs	r3, r1, #29
10004dcc:	4318      	orrs	r0, r3
10004dce:	4bca      	ldr	r3, [pc, #808]	; (100050f8 <__aeabi_dsub+0x354>)
10004dd0:	00c9      	lsls	r1, r1, #3
10004dd2:	0d76      	lsrs	r6, r6, #21
10004dd4:	0d52      	lsrs	r2, r2, #21
10004dd6:	468a      	mov	sl, r1
10004dd8:	429a      	cmp	r2, r3
10004dda:	d100      	bne.n	10004dde <__aeabi_dsub+0x3a>
10004ddc:	e0e0      	b.n	10004fa0 <__aeabi_dsub+0x1fc>
10004dde:	2301      	movs	r3, #1
10004de0:	405f      	eors	r7, r3
10004de2:	46b9      	mov	r9, r7
10004de4:	42bc      	cmp	r4, r7
10004de6:	d100      	bne.n	10004dea <__aeabi_dsub+0x46>
10004de8:	e0a8      	b.n	10004f3c <__aeabi_dsub+0x198>
10004dea:	1ab7      	subs	r7, r6, r2
10004dec:	2f00      	cmp	r7, #0
10004dee:	dc00      	bgt.n	10004df2 <__aeabi_dsub+0x4e>
10004df0:	e110      	b.n	10005014 <__aeabi_dsub+0x270>
10004df2:	2a00      	cmp	r2, #0
10004df4:	d112      	bne.n	10004e1c <__aeabi_dsub+0x78>
10004df6:	4652      	mov	r2, sl
10004df8:	4302      	orrs	r2, r0
10004dfa:	d100      	bne.n	10004dfe <__aeabi_dsub+0x5a>
10004dfc:	e0d4      	b.n	10004fa8 <__aeabi_dsub+0x204>
10004dfe:	3f01      	subs	r7, #1
10004e00:	2f00      	cmp	r7, #0
10004e02:	d000      	beq.n	10004e06 <__aeabi_dsub+0x62>
10004e04:	e160      	b.n	100050c8 <__aeabi_dsub+0x324>
10004e06:	4651      	mov	r1, sl
10004e08:	1a6f      	subs	r7, r5, r1
10004e0a:	42bd      	cmp	r5, r7
10004e0c:	41ad      	sbcs	r5, r5
10004e0e:	4662      	mov	r2, ip
10004e10:	426b      	negs	r3, r5
10004e12:	1a10      	subs	r0, r2, r0
10004e14:	1c3d      	adds	r5, r7, #0
10004e16:	1ac3      	subs	r3, r0, r3
10004e18:	1c37      	adds	r7, r6, #0
10004e1a:	e024      	b.n	10004e66 <__aeabi_dsub+0xc2>
10004e1c:	4ab6      	ldr	r2, [pc, #728]	; (100050f8 <__aeabi_dsub+0x354>)
10004e1e:	4296      	cmp	r6, r2
10004e20:	d100      	bne.n	10004e24 <__aeabi_dsub+0x80>
10004e22:	e0e3      	b.n	10004fec <__aeabi_dsub+0x248>
10004e24:	2180      	movs	r1, #128	; 0x80
10004e26:	040b      	lsls	r3, r1, #16
10004e28:	4318      	orrs	r0, r3
10004e2a:	2f38      	cmp	r7, #56	; 0x38
10004e2c:	dd00      	ble.n	10004e30 <__aeabi_dsub+0x8c>
10004e2e:	e123      	b.n	10005078 <__aeabi_dsub+0x2d4>
10004e30:	2f1f      	cmp	r7, #31
10004e32:	dd00      	ble.n	10004e36 <__aeabi_dsub+0x92>
10004e34:	e166      	b.n	10005104 <__aeabi_dsub+0x360>
10004e36:	2120      	movs	r1, #32
10004e38:	1bc9      	subs	r1, r1, r7
10004e3a:	1c02      	adds	r2, r0, #0
10004e3c:	4653      	mov	r3, sl
10004e3e:	408a      	lsls	r2, r1
10004e40:	40fb      	lsrs	r3, r7
10004e42:	431a      	orrs	r2, r3
10004e44:	4653      	mov	r3, sl
10004e46:	408b      	lsls	r3, r1
10004e48:	1c19      	adds	r1, r3, #0
10004e4a:	1e4b      	subs	r3, r1, #1
10004e4c:	4199      	sbcs	r1, r3
10004e4e:	1c03      	adds	r3, r0, #0
10004e50:	430a      	orrs	r2, r1
10004e52:	40fb      	lsrs	r3, r7
10004e54:	1aaa      	subs	r2, r5, r2
10004e56:	4667      	mov	r7, ip
10004e58:	4295      	cmp	r5, r2
10004e5a:	41ad      	sbcs	r5, r5
10004e5c:	1af8      	subs	r0, r7, r3
10004e5e:	426b      	negs	r3, r5
10004e60:	1ac3      	subs	r3, r0, r3
10004e62:	1c15      	adds	r5, r2, #0
10004e64:	1c37      	adds	r7, r6, #0
10004e66:	021a      	lsls	r2, r3, #8
10004e68:	d400      	bmi.n	10004e6c <__aeabi_dsub+0xc8>
10004e6a:	e0c7      	b.n	10004ffc <__aeabi_dsub+0x258>
10004e6c:	025e      	lsls	r6, r3, #9
10004e6e:	0a71      	lsrs	r1, r6, #9
10004e70:	4688      	mov	r8, r1
10004e72:	4642      	mov	r2, r8
10004e74:	2a00      	cmp	r2, #0
10004e76:	d100      	bne.n	10004e7a <__aeabi_dsub+0xd6>
10004e78:	e0f0      	b.n	1000505c <__aeabi_dsub+0x2b8>
10004e7a:	4640      	mov	r0, r8
10004e7c:	f000 fc78 	bl	10005770 <__clzsi2>
10004e80:	1c02      	adds	r2, r0, #0
10004e82:	3a08      	subs	r2, #8
10004e84:	2a1f      	cmp	r2, #31
10004e86:	dd00      	ble.n	10004e8a <__aeabi_dsub+0xe6>
10004e88:	e0f1      	b.n	1000506e <__aeabi_dsub+0x2ca>
10004e8a:	2328      	movs	r3, #40	; 0x28
10004e8c:	1a18      	subs	r0, r3, r0
10004e8e:	1c2e      	adds	r6, r5, #0
10004e90:	4641      	mov	r1, r8
10004e92:	40c6      	lsrs	r6, r0
10004e94:	4091      	lsls	r1, r2
10004e96:	1c33      	adds	r3, r6, #0
10004e98:	430b      	orrs	r3, r1
10004e9a:	4095      	lsls	r5, r2
10004e9c:	4297      	cmp	r7, r2
10004e9e:	dd00      	ble.n	10004ea2 <__aeabi_dsub+0xfe>
10004ea0:	e0a9      	b.n	10004ff6 <__aeabi_dsub+0x252>
10004ea2:	1bd0      	subs	r0, r2, r7
10004ea4:	1c41      	adds	r1, r0, #1
10004ea6:	291f      	cmp	r1, #31
10004ea8:	dd00      	ble.n	10004eac <__aeabi_dsub+0x108>
10004eaa:	e112      	b.n	100050d2 <__aeabi_dsub+0x32e>
10004eac:	271f      	movs	r7, #31
10004eae:	1a3a      	subs	r2, r7, r0
10004eb0:	1c2e      	adds	r6, r5, #0
10004eb2:	1c18      	adds	r0, r3, #0
10004eb4:	40ce      	lsrs	r6, r1
10004eb6:	4090      	lsls	r0, r2
10004eb8:	4095      	lsls	r5, r2
10004eba:	4330      	orrs	r0, r6
10004ebc:	1e6a      	subs	r2, r5, #1
10004ebe:	4195      	sbcs	r5, r2
10004ec0:	40cb      	lsrs	r3, r1
10004ec2:	4305      	orrs	r5, r0
10004ec4:	2101      	movs	r1, #1
10004ec6:	2700      	movs	r7, #0
10004ec8:	260f      	movs	r6, #15
10004eca:	402e      	ands	r6, r5
10004ecc:	2e04      	cmp	r6, #4
10004ece:	d100      	bne.n	10004ed2 <__aeabi_dsub+0x12e>
10004ed0:	e072      	b.n	10004fb8 <__aeabi_dsub+0x214>
10004ed2:	1d2e      	adds	r6, r5, #4
10004ed4:	42ae      	cmp	r6, r5
10004ed6:	41ad      	sbcs	r5, r5
10004ed8:	4268      	negs	r0, r5
10004eda:	2280      	movs	r2, #128	; 0x80
10004edc:	181b      	adds	r3, r3, r0
10004ede:	2501      	movs	r5, #1
10004ee0:	0410      	lsls	r0, r2, #16
10004ee2:	4018      	ands	r0, r3
10004ee4:	402c      	ands	r4, r5
10004ee6:	2800      	cmp	r0, #0
10004ee8:	d007      	beq.n	10004efa <__aeabi_dsub+0x156>
10004eea:	4f83      	ldr	r7, [pc, #524]	; (100050f8 <__aeabi_dsub+0x354>)
10004eec:	42b9      	cmp	r1, r7
10004eee:	d100      	bne.n	10004ef2 <__aeabi_dsub+0x14e>
10004ef0:	e0b0      	b.n	10005054 <__aeabi_dsub+0x2b0>
10004ef2:	4a82      	ldr	r2, [pc, #520]	; (100050fc <__aeabi_dsub+0x358>)
10004ef4:	1c0f      	adds	r7, r1, #0
10004ef6:	4013      	ands	r3, r2
10004ef8:	3101      	adds	r1, #1
10004efa:	08f2      	lsrs	r2, r6, #3
10004efc:	0549      	lsls	r1, r1, #21
10004efe:	075e      	lsls	r6, r3, #29
10004f00:	4332      	orrs	r2, r6
10004f02:	08db      	lsrs	r3, r3, #3
10004f04:	0d48      	lsrs	r0, r1, #21
10004f06:	2801      	cmp	r0, #1
10004f08:	dc00      	bgt.n	10004f0c <__aeabi_dsub+0x168>
10004f0a:	e079      	b.n	10005000 <__aeabi_dsub+0x25c>
10004f0c:	031b      	lsls	r3, r3, #12
10004f0e:	0578      	lsls	r0, r7, #21
10004f10:	0b1e      	lsrs	r6, r3, #12
10004f12:	0d47      	lsrs	r7, r0, #21
10004f14:	2000      	movs	r0, #0
10004f16:	2100      	movs	r1, #0
10004f18:	0d09      	lsrs	r1, r1, #20
10004f1a:	057d      	lsls	r5, r7, #21
10004f1c:	050b      	lsls	r3, r1, #20
10004f1e:	4f78      	ldr	r7, [pc, #480]	; (10005100 <__aeabi_dsub+0x35c>)
10004f20:	431e      	orrs	r6, r3
10004f22:	1c10      	adds	r0, r2, #0
10004f24:	4037      	ands	r7, r6
10004f26:	086a      	lsrs	r2, r5, #1
10004f28:	4317      	orrs	r7, r2
10004f2a:	007e      	lsls	r6, r7, #1
10004f2c:	0871      	lsrs	r1, r6, #1
10004f2e:	07e4      	lsls	r4, r4, #31
10004f30:	4321      	orrs	r1, r4
10004f32:	bc1c      	pop	{r2, r3, r4}
10004f34:	4690      	mov	r8, r2
10004f36:	4699      	mov	r9, r3
10004f38:	46a2      	mov	sl, r4
10004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004f3c:	1ab3      	subs	r3, r6, r2
10004f3e:	2b00      	cmp	r3, #0
10004f40:	dc00      	bgt.n	10004f44 <__aeabi_dsub+0x1a0>
10004f42:	e0a6      	b.n	10005092 <__aeabi_dsub+0x2ee>
10004f44:	2a00      	cmp	r2, #0
10004f46:	d03e      	beq.n	10004fc6 <__aeabi_dsub+0x222>
10004f48:	4a6b      	ldr	r2, [pc, #428]	; (100050f8 <__aeabi_dsub+0x354>)
10004f4a:	4296      	cmp	r6, r2
10004f4c:	d04e      	beq.n	10004fec <__aeabi_dsub+0x248>
10004f4e:	2180      	movs	r1, #128	; 0x80
10004f50:	040f      	lsls	r7, r1, #16
10004f52:	4338      	orrs	r0, r7
10004f54:	2b38      	cmp	r3, #56	; 0x38
10004f56:	dc00      	bgt.n	10004f5a <__aeabi_dsub+0x1b6>
10004f58:	e118      	b.n	1000518c <__aeabi_dsub+0x3e8>
10004f5a:	4653      	mov	r3, sl
10004f5c:	4318      	orrs	r0, r3
10004f5e:	2700      	movs	r7, #0
10004f60:	2200      	movs	r2, #0
10004f62:	2800      	cmp	r0, #0
10004f64:	d000      	beq.n	10004f68 <__aeabi_dsub+0x1c4>
10004f66:	2201      	movs	r2, #1
10004f68:	1952      	adds	r2, r2, r5
10004f6a:	42aa      	cmp	r2, r5
10004f6c:	41ad      	sbcs	r5, r5
10004f6e:	4467      	add	r7, ip
10004f70:	426b      	negs	r3, r5
10004f72:	18fb      	adds	r3, r7, r3
10004f74:	1c15      	adds	r5, r2, #0
10004f76:	1c37      	adds	r7, r6, #0
10004f78:	021e      	lsls	r6, r3, #8
10004f7a:	d53f      	bpl.n	10004ffc <__aeabi_dsub+0x258>
10004f7c:	485e      	ldr	r0, [pc, #376]	; (100050f8 <__aeabi_dsub+0x354>)
10004f7e:	1c7e      	adds	r6, r7, #1
10004f80:	4286      	cmp	r6, r0
10004f82:	d100      	bne.n	10004f86 <__aeabi_dsub+0x1e2>
10004f84:	e17b      	b.n	1000527e <__aeabi_dsub+0x4da>
10004f86:	495d      	ldr	r1, [pc, #372]	; (100050fc <__aeabi_dsub+0x358>)
10004f88:	2201      	movs	r2, #1
10004f8a:	402a      	ands	r2, r5
10004f8c:	400b      	ands	r3, r1
10004f8e:	0868      	lsrs	r0, r5, #1
10004f90:	1c15      	adds	r5, r2, #0
10004f92:	07d9      	lsls	r1, r3, #31
10004f94:	4305      	orrs	r5, r0
10004f96:	430d      	orrs	r5, r1
10004f98:	085b      	lsrs	r3, r3, #1
10004f9a:	1cb9      	adds	r1, r7, #2
10004f9c:	1c37      	adds	r7, r6, #0
10004f9e:	e793      	b.n	10004ec8 <__aeabi_dsub+0x124>
10004fa0:	4301      	orrs	r1, r0
10004fa2:	d100      	bne.n	10004fa6 <__aeabi_dsub+0x202>
10004fa4:	e71b      	b.n	10004dde <__aeabi_dsub+0x3a>
10004fa6:	e71c      	b.n	10004de2 <__aeabi_dsub+0x3e>
10004fa8:	1c71      	adds	r1, r6, #1
10004faa:	1c37      	adds	r7, r6, #0
10004fac:	260f      	movs	r6, #15
10004fae:	4663      	mov	r3, ip
10004fb0:	402e      	ands	r6, r5
10004fb2:	2e04      	cmp	r6, #4
10004fb4:	d000      	beq.n	10004fb8 <__aeabi_dsub+0x214>
10004fb6:	e78c      	b.n	10004ed2 <__aeabi_dsub+0x12e>
10004fb8:	2280      	movs	r2, #128	; 0x80
10004fba:	2601      	movs	r6, #1
10004fbc:	0410      	lsls	r0, r2, #16
10004fbe:	4034      	ands	r4, r6
10004fc0:	4018      	ands	r0, r3
10004fc2:	1c2e      	adds	r6, r5, #0
10004fc4:	e78f      	b.n	10004ee6 <__aeabi_dsub+0x142>
10004fc6:	4652      	mov	r2, sl
10004fc8:	4302      	orrs	r2, r0
10004fca:	d0ed      	beq.n	10004fa8 <__aeabi_dsub+0x204>
10004fcc:	3b01      	subs	r3, #1
10004fce:	2b00      	cmp	r3, #0
10004fd0:	d109      	bne.n	10004fe6 <__aeabi_dsub+0x242>
10004fd2:	4657      	mov	r7, sl
10004fd4:	1979      	adds	r1, r7, r5
10004fd6:	42a9      	cmp	r1, r5
10004fd8:	4192      	sbcs	r2, r2
10004fda:	4255      	negs	r5, r2
10004fdc:	4460      	add	r0, ip
10004fde:	1943      	adds	r3, r0, r5
10004fe0:	1c37      	adds	r7, r6, #0
10004fe2:	1c0d      	adds	r5, r1, #0
10004fe4:	e7c8      	b.n	10004f78 <__aeabi_dsub+0x1d4>
10004fe6:	4944      	ldr	r1, [pc, #272]	; (100050f8 <__aeabi_dsub+0x354>)
10004fe8:	428e      	cmp	r6, r1
10004fea:	d1b3      	bne.n	10004f54 <__aeabi_dsub+0x1b0>
10004fec:	2080      	movs	r0, #128	; 0x80
10004fee:	4663      	mov	r3, ip
10004ff0:	0101      	lsls	r1, r0, #4
10004ff2:	1c37      	adds	r7, r6, #0
10004ff4:	e768      	b.n	10004ec8 <__aeabi_dsub+0x124>
10004ff6:	1abf      	subs	r7, r7, r2
10004ff8:	4a40      	ldr	r2, [pc, #256]	; (100050fc <__aeabi_dsub+0x358>)
10004ffa:	4013      	ands	r3, r2
10004ffc:	1c79      	adds	r1, r7, #1
10004ffe:	e763      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005000:	1c15      	adds	r5, r2, #0
10005002:	431d      	orrs	r5, r3
10005004:	d100      	bne.n	10005008 <__aeabi_dsub+0x264>
10005006:	e221      	b.n	1000544c <__aeabi_dsub+0x6a8>
10005008:	2f00      	cmp	r7, #0
1000500a:	d03e      	beq.n	1000508a <__aeabi_dsub+0x2e6>
1000500c:	2680      	movs	r6, #128	; 0x80
1000500e:	0331      	lsls	r1, r6, #12
10005010:	430b      	orrs	r3, r1
10005012:	e77b      	b.n	10004f0c <__aeabi_dsub+0x168>
10005014:	2f00      	cmp	r7, #0
10005016:	d000      	beq.n	1000501a <__aeabi_dsub+0x276>
10005018:	e086      	b.n	10005128 <__aeabi_dsub+0x384>
1000501a:	1c72      	adds	r2, r6, #1
1000501c:	0551      	lsls	r1, r2, #21
1000501e:	0d4b      	lsrs	r3, r1, #21
10005020:	2b01      	cmp	r3, #1
10005022:	dc00      	bgt.n	10005026 <__aeabi_dsub+0x282>
10005024:	e0f0      	b.n	10005208 <__aeabi_dsub+0x464>
10005026:	4657      	mov	r7, sl
10005028:	1bea      	subs	r2, r5, r7
1000502a:	4295      	cmp	r5, r2
1000502c:	419b      	sbcs	r3, r3
1000502e:	4667      	mov	r7, ip
10005030:	1a39      	subs	r1, r7, r0
10005032:	425b      	negs	r3, r3
10005034:	1ac9      	subs	r1, r1, r3
10005036:	4688      	mov	r8, r1
10005038:	020b      	lsls	r3, r1, #8
1000503a:	d400      	bmi.n	1000503e <__aeabi_dsub+0x29a>
1000503c:	e09d      	b.n	1000517a <__aeabi_dsub+0x3d6>
1000503e:	4654      	mov	r4, sl
10005040:	1b65      	subs	r5, r4, r5
10005042:	45aa      	cmp	sl, r5
10005044:	4192      	sbcs	r2, r2
10005046:	1bc0      	subs	r0, r0, r7
10005048:	4257      	negs	r7, r2
1000504a:	1bc3      	subs	r3, r0, r7
1000504c:	4698      	mov	r8, r3
1000504e:	1c37      	adds	r7, r6, #0
10005050:	464c      	mov	r4, r9
10005052:	e70e      	b.n	10004e72 <__aeabi_dsub+0xce>
10005054:	1c0f      	adds	r7, r1, #0
10005056:	2600      	movs	r6, #0
10005058:	2200      	movs	r2, #0
1000505a:	e75b      	b.n	10004f14 <__aeabi_dsub+0x170>
1000505c:	1c28      	adds	r0, r5, #0
1000505e:	f000 fb87 	bl	10005770 <__clzsi2>
10005062:	3020      	adds	r0, #32
10005064:	1c02      	adds	r2, r0, #0
10005066:	3a08      	subs	r2, #8
10005068:	2a1f      	cmp	r2, #31
1000506a:	dc00      	bgt.n	1000506e <__aeabi_dsub+0x2ca>
1000506c:	e70d      	b.n	10004e8a <__aeabi_dsub+0xe6>
1000506e:	3828      	subs	r0, #40	; 0x28
10005070:	4085      	lsls	r5, r0
10005072:	1c2b      	adds	r3, r5, #0
10005074:	2500      	movs	r5, #0
10005076:	e711      	b.n	10004e9c <__aeabi_dsub+0xf8>
10005078:	4657      	mov	r7, sl
1000507a:	4338      	orrs	r0, r7
1000507c:	2300      	movs	r3, #0
1000507e:	2200      	movs	r2, #0
10005080:	2800      	cmp	r0, #0
10005082:	d100      	bne.n	10005086 <__aeabi_dsub+0x2e2>
10005084:	e6e6      	b.n	10004e54 <__aeabi_dsub+0xb0>
10005086:	2201      	movs	r2, #1
10005088:	e6e4      	b.n	10004e54 <__aeabi_dsub+0xb0>
1000508a:	031d      	lsls	r5, r3, #12
1000508c:	0b2e      	lsrs	r6, r5, #12
1000508e:	2700      	movs	r7, #0
10005090:	e740      	b.n	10004f14 <__aeabi_dsub+0x170>
10005092:	2b00      	cmp	r3, #0
10005094:	d000      	beq.n	10005098 <__aeabi_dsub+0x2f4>
10005096:	e0d9      	b.n	1000524c <__aeabi_dsub+0x4a8>
10005098:	1c77      	adds	r7, r6, #1
1000509a:	0579      	lsls	r1, r7, #21
1000509c:	0d4a      	lsrs	r2, r1, #21
1000509e:	2a01      	cmp	r2, #1
100050a0:	dc00      	bgt.n	100050a4 <__aeabi_dsub+0x300>
100050a2:	e095      	b.n	100051d0 <__aeabi_dsub+0x42c>
100050a4:	4b14      	ldr	r3, [pc, #80]	; (100050f8 <__aeabi_dsub+0x354>)
100050a6:	429f      	cmp	r7, r3
100050a8:	d100      	bne.n	100050ac <__aeabi_dsub+0x308>
100050aa:	e0fe      	b.n	100052aa <__aeabi_dsub+0x506>
100050ac:	4651      	mov	r1, sl
100050ae:	1949      	adds	r1, r1, r5
100050b0:	42a9      	cmp	r1, r5
100050b2:	41ad      	sbcs	r5, r5
100050b4:	4662      	mov	r2, ip
100050b6:	426b      	negs	r3, r5
100050b8:	1880      	adds	r0, r0, r2
100050ba:	18c2      	adds	r2, r0, r3
100050bc:	0849      	lsrs	r1, r1, #1
100050be:	07d5      	lsls	r5, r2, #31
100050c0:	430d      	orrs	r5, r1
100050c2:	0853      	lsrs	r3, r2, #1
100050c4:	1cb1      	adds	r1, r6, #2
100050c6:	e6ff      	b.n	10004ec8 <__aeabi_dsub+0x124>
100050c8:	490b      	ldr	r1, [pc, #44]	; (100050f8 <__aeabi_dsub+0x354>)
100050ca:	428e      	cmp	r6, r1
100050cc:	d000      	beq.n	100050d0 <__aeabi_dsub+0x32c>
100050ce:	e6ac      	b.n	10004e2a <__aeabi_dsub+0x86>
100050d0:	e78c      	b.n	10004fec <__aeabi_dsub+0x248>
100050d2:	1c06      	adds	r6, r0, #0
100050d4:	3e1f      	subs	r6, #31
100050d6:	1c1f      	adds	r7, r3, #0
100050d8:	40f7      	lsrs	r7, r6
100050da:	1c3e      	adds	r6, r7, #0
100050dc:	2920      	cmp	r1, #32
100050de:	d073      	beq.n	100051c8 <__aeabi_dsub+0x424>
100050e0:	223f      	movs	r2, #63	; 0x3f
100050e2:	1a10      	subs	r0, r2, r0
100050e4:	4083      	lsls	r3, r0
100050e6:	431d      	orrs	r5, r3
100050e8:	1e6b      	subs	r3, r5, #1
100050ea:	419d      	sbcs	r5, r3
100050ec:	4335      	orrs	r5, r6
100050ee:	2101      	movs	r1, #1
100050f0:	2300      	movs	r3, #0
100050f2:	2700      	movs	r7, #0
100050f4:	e6e8      	b.n	10004ec8 <__aeabi_dsub+0x124>
100050f6:	46c0      	nop			; (mov r8, r8)
100050f8:	000007ff 	.word	0x000007ff
100050fc:	ff7fffff 	.word	0xff7fffff
10005100:	800fffff 	.word	0x800fffff
10005104:	1c3b      	adds	r3, r7, #0
10005106:	3b20      	subs	r3, #32
10005108:	1c01      	adds	r1, r0, #0
1000510a:	40d9      	lsrs	r1, r3
1000510c:	1c0b      	adds	r3, r1, #0
1000510e:	2f20      	cmp	r7, #32
10005110:	d05c      	beq.n	100051cc <__aeabi_dsub+0x428>
10005112:	2240      	movs	r2, #64	; 0x40
10005114:	1bd7      	subs	r7, r2, r7
10005116:	40b8      	lsls	r0, r7
10005118:	1c02      	adds	r2, r0, #0
1000511a:	4650      	mov	r0, sl
1000511c:	4302      	orrs	r2, r0
1000511e:	1e51      	subs	r1, r2, #1
10005120:	418a      	sbcs	r2, r1
10005122:	431a      	orrs	r2, r3
10005124:	2300      	movs	r3, #0
10005126:	e695      	b.n	10004e54 <__aeabi_dsub+0xb0>
10005128:	427f      	negs	r7, r7
1000512a:	2e00      	cmp	r6, #0
1000512c:	d040      	beq.n	100051b0 <__aeabi_dsub+0x40c>
1000512e:	4cca      	ldr	r4, [pc, #808]	; (10005458 <__aeabi_dsub+0x6b4>)
10005130:	42a2      	cmp	r2, r4
10005132:	d100      	bne.n	10005136 <__aeabi_dsub+0x392>
10005134:	e11f      	b.n	10005376 <__aeabi_dsub+0x5d2>
10005136:	2180      	movs	r1, #128	; 0x80
10005138:	4666      	mov	r6, ip
1000513a:	040b      	lsls	r3, r1, #16
1000513c:	431e      	orrs	r6, r3
1000513e:	46b4      	mov	ip, r6
10005140:	2f38      	cmp	r7, #56	; 0x38
10005142:	dd00      	ble.n	10005146 <__aeabi_dsub+0x3a2>
10005144:	e0a9      	b.n	1000529a <__aeabi_dsub+0x4f6>
10005146:	2f1f      	cmp	r7, #31
10005148:	dd00      	ble.n	1000514c <__aeabi_dsub+0x3a8>
1000514a:	e13d      	b.n	100053c8 <__aeabi_dsub+0x624>
1000514c:	2320      	movs	r3, #32
1000514e:	1bde      	subs	r6, r3, r7
10005150:	1c29      	adds	r1, r5, #0
10005152:	4664      	mov	r4, ip
10005154:	40b4      	lsls	r4, r6
10005156:	40f9      	lsrs	r1, r7
10005158:	40b5      	lsls	r5, r6
1000515a:	1e6b      	subs	r3, r5, #1
1000515c:	419d      	sbcs	r5, r3
1000515e:	4321      	orrs	r1, r4
10005160:	4663      	mov	r3, ip
10005162:	430d      	orrs	r5, r1
10005164:	40fb      	lsrs	r3, r7
10005166:	4657      	mov	r7, sl
10005168:	1b7d      	subs	r5, r7, r5
1000516a:	1ac0      	subs	r0, r0, r3
1000516c:	45aa      	cmp	sl, r5
1000516e:	419b      	sbcs	r3, r3
10005170:	425f      	negs	r7, r3
10005172:	1bc3      	subs	r3, r0, r7
10005174:	464c      	mov	r4, r9
10005176:	1c17      	adds	r7, r2, #0
10005178:	e675      	b.n	10004e66 <__aeabi_dsub+0xc2>
1000517a:	1c0d      	adds	r5, r1, #0
1000517c:	4315      	orrs	r5, r2
1000517e:	d120      	bne.n	100051c2 <__aeabi_dsub+0x41e>
10005180:	2400      	movs	r4, #0
10005182:	2101      	movs	r1, #1
10005184:	2300      	movs	r3, #0
10005186:	2604      	movs	r6, #4
10005188:	2700      	movs	r7, #0
1000518a:	e6b6      	b.n	10004efa <__aeabi_dsub+0x156>
1000518c:	2b1f      	cmp	r3, #31
1000518e:	dc4a      	bgt.n	10005226 <__aeabi_dsub+0x482>
10005190:	2120      	movs	r1, #32
10005192:	1ac9      	subs	r1, r1, r3
10005194:	1c07      	adds	r7, r0, #0
10005196:	4652      	mov	r2, sl
10005198:	408f      	lsls	r7, r1
1000519a:	40da      	lsrs	r2, r3
1000519c:	433a      	orrs	r2, r7
1000519e:	4657      	mov	r7, sl
100051a0:	408f      	lsls	r7, r1
100051a2:	1c39      	adds	r1, r7, #0
100051a4:	1e4f      	subs	r7, r1, #1
100051a6:	41b9      	sbcs	r1, r7
100051a8:	40d8      	lsrs	r0, r3
100051aa:	430a      	orrs	r2, r1
100051ac:	1c07      	adds	r7, r0, #0
100051ae:	e6db      	b.n	10004f68 <__aeabi_dsub+0x1c4>
100051b0:	4664      	mov	r4, ip
100051b2:	432c      	orrs	r4, r5
100051b4:	d169      	bne.n	1000528a <__aeabi_dsub+0x4e6>
100051b6:	1c51      	adds	r1, r2, #1
100051b8:	1c03      	adds	r3, r0, #0
100051ba:	4655      	mov	r5, sl
100051bc:	1c17      	adds	r7, r2, #0
100051be:	464c      	mov	r4, r9
100051c0:	e682      	b.n	10004ec8 <__aeabi_dsub+0x124>
100051c2:	1c15      	adds	r5, r2, #0
100051c4:	1c37      	adds	r7, r6, #0
100051c6:	e654      	b.n	10004e72 <__aeabi_dsub+0xce>
100051c8:	2300      	movs	r3, #0
100051ca:	e78c      	b.n	100050e6 <__aeabi_dsub+0x342>
100051cc:	2200      	movs	r2, #0
100051ce:	e7a4      	b.n	1000511a <__aeabi_dsub+0x376>
100051d0:	4667      	mov	r7, ip
100051d2:	432f      	orrs	r7, r5
100051d4:	2e00      	cmp	r6, #0
100051d6:	d000      	beq.n	100051da <__aeabi_dsub+0x436>
100051d8:	e0d4      	b.n	10005384 <__aeabi_dsub+0x5e0>
100051da:	2f00      	cmp	r7, #0
100051dc:	d100      	bne.n	100051e0 <__aeabi_dsub+0x43c>
100051de:	e126      	b.n	1000542e <__aeabi_dsub+0x68a>
100051e0:	4653      	mov	r3, sl
100051e2:	4303      	orrs	r3, r0
100051e4:	d100      	bne.n	100051e8 <__aeabi_dsub+0x444>
100051e6:	e0e4      	b.n	100053b2 <__aeabi_dsub+0x60e>
100051e8:	4651      	mov	r1, sl
100051ea:	194f      	adds	r7, r1, r5
100051ec:	42af      	cmp	r7, r5
100051ee:	41ad      	sbcs	r5, r5
100051f0:	4460      	add	r0, ip
100051f2:	426e      	negs	r6, r5
100051f4:	1983      	adds	r3, r0, r6
100051f6:	021e      	lsls	r6, r3, #8
100051f8:	d400      	bmi.n	100051fc <__aeabi_dsub+0x458>
100051fa:	e14e      	b.n	1000549a <__aeabi_dsub+0x6f6>
100051fc:	4897      	ldr	r0, [pc, #604]	; (1000545c <__aeabi_dsub+0x6b8>)
100051fe:	1c3d      	adds	r5, r7, #0
10005200:	4003      	ands	r3, r0
10005202:	2102      	movs	r1, #2
10005204:	2701      	movs	r7, #1
10005206:	e65f      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005208:	4661      	mov	r1, ip
1000520a:	4329      	orrs	r1, r5
1000520c:	2e00      	cmp	r6, #0
1000520e:	d129      	bne.n	10005264 <__aeabi_dsub+0x4c0>
10005210:	2900      	cmp	r1, #0
10005212:	d176      	bne.n	10005302 <__aeabi_dsub+0x55e>
10005214:	4651      	mov	r1, sl
10005216:	4301      	orrs	r1, r0
10005218:	d0b2      	beq.n	10005180 <__aeabi_dsub+0x3dc>
1000521a:	1c03      	adds	r3, r0, #0
1000521c:	4655      	mov	r5, sl
1000521e:	464c      	mov	r4, r9
10005220:	2101      	movs	r1, #1
10005222:	2700      	movs	r7, #0
10005224:	e650      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005226:	1c1f      	adds	r7, r3, #0
10005228:	3f20      	subs	r7, #32
1000522a:	1c01      	adds	r1, r0, #0
1000522c:	40f9      	lsrs	r1, r7
1000522e:	1c0f      	adds	r7, r1, #0
10005230:	2b20      	cmp	r3, #32
10005232:	d100      	bne.n	10005236 <__aeabi_dsub+0x492>
10005234:	e0c6      	b.n	100053c4 <__aeabi_dsub+0x620>
10005236:	2240      	movs	r2, #64	; 0x40
10005238:	1ad3      	subs	r3, r2, r3
1000523a:	4098      	lsls	r0, r3
1000523c:	1c02      	adds	r2, r0, #0
1000523e:	4650      	mov	r0, sl
10005240:	4302      	orrs	r2, r0
10005242:	1e53      	subs	r3, r2, #1
10005244:	419a      	sbcs	r2, r3
10005246:	433a      	orrs	r2, r7
10005248:	2700      	movs	r7, #0
1000524a:	e68d      	b.n	10004f68 <__aeabi_dsub+0x1c4>
1000524c:	425b      	negs	r3, r3
1000524e:	2e00      	cmp	r6, #0
10005250:	d130      	bne.n	100052b4 <__aeabi_dsub+0x510>
10005252:	4667      	mov	r7, ip
10005254:	432f      	orrs	r7, r5
10005256:	d000      	beq.n	1000525a <__aeabi_dsub+0x4b6>
10005258:	e0c8      	b.n	100053ec <__aeabi_dsub+0x648>
1000525a:	1c51      	adds	r1, r2, #1
1000525c:	1c03      	adds	r3, r0, #0
1000525e:	4655      	mov	r5, sl
10005260:	1c17      	adds	r7, r2, #0
10005262:	e631      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005264:	2900      	cmp	r1, #0
10005266:	d165      	bne.n	10005334 <__aeabi_dsub+0x590>
10005268:	4657      	mov	r7, sl
1000526a:	4307      	orrs	r7, r0
1000526c:	d100      	bne.n	10005270 <__aeabi_dsub+0x4cc>
1000526e:	e0c8      	b.n	10005402 <__aeabi_dsub+0x65e>
10005270:	1c03      	adds	r3, r0, #0
10005272:	2080      	movs	r0, #128	; 0x80
10005274:	4655      	mov	r5, sl
10005276:	464c      	mov	r4, r9
10005278:	0101      	lsls	r1, r0, #4
1000527a:	4f77      	ldr	r7, [pc, #476]	; (10005458 <__aeabi_dsub+0x6b4>)
1000527c:	e624      	b.n	10004ec8 <__aeabi_dsub+0x124>
1000527e:	2380      	movs	r3, #128	; 0x80
10005280:	1c37      	adds	r7, r6, #0
10005282:	0119      	lsls	r1, r3, #4
10005284:	2604      	movs	r6, #4
10005286:	2300      	movs	r3, #0
10005288:	e637      	b.n	10004efa <__aeabi_dsub+0x156>
1000528a:	3f01      	subs	r7, #1
1000528c:	2f00      	cmp	r7, #0
1000528e:	d16e      	bne.n	1000536e <__aeabi_dsub+0x5ca>
10005290:	4654      	mov	r4, sl
10005292:	4661      	mov	r1, ip
10005294:	1b65      	subs	r5, r4, r5
10005296:	1a40      	subs	r0, r0, r1
10005298:	e768      	b.n	1000516c <__aeabi_dsub+0x3c8>
1000529a:	4667      	mov	r7, ip
1000529c:	433d      	orrs	r5, r7
1000529e:	2300      	movs	r3, #0
100052a0:	2d00      	cmp	r5, #0
100052a2:	d100      	bne.n	100052a6 <__aeabi_dsub+0x502>
100052a4:	e75f      	b.n	10005166 <__aeabi_dsub+0x3c2>
100052a6:	2501      	movs	r5, #1
100052a8:	e75d      	b.n	10005166 <__aeabi_dsub+0x3c2>
100052aa:	2680      	movs	r6, #128	; 0x80
100052ac:	0131      	lsls	r1, r6, #4
100052ae:	2300      	movs	r3, #0
100052b0:	2604      	movs	r6, #4
100052b2:	e622      	b.n	10004efa <__aeabi_dsub+0x156>
100052b4:	4968      	ldr	r1, [pc, #416]	; (10005458 <__aeabi_dsub+0x6b4>)
100052b6:	428a      	cmp	r2, r1
100052b8:	d100      	bne.n	100052bc <__aeabi_dsub+0x518>
100052ba:	e0c1      	b.n	10005440 <__aeabi_dsub+0x69c>
100052bc:	2780      	movs	r7, #128	; 0x80
100052be:	4666      	mov	r6, ip
100052c0:	0439      	lsls	r1, r7, #16
100052c2:	430e      	orrs	r6, r1
100052c4:	46b4      	mov	ip, r6
100052c6:	2b38      	cmp	r3, #56	; 0x38
100052c8:	dd00      	ble.n	100052cc <__aeabi_dsub+0x528>
100052ca:	e0a2      	b.n	10005412 <__aeabi_dsub+0x66e>
100052cc:	2b1f      	cmp	r3, #31
100052ce:	dd00      	ble.n	100052d2 <__aeabi_dsub+0x52e>
100052d0:	e0d0      	b.n	10005474 <__aeabi_dsub+0x6d0>
100052d2:	2120      	movs	r1, #32
100052d4:	1ac9      	subs	r1, r1, r3
100052d6:	1c2e      	adds	r6, r5, #0
100052d8:	4667      	mov	r7, ip
100052da:	408f      	lsls	r7, r1
100052dc:	408d      	lsls	r5, r1
100052de:	40de      	lsrs	r6, r3
100052e0:	433e      	orrs	r6, r7
100052e2:	1c29      	adds	r1, r5, #0
100052e4:	4667      	mov	r7, ip
100052e6:	1e4d      	subs	r5, r1, #1
100052e8:	41a9      	sbcs	r1, r5
100052ea:	40df      	lsrs	r7, r3
100052ec:	1c35      	adds	r5, r6, #0
100052ee:	430d      	orrs	r5, r1
100052f0:	1c3e      	adds	r6, r7, #0
100052f2:	4455      	add	r5, sl
100052f4:	4555      	cmp	r5, sl
100052f6:	419b      	sbcs	r3, r3
100052f8:	1830      	adds	r0, r6, r0
100052fa:	425e      	negs	r6, r3
100052fc:	1983      	adds	r3, r0, r6
100052fe:	1c17      	adds	r7, r2, #0
10005300:	e63a      	b.n	10004f78 <__aeabi_dsub+0x1d4>
10005302:	4656      	mov	r6, sl
10005304:	4306      	orrs	r6, r0
10005306:	d054      	beq.n	100053b2 <__aeabi_dsub+0x60e>
10005308:	4657      	mov	r7, sl
1000530a:	1bea      	subs	r2, r5, r7
1000530c:	4663      	mov	r3, ip
1000530e:	4295      	cmp	r5, r2
10005310:	41b6      	sbcs	r6, r6
10005312:	1a19      	subs	r1, r3, r0
10005314:	4273      	negs	r3, r6
10005316:	1acb      	subs	r3, r1, r3
10005318:	021e      	lsls	r6, r3, #8
1000531a:	d400      	bmi.n	1000531e <__aeabi_dsub+0x57a>
1000531c:	e0a2      	b.n	10005464 <__aeabi_dsub+0x6c0>
1000531e:	1b7d      	subs	r5, r7, r5
10005320:	4664      	mov	r4, ip
10005322:	45aa      	cmp	sl, r5
10005324:	41bf      	sbcs	r7, r7
10005326:	1b00      	subs	r0, r0, r4
10005328:	427a      	negs	r2, r7
1000532a:	1a83      	subs	r3, r0, r2
1000532c:	464c      	mov	r4, r9
1000532e:	2101      	movs	r1, #1
10005330:	2700      	movs	r7, #0
10005332:	e5c9      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005334:	4656      	mov	r6, sl
10005336:	4306      	orrs	r6, r0
10005338:	d03f      	beq.n	100053ba <__aeabi_dsub+0x616>
1000533a:	4662      	mov	r2, ip
1000533c:	2180      	movs	r1, #128	; 0x80
1000533e:	0757      	lsls	r7, r2, #29
10005340:	08ed      	lsrs	r5, r5, #3
10005342:	08d3      	lsrs	r3, r2, #3
10005344:	030a      	lsls	r2, r1, #12
10005346:	433d      	orrs	r5, r7
10005348:	4213      	tst	r3, r2
1000534a:	d008      	beq.n	1000535e <__aeabi_dsub+0x5ba>
1000534c:	08c6      	lsrs	r6, r0, #3
1000534e:	4216      	tst	r6, r2
10005350:	d105      	bne.n	1000535e <__aeabi_dsub+0x5ba>
10005352:	4655      	mov	r5, sl
10005354:	08ec      	lsrs	r4, r5, #3
10005356:	0745      	lsls	r5, r0, #29
10005358:	4325      	orrs	r5, r4
1000535a:	1c33      	adds	r3, r6, #0
1000535c:	464c      	mov	r4, r9
1000535e:	0f68      	lsrs	r0, r5, #29
10005360:	00db      	lsls	r3, r3, #3
10005362:	2680      	movs	r6, #128	; 0x80
10005364:	4303      	orrs	r3, r0
10005366:	00ed      	lsls	r5, r5, #3
10005368:	0131      	lsls	r1, r6, #4
1000536a:	4f3b      	ldr	r7, [pc, #236]	; (10005458 <__aeabi_dsub+0x6b4>)
1000536c:	e5ac      	b.n	10004ec8 <__aeabi_dsub+0x124>
1000536e:	493a      	ldr	r1, [pc, #232]	; (10005458 <__aeabi_dsub+0x6b4>)
10005370:	428a      	cmp	r2, r1
10005372:	d000      	beq.n	10005376 <__aeabi_dsub+0x5d2>
10005374:	e6e4      	b.n	10005140 <__aeabi_dsub+0x39c>
10005376:	2680      	movs	r6, #128	; 0x80
10005378:	1c03      	adds	r3, r0, #0
1000537a:	4655      	mov	r5, sl
1000537c:	464c      	mov	r4, r9
1000537e:	0131      	lsls	r1, r6, #4
10005380:	1c17      	adds	r7, r2, #0
10005382:	e5a1      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005384:	2f00      	cmp	r7, #0
10005386:	d04c      	beq.n	10005422 <__aeabi_dsub+0x67e>
10005388:	4653      	mov	r3, sl
1000538a:	4303      	orrs	r3, r0
1000538c:	d015      	beq.n	100053ba <__aeabi_dsub+0x616>
1000538e:	4662      	mov	r2, ip
10005390:	2680      	movs	r6, #128	; 0x80
10005392:	08ed      	lsrs	r5, r5, #3
10005394:	0751      	lsls	r1, r2, #29
10005396:	08d3      	lsrs	r3, r2, #3
10005398:	0337      	lsls	r7, r6, #12
1000539a:	430d      	orrs	r5, r1
1000539c:	423b      	tst	r3, r7
1000539e:	d0de      	beq.n	1000535e <__aeabi_dsub+0x5ba>
100053a0:	08c2      	lsrs	r2, r0, #3
100053a2:	423a      	tst	r2, r7
100053a4:	d1db      	bne.n	1000535e <__aeabi_dsub+0x5ba>
100053a6:	4655      	mov	r5, sl
100053a8:	08e9      	lsrs	r1, r5, #3
100053aa:	0745      	lsls	r5, r0, #29
100053ac:	1c13      	adds	r3, r2, #0
100053ae:	430d      	orrs	r5, r1
100053b0:	e7d5      	b.n	1000535e <__aeabi_dsub+0x5ba>
100053b2:	4663      	mov	r3, ip
100053b4:	2101      	movs	r1, #1
100053b6:	2700      	movs	r7, #0
100053b8:	e586      	b.n	10004ec8 <__aeabi_dsub+0x124>
100053ba:	2780      	movs	r7, #128	; 0x80
100053bc:	0139      	lsls	r1, r7, #4
100053be:	4663      	mov	r3, ip
100053c0:	4f25      	ldr	r7, [pc, #148]	; (10005458 <__aeabi_dsub+0x6b4>)
100053c2:	e581      	b.n	10004ec8 <__aeabi_dsub+0x124>
100053c4:	2200      	movs	r2, #0
100053c6:	e73a      	b.n	1000523e <__aeabi_dsub+0x49a>
100053c8:	1c3c      	adds	r4, r7, #0
100053ca:	3c20      	subs	r4, #32
100053cc:	4666      	mov	r6, ip
100053ce:	40e6      	lsrs	r6, r4
100053d0:	1c33      	adds	r3, r6, #0
100053d2:	2f20      	cmp	r7, #32
100053d4:	d05f      	beq.n	10005496 <__aeabi_dsub+0x6f2>
100053d6:	2440      	movs	r4, #64	; 0x40
100053d8:	1be7      	subs	r7, r4, r7
100053da:	4666      	mov	r6, ip
100053dc:	40be      	lsls	r6, r7
100053de:	1c31      	adds	r1, r6, #0
100053e0:	430d      	orrs	r5, r1
100053e2:	1e69      	subs	r1, r5, #1
100053e4:	418d      	sbcs	r5, r1
100053e6:	431d      	orrs	r5, r3
100053e8:	2300      	movs	r3, #0
100053ea:	e6bc      	b.n	10005166 <__aeabi_dsub+0x3c2>
100053ec:	3b01      	subs	r3, #1
100053ee:	2b00      	cmp	r3, #0
100053f0:	d122      	bne.n	10005438 <__aeabi_dsub+0x694>
100053f2:	4455      	add	r5, sl
100053f4:	4555      	cmp	r5, sl
100053f6:	41bf      	sbcs	r7, r7
100053f8:	427b      	negs	r3, r7
100053fa:	4460      	add	r0, ip
100053fc:	18c3      	adds	r3, r0, r3
100053fe:	1c17      	adds	r7, r2, #0
10005400:	e5ba      	b.n	10004f78 <__aeabi_dsub+0x1d4>
10005402:	2180      	movs	r1, #128	; 0x80
10005404:	2204      	movs	r2, #4
10005406:	2400      	movs	r4, #0
10005408:	0109      	lsls	r1, r1, #4
1000540a:	4b15      	ldr	r3, [pc, #84]	; (10005460 <__aeabi_dsub+0x6bc>)
1000540c:	4256      	negs	r6, r2
1000540e:	4f12      	ldr	r7, [pc, #72]	; (10005458 <__aeabi_dsub+0x6b4>)
10005410:	e573      	b.n	10004efa <__aeabi_dsub+0x156>
10005412:	4663      	mov	r3, ip
10005414:	431d      	orrs	r5, r3
10005416:	2600      	movs	r6, #0
10005418:	2d00      	cmp	r5, #0
1000541a:	d100      	bne.n	1000541e <__aeabi_dsub+0x67a>
1000541c:	e769      	b.n	100052f2 <__aeabi_dsub+0x54e>
1000541e:	2501      	movs	r5, #1
10005420:	e767      	b.n	100052f2 <__aeabi_dsub+0x54e>
10005422:	2280      	movs	r2, #128	; 0x80
10005424:	1c03      	adds	r3, r0, #0
10005426:	4655      	mov	r5, sl
10005428:	0111      	lsls	r1, r2, #4
1000542a:	4f0b      	ldr	r7, [pc, #44]	; (10005458 <__aeabi_dsub+0x6b4>)
1000542c:	e54c      	b.n	10004ec8 <__aeabi_dsub+0x124>
1000542e:	1c03      	adds	r3, r0, #0
10005430:	4655      	mov	r5, sl
10005432:	2101      	movs	r1, #1
10005434:	2700      	movs	r7, #0
10005436:	e547      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005438:	4907      	ldr	r1, [pc, #28]	; (10005458 <__aeabi_dsub+0x6b4>)
1000543a:	428a      	cmp	r2, r1
1000543c:	d000      	beq.n	10005440 <__aeabi_dsub+0x69c>
1000543e:	e742      	b.n	100052c6 <__aeabi_dsub+0x522>
10005440:	2180      	movs	r1, #128	; 0x80
10005442:	1c03      	adds	r3, r0, #0
10005444:	4655      	mov	r5, sl
10005446:	0109      	lsls	r1, r1, #4
10005448:	1c17      	adds	r7, r2, #0
1000544a:	e53d      	b.n	10004ec8 <__aeabi_dsub+0x124>
1000544c:	057f      	lsls	r7, r7, #21
1000544e:	0d7f      	lsrs	r7, r7, #21
10005450:	2600      	movs	r6, #0
10005452:	2200      	movs	r2, #0
10005454:	e55e      	b.n	10004f14 <__aeabi_dsub+0x170>
10005456:	46c0      	nop			; (mov r8, r8)
10005458:	000007ff 	.word	0x000007ff
1000545c:	ff7fffff 	.word	0xff7fffff
10005460:	007fffff 	.word	0x007fffff
10005464:	1c1d      	adds	r5, r3, #0
10005466:	4315      	orrs	r5, r2
10005468:	d100      	bne.n	1000546c <__aeabi_dsub+0x6c8>
1000546a:	e689      	b.n	10005180 <__aeabi_dsub+0x3dc>
1000546c:	1c15      	adds	r5, r2, #0
1000546e:	2101      	movs	r1, #1
10005470:	2700      	movs	r7, #0
10005472:	e529      	b.n	10004ec8 <__aeabi_dsub+0x124>
10005474:	1c1f      	adds	r7, r3, #0
10005476:	3f20      	subs	r7, #32
10005478:	4661      	mov	r1, ip
1000547a:	40f9      	lsrs	r1, r7
1000547c:	2b20      	cmp	r3, #32
1000547e:	d010      	beq.n	100054a2 <__aeabi_dsub+0x6fe>
10005480:	2640      	movs	r6, #64	; 0x40
10005482:	1af3      	subs	r3, r6, r3
10005484:	4667      	mov	r7, ip
10005486:	409f      	lsls	r7, r3
10005488:	1c3b      	adds	r3, r7, #0
1000548a:	431d      	orrs	r5, r3
1000548c:	1e6b      	subs	r3, r5, #1
1000548e:	419d      	sbcs	r5, r3
10005490:	430d      	orrs	r5, r1
10005492:	2600      	movs	r6, #0
10005494:	e72d      	b.n	100052f2 <__aeabi_dsub+0x54e>
10005496:	2100      	movs	r1, #0
10005498:	e7a2      	b.n	100053e0 <__aeabi_dsub+0x63c>
1000549a:	1c3d      	adds	r5, r7, #0
1000549c:	2101      	movs	r1, #1
1000549e:	2700      	movs	r7, #0
100054a0:	e512      	b.n	10004ec8 <__aeabi_dsub+0x124>
100054a2:	2300      	movs	r3, #0
100054a4:	e7f1      	b.n	1000548a <__aeabi_dsub+0x6e6>
100054a6:	46c0      	nop			; (mov r8, r8)

100054a8 <__aeabi_d2iz>:
100054a8:	4a13      	ldr	r2, [pc, #76]	; (100054f8 <__aeabi_d2iz+0x50>)
100054aa:	030b      	lsls	r3, r1, #12
100054ac:	b530      	push	{r4, r5, lr}
100054ae:	1c05      	adds	r5, r0, #0
100054b0:	0048      	lsls	r0, r1, #1
100054b2:	0b1c      	lsrs	r4, r3, #12
100054b4:	0fc9      	lsrs	r1, r1, #31
100054b6:	0d43      	lsrs	r3, r0, #21
100054b8:	2000      	movs	r0, #0
100054ba:	4293      	cmp	r3, r2
100054bc:	dd11      	ble.n	100054e2 <__aeabi_d2iz+0x3a>
100054be:	480f      	ldr	r0, [pc, #60]	; (100054fc <__aeabi_d2iz+0x54>)
100054c0:	4283      	cmp	r3, r0
100054c2:	dc0f      	bgt.n	100054e4 <__aeabi_d2iz+0x3c>
100054c4:	2280      	movs	r2, #128	; 0x80
100054c6:	0350      	lsls	r0, r2, #13
100054c8:	4a0d      	ldr	r2, [pc, #52]	; (10005500 <__aeabi_d2iz+0x58>)
100054ca:	4304      	orrs	r4, r0
100054cc:	1ad0      	subs	r0, r2, r3
100054ce:	281f      	cmp	r0, #31
100054d0:	dd0b      	ble.n	100054ea <__aeabi_d2iz+0x42>
100054d2:	4d0c      	ldr	r5, [pc, #48]	; (10005504 <__aeabi_d2iz+0x5c>)
100054d4:	1aeb      	subs	r3, r5, r3
100054d6:	40dc      	lsrs	r4, r3
100054d8:	1c22      	adds	r2, r4, #0
100054da:	4250      	negs	r0, r2
100054dc:	2900      	cmp	r1, #0
100054de:	d100      	bne.n	100054e2 <__aeabi_d2iz+0x3a>
100054e0:	1c10      	adds	r0, r2, #0
100054e2:	bd30      	pop	{r4, r5, pc}
100054e4:	4c08      	ldr	r4, [pc, #32]	; (10005508 <__aeabi_d2iz+0x60>)
100054e6:	1908      	adds	r0, r1, r4
100054e8:	e7fb      	b.n	100054e2 <__aeabi_d2iz+0x3a>
100054ea:	40c5      	lsrs	r5, r0
100054ec:	4807      	ldr	r0, [pc, #28]	; (1000550c <__aeabi_d2iz+0x64>)
100054ee:	1c2a      	adds	r2, r5, #0
100054f0:	181d      	adds	r5, r3, r0
100054f2:	40ac      	lsls	r4, r5
100054f4:	4322      	orrs	r2, r4
100054f6:	e7f0      	b.n	100054da <__aeabi_d2iz+0x32>
100054f8:	000003fe 	.word	0x000003fe
100054fc:	0000041d 	.word	0x0000041d
10005500:	00000433 	.word	0x00000433
10005504:	00000413 	.word	0x00000413
10005508:	7fffffff 	.word	0x7fffffff
1000550c:	fffffbed 	.word	0xfffffbed

10005510 <__aeabi_i2d>:
10005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005512:	1e04      	subs	r4, r0, #0
10005514:	d02d      	beq.n	10005572 <__aeabi_i2d+0x62>
10005516:	0fc5      	lsrs	r5, r0, #31
10005518:	d000      	beq.n	1000551c <__aeabi_i2d+0xc>
1000551a:	4244      	negs	r4, r0
1000551c:	1c20      	adds	r0, r4, #0
1000551e:	f000 f927 	bl	10005770 <__clzsi2>
10005522:	4916      	ldr	r1, [pc, #88]	; (1000557c <__aeabi_i2d+0x6c>)
10005524:	1a0a      	subs	r2, r1, r0
10005526:	280a      	cmp	r0, #10
10005528:	dd16      	ble.n	10005558 <__aeabi_i2d+0x48>
1000552a:	380b      	subs	r0, #11
1000552c:	4084      	lsls	r4, r0
1000552e:	0557      	lsls	r7, r2, #21
10005530:	0326      	lsls	r6, r4, #12
10005532:	0d7a      	lsrs	r2, r7, #21
10005534:	0b36      	lsrs	r6, r6, #12
10005536:	2700      	movs	r7, #0
10005538:	2000      	movs	r0, #0
1000553a:	2100      	movs	r1, #0
1000553c:	1c38      	adds	r0, r7, #0
1000553e:	0d0f      	lsrs	r7, r1, #20
10005540:	053b      	lsls	r3, r7, #20
10005542:	4c0f      	ldr	r4, [pc, #60]	; (10005580 <__aeabi_i2d+0x70>)
10005544:	4333      	orrs	r3, r6
10005546:	401c      	ands	r4, r3
10005548:	0516      	lsls	r6, r2, #20
1000554a:	4334      	orrs	r4, r6
1000554c:	0061      	lsls	r1, r4, #1
1000554e:	084a      	lsrs	r2, r1, #1
10005550:	07ed      	lsls	r5, r5, #31
10005552:	1c11      	adds	r1, r2, #0
10005554:	4329      	orrs	r1, r5
10005556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005558:	260b      	movs	r6, #11
1000555a:	1c01      	adds	r1, r0, #0
1000555c:	1a30      	subs	r0, r6, r0
1000555e:	3115      	adds	r1, #21
10005560:	1c23      	adds	r3, r4, #0
10005562:	40c4      	lsrs	r4, r0
10005564:	408b      	lsls	r3, r1
10005566:	0552      	lsls	r2, r2, #21
10005568:	0321      	lsls	r1, r4, #12
1000556a:	1c1f      	adds	r7, r3, #0
1000556c:	0b0e      	lsrs	r6, r1, #12
1000556e:	0d52      	lsrs	r2, r2, #21
10005570:	e7e2      	b.n	10005538 <__aeabi_i2d+0x28>
10005572:	2500      	movs	r5, #0
10005574:	2200      	movs	r2, #0
10005576:	2600      	movs	r6, #0
10005578:	2700      	movs	r7, #0
1000557a:	e7dd      	b.n	10005538 <__aeabi_i2d+0x28>
1000557c:	0000041e 	.word	0x0000041e
10005580:	800fffff 	.word	0x800fffff

10005584 <__aeabi_f2d>:
10005584:	0041      	lsls	r1, r0, #1
10005586:	b570      	push	{r4, r5, r6, lr}
10005588:	0e0e      	lsrs	r6, r1, #24
1000558a:	1c73      	adds	r3, r6, #1
1000558c:	0242      	lsls	r2, r0, #9
1000558e:	0fc5      	lsrs	r5, r0, #31
10005590:	b2d8      	uxtb	r0, r3
10005592:	0a54      	lsrs	r4, r2, #9
10005594:	2801      	cmp	r0, #1
10005596:	dd15      	ble.n	100055c4 <__aeabi_f2d+0x40>
10005598:	0763      	lsls	r3, r4, #29
1000559a:	24e0      	movs	r4, #224	; 0xe0
1000559c:	00a0      	lsls	r0, r4, #2
1000559e:	0b12      	lsrs	r2, r2, #12
100055a0:	1834      	adds	r4, r6, r0
100055a2:	2000      	movs	r0, #0
100055a4:	2100      	movs	r1, #0
100055a6:	1c18      	adds	r0, r3, #0
100055a8:	0d0b      	lsrs	r3, r1, #20
100055aa:	051e      	lsls	r6, r3, #20
100055ac:	4b1c      	ldr	r3, [pc, #112]	; (10005620 <__aeabi_f2d+0x9c>)
100055ae:	4332      	orrs	r2, r6
100055b0:	0561      	lsls	r1, r4, #21
100055b2:	084c      	lsrs	r4, r1, #1
100055b4:	4013      	ands	r3, r2
100055b6:	4323      	orrs	r3, r4
100055b8:	005a      	lsls	r2, r3, #1
100055ba:	0856      	lsrs	r6, r2, #1
100055bc:	07ed      	lsls	r5, r5, #31
100055be:	1c31      	adds	r1, r6, #0
100055c0:	4329      	orrs	r1, r5
100055c2:	bd70      	pop	{r4, r5, r6, pc}
100055c4:	2e00      	cmp	r6, #0
100055c6:	d116      	bne.n	100055f6 <__aeabi_f2d+0x72>
100055c8:	2c00      	cmp	r4, #0
100055ca:	d01e      	beq.n	1000560a <__aeabi_f2d+0x86>
100055cc:	1c20      	adds	r0, r4, #0
100055ce:	f000 f8cf 	bl	10005770 <__clzsi2>
100055d2:	280a      	cmp	r0, #10
100055d4:	dc1d      	bgt.n	10005612 <__aeabi_f2d+0x8e>
100055d6:	220b      	movs	r2, #11
100055d8:	1a11      	subs	r1, r2, r0
100055da:	1c02      	adds	r2, r0, #0
100055dc:	1c23      	adds	r3, r4, #0
100055de:	3215      	adds	r2, #21
100055e0:	40cb      	lsrs	r3, r1
100055e2:	4094      	lsls	r4, r2
100055e4:	1c1e      	adds	r6, r3, #0
100055e6:	1c23      	adds	r3, r4, #0
100055e8:	0334      	lsls	r4, r6, #12
100055ea:	4e0e      	ldr	r6, [pc, #56]	; (10005624 <__aeabi_f2d+0xa0>)
100055ec:	0b22      	lsrs	r2, r4, #12
100055ee:	1a30      	subs	r0, r6, r0
100055f0:	0541      	lsls	r1, r0, #21
100055f2:	0d4c      	lsrs	r4, r1, #21
100055f4:	e7d5      	b.n	100055a2 <__aeabi_f2d+0x1e>
100055f6:	2c00      	cmp	r4, #0
100055f8:	d003      	beq.n	10005602 <__aeabi_f2d+0x7e>
100055fa:	0763      	lsls	r3, r4, #29
100055fc:	0b12      	lsrs	r2, r2, #12
100055fe:	4c0a      	ldr	r4, [pc, #40]	; (10005628 <__aeabi_f2d+0xa4>)
10005600:	e7cf      	b.n	100055a2 <__aeabi_f2d+0x1e>
10005602:	4c09      	ldr	r4, [pc, #36]	; (10005628 <__aeabi_f2d+0xa4>)
10005604:	2200      	movs	r2, #0
10005606:	2300      	movs	r3, #0
10005608:	e7cb      	b.n	100055a2 <__aeabi_f2d+0x1e>
1000560a:	2400      	movs	r4, #0
1000560c:	2200      	movs	r2, #0
1000560e:	2300      	movs	r3, #0
10005610:	e7c7      	b.n	100055a2 <__aeabi_f2d+0x1e>
10005612:	1c01      	adds	r1, r0, #0
10005614:	390b      	subs	r1, #11
10005616:	408c      	lsls	r4, r1
10005618:	1c26      	adds	r6, r4, #0
1000561a:	2300      	movs	r3, #0
1000561c:	e7e4      	b.n	100055e8 <__aeabi_f2d+0x64>
1000561e:	46c0      	nop			; (mov r8, r8)
10005620:	800fffff 	.word	0x800fffff
10005624:	00000389 	.word	0x00000389
10005628:	000007ff 	.word	0x000007ff

1000562c <__aeabi_d2f>:
1000562c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000562e:	1c04      	adds	r4, r0, #0
10005630:	0048      	lsls	r0, r1, #1
10005632:	0d40      	lsrs	r0, r0, #21
10005634:	030a      	lsls	r2, r1, #12
10005636:	0fcd      	lsrs	r5, r1, #31
10005638:	1c41      	adds	r1, r0, #1
1000563a:	0f63      	lsrs	r3, r4, #29
1000563c:	0a52      	lsrs	r2, r2, #9
1000563e:	054f      	lsls	r7, r1, #21
10005640:	431a      	orrs	r2, r3
10005642:	00e6      	lsls	r6, r4, #3
10005644:	0d7b      	lsrs	r3, r7, #21
10005646:	2b01      	cmp	r3, #1
10005648:	dd3b      	ble.n	100056c2 <__aeabi_d2f+0x96>
1000564a:	4942      	ldr	r1, [pc, #264]	; (10005754 <__aeabi_d2f+0x128>)
1000564c:	1843      	adds	r3, r0, r1
1000564e:	2bfe      	cmp	r3, #254	; 0xfe
10005650:	dc2c      	bgt.n	100056ac <__aeabi_d2f+0x80>
10005652:	2b00      	cmp	r3, #0
10005654:	dd4e      	ble.n	100056f4 <__aeabi_d2f+0xc8>
10005656:	01a4      	lsls	r4, r4, #6
10005658:	0f77      	lsrs	r7, r6, #29
1000565a:	00d2      	lsls	r2, r2, #3
1000565c:	1e61      	subs	r1, r4, #1
1000565e:	418c      	sbcs	r4, r1
10005660:	4e3d      	ldr	r6, [pc, #244]	; (10005758 <__aeabi_d2f+0x12c>)
10005662:	4322      	orrs	r2, r4
10005664:	1980      	adds	r0, r0, r6
10005666:	433a      	orrs	r2, r7
10005668:	260f      	movs	r6, #15
1000566a:	4016      	ands	r6, r2
1000566c:	2e04      	cmp	r6, #4
1000566e:	d147      	bne.n	10005700 <__aeabi_d2f+0xd4>
10005670:	2780      	movs	r7, #128	; 0x80
10005672:	04fc      	lsls	r4, r7, #19
10005674:	4014      	ands	r4, r2
10005676:	d01d      	beq.n	100056b4 <__aeabi_d2f+0x88>
10005678:	28ff      	cmp	r0, #255	; 0xff
1000567a:	d038      	beq.n	100056ee <__aeabi_d2f+0xc2>
1000567c:	4b37      	ldr	r3, [pc, #220]	; (1000575c <__aeabi_d2f+0x130>)
1000567e:	401a      	ands	r2, r3
10005680:	1c03      	adds	r3, r0, #0
10005682:	3001      	adds	r0, #1
10005684:	b2c6      	uxtb	r6, r0
10005686:	08d2      	lsrs	r2, r2, #3
10005688:	2e01      	cmp	r6, #1
1000568a:	dc17      	bgt.n	100056bc <__aeabi_d2f+0x90>
1000568c:	2a00      	cmp	r2, #0
1000568e:	d006      	beq.n	1000569e <__aeabi_d2f+0x72>
10005690:	2b00      	cmp	r3, #0
10005692:	d029      	beq.n	100056e8 <__aeabi_d2f+0xbc>
10005694:	2780      	movs	r7, #128	; 0x80
10005696:	03fc      	lsls	r4, r7, #15
10005698:	4322      	orrs	r2, r4
1000569a:	0251      	lsls	r1, r2, #9
1000569c:	0a4a      	lsrs	r2, r1, #9
1000569e:	b2db      	uxtb	r3, r3
100056a0:	05db      	lsls	r3, r3, #23
100056a2:	431a      	orrs	r2, r3
100056a4:	07ed      	lsls	r5, r5, #31
100056a6:	1c10      	adds	r0, r2, #0
100056a8:	4328      	orrs	r0, r5
100056aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100056ac:	2180      	movs	r1, #128	; 0x80
100056ae:	0048      	lsls	r0, r1, #1
100056b0:	2204      	movs	r2, #4
100056b2:	23ff      	movs	r3, #255	; 0xff
100056b4:	b2c6      	uxtb	r6, r0
100056b6:	08d2      	lsrs	r2, r2, #3
100056b8:	2e01      	cmp	r6, #1
100056ba:	dde7      	ble.n	1000568c <__aeabi_d2f+0x60>
100056bc:	0251      	lsls	r1, r2, #9
100056be:	0a4a      	lsrs	r2, r1, #9
100056c0:	e7ed      	b.n	1000569e <__aeabi_d2f+0x72>
100056c2:	2800      	cmp	r0, #0
100056c4:	d106      	bne.n	100056d4 <__aeabi_d2f+0xa8>
100056c6:	4332      	orrs	r2, r6
100056c8:	2001      	movs	r0, #1
100056ca:	2a00      	cmp	r2, #0
100056cc:	d115      	bne.n	100056fa <__aeabi_d2f+0xce>
100056ce:	2204      	movs	r2, #4
100056d0:	2300      	movs	r3, #0
100056d2:	e7ef      	b.n	100056b4 <__aeabi_d2f+0x88>
100056d4:	4316      	orrs	r6, r2
100056d6:	d0e9      	beq.n	100056ac <__aeabi_d2f+0x80>
100056d8:	2480      	movs	r4, #128	; 0x80
100056da:	04a0      	lsls	r0, r4, #18
100056dc:	00d2      	lsls	r2, r2, #3
100056de:	2680      	movs	r6, #128	; 0x80
100056e0:	4302      	orrs	r2, r0
100056e2:	23ff      	movs	r3, #255	; 0xff
100056e4:	0070      	lsls	r0, r6, #1
100056e6:	e7bf      	b.n	10005668 <__aeabi_d2f+0x3c>
100056e8:	0250      	lsls	r0, r2, #9
100056ea:	0a42      	lsrs	r2, r0, #9
100056ec:	e7d8      	b.n	100056a0 <__aeabi_d2f+0x74>
100056ee:	23ff      	movs	r3, #255	; 0xff
100056f0:	2200      	movs	r2, #0
100056f2:	e7d5      	b.n	100056a0 <__aeabi_d2f+0x74>
100056f4:	3317      	adds	r3, #23
100056f6:	da05      	bge.n	10005704 <__aeabi_d2f+0xd8>
100056f8:	2001      	movs	r0, #1
100056fa:	2205      	movs	r2, #5
100056fc:	2300      	movs	r3, #0
100056fe:	e7d9      	b.n	100056b4 <__aeabi_d2f+0x88>
10005700:	3204      	adds	r2, #4
10005702:	e7b5      	b.n	10005670 <__aeabi_d2f+0x44>
10005704:	2380      	movs	r3, #128	; 0x80
10005706:	4f16      	ldr	r7, [pc, #88]	; (10005760 <__aeabi_d2f+0x134>)
10005708:	0419      	lsls	r1, r3, #16
1000570a:	430a      	orrs	r2, r1
1000570c:	1a3c      	subs	r4, r7, r0
1000570e:	2c1f      	cmp	r4, #31
10005710:	dc0d      	bgt.n	1000572e <__aeabi_d2f+0x102>
10005712:	4914      	ldr	r1, [pc, #80]	; (10005764 <__aeabi_d2f+0x138>)
10005714:	1c33      	adds	r3, r6, #0
10005716:	1847      	adds	r7, r0, r1
10005718:	40be      	lsls	r6, r7
1000571a:	1c30      	adds	r0, r6, #0
1000571c:	1e46      	subs	r6, r0, #1
1000571e:	41b0      	sbcs	r0, r6
10005720:	40ba      	lsls	r2, r7
10005722:	40e3      	lsrs	r3, r4
10005724:	4302      	orrs	r2, r0
10005726:	431a      	orrs	r2, r3
10005728:	2001      	movs	r0, #1
1000572a:	2300      	movs	r3, #0
1000572c:	e79c      	b.n	10005668 <__aeabi_d2f+0x3c>
1000572e:	4b0e      	ldr	r3, [pc, #56]	; (10005768 <__aeabi_d2f+0x13c>)
10005730:	1c17      	adds	r7, r2, #0
10005732:	1a19      	subs	r1, r3, r0
10005734:	40cf      	lsrs	r7, r1
10005736:	1c3b      	adds	r3, r7, #0
10005738:	2c20      	cmp	r4, #32
1000573a:	d009      	beq.n	10005750 <__aeabi_d2f+0x124>
1000573c:	4c0b      	ldr	r4, [pc, #44]	; (1000576c <__aeabi_d2f+0x140>)
1000573e:	1900      	adds	r0, r0, r4
10005740:	4082      	lsls	r2, r0
10005742:	4332      	orrs	r2, r6
10005744:	1e56      	subs	r6, r2, #1
10005746:	41b2      	sbcs	r2, r6
10005748:	431a      	orrs	r2, r3
1000574a:	2001      	movs	r0, #1
1000574c:	2300      	movs	r3, #0
1000574e:	e78b      	b.n	10005668 <__aeabi_d2f+0x3c>
10005750:	2200      	movs	r2, #0
10005752:	e7f6      	b.n	10005742 <__aeabi_d2f+0x116>
10005754:	fffffc80 	.word	0xfffffc80
10005758:	fffffc81 	.word	0xfffffc81
1000575c:	fbffffff 	.word	0xfbffffff
10005760:	0000039e 	.word	0x0000039e
10005764:	fffffc82 	.word	0xfffffc82
10005768:	0000037e 	.word	0x0000037e
1000576c:	fffffca2 	.word	0xfffffca2

10005770 <__clzsi2>:
10005770:	211c      	movs	r1, #28
10005772:	2301      	movs	r3, #1
10005774:	041b      	lsls	r3, r3, #16
10005776:	4298      	cmp	r0, r3
10005778:	d301      	bcc.n	1000577e <__clzsi2+0xe>
1000577a:	0c00      	lsrs	r0, r0, #16
1000577c:	3910      	subs	r1, #16
1000577e:	0a1b      	lsrs	r3, r3, #8
10005780:	4298      	cmp	r0, r3
10005782:	d301      	bcc.n	10005788 <__clzsi2+0x18>
10005784:	0a00      	lsrs	r0, r0, #8
10005786:	3908      	subs	r1, #8
10005788:	091b      	lsrs	r3, r3, #4
1000578a:	4298      	cmp	r0, r3
1000578c:	d301      	bcc.n	10005792 <__clzsi2+0x22>
1000578e:	0900      	lsrs	r0, r0, #4
10005790:	3904      	subs	r1, #4
10005792:	a202      	add	r2, pc, #8	; (adr r2, 1000579c <__clzsi2+0x2c>)
10005794:	5c10      	ldrb	r0, [r2, r0]
10005796:	1840      	adds	r0, r0, r1
10005798:	4770      	bx	lr
1000579a:	46c0      	nop			; (mov r8, r8)
1000579c:	02020304 	.word	0x02020304
100057a0:	01010101 	.word	0x01010101
	...

100057ac <__errno>:
100057ac:	4b01      	ldr	r3, [pc, #4]	; (100057b4 <__errno+0x8>)
100057ae:	6818      	ldr	r0, [r3, #0]
100057b0:	4770      	bx	lr
100057b2:	46c0      	nop			; (mov r8, r8)
100057b4:	20000e60 	.word	0x20000e60

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001263 	.word	0x10001263
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001265 	.word	0x10001265
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001267 	.word	0x10001267
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001269 	.word	0x10001269
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	1000126b 	.word	0x1000126b
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	1000126d 	.word	0x1000126d
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	1000126f 	.word	0x1000126f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001271 	.word	0x10001271
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001273 	.word	0x10001273
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001275 	.word	0x10001275
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001277 	.word	0x10001277
    MOV PC,R0
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001279 	.word	0x10001279
    MOV PC,R0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001297 	.word	0x10001297
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001299 	.word	0x10001299
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	1000129b 	.word	0x1000129b
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	1000129d 	.word	0x1000129d
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	1000129f 	.word	0x1000129f
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	100012a1 	.word	0x100012a1
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	1000127b 	.word	0x1000127b
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	1000127d 	.word	0x1000127d
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	1000127f 	.word	0x1000127f
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001281 	.word	0x10001281
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001283 	.word	0x10001283
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001285 	.word	0x10001285
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001287 	.word	0x10001287
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001289 	.word	0x10001289
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	1000128b 	.word	0x1000128b
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	1000128d 	.word	0x1000128d
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	1000128f 	.word	0x1000128f
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001291 	.word	0x10001291
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001293 	.word	0x10001293
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001295 	.word	0x10001295
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	100012a3 	.word	0x100012a3
