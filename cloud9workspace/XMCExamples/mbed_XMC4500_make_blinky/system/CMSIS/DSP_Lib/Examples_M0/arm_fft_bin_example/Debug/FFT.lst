
FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cfc  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10003cfc  10003cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00026e28  10003d0c  10003d0c  00003d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000138  2000000c  1002ab40  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   0000000c  20000144  00000000  00000144  2**0
                  ALLOC
  5 Stack         00000800  20000150  00000000  00000150  2**0
                  ALLOC
  6 .bss          0000100c  20000950  20000950  00038950  2**2
                  ALLOC
  7 .data         0000243c  20001960  1002ac78  00031960  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000178  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001cfd  00000000  00000000  00033f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000007ea  00000000  00000000  00035c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002cc4  00000000  00000000  000363ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000055c  00000000  00000000  000390c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00037b99  00000000  00000000  00039620  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002ace  00000000  00000000  000711b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00073c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000053e  00000000  00000000  00073db8  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000a909  00000000  00000000  000742f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1300_interrupt_vector_cortex_m>:
10001000:	50 09 00 20 19 10 00 10 6d 11 00 10 6f 11 00 10     P.. ....m...o...
10001010:	00 00 00 80 00 00 00 80                             ........

10001018 <__Xmc1300_reset_cortex_m>:
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001018:	4803      	ldr	r0, [pc, #12]	; (10001028 <__Xmc1300_reset_cortex_m+0x10>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000101c:	4803      	ldr	r0, [pc, #12]	; (1000102c <__Xmc1300_reset_cortex_m+0x14>)
    BLX     R0
1000101e:	4780      	blx	r0

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001020:	4803      	ldr	r0, [pc, #12]	; (10001030 <__Xmc1300_reset_cortex_m+0x18>)
    BLX     R0
10001022:	4780      	blx	r0

    B       __Xmc1300_Program_Loader 
10001024:	e006      	b.n	10001034 <__Xmc1300_Program_Loader>
10001026:	0000      	.short	0x0000
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001028:	20000950 	.word	0x20000950
    MOV SP,R0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000102c:	100011b1 	.word	0x100011b1

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001030:	100010c9 	.word	0x100010c9

10001034 <__Xmc1300_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001034:	4818      	ldr	r0, [pc, #96]	; (10001098 <SKIPVENEERCOPY+0x12>)
   LDR R1, =__Xmc1300_sData
10001036:	4919      	ldr	r1, [pc, #100]	; (1000109c <SKIPVENEERCOPY+0x16>)
   LDR R2, =__Xmc1300_Data_Size
10001038:	4a19      	ldr	r2, [pc, #100]	; (100010a0 <SKIPVENEERCOPY+0x1a>)

   /* Is there anything to be copied? */
   CMP R2,#0
1000103a:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000103c:	d00a      	beq.n	10001054 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
1000103e:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001040:	d200      	bcs.n	10001044 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001042:	2204      	movs	r2, #4

10001044 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001044:	0892      	lsrs	r2, r2, #2

10001046 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001046:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
10001048:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000104a:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000104c:	d002      	beq.n	10001054 <SKIPCOPY>
   ADDS R0,#4
1000104e:	3004      	adds	r0, #4
   ADDS R1,#4
10001050:	3104      	adds	r1, #4
   B COPYLOOP
10001052:	e7f8      	b.n	10001046 <COPYLOOP>

10001054 <SKIPCOPY>:
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001054:	4813      	ldr	r0, [pc, #76]	; (100010a4 <SKIPVENEERCOPY+0x1e>)
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001056:	4914      	ldr	r1, [pc, #80]	; (100010a8 <SKIPVENEERCOPY+0x22>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
10001058:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000105a:	d009      	beq.n	10001070 <SKIPCLEAR>

   /* At least 1 word must be copied */
   CMP R1,#4
1000105c:	2904      	cmp	r1, #4
   BCS STARTCLEAR
1000105e:	d200      	bcs.n	10001062 <STARTCLEAR>
   
   /* Byte count < 4 ; so bump it up to a word*/
   MOVS R1,#4
10001060:	2104      	movs	r1, #4

10001062 <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
10001062:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001064:	2200      	movs	r2, #0

10001066 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001066:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001068:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
1000106a:	d001      	beq.n	10001070 <SKIPCLEAR>
   ADDS R0,#4
1000106c:	3004      	adds	r0, #4
   B CLEARLOOP
1000106e:	e7fa      	b.n	10001066 <CLEARLOOP>

10001070 <SKIPCLEAR>:
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
10001070:	480e      	ldr	r0, [pc, #56]	; (100010ac <SKIPVENEERCOPY+0x26>)
   LDR R1, =VeneerStart
10001072:	490f      	ldr	r1, [pc, #60]	; (100010b0 <SKIPVENEERCOPY+0x2a>)
   LDR R2, =VeneerSize
10001074:	4a0f      	ldr	r2, [pc, #60]	; (100010b4 <SKIPVENEERCOPY+0x2e>)

10001076 <STARTVENEERCOPY>:
STARTVENEERCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001076:	0892      	lsrs	r2, r2, #2

10001078 <VENEERCOPYLOOP>:

   /* The proverbial loop from the schooldays */
VENEERCOPYLOOP:
   LDR R3,[R0]
10001078:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000107a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000107c:	3a01      	subs	r2, #1
   BEQ SKIPVENEERCOPY
1000107e:	d002      	beq.n	10001086 <SKIPVENEERCOPY>
   ADDS R0,#4
10001080:	3004      	adds	r0, #4
   ADDS R1,#4
10001082:	3104      	adds	r1, #4
   B VENEERCOPYLOOP
10001084:	e7f8      	b.n	10001078 <VENEERCOPYLOOP>

10001086 <SKIPVENEERCOPY>:
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
10001086:	480c      	ldr	r0, [pc, #48]	; (100010b8 <SKIPVENEERCOPY+0x32>)
   BLX R0
10001088:	4780      	blx	r0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
1000108a:	480c      	ldr	r0, [pc, #48]	; (100010bc <SKIPVENEERCOPY+0x36>)
   MOV SP,R0
1000108c:	4685      	mov	sp, r0

   MOVS R0,#0
1000108e:	2000      	movs	r0, #0
   MOVS R1,#0
10001090:	2100      	movs	r1, #0
   LDR R2, =main
10001092:	4a0b      	ldr	r2, [pc, #44]	; (100010c0 <SKIPVENEERCOPY+0x3a>)
   MOV PC,R2
10001094:	4697      	mov	pc, r2
10001096:	0000      	.short	0x0000
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001098:	1002ac78 	.word	0x1002ac78
   LDR R1, =__Xmc1300_sData
1000109c:	20001960 	.word	0x20001960
   LDR R2, =__Xmc1300_Data_Size
100010a0:	0000243c 	.word	0x0000243c
   ADDS R1,#4
   B COPYLOOP
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
100010a4:	20000950 	.word	0x20000950
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
100010a8:	0000100c 	.word	0x0000100c
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010ac:	1002ab40 	.word	0x1002ab40
   LDR R1, =VeneerStart
100010b0:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b4:	00000138 	.word	0x00000138
   ADDS R1,#4
   B VENEERCOPYLOOP
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
100010b8:	100011bd 	.word	0x100011bd
   BLX R0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
100010bc:	20000950 	.word	0x20000950
   MOV SP,R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c0:	100010cd 	.word	0x100010cd

100010c4 <AllowClkInitByStartup>:
*/   
     .section ".XmcStartup"
    .weak   AllowClkInitByStartup
    .type   AllowClkInitByStartup, %function
AllowClkInitByStartup:
    MOVS R0,#1
100010c4:	2001      	movs	r0, #1
    BX LR
100010c6:	4770      	bx	lr

100010c8 <SystemInit_DAVE3>:
setting up of external memory interfaces.
*/
     .weak SystemInit_DAVE3
     .type SystemInit_DAVE3, %function
SystemInit_DAVE3:
     NOP
100010c8:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ca:	4770      	bx	lr

100010cc <main>:
/* ---------------------------------------------------------------------- 
* Max magnitude FFT Bin test 
* ------------------------------------------------------------------- */ 
 
int main(void)
{ 
100010cc:	b590      	push	{r4, r7, lr}
100010ce:	b089      	sub	sp, #36	; 0x24
100010d0:	af00      	add	r7, sp, #0
   
	arm_status status; 
	arm_cfft_radix4_instance_f32 S; 
	float32_t maxValue; 
	 
	status = ARM_MATH_SUCCESS; 
100010d2:	1c3b      	adds	r3, r7, #0
100010d4:	331f      	adds	r3, #31
100010d6:	2200      	movs	r2, #0
100010d8:	701a      	strb	r2, [r3, #0]
	 
	/* Initialize the CFFT/CIFFT module */  
	status = arm_cfft_radix4_init_f32(&S, fftSize,  
100010da:	4b1d      	ldr	r3, [pc, #116]	; (10001150 <main+0x84>)
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	b299      	uxth	r1, r3
100010e0:	4b1c      	ldr	r3, [pc, #112]	; (10001154 <main+0x88>)
100010e2:	681b      	ldr	r3, [r3, #0]
100010e4:	b2da      	uxtb	r2, r3
100010e6:	4b1c      	ldr	r3, [pc, #112]	; (10001158 <main+0x8c>)
100010e8:	681b      	ldr	r3, [r3, #0]
100010ea:	b2db      	uxtb	r3, r3
100010ec:	1c3c      	adds	r4, r7, #0
100010ee:	341f      	adds	r4, #31
100010f0:	1c38      	adds	r0, r7, #0
100010f2:	3008      	adds	r0, #8
100010f4:	f000 fe3c 	bl	10001d70 <arm_cfft_radix4_init_f32>
100010f8:	1c03      	adds	r3, r0, #0
100010fa:	7023      	strb	r3, [r4, #0]
	  								ifftFlag, doBitReverse); 
	 
	/* Process the data through the CFFT/CIFFT module */ 
	arm_cfft_radix4_f32(&S, testInput_f32_10khz); 
100010fc:	1c3a      	adds	r2, r7, #0
100010fe:	3208      	adds	r2, #8
10001100:	4b16      	ldr	r3, [pc, #88]	; (1000115c <main+0x90>)
10001102:	1c10      	adds	r0, r2, #0
10001104:	1c19      	adds	r1, r3, #0
10001106:	f000 fe0f 	bl	10001d28 <arm_cfft_radix4_f32>
	 
	 
	/* Process the data through the Complex Magnitude Module for  
	calculating the magnitude at each bin */ 
	arm_cmplx_mag_f32(testInput_f32_10khz, testOutput,  
1000110a:	4b11      	ldr	r3, [pc, #68]	; (10001150 <main+0x84>)
1000110c:	681b      	ldr	r3, [r3, #0]
1000110e:	4913      	ldr	r1, [pc, #76]	; (1000115c <main+0x90>)
10001110:	4a13      	ldr	r2, [pc, #76]	; (10001160 <main+0x94>)
10001112:	1c08      	adds	r0, r1, #0
10001114:	1c11      	adds	r1, r2, #0
10001116:	1c1a      	adds	r2, r3, #0
10001118:	f000 ff0e 	bl	10001f38 <arm_cmplx_mag_f32>
	  				fftSize);  
	 
	/* Calculates maxValue and returns corresponding BIN value */ 
	arm_max_f32(testOutput, fftSize, &maxValue, &testIndex); 
1000111c:	4b0c      	ldr	r3, [pc, #48]	; (10001150 <main+0x84>)
1000111e:	6819      	ldr	r1, [r3, #0]
10001120:	480f      	ldr	r0, [pc, #60]	; (10001160 <main+0x94>)
10001122:	1d3a      	adds	r2, r7, #4
10001124:	4b0f      	ldr	r3, [pc, #60]	; (10001164 <main+0x98>)
10001126:	f000 fe81 	bl	10001e2c <arm_max_f32>
	 
	if(testIndex !=  refIndex) 
1000112a:	4b0e      	ldr	r3, [pc, #56]	; (10001164 <main+0x98>)
1000112c:	681a      	ldr	r2, [r3, #0]
1000112e:	4b0e      	ldr	r3, [pc, #56]	; (10001168 <main+0x9c>)
10001130:	681b      	ldr	r3, [r3, #0]
10001132:	429a      	cmp	r2, r3
10001134:	d003      	beq.n	1000113e <main+0x72>
	{ 
		status = ARM_MATH_TEST_FAILURE; 
10001136:	1c3b      	adds	r3, r7, #0
10001138:	331f      	adds	r3, #31
1000113a:	22fa      	movs	r2, #250	; 0xfa
1000113c:	701a      	strb	r2, [r3, #0]
	/* ---------------------------------------------------------------------- 
	** Loop here if the signals fail the PASS check. 
	** This denotes a test failure 
	** ------------------------------------------------------------------- */ 
	 
	if( status != ARM_MATH_SUCCESS) 
1000113e:	1c3b      	adds	r3, r7, #0
10001140:	331f      	adds	r3, #31
10001142:	781b      	ldrb	r3, [r3, #0]
10001144:	b25b      	sxtb	r3, r3
10001146:	2b00      	cmp	r3, #0
10001148:	d000      	beq.n	1000114c <main+0x80>
	{ 
		while(1); 
1000114a:	e7fe      	b.n	1000114a <main+0x7e>
	} 

    while(1);                             /* main function does not return */
1000114c:	e7fe      	b.n	1000114c <main+0x80>
1000114e:	46c0      	nop			; (mov r8, r8)
10001150:	20003960 	.word	0x20003960
10001154:	20001950 	.word	0x20001950
10001158:	20003964 	.word	0x20003964
1000115c:	20001960 	.word	0x20001960
10001160:	20000950 	.word	0x20000950
10001164:	20001954 	.word	0x20001954
10001168:	20003968 	.word	0x20003968

1000116c <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
1000116c:	e7fe      	b.n	1000116c <NMI_Handler>

1000116e <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
1000116e:	e7fe      	b.n	1000116e <HardFault_Handler>

10001170 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10001170:	e7fe      	b.n	10001170 <SVC_Handler>

10001172 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
10001172:	e7fe      	b.n	10001172 <PendSV_Handler>

10001174 <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
10001174:	e7fe      	b.n	10001174 <SysTick_Handler>

10001176 <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
10001176:	e7fe      	b.n	10001176 <SCU_0_IRQHandler>

10001178 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
10001178:	e7fe      	b.n	10001178 <SCU_1_IRQHandler>

1000117a <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
1000117a:	e7fe      	b.n	1000117a <SCU_2_IRQHandler>

1000117c <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
1000117c:	e7fe      	b.n	1000117c <ERU0_0_IRQHandler>

1000117e <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
1000117e:	e7fe      	b.n	1000117e <ERU0_1_IRQHandler>

10001180 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
10001180:	e7fe      	b.n	10001180 <ERU0_2_IRQHandler>

10001182 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
10001182:	e7fe      	b.n	10001182 <ERU0_3_IRQHandler>

10001184 <MATH0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler MATH0_0_IRQHandler
10001184:	e7fe      	b.n	10001184 <MATH0_0_IRQHandler>

10001186 <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
10001186:	e7fe      	b.n	10001186 <VADC0_C0_0_IRQHandler>

10001188 <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
10001188:	e7fe      	b.n	10001188 <VADC0_C0_1_IRQHandler>

1000118a <VADC0_G0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
1000118a:	e7fe      	b.n	1000118a <VADC0_G0_0_IRQHandler>

1000118c <VADC0_G0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
1000118c:	e7fe      	b.n	1000118c <VADC0_G0_1_IRQHandler>

1000118e <VADC0_G1_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
1000118e:	e7fe      	b.n	1000118e <VADC0_G1_0_IRQHandler>

10001190 <VADC0_G1_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
10001190:	e7fe      	b.n	10001190 <VADC0_G1_1_IRQHandler>

10001192 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
10001192:	e7fe      	b.n	10001192 <CCU40_0_IRQHandler>

10001194 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
10001194:	e7fe      	b.n	10001194 <CCU40_1_IRQHandler>

10001196 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
10001196:	e7fe      	b.n	10001196 <CCU40_2_IRQHandler>

10001198 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
10001198:	e7fe      	b.n	10001198 <CCU40_3_IRQHandler>

1000119a <CCU80_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_0_IRQHandler
1000119a:	e7fe      	b.n	1000119a <CCU80_0_IRQHandler>

1000119c <CCU80_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_1_IRQHandler
1000119c:	e7fe      	b.n	1000119c <CCU80_1_IRQHandler>

1000119e <POSIF0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_0_IRQHandler
1000119e:	e7fe      	b.n	1000119e <POSIF0_0_IRQHandler>

100011a0 <POSIF0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_1_IRQHandler
100011a0:	e7fe      	b.n	100011a0 <POSIF0_1_IRQHandler>

100011a2 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100011a2:	e7fe      	b.n	100011a2 <USIC0_0_IRQHandler>

100011a4 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100011a4:	e7fe      	b.n	100011a4 <USIC0_1_IRQHandler>

100011a6 <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100011a6:	e7fe      	b.n	100011a6 <USIC0_2_IRQHandler>

100011a8 <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100011a8:	e7fe      	b.n	100011a8 <USIC0_3_IRQHandler>

100011aa <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
100011aa:	e7fe      	b.n	100011aa <USIC0_4_IRQHandler>

100011ac <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
100011ac:	e7fe      	b.n	100011ac <USIC0_5_IRQHandler>

100011ae <BCCU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler BCCU0_0_IRQHandler
100011ae:	e7fe      	b.n	100011ae <BCCU0_0_IRQHandler>

100011b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
100011b0:	b580      	push	{r7, lr}
100011b2:	af00      	add	r7, sp, #0

  /*
   * Clock tree setup by CMSIS routines is allowed only in the absence of DAVE
   * Clock app.
   */ 
  if(AllowClkInitByStartup()){ 
100011b4:	f7ff ff86 	bl	100010c4 <AllowClkInitByStartup>
   * MCLK    = DCO_DCLK
   * PCLK    = MCLK
   * RTC CLK = Standby clock
   */
  }
}
100011b8:	46bd      	mov	sp, r7
100011ba:	bd80      	pop	{r7, pc}

100011bc <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100011bc:	b580      	push	{r7, lr}
100011be:	b086      	sub	sp, #24
100011c0:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV, CLKCR, Clock;

  CLKCR = SCU_CLK -> CLKCR;
100011c2:	4b1c      	ldr	r3, [pc, #112]	; (10001234 <SystemCoreClockUpdate+0x78>)
100011c4:	681b      	ldr	r3, [r3, #0]
100011c6:	613b      	str	r3, [r7, #16]
  IDIV = (CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100011c8:	693a      	ldr	r2, [r7, #16]
100011ca:	23ff      	movs	r3, #255	; 0xff
100011cc:	021b      	lsls	r3, r3, #8
100011ce:	4013      	ands	r3, r2
100011d0:	0a1b      	lsrs	r3, r3, #8
100011d2:	60fb      	str	r3, [r7, #12]
  FDIV = (CLKCR & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100011d4:	693a      	ldr	r2, [r7, #16]
100011d6:	23ff      	movs	r3, #255	; 0xff
100011d8:	4013      	ands	r3, r2
100011da:	60bb      	str	r3, [r7, #8]
  
  if(IDIV)
100011dc:	68fb      	ldr	r3, [r7, #12]
100011de:	2b00      	cmp	r3, #0
100011e0:	d01f      	beq.n	10001222 <SystemCoreClockUpdate+0x66>
  {
    /* Divider is enabled and used */
    if(0 == FDIV)
100011e2:	68bb      	ldr	r3, [r7, #8]
100011e4:	2b00      	cmp	r3, #0
100011e6:	d106      	bne.n	100011f6 <SystemCoreClockUpdate+0x3a>
     {
       /* No fractional divider, so MCLK = DCO_Clk / (2 * IDIV) */
       Clock = MCLK_MHZ / IDIV;
100011e8:	4813      	ldr	r0, [pc, #76]	; (10001238 <SystemCoreClockUpdate+0x7c>)
100011ea:	68f9      	ldr	r1, [r7, #12]
100011ec:	f001 fa34 	bl	10002658 <__aeabi_uidiv>
100011f0:	1c03      	adds	r3, r0, #0
100011f2:	617b      	str	r3, [r7, #20]
100011f4:	e017      	b.n	10001226 <SystemCoreClockUpdate+0x6a>
     }
    else
     {
       /* Both integer and fractional divider must be considered */
       /* 1. IDIV + FDIV/256 */
       Q_24_8 FDiv_IDiv_Sum = (IDIV << FRACBITS) + FDIV;  
100011f6:	68fb      	ldr	r3, [r7, #12]
100011f8:	021a      	lsls	r2, r3, #8
100011fa:	68bb      	ldr	r3, [r7, #8]
100011fc:	18d3      	adds	r3, r2, r3
100011fe:	607b      	str	r3, [r7, #4]

       /* 2. Fixed point division Q24.8 / Q9.8 = Q15.0 */
       Q_15_0 ClockVal = (DCO_DCLK_MULTIPLIER << FRACBITS)/ FDiv_IDiv_Sum;
10001200:	687b      	ldr	r3, [r7, #4]
10001202:	22fa      	movs	r2, #250	; 0xfa
10001204:	0610      	lsls	r0, r2, #24
10001206:	1c19      	adds	r1, r3, #0
10001208:	f001 fa26 	bl	10002658 <__aeabi_uidiv>
1000120c:	1c03      	adds	r3, r0, #0
1000120e:	603b      	str	r3, [r7, #0]
       Clock = ((uint32_t)ClockVal) * KHZ_MULTIPLIER;
10001210:	683b      	ldr	r3, [r7, #0]
10001212:	22fa      	movs	r2, #250	; 0xfa
10001214:	0092      	lsls	r2, r2, #2
10001216:	4353      	muls	r3, r2
10001218:	617b      	str	r3, [r7, #20]
       Clock = Clock >> DCO_DCLK_DIVIDER;
1000121a:	697b      	ldr	r3, [r7, #20]
1000121c:	0a5b      	lsrs	r3, r3, #9
1000121e:	617b      	str	r3, [r7, #20]
10001220:	e001      	b.n	10001226 <SystemCoreClockUpdate+0x6a>
     }
  }
  else
  {
    /* Divider bypassed. Simply divide DCO_DCLK by 2 */
    Clock = MCLK_MHZ;
10001222:	4b05      	ldr	r3, [pc, #20]	; (10001238 <SystemCoreClockUpdate+0x7c>)
10001224:	617b      	str	r3, [r7, #20]
  }

  /* Finally with the math class over, update SystemCoreClock */
  SystemCoreClock = Clock;  
10001226:	4b05      	ldr	r3, [pc, #20]	; (1000123c <SystemCoreClockUpdate+0x80>)
10001228:	697a      	ldr	r2, [r7, #20]
1000122a:	601a      	str	r2, [r3, #0]
}
1000122c:	46bd      	mov	sp, r7
1000122e:	b006      	add	sp, #24
10001230:	bd80      	pop	{r7, pc}
10001232:	46c0      	nop			; (mov r8, r8)
10001234:	40010300 	.word	0x40010300
10001238:	01e84800 	.word	0x01e84800
1000123c:	20001958 	.word	0x20001958

10001240 <arm_radix4_butterfly_f32>:
void arm_radix4_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier)
{
10001240:	b5f0      	push	{r4, r5, r6, r7, lr}
10001242:	465f      	mov	r7, fp
10001244:	4656      	mov	r6, sl
10001246:	464d      	mov	r5, r9
10001248:	4644      	mov	r4, r8
1000124a:	b4f0      	push	{r4, r5, r6, r7}
1000124c:	b0a5      	sub	sp, #148	; 0x94
1000124e:	9317      	str	r3, [sp, #92]	; 0x5c
10001250:	9220      	str	r2, [sp, #128]	; 0x80
10001252:	9114      	str	r1, [sp, #80]	; 0x50
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10001254:	088a      	lsrs	r2, r1, #2
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001256:	9917      	ldr	r1, [sp, #92]	; 0x5c
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10001258:	9216      	str	r2, [sp, #88]	; 0x58
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
1000125a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
1000125c:	00cc      	lsls	r4, r1, #3
1000125e:	9916      	ldr	r1, [sp, #88]	; 0x58
10001260:	0077      	lsls	r7, r6, #1
10001262:	011b      	lsls	r3, r3, #4
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10001264:	9213      	str	r2, [sp, #76]	; 0x4c
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001266:	9411      	str	r4, [sp, #68]	; 0x44
10001268:	19ba      	adds	r2, r7, r6
1000126a:	00cc      	lsls	r4, r1, #3
1000126c:	9916      	ldr	r1, [sp, #88]	; 0x58
1000126e:	930f      	str	r3, [sp, #60]	; 0x3c
10001270:	00d3      	lsls	r3, r2, #3
10001272:	9a16      	ldr	r2, [sp, #88]	; 0x58
10001274:	1907      	adds	r7, r0, r4
10001276:	9412      	str	r4, [sp, #72]	; 0x48
10001278:	004c      	lsls	r4, r1, #1
1000127a:	1866      	adds	r6, r4, r1
1000127c:	1c05      	adds	r5, r0, #0
1000127e:	9310      	str	r3, [sp, #64]	; 0x40
10001280:	0113      	lsls	r3, r2, #4
10001282:	9a20      	ldr	r2, [sp, #128]	; 0x80
10001284:	3504      	adds	r5, #4
10001286:	9715      	str	r7, [sp, #84]	; 0x54
10001288:	00f7      	lsls	r7, r6, #3
1000128a:	9703      	str	r7, [sp, #12]
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier)
{
1000128c:	9022      	str	r0, [sp, #136]	; 0x88
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
1000128e:	9309      	str	r3, [sp, #36]	; 0x24
10001290:	9207      	str	r2, [sp, #28]
10001292:	9208      	str	r2, [sp, #32]
10001294:	9206      	str	r2, [sp, #24]
10001296:	1c04      	adds	r4, r0, #0
10001298:	1c2f      	adds	r7, r5, #0
      /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
1000129a:	6820      	ldr	r0, [r4, #0]
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
1000129c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
1000129e:	4683      	mov	fp, r0
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
100012a0:	58e1      	ldr	r1, [r4, r3]
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
100012a2:	683d      	ldr	r5, [r7, #0]

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
100012a4:	9e12      	ldr	r6, [sp, #72]	; 0x48

      xcIn = pSrc[(2u * i2)];
100012a6:	9809      	ldr	r0, [sp, #36]	; 0x24

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
100012a8:	59ba      	ldr	r2, [r7, r6]
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
100012aa:	4689      	mov	r9, r1
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
100012ac:	9501      	str	r5, [sp, #4]
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xdIn = pSrc[(2u * i3)];
100012ae:	9903      	ldr	r1, [sp, #12]
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
100012b0:	5825      	ldr	r5, [r4, r0]
      ycIn = pSrc[(2u * i2) + 1u];

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];
100012b2:	9803      	ldr	r0, [sp, #12]

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
100012b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
100012b6:	46aa      	mov	sl, r5

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
100012b8:	9202      	str	r2, [sp, #8]

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xdIn = pSrc[(2u * i3)];
100012ba:	5862      	ldr	r2, [r4, r1]
      ydIn = pSrc[(2u * i3) + 1u];
100012bc:	583d      	ldr	r5, [r7, r0]

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100012be:	4651      	mov	r1, sl
100012c0:	4658      	mov	r0, fp

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
100012c2:	58fe      	ldr	r6, [r7, r3]

      xdIn = pSrc[(2u * i3)];
100012c4:	4690      	mov	r8, r2
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100012c6:	f001 fa51 	bl	1000276c <__aeabi_fadd>
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100012ca:	4641      	mov	r1, r8

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100012cc:	900a      	str	r0, [sp, #40]	; 0x28
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100012ce:	4648      	mov	r0, r9
100012d0:	f001 fa4c 	bl	1000276c <__aeabi_fadd>
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100012d4:	1c31      	adds	r1, r6, #0
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100012d6:	900b      	str	r0, [sp, #44]	; 0x2c
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100012d8:	9801      	ldr	r0, [sp, #4]
100012da:	f001 fa47 	bl	1000276c <__aeabi_fadd>
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100012de:	1c29      	adds	r1, r5, #0
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100012e0:	900c      	str	r0, [sp, #48]	; 0x30
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100012e2:	9802      	ldr	r0, [sp, #8]
100012e4:	f001 fa42 	bl	1000276c <__aeabi_fadd>

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
100012e8:	9b06      	ldr	r3, [sp, #24]
      si2 = pCoef[(ia2 * 2u) + 1u];
100012ea:	9a06      	ldr	r2, [sp, #24]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
100012ec:	6819      	ldr	r1, [r3, #0]
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100012ee:	900d      	str	r0, [sp, #52]	; 0x34

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];
100012f0:	6850      	ldr	r0, [r2, #4]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
100012f2:	9104      	str	r1, [sp, #16]
      si2 = pCoef[(ia2 * 2u) + 1u];
100012f4:	9005      	str	r0, [sp, #20]

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100012f6:	4651      	mov	r1, sl
100012f8:	4658      	mov	r0, fp
100012fa:	f001 ff2f 	bl	1000315c <__aeabi_fsub>
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
100012fe:	4641      	mov	r1, r8
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001300:	4682      	mov	sl, r0
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
10001302:	4648      	mov	r0, r9
10001304:	f001 ff2a 	bl	1000315c <__aeabi_fsub>
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001308:	1c31      	adds	r1, r6, #0
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
1000130a:	4680      	mov	r8, r0
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
1000130c:	9801      	ldr	r0, [sp, #4]
1000130e:	f001 ff25 	bl	1000315c <__aeabi_fsub>
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10001312:	1c29      	adds	r1, r5, #0
      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001314:	1c06      	adds	r6, r0, #0
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10001316:	9802      	ldr	r0, [sp, #8]
10001318:	f001 ff20 	bl	1000315c <__aeabi_fsub>

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
1000131c:	990b      	ldr	r1, [sp, #44]	; 0x2c
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
1000131e:	1c05      	adds	r5, r0, #0

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001320:	980a      	ldr	r0, [sp, #40]	; 0x28
10001322:	f001 fa23 	bl	1000276c <__aeabi_fadd>
10001326:	6020      	str	r0, [r4, #0]
      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001328:	990d      	ldr	r1, [sp, #52]	; 0x34
1000132a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000132c:	f001 fa1e 	bl	1000276c <__aeabi_fadd>

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
10001330:	1c29      	adds	r1, r5, #0
      Ybminusd = ybIn - ydIn;

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001332:	6038      	str	r0, [r7, #0]

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
10001334:	4650      	mov	r0, sl
10001336:	f001 fa19 	bl	1000276c <__aeabi_fadd>
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
1000133a:	4641      	mov	r1, r8
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
1000133c:	9001      	str	r0, [sp, #4]
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
1000133e:	1c30      	adds	r0, r6, #0
10001340:	f001 ff0c 	bl	1000315c <__aeabi_fsub>
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10001344:	990b      	ldr	r1, [sp, #44]	; 0x2c
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
10001346:	9002      	str	r0, [sp, #8]
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10001348:	980a      	ldr	r0, [sp, #40]	; 0x28
1000134a:	f001 ff07 	bl	1000315c <__aeabi_fsub>
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
1000134e:	990d      	ldr	r1, [sp, #52]	; 0x34
      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10001350:	4681      	mov	r9, r0
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
10001352:	980c      	ldr	r0, [sp, #48]	; 0x30
10001354:	f001 ff02 	bl	1000315c <__aeabi_fsub>
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
10001358:	1c29      	adds	r1, r5, #0
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
1000135a:	4683      	mov	fp, r0
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
1000135c:	4650      	mov	r0, sl
1000135e:	f001 fefd 	bl	1000315c <__aeabi_fsub>
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
10001362:	1c31      	adds	r1, r6, #0
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
10001364:	900a      	str	r0, [sp, #40]	; 0x28
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
10001366:	4640      	mov	r0, r8
10001368:	f001 fa00 	bl	1000276c <__aeabi_fadd>

      co1 = pCoef[ia1 * 2u];
1000136c:	9b08      	ldr	r3, [sp, #32]
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
1000136e:	900b      	str	r0, [sp, #44]	; 0x2c
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
10001370:	9807      	ldr	r0, [sp, #28]
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
10001372:	9a08      	ldr	r2, [sp, #32]
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
10001374:	6819      	ldr	r1, [r3, #0]
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
10001376:	6843      	ldr	r3, [r0, #4]
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
10001378:	6806      	ldr	r6, [r0, #0]
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
1000137a:	9801      	ldr	r0, [sp, #4]
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
1000137c:	6855      	ldr	r5, [r2, #4]

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
1000137e:	469a      	mov	sl, r3
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
10001380:	4688      	mov	r8, r1
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10001382:	f001 fdbb 	bl	10002efc <__aeabi_fmul>
      Yb12_out = Yb12C_out * co1;
10001386:	4641      	mov	r1, r8
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10001388:	900c      	str	r0, [sp, #48]	; 0x30
      Yb12_out = Yb12C_out * co1;
1000138a:	9802      	ldr	r0, [sp, #8]
1000138c:	f001 fdb6 	bl	10002efc <__aeabi_fmul>
      Xc12_out = Xc12C_out * co2;
10001390:	9904      	ldr	r1, [sp, #16]
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
10001392:	900d      	str	r0, [sp, #52]	; 0x34
      Xc12_out = Xc12C_out * co2;
10001394:	4648      	mov	r0, r9
10001396:	f001 fdb1 	bl	10002efc <__aeabi_fmul>
      Yc12_out = Yc12C_out * co2;
1000139a:	9904      	ldr	r1, [sp, #16]
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
1000139c:	900e      	str	r0, [sp, #56]	; 0x38
      Yc12_out = Yc12C_out * co2;
1000139e:	4658      	mov	r0, fp
100013a0:	f001 fdac 	bl	10002efc <__aeabi_fmul>
      Xd12_out = Xd12C_out * co3;
100013a4:	1c31      	adds	r1, r6, #0
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
100013a6:	4680      	mov	r8, r0
      Xd12_out = Xd12C_out * co3;
100013a8:	980a      	ldr	r0, [sp, #40]	; 0x28
100013aa:	f001 fda7 	bl	10002efc <__aeabi_fmul>
      Yd12_out = Yd12C_out * co3;
100013ae:	1c31      	adds	r1, r6, #0

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
100013b0:	9004      	str	r0, [sp, #16]
      Yd12_out = Yd12C_out * co3;
100013b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
100013b4:	f001 fda2 	bl	10002efc <__aeabi_fmul>
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
100013b8:	9905      	ldr	r1, [sp, #20]
      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
100013ba:	1c06      	adds	r6, r0, #0
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
100013bc:	4658      	mov	r0, fp
100013be:	f001 fd9d 	bl	10002efc <__aeabi_fmul>
100013c2:	1c01      	adds	r1, r0, #0
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
100013c4:	980e      	ldr	r0, [sp, #56]	; 0x38
100013c6:	f001 f9d1 	bl	1000276c <__aeabi_fadd>
      Yc12_out -= p3;
      Xd12_out += p4;
      Yd12_out -= p5;

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;
100013ca:	9912      	ldr	r1, [sp, #72]	; 0x48
100013cc:	5060      	str	r0, [r4, r1]
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
100013ce:	9905      	ldr	r1, [sp, #20]
100013d0:	4648      	mov	r0, r9
100013d2:	f001 fd93 	bl	10002efc <__aeabi_fmul>
100013d6:	1c01      	adds	r1, r0, #0
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
      Yc12_out -= p3;
100013d8:	4640      	mov	r0, r8
100013da:	f001 febf 	bl	1000315c <__aeabi_fsub>

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
100013de:	9a12      	ldr	r2, [sp, #72]	; 0x48
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
         
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
100013e0:	1c29      	adds	r1, r5, #0

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
100013e2:	50b8      	str	r0, [r7, r2]
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
         
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
100013e4:	9802      	ldr	r0, [sp, #8]
100013e6:	f001 fd89 	bl	10002efc <__aeabi_fmul>
100013ea:	1c01      	adds	r1, r0, #0
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
100013ec:	980c      	ldr	r0, [sp, #48]	; 0x30
100013ee:	f001 f9bd 	bl	1000276c <__aeabi_fadd>

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
100013f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
100013f4:	1c29      	adds	r1, r5, #0

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
100013f6:	50e0      	str	r0, [r4, r3]
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
100013f8:	9801      	ldr	r0, [sp, #4]
100013fa:	f001 fd7f 	bl	10002efc <__aeabi_fmul>
100013fe:	1c01      	adds	r1, r0, #0
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
      Yb12_out -= p1;
10001400:	980d      	ldr	r0, [sp, #52]	; 0x34
10001402:	f001 feab 	bl	1000315c <__aeabi_fsub>

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
10001406:	9d09      	ldr	r5, [sp, #36]	; 0x24
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
10001408:	4651      	mov	r1, sl

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
1000140a:	5178      	str	r0, [r7, r5]
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
1000140c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000140e:	f001 fd75 	bl	10002efc <__aeabi_fmul>
10001412:	1c01      	adds	r1, r0, #0
      
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
      Yc12_out -= p3;
      Xd12_out += p4;
10001414:	9804      	ldr	r0, [sp, #16]
10001416:	f001 f9a9 	bl	1000276c <__aeabi_fadd>

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;

      /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;
1000141a:	9903      	ldr	r1, [sp, #12]
1000141c:	5060      	str	r0, [r4, r1]
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
1000141e:	4651      	mov	r1, sl
10001420:	980a      	ldr	r0, [sp, #40]	; 0x28
10001422:	f001 fd6b 	bl	10002efc <__aeabi_fmul>
10001426:	1c01      	adds	r1, r0, #0
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
      Yc12_out -= p3;
      Xd12_out += p4;
      Yd12_out -= p5;
10001428:	1c30      	adds	r0, r6, #0
1000142a:	f001 fe97 	bl	1000315c <__aeabi_fsub>

      /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;

      /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
      pSrc[(2u * i3) + 1u] = Yd12_out;
1000142e:	9e03      	ldr	r6, [sp, #12]
10001430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10001432:	51b8      	str	r0, [r7, r6]
10001434:	9806      	ldr	r0, [sp, #24]
10001436:	9d08      	ldr	r5, [sp, #32]
10001438:	9911      	ldr	r1, [sp, #68]	; 0x44
1000143a:	1883      	adds	r3, r0, r2
1000143c:	9807      	ldr	r0, [sp, #28]
1000143e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10001440:	186e      	adds	r6, r5, r1

      /*  Updating input index */
      i0++;

   }
   while(--j);
10001442:	9d15      	ldr	r5, [sp, #84]	; 0x54
10001444:	9306      	str	r3, [sp, #24]
10001446:	3408      	adds	r4, #8
10001448:	1883      	adds	r3, r0, r2
1000144a:	3708      	adds	r7, #8
1000144c:	9608      	str	r6, [sp, #32]
1000144e:	9307      	str	r3, [sp, #28]
10001450:	42ac      	cmp	r4, r5
10001452:	d000      	beq.n	10001456 <arm_radix4_butterfly_f32+0x216>
10001454:	e721      	b.n	1000129a <arm_radix4_butterfly_f32+0x5a>

   twidCoefModifier <<= 2u;
10001456:	9c17      	ldr	r4, [sp, #92]	; 0x5c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001458:	ae16      	add	r6, sp, #88	; 0x58
1000145a:	8830      	ldrh	r0, [r6, #0]
      i0++;

   }
   while(--j);

   twidCoefModifier <<= 2u;
1000145c:	00a7      	lsls	r7, r4, #2
1000145e:	b2b9      	uxth	r1, r7
10001460:	911f      	str	r1, [sp, #124]	; 0x7c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001462:	9023      	str	r0, [sp, #140]	; 0x8c
10001464:	9021      	str	r0, [sp, #132]	; 0x84
10001466:	2804      	cmp	r0, #4
10001468:	d800      	bhi.n	1000146c <arm_radix4_butterfly_f32+0x22c>
1000146a:	e129      	b.n	100016c0 <arm_radix4_butterfly_f32+0x480>
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
1000146c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
1000146e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001470:	0893      	lsrs	r3, r2, #2
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001472:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001474:	931e      	str	r3, [sp, #120]	; 0x78
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001476:	0070      	lsls	r0, r6, #1
10001478:	1982      	adds	r2, r0, r6
1000147a:	00ec      	lsls	r4, r5, #3
1000147c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
1000147e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
10001480:	9e1e      	ldr	r6, [sp, #120]	; 0x78
10001482:	0139      	lsls	r1, r7, #4
10001484:	3b01      	subs	r3, #1
10001486:	9f1e      	ldr	r7, [sp, #120]	; 0x78
10001488:	941a      	str	r4, [sp, #104]	; 0x68
1000148a:	0070      	lsls	r0, r6, #1
1000148c:	00ec      	lsls	r4, r5, #3
1000148e:	931d      	str	r3, [sp, #116]	; 0x74
10001490:	9407      	str	r4, [sp, #28]
10001492:	00d3      	lsls	r3, r2, #3
10001494:	9c20      	ldr	r4, [sp, #128]	; 0x80
10001496:	1982      	adds	r2, r0, r6
10001498:	9d22      	ldr	r5, [sp, #136]	; 0x88
1000149a:	911b      	str	r1, [sp, #108]	; 0x6c
1000149c:	931c      	str	r3, [sp, #112]	; 0x70
1000149e:	0139      	lsls	r1, r7, #4
100014a0:	00d3      	lsls	r3, r2, #3
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
100014a2:	2700      	movs	r7, #0
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
100014a4:	9106      	str	r1, [sp, #24]
100014a6:	9308      	str	r3, [sp, #32]
100014a8:	9519      	str	r5, [sp, #100]	; 0x64
100014aa:	9418      	str	r4, [sp, #96]	; 0x60
100014ac:	9417      	str	r4, [sp, #92]	; 0x5c
100014ae:	9416      	str	r4, [sp, #88]	; 0x58
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
100014b0:	9715      	str	r7, [sp, #84]	; 0x54
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
100014b2:	9916      	ldr	r1, [sp, #88]	; 0x58
         si1 = pCoef[(ia1 * 2u) + 1u];
100014b4:	9816      	ldr	r0, [sp, #88]	; 0x58
         co2 = pCoef[ia2 * 2u];
100014b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
100014b8:	680e      	ldr	r6, [r1, #0]
         si1 = pCoef[(ia1 * 2u) + 1u];
100014ba:	6842      	ldr	r2, [r0, #4]
         co2 = pCoef[ia2 * 2u];
100014bc:	681d      	ldr	r5, [r3, #0]
         si2 = pCoef[(ia2 * 2u) + 1u];
100014be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
         co3 = pCoef[ia3 * 2u];
100014c0:	9918      	ldr	r1, [sp, #96]	; 0x60
         si3 = pCoef[(ia3 * 2u) + 1u];
100014c2:	9818      	ldr	r0, [sp, #96]	; 0x60
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
100014c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
100014c6:	6867      	ldr	r7, [r4, #4]
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
100014c8:	960c      	str	r6, [sp, #48]	; 0x30
         si1 = pCoef[(ia1 * 2u) + 1u];
100014ca:	920d      	str	r2, [sp, #52]	; 0x34
         co2 = pCoef[ia2 * 2u];
100014cc:	950e      	str	r5, [sp, #56]	; 0x38
         si2 = pCoef[(ia2 * 2u) + 1u];
         co3 = pCoef[ia3 * 2u];
100014ce:	680e      	ldr	r6, [r1, #0]
         si3 = pCoef[(ia3 * 2u) + 1u];
100014d0:	6842      	ldr	r2, [r0, #4]

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
      
         i0 = j;
100014d2:	9d15      	ldr	r5, [sp, #84]	; 0x54
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
100014d4:	3304      	adds	r3, #4
100014d6:	9c19      	ldr	r4, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
100014d8:	970f      	str	r7, [sp, #60]	; 0x3c
         co3 = pCoef[ia3 * 2u];
100014da:	9610      	str	r6, [sp, #64]	; 0x40
         si3 = pCoef[(ia3 * 2u) + 1u];
100014dc:	9211      	str	r2, [sp, #68]	; 0x44

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
      
         i0 = j;
100014de:	9509      	str	r5, [sp, #36]	; 0x24
100014e0:	1c1f      	adds	r7, r3, #0
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
100014e2:	6821      	ldr	r1, [r4, #0]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
100014e4:	9807      	ldr	r0, [sp, #28]
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
100014e6:	468b      	mov	fp, r1
            yaIn = pSrc[(2u * i0) + 1u];
100014e8:	683e      	ldr	r6, [r7, #0]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
100014ea:	9906      	ldr	r1, [sp, #24]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
100014ec:	5822      	ldr	r2, [r4, r0]
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];
100014ee:	9603      	str	r6, [sp, #12]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];
100014f0:	9806      	ldr	r0, [sp, #24]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
100014f2:	5866      	ldr	r6, [r4, r1]
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
100014f4:	9908      	ldr	r1, [sp, #32]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
100014f6:	4691      	mov	r9, r2
            ybIn = pSrc[(2u * i1) + 1u];
100014f8:	9b07      	ldr	r3, [sp, #28]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
100014fa:	9a08      	ldr	r2, [sp, #32]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
100014fc:	46b2      	mov	sl, r6
            ycIn = pSrc[(2u * i2) + 1u];
100014fe:	583e      	ldr	r6, [r7, r0]

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001500:	5878      	ldr	r0, [r7, r1]

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];
10001502:	58fd      	ldr	r5, [r7, r3]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001504:	58a3      	ldr	r3, [r4, r2]
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001506:	4651      	mov	r1, sl

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001508:	9001      	str	r0, [sp, #4]

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
1000150a:	4658      	mov	r0, fp
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
1000150c:	4698      	mov	r8, r3
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
1000150e:	f001 fe25 	bl	1000315c <__aeabi_fsub>
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001512:	4641      	mov	r1, r8

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001514:	9002      	str	r0, [sp, #8]
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001516:	4648      	mov	r0, r9
10001518:	f001 fe20 	bl	1000315c <__aeabi_fsub>
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
1000151c:	1c31      	adds	r1, r6, #0
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
1000151e:	9004      	str	r0, [sp, #16]
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001520:	9803      	ldr	r0, [sp, #12]
10001522:	f001 fe1b 	bl	1000315c <__aeabi_fsub>
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001526:	9901      	ldr	r1, [sp, #4]
            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001528:	9005      	str	r0, [sp, #20]
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
1000152a:	1c28      	adds	r0, r5, #0
1000152c:	f001 fe16 	bl	1000315c <__aeabi_fsub>

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001530:	4651      	mov	r1, sl
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001532:	900a      	str	r0, [sp, #40]	; 0x28

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001534:	4658      	mov	r0, fp
10001536:	f001 f919 	bl	1000276c <__aeabi_fadd>
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
1000153a:	4641      	mov	r1, r8
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
1000153c:	4682      	mov	sl, r0
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
1000153e:	4648      	mov	r0, r9
10001540:	f001 f914 	bl	1000276c <__aeabi_fadd>
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001544:	1c31      	adds	r1, r6, #0
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001546:	4680      	mov	r8, r0
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001548:	9803      	ldr	r0, [sp, #12]
1000154a:	f001 f90f 	bl	1000276c <__aeabi_fadd>
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
1000154e:	9901      	ldr	r1, [sp, #4]
            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001550:	1c06      	adds	r6, r0, #0
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001552:	1c28      	adds	r0, r5, #0
10001554:	f001 f90a 	bl	1000276c <__aeabi_fadd>

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
10001558:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
1000155a:	1c05      	adds	r5, r0, #0

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
1000155c:	9802      	ldr	r0, [sp, #8]
1000155e:	f001 f905 	bl	1000276c <__aeabi_fadd>
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
10001562:	9904      	ldr	r1, [sp, #16]
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
10001564:	9003      	str	r0, [sp, #12]
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
10001566:	9805      	ldr	r0, [sp, #20]
10001568:	f001 fdf8 	bl	1000315c <__aeabi_fsub>
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
1000156c:	4641      	mov	r1, r8
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
1000156e:	4681      	mov	r9, r0
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001570:	4650      	mov	r0, sl
10001572:	f001 fdf3 	bl	1000315c <__aeabi_fsub>
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001576:	1c29      	adds	r1, r5, #0
            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001578:	9001      	str	r0, [sp, #4]
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
1000157a:	1c30      	adds	r0, r6, #0
1000157c:	f001 fdee 	bl	1000315c <__aeabi_fsub>
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
10001580:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001582:	900b      	str	r0, [sp, #44]	; 0x2c
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
10001584:	9802      	ldr	r0, [sp, #8]
10001586:	f001 fde9 	bl	1000315c <__aeabi_fsub>
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
1000158a:	9905      	ldr	r1, [sp, #20]
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
1000158c:	4683      	mov	fp, r0
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
1000158e:	9804      	ldr	r0, [sp, #16]
10001590:	f001 f8ec 	bl	1000276c <__aeabi_fadd>

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001594:	4641      	mov	r1, r8
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
10001596:	9002      	str	r0, [sp, #8]

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001598:	4650      	mov	r0, sl
1000159a:	f001 f8e7 	bl	1000276c <__aeabi_fadd>
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
1000159e:	1c29      	adds	r1, r5, #0
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
100015a0:	6020      	str	r0, [r4, #0]
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
100015a2:	1c30      	adds	r0, r6, #0
100015a4:	f001 f8e2 	bl	1000276c <__aeabi_fadd>

            Xb12_out = Xb12C_out * co1;
100015a8:	990c      	ldr	r1, [sp, #48]	; 0x30
            Xd12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
100015aa:	6038      	str	r0, [r7, #0]

            Xb12_out = Xb12C_out * co1;
100015ac:	9803      	ldr	r0, [sp, #12]
100015ae:	f001 fca5 	bl	10002efc <__aeabi_fmul>
            Yb12_out = Yb12C_out * co1;
100015b2:	990c      	ldr	r1, [sp, #48]	; 0x30
            Yd12C_out = (Xbminusd + Yaminusc);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
100015b4:	4680      	mov	r8, r0
            Yb12_out = Yb12C_out * co1;
100015b6:	4648      	mov	r0, r9
100015b8:	f001 fca0 	bl	10002efc <__aeabi_fmul>
            Xc12_out = Xc12C_out * co2;
100015bc:	990e      	ldr	r1, [sp, #56]	; 0x38

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
100015be:	1c06      	adds	r6, r0, #0
            Xc12_out = Xc12C_out * co2;
100015c0:	9801      	ldr	r0, [sp, #4]
100015c2:	f001 fc9b 	bl	10002efc <__aeabi_fmul>
            Yc12_out = Yc12C_out * co2;
100015c6:	990e      	ldr	r1, [sp, #56]	; 0x38
            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
100015c8:	9004      	str	r0, [sp, #16]
            Yc12_out = Yc12C_out * co2;
100015ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
100015cc:	f001 fc96 	bl	10002efc <__aeabi_fmul>
            Xd12_out = Xd12C_out * co3;
100015d0:	9910      	ldr	r1, [sp, #64]	; 0x40
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
100015d2:	4682      	mov	sl, r0
            Xd12_out = Xd12C_out * co3;
100015d4:	4658      	mov	r0, fp
100015d6:	f001 fc91 	bl	10002efc <__aeabi_fmul>
            Yd12_out = Yd12C_out * co3;
100015da:	9910      	ldr	r1, [sp, #64]	; 0x40

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
100015dc:	1c05      	adds	r5, r0, #0
            Yd12_out = Yd12C_out * co3;
100015de:	9802      	ldr	r0, [sp, #8]
100015e0:	f001 fc8c 	bl	10002efc <__aeabi_fmul>
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
100015e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;
100015e6:	9005      	str	r0, [sp, #20]
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
100015e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100015ea:	f001 fc87 	bl	10002efc <__aeabi_fmul>
100015ee:	1c01      	adds	r1, r0, #0
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
100015f0:	9804      	ldr	r0, [sp, #16]
100015f2:	f001 f8bb 	bl	1000276c <__aeabi_fadd>
            Yc12_out -= p3;
            Xd12_out += p4;
            Yd12_out -= p5;

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
100015f6:	9a07      	ldr	r2, [sp, #28]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
100015f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Yc12_out -= p3;
            Xd12_out += p4;
            Yd12_out -= p5;

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
100015fa:	50a0      	str	r0, [r4, r2]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
100015fc:	9801      	ldr	r0, [sp, #4]
100015fe:	f001 fc7d 	bl	10002efc <__aeabi_fmul>
10001602:	1c01      	adds	r1, r0, #0
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
            Yc12_out -= p3;
10001604:	4650      	mov	r0, sl
10001606:	f001 fda9 	bl	1000315c <__aeabi_fsub>

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;

            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;
1000160a:	9b07      	ldr	r3, [sp, #28]
1000160c:	50f8      	str	r0, [r7, r3]
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;
         
            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
1000160e:	990d      	ldr	r1, [sp, #52]	; 0x34
10001610:	4648      	mov	r0, r9
10001612:	f001 fc73 	bl	10002efc <__aeabi_fmul>
10001616:	1c01      	adds	r1, r0, #0
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
10001618:	4640      	mov	r0, r8
1000161a:	f001 f8a7 	bl	1000276c <__aeabi_fadd>

            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;
1000161e:	9906      	ldr	r1, [sp, #24]
10001620:	5060      	str	r0, [r4, r1]
            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
10001622:	990d      	ldr	r1, [sp, #52]	; 0x34
10001624:	9803      	ldr	r0, [sp, #12]
10001626:	f001 fc69 	bl	10002efc <__aeabi_fmul>
1000162a:	1c01      	adds	r1, r0, #0
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
            Yb12_out -= p1;
1000162c:	1c30      	adds	r0, r6, #0
1000162e:	f001 fd95 	bl	1000315c <__aeabi_fsub>

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
10001632:	9e06      	ldr	r6, [sp, #24]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10001634:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
10001636:	51b8      	str	r0, [r7, r6]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10001638:	9802      	ldr	r0, [sp, #8]
1000163a:	f001 fc5f 	bl	10002efc <__aeabi_fmul>
1000163e:	1c01      	adds	r1, r0, #0
            
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
            Yc12_out -= p3;
            Xd12_out += p4;
10001640:	1c28      	adds	r0, r5, #0
10001642:	f001 f893 	bl	1000276c <__aeabi_fadd>

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
10001646:	9d08      	ldr	r5, [sp, #32]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10001648:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
1000164a:	5160      	str	r0, [r4, r5]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
1000164c:	4658      	mov	r0, fp
1000164e:	f001 fc55 	bl	10002efc <__aeabi_fmul>
10001652:	1c01      	adds	r1, r0, #0
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
            Yc12_out -= p3;
            Xd12_out += p4;
            Yd12_out -= p5;
10001654:	9805      	ldr	r0, [sp, #20]
10001656:	f001 fd81 	bl	1000315c <__aeabi_fsub>

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
1000165a:	9a08      	ldr	r2, [sp, #32]

            i0 += n1;
1000165c:	9b13      	ldr	r3, [sp, #76]	; 0x4c

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
1000165e:	50b8      	str	r0, [r7, r2]

            i0 += n1;
10001660:	9809      	ldr	r0, [sp, #36]	; 0x24
10001662:	9e12      	ldr	r6, [sp, #72]	; 0x48
10001664:	18c1      	adds	r1, r0, r3
10001666:	9109      	str	r1, [sp, #36]	; 0x24
         } while(i0 < fftLen);
10001668:	9d14      	ldr	r5, [sp, #80]	; 0x50
1000166a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000166c:	19a4      	adds	r4, r4, r6
1000166e:	19bf      	adds	r7, r7, r6
10001670:	4295      	cmp	r5, r2
10001672:	d900      	bls.n	10001676 <arm_radix4_butterfly_f32+0x436>
10001674:	e735      	b.n	100014e2 <arm_radix4_butterfly_f32+0x2a2>
         j++;
10001676:	9815      	ldr	r0, [sp, #84]	; 0x54
10001678:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000167a:	991a      	ldr	r1, [sp, #104]	; 0x68
1000167c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
1000167e:	3001      	adds	r0, #1
10001680:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
10001682:	185e      	adds	r6, r3, r1
10001684:	9015      	str	r0, [sp, #84]	; 0x54
10001686:	9919      	ldr	r1, [sp, #100]	; 0x64
10001688:	9818      	ldr	r0, [sp, #96]	; 0x60
1000168a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
1000168c:	19e5      	adds	r5, r4, r7
1000168e:	9616      	str	r6, [sp, #88]	; 0x58
      } while(j <= (n2 - 1u));
10001690:	9c1d      	ldr	r4, [sp, #116]	; 0x74
10001692:	9e15      	ldr	r6, [sp, #84]	; 0x54
10001694:	1883      	adds	r3, r0, r2
10001696:	3108      	adds	r1, #8
10001698:	9517      	str	r5, [sp, #92]	; 0x5c
1000169a:	9318      	str	r3, [sp, #96]	; 0x60
1000169c:	9119      	str	r1, [sp, #100]	; 0x64
1000169e:	42a6      	cmp	r6, r4
100016a0:	d800      	bhi.n	100016a4 <arm_radix4_butterfly_f32+0x464>
100016a2:	e706      	b.n	100014b2 <arm_radix4_butterfly_f32+0x272>
      twidCoefModifier <<= 2u;
100016a4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100016a6:	9a21      	ldr	r2, [sp, #132]	; 0x84

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
100016a8:	00bd      	lsls	r5, r7, #2
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
100016aa:	991e      	ldr	r1, [sp, #120]	; 0x78

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
100016ac:	b2a8      	uxth	r0, r5
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100016ae:	0893      	lsrs	r3, r2, #2

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
100016b0:	901f      	str	r0, [sp, #124]	; 0x7c
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100016b2:	9321      	str	r3, [sp, #132]	; 0x84
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
100016b4:	9113      	str	r1, [sp, #76]	; 0x4c
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100016b6:	2b04      	cmp	r3, #4
100016b8:	d902      	bls.n	100016c0 <arm_radix4_butterfly_f32+0x480>
100016ba:	00cf      	lsls	r7, r1, #3
100016bc:	9712      	str	r7, [sp, #72]	; 0x48
100016be:	e6d5      	b.n	1000146c <arm_radix4_butterfly_f32+0x22c>
         si3 = pCoef[(ia3 * 2u) + 1u];

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
      
         i0 = j;
100016c0:	9c22      	ldr	r4, [sp, #136]	; 0x88
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100016c2:	9f23      	ldr	r7, [sp, #140]	; 0x8c

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
100016c4:	6865      	ldr	r5, [r4, #4]
      xbIn = ptr1[2];
100016c6:	68a0      	ldr	r0, [r4, #8]
   ptr1 = &pSrc[0];

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
100016c8:	6826      	ldr	r6, [r4, #0]
      yaIn = ptr1[1];
100016ca:	46ab      	mov	fp, r5
      xbIn = ptr1[2];
100016cc:	4681      	mov	r9, r0
      ybIn = ptr1[3];
      xcIn = ptr1[4];
100016ce:	6925      	ldr	r5, [r4, #16]
      ycIn = ptr1[5];
      xdIn = ptr1[6];
100016d0:	69a1      	ldr	r1, [r4, #24]
      ydIn = ptr1[7];
100016d2:	69e0      	ldr	r0, [r4, #28]
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
100016d4:	68e2      	ldr	r2, [r4, #12]
      xcIn = ptr1[4];
      ycIn = ptr1[5];
100016d6:	6963      	ldr	r3, [r4, #20]
      xdIn = ptr1[6];
100016d8:	4688      	mov	r8, r1
      ydIn = ptr1[7];
100016da:	9007      	str	r0, [sp, #28]

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100016dc:	1c29      	adds	r1, r5, #0
100016de:	1c30      	adds	r0, r6, #0
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
100016e0:	469a      	mov	sl, r3
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
100016e2:	9206      	str	r2, [sp, #24]
      ycIn = ptr1[5];
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100016e4:	f001 f842 	bl	1000276c <__aeabi_fadd>

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100016e8:	1c29      	adds	r1, r5, #0
      ycIn = ptr1[5];
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100016ea:	9008      	str	r0, [sp, #32]

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100016ec:	1c30      	adds	r0, r6, #0
100016ee:	f001 fd35 	bl	1000315c <__aeabi_fsub>

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100016f2:	4651      	mov	r1, sl

      /* xa + xc */
      Xaplusc = xaIn + xcIn;

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100016f4:	1c05      	adds	r5, r0, #0

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100016f6:	4658      	mov	r0, fp
100016f8:	f001 f838 	bl	1000276c <__aeabi_fadd>

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100016fc:	4651      	mov	r1, sl

      /* xa - xc */
      Xaminusc = xaIn - xcIn;

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100016fe:	1c06      	adds	r6, r0, #0

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001700:	4658      	mov	r0, fp
10001702:	f001 fd2b 	bl	1000315c <__aeabi_fsub>

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001706:	4641      	mov	r1, r8

      /* ya + yc */
      Yaplusc = yaIn + ycIn;

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001708:	9009      	str	r0, [sp, #36]	; 0x24

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
1000170a:	4648      	mov	r0, r9
1000170c:	f001 f82e 	bl	1000276c <__aeabi_fadd>

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001710:	9907      	ldr	r1, [sp, #28]

      /* ya - yc */
      Yaminusc = yaIn - ycIn;

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001712:	4682      	mov	sl, r0

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001714:	9806      	ldr	r0, [sp, #24]
10001716:	f001 f829 	bl	1000276c <__aeabi_fadd>

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
1000171a:	4641      	mov	r1, r8

      /* xb + xd */
      Xbplusd = xbIn + xdIn;

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
1000171c:	4683      	mov	fp, r0

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
1000171e:	4648      	mov	r0, r9
10001720:	f001 fd1c 	bl	1000315c <__aeabi_fsub>

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10001724:	9907      	ldr	r1, [sp, #28]

      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
10001726:	4680      	mov	r8, r0

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10001728:	9806      	ldr	r0, [sp, #24]
1000172a:	f001 fd17 	bl	1000315c <__aeabi_fsub>

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
1000172e:	4651      	mov	r1, sl

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10001730:	4681      	mov	r9, r0

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
10001732:	9808      	ldr	r0, [sp, #32]
10001734:	f001 f81a 	bl	1000276c <__aeabi_fadd>
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
10001738:	4659      	mov	r1, fp
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
1000173a:	6020      	str	r0, [r4, #0]
      Ybminusd = ybIn - ydIn;

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
1000173c:	1c30      	adds	r0, r6, #0
1000173e:	f001 f815 	bl	1000276c <__aeabi_fadd>
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
10001742:	4651      	mov	r1, sl
      a6 = (Xaminusc - Ybminusd);
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
      ptr1[1] = a1;
10001744:	6060      	str	r0, [r4, #4]
      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
10001746:	9808      	ldr	r0, [sp, #32]
10001748:	f001 fd08 	bl	1000315c <__aeabi_fsub>
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
1000174c:	4659      	mov	r1, fp
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
1000174e:	60a0      	str	r0, [r4, #8]
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
10001750:	1c30      	adds	r0, r6, #0
10001752:	f001 fd03 	bl	1000315c <__aeabi_fsub>
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
10001756:	4649      	mov	r1, r9
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
10001758:	60e0      	str	r0, [r4, #12]
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
1000175a:	1c28      	adds	r0, r5, #0
1000175c:	f001 f806 	bl	1000276c <__aeabi_fadd>
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
10001760:	4641      	mov	r1, r8
   
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
10001762:	6120      	str	r0, [r4, #16]
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
10001764:	9809      	ldr	r0, [sp, #36]	; 0x24
10001766:	f001 fcf9 	bl	1000315c <__aeabi_fsub>
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
1000176a:	4649      	mov	r1, r9
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
      ptr1[5] = a5;
1000176c:	6160      	str	r0, [r4, #20]
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
1000176e:	1c28      	adds	r0, r5, #0
10001770:	f001 fcf4 	bl	1000315c <__aeabi_fsub>
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
10001774:	9909      	ldr	r1, [sp, #36]	; 0x24
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
      ptr1[5] = a5;
      ptr1[6] = a6;
10001776:	61a0      	str	r0, [r4, #24]
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
10001778:	4640      	mov	r0, r8
1000177a:	f000 fff7 	bl	1000276c <__aeabi_fadd>
      ptr1[6] = a6;
      ptr1[7] = a7;

      /* increment pointer by 8 */
      ptr1 += 8u;
   } while(--j);
1000177e:	3f01      	subs	r7, #1
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
      ptr1[5] = a5;
      ptr1[6] = a6;
      ptr1[7] = a7;
10001780:	61e0      	str	r0, [r4, #28]

      /* increment pointer by 8 */
      ptr1 += 8u;
10001782:	3420      	adds	r4, #32
   } while(--j);
10001784:	2f00      	cmp	r7, #0
10001786:	d19d      	bne.n	100016c4 <arm_radix4_butterfly_f32+0x484>
      twidCoefModifier <<= 2u;
   }

#endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */

}
10001788:	b025      	add	sp, #148	; 0x94
1000178a:	bc3c      	pop	{r2, r3, r4, r5}
1000178c:	4690      	mov	r8, r2
1000178e:	4699      	mov	r9, r3
10001790:	46a2      	mov	sl, r4
10001792:	46ab      	mov	fp, r5
10001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001796:	46c0      	nop			; (mov r8, r8)

10001798 <arm_radix4_butterfly_inverse_f32>:
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier,
float32_t onebyfftLen)
{
10001798:	b5f0      	push	{r4, r5, r6, r7, lr}
1000179a:	465f      	mov	r7, fp
1000179c:	4656      	mov	r6, sl
1000179e:	464d      	mov	r5, r9
100017a0:	4644      	mov	r4, r8
100017a2:	b4f0      	push	{r4, r5, r6, r7}
100017a4:	b0a5      	sub	sp, #148	; 0x94
100017a6:	9317      	str	r3, [sp, #92]	; 0x5c
100017a8:	9220      	str	r2, [sp, #128]	; 0x80
100017aa:	9114      	str	r1, [sp, #80]	; 0x50
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
100017ac:	088a      	lsrs	r2, r1, #2
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100017ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
100017b0:	9216      	str	r2, [sp, #88]	; 0x58
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100017b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
100017b4:	00cc      	lsls	r4, r1, #3
100017b6:	9916      	ldr	r1, [sp, #88]	; 0x58
100017b8:	0077      	lsls	r7, r6, #1
100017ba:	011b      	lsls	r3, r3, #4
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
100017bc:	9213      	str	r2, [sp, #76]	; 0x4c
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100017be:	9410      	str	r4, [sp, #64]	; 0x40
100017c0:	19ba      	adds	r2, r7, r6
100017c2:	00cc      	lsls	r4, r1, #3
100017c4:	9916      	ldr	r1, [sp, #88]	; 0x58
100017c6:	9311      	str	r3, [sp, #68]	; 0x44
100017c8:	00d3      	lsls	r3, r2, #3
100017ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
100017cc:	1907      	adds	r7, r0, r4
100017ce:	9412      	str	r4, [sp, #72]	; 0x48
100017d0:	004c      	lsls	r4, r1, #1
100017d2:	1866      	adds	r6, r4, r1
100017d4:	1c05      	adds	r5, r0, #0
100017d6:	930f      	str	r3, [sp, #60]	; 0x3c
100017d8:	0113      	lsls	r3, r2, #4
100017da:	9a20      	ldr	r2, [sp, #128]	; 0x80
100017dc:	3504      	adds	r5, #4
100017de:	9715      	str	r7, [sp, #84]	; 0x54
100017e0:	00f7      	lsls	r7, r6, #3
100017e2:	9702      	str	r7, [sp, #8]
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier,
float32_t onebyfftLen)
{
100017e4:	9022      	str	r0, [sp, #136]	; 0x88
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100017e6:	9309      	str	r3, [sp, #36]	; 0x24
100017e8:	9207      	str	r2, [sp, #28]
100017ea:	9206      	str	r2, [sp, #24]
100017ec:	9208      	str	r2, [sp, #32]
100017ee:	1c04      	adds	r4, r0, #0
100017f0:	1c2f      	adds	r7, r5, #0

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
100017f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
100017f4:	6820      	ldr	r0, [r4, #0]
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
100017f6:	9a12      	ldr	r2, [sp, #72]	; 0x48

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
100017f8:	58e1      	ldr	r1, [r4, r3]
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
100017fa:	683d      	ldr	r5, [r7, #0]
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
100017fc:	4683      	mov	fp, r0
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
100017fe:	58a0      	ldr	r0, [r4, r2]

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
10001800:	468a      	mov	sl, r1
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
10001802:	9501      	str	r5, [sp, #4]
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xdIn = pSrc[(2u * i3)];
10001804:	9902      	ldr	r1, [sp, #8]

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
10001806:	9d12      	ldr	r5, [sp, #72]	; 0x48
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
10001808:	4681      	mov	r9, r0
      ybIn = pSrc[(2u * i1) + 1u];

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];
1000180a:	9802      	ldr	r0, [sp, #8]

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
1000180c:	597b      	ldr	r3, [r7, r5]

      xdIn = pSrc[(2u * i3)];
1000180e:	5862      	ldr	r2, [r4, r1]
      ydIn = pSrc[(2u * i3) + 1u];
10001810:	583d      	ldr	r5, [r7, r0]

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001812:	4651      	mov	r1, sl
10001814:	4658      	mov	r0, fp
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xdIn = pSrc[(2u * i3)];
10001816:	4690      	mov	r8, r2

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
10001818:	9303      	str	r3, [sp, #12]

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
1000181a:	f000 ffa7 	bl	1000276c <__aeabi_fadd>
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
1000181e:	4641      	mov	r1, r8

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001820:	900a      	str	r0, [sp, #40]	; 0x28
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001822:	4648      	mov	r0, r9
10001824:	f000 ffa2 	bl	1000276c <__aeabi_fadd>
      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
10001828:	9e09      	ldr	r6, [sp, #36]	; 0x24
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
1000182a:	900b      	str	r0, [sp, #44]	; 0x2c
      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
1000182c:	59be      	ldr	r6, [r7, r6]
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
1000182e:	9801      	ldr	r0, [sp, #4]
10001830:	1c31      	adds	r1, r6, #0
10001832:	f000 ff9b 	bl	1000276c <__aeabi_fadd>
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001836:	1c29      	adds	r1, r5, #0
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10001838:	900c      	str	r0, [sp, #48]	; 0x30
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
1000183a:	9803      	ldr	r0, [sp, #12]
1000183c:	f000 ff96 	bl	1000276c <__aeabi_fadd>

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
10001840:	9b08      	ldr	r3, [sp, #32]
      si2 = pCoef[(ia2 * 2u) + 1u];
10001842:	9a08      	ldr	r2, [sp, #32]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
10001844:	6819      	ldr	r1, [r3, #0]
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001846:	900d      	str	r0, [sp, #52]	; 0x34

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];
10001848:	6850      	ldr	r0, [r2, #4]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
1000184a:	9104      	str	r1, [sp, #16]
      si2 = pCoef[(ia2 * 2u) + 1u];
1000184c:	9005      	str	r0, [sp, #20]

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
1000184e:	4651      	mov	r1, sl
10001850:	4658      	mov	r0, fp
10001852:	f001 fc83 	bl	1000315c <__aeabi_fsub>
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
10001856:	4641      	mov	r1, r8
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001858:	4682      	mov	sl, r0
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
1000185a:	4648      	mov	r0, r9
1000185c:	f001 fc7e 	bl	1000315c <__aeabi_fsub>
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001860:	1c31      	adds	r1, r6, #0
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
10001862:	4680      	mov	r8, r0
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001864:	9801      	ldr	r0, [sp, #4]
10001866:	f001 fc79 	bl	1000315c <__aeabi_fsub>
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
1000186a:	1c29      	adds	r1, r5, #0
      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
1000186c:	1c06      	adds	r6, r0, #0
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
1000186e:	9803      	ldr	r0, [sp, #12]
10001870:	f001 fc74 	bl	1000315c <__aeabi_fsub>

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001874:	990b      	ldr	r1, [sp, #44]	; 0x2c
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10001876:	1c05      	adds	r5, r0, #0

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001878:	980a      	ldr	r0, [sp, #40]	; 0x28
1000187a:	f000 ff77 	bl	1000276c <__aeabi_fadd>
1000187e:	6020      	str	r0, [r4, #0]

      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001880:	990d      	ldr	r1, [sp, #52]	; 0x34
10001882:	980c      	ldr	r0, [sp, #48]	; 0x30
10001884:	f000 ff72 	bl	1000276c <__aeabi_fadd>

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
10001888:	1c29      	adds	r1, r5, #0

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;

      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
1000188a:	6038      	str	r0, [r7, #0]

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
1000188c:	4650      	mov	r0, sl
1000188e:	f001 fc65 	bl	1000315c <__aeabi_fsub>
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
10001892:	4641      	mov	r1, r8

      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
10001894:	9001      	str	r0, [sp, #4]
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
10001896:	1c30      	adds	r0, r6, #0
10001898:	f000 ff68 	bl	1000276c <__aeabi_fadd>
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
1000189c:	990b      	ldr	r1, [sp, #44]	; 0x2c
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
1000189e:	9003      	str	r0, [sp, #12]
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
100018a0:	980a      	ldr	r0, [sp, #40]	; 0x28
100018a2:	f001 fc5b 	bl	1000315c <__aeabi_fsub>
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
100018a6:	990d      	ldr	r1, [sp, #52]	; 0x34
      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
100018a8:	4681      	mov	r9, r0
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
100018aa:	980c      	ldr	r0, [sp, #48]	; 0x30
100018ac:	f001 fc56 	bl	1000315c <__aeabi_fsub>
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
100018b0:	1c29      	adds	r1, r5, #0
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
100018b2:	4683      	mov	fp, r0
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
100018b4:	4650      	mov	r0, sl
100018b6:	f000 ff59 	bl	1000276c <__aeabi_fadd>
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
100018ba:	4641      	mov	r1, r8
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
100018bc:	900a      	str	r0, [sp, #40]	; 0x28
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
100018be:	1c30      	adds	r0, r6, #0
100018c0:	f001 fc4c 	bl	1000315c <__aeabi_fsub>

      co1 = pCoef[ia1 * 2u];
100018c4:	9b06      	ldr	r3, [sp, #24]
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
100018c6:	900b      	str	r0, [sp, #44]	; 0x2c
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
100018c8:	9807      	ldr	r0, [sp, #28]
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
100018ca:	9a06      	ldr	r2, [sp, #24]
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
100018cc:	6819      	ldr	r1, [r3, #0]
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
100018ce:	6843      	ldr	r3, [r0, #4]
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
100018d0:	6806      	ldr	r6, [r0, #0]
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
100018d2:	9801      	ldr	r0, [sp, #4]
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
100018d4:	6855      	ldr	r5, [r2, #4]

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
100018d6:	469a      	mov	sl, r3
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
100018d8:	4688      	mov	r8, r1
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
100018da:	f001 fb0f 	bl	10002efc <__aeabi_fmul>
      Yb12_out = Yb12C_out * co1;
100018de:	4641      	mov	r1, r8
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
100018e0:	900c      	str	r0, [sp, #48]	; 0x30
      Yb12_out = Yb12C_out * co1;
100018e2:	9803      	ldr	r0, [sp, #12]
100018e4:	f001 fb0a 	bl	10002efc <__aeabi_fmul>
      Xc12_out = Xc12C_out * co2;
100018e8:	9904      	ldr	r1, [sp, #16]
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
100018ea:	900d      	str	r0, [sp, #52]	; 0x34
      Xc12_out = Xc12C_out * co2;
100018ec:	4648      	mov	r0, r9
100018ee:	f001 fb05 	bl	10002efc <__aeabi_fmul>
      Yc12_out = Yc12C_out * co2;
100018f2:	9904      	ldr	r1, [sp, #16]
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
100018f4:	900e      	str	r0, [sp, #56]	; 0x38
      Yc12_out = Yc12C_out * co2;
100018f6:	4658      	mov	r0, fp
100018f8:	f001 fb00 	bl	10002efc <__aeabi_fmul>
      Xd12_out = Xd12C_out * co3;
100018fc:	1c31      	adds	r1, r6, #0
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
100018fe:	4680      	mov	r8, r0
      Xd12_out = Xd12C_out * co3;
10001900:	980a      	ldr	r0, [sp, #40]	; 0x28
10001902:	f001 fafb 	bl	10002efc <__aeabi_fmul>
      Yd12_out = Yd12C_out * co3;
10001906:	1c31      	adds	r1, r6, #0

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
10001908:	9004      	str	r0, [sp, #16]
      Yd12_out = Yd12C_out * co3;
1000190a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000190c:	f001 faf6 	bl	10002efc <__aeabi_fmul>
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
10001910:	9905      	ldr	r1, [sp, #20]
      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
10001912:	1c06      	adds	r6, r0, #0
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
10001914:	4658      	mov	r0, fp
10001916:	f001 faf1 	bl	10002efc <__aeabi_fmul>
1000191a:	1c01      	adds	r1, r0, #0
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
1000191c:	980e      	ldr	r0, [sp, #56]	; 0x38
1000191e:	f001 fc1d 	bl	1000315c <__aeabi_fsub>
      Yc12_out += p3;
      Xd12_out -= p4;
      Yd12_out += p5;

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;
10001922:	9912      	ldr	r1, [sp, #72]	; 0x48
10001924:	5060      	str	r0, [r4, r1]
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
10001926:	9905      	ldr	r1, [sp, #20]
10001928:	4648      	mov	r0, r9
1000192a:	f001 fae7 	bl	10002efc <__aeabi_fmul>
1000192e:	1c01      	adds	r1, r0, #0
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
      Yc12_out += p3;
10001930:	4640      	mov	r0, r8
10001932:	f000 ff1b 	bl	1000276c <__aeabi_fadd>

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
10001936:	9a12      	ldr	r2, [sp, #72]	; 0x48
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
   
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
10001938:	1c29      	adds	r1, r5, #0

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
1000193a:	50b8      	str	r0, [r7, r2]
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
   
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
1000193c:	9803      	ldr	r0, [sp, #12]
1000193e:	f001 fadd 	bl	10002efc <__aeabi_fmul>
10001942:	1c01      	adds	r1, r0, #0
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
10001944:	980c      	ldr	r0, [sp, #48]	; 0x30
10001946:	f001 fc09 	bl	1000315c <__aeabi_fsub>

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
1000194a:	9b09      	ldr	r3, [sp, #36]	; 0x24
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
1000194c:	1c29      	adds	r1, r5, #0

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
1000194e:	50e0      	str	r0, [r4, r3]
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
10001950:	9801      	ldr	r0, [sp, #4]
10001952:	f001 fad3 	bl	10002efc <__aeabi_fmul>
10001956:	1c01      	adds	r1, r0, #0
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
      Yb12_out += p1;
10001958:	980d      	ldr	r0, [sp, #52]	; 0x34
1000195a:	f000 ff07 	bl	1000276c <__aeabi_fadd>

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
1000195e:	9d09      	ldr	r5, [sp, #36]	; 0x24
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
10001960:	4651      	mov	r1, sl

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
10001962:	5178      	str	r0, [r7, r5]
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
10001964:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001966:	f001 fac9 	bl	10002efc <__aeabi_fmul>
1000196a:	1c01      	adds	r1, r0, #0
      
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
      Yc12_out += p3;
      Xd12_out -= p4;
1000196c:	9804      	ldr	r0, [sp, #16]
1000196e:	f001 fbf5 	bl	1000315c <__aeabi_fsub>

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;

      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;
10001972:	9902      	ldr	r1, [sp, #8]
10001974:	5060      	str	r0, [r4, r1]
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
10001976:	4651      	mov	r1, sl
10001978:	980a      	ldr	r0, [sp, #40]	; 0x28
1000197a:	f001 fabf 	bl	10002efc <__aeabi_fmul>
1000197e:	1c01      	adds	r1, r0, #0
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
      Yc12_out += p3;
      Xd12_out -= p4;
      Yd12_out += p5;
10001980:	1c30      	adds	r0, r6, #0
10001982:	f000 fef3 	bl	1000276c <__aeabi_fadd>

      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;

      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      pSrc[(2u * i3) + 1u] = Yd12_out;
10001986:	9e02      	ldr	r6, [sp, #8]
10001988:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000198a:	51b8      	str	r0, [r7, r6]
1000198c:	9808      	ldr	r0, [sp, #32]
1000198e:	9d06      	ldr	r5, [sp, #24]
10001990:	9910      	ldr	r1, [sp, #64]	; 0x40
10001992:	1883      	adds	r3, r0, r2
10001994:	9807      	ldr	r0, [sp, #28]
10001996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10001998:	186e      	adds	r6, r5, r1
      ia1 = ia1 + twidCoefModifier;

      /*  Updating input index */
      i0 = i0 + 1u;

   } while(--j);
1000199a:	9d15      	ldr	r5, [sp, #84]	; 0x54
1000199c:	9308      	str	r3, [sp, #32]
1000199e:	3408      	adds	r4, #8
100019a0:	1883      	adds	r3, r0, r2
100019a2:	3708      	adds	r7, #8
100019a4:	9606      	str	r6, [sp, #24]
100019a6:	9307      	str	r3, [sp, #28]
100019a8:	42ac      	cmp	r4, r5
100019aa:	d000      	beq.n	100019ae <arm_radix4_butterfly_inverse_f32+0x216>
100019ac:	e721      	b.n	100017f2 <arm_radix4_butterfly_inverse_f32+0x5a>

   twidCoefModifier <<= 2u;
100019ae:	9c17      	ldr	r4, [sp, #92]	; 0x5c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100019b0:	ae16      	add	r6, sp, #88	; 0x58
100019b2:	8830      	ldrh	r0, [r6, #0]
      /*  Updating input index */
      i0 = i0 + 1u;

   } while(--j);

   twidCoefModifier <<= 2u;
100019b4:	00a7      	lsls	r7, r4, #2
100019b6:	b2b9      	uxth	r1, r7
100019b8:	911f      	str	r1, [sp, #124]	; 0x7c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
100019ba:	9023      	str	r0, [sp, #140]	; 0x8c
100019bc:	9021      	str	r0, [sp, #132]	; 0x84
100019be:	2804      	cmp	r0, #4
100019c0:	d800      	bhi.n	100019c4 <arm_radix4_butterfly_inverse_f32+0x22c>
100019c2:	e129      	b.n	10001c18 <arm_radix4_butterfly_inverse_f32+0x480>
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
100019c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100019c6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
100019c8:	0893      	lsrs	r3, r2, #2
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100019ca:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
100019cc:	931e      	str	r3, [sp, #120]	; 0x78
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100019ce:	0070      	lsls	r0, r6, #1
100019d0:	1982      	adds	r2, r0, r6
100019d2:	00ec      	lsls	r4, r5, #3
100019d4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
100019d6:	9d1e      	ldr	r5, [sp, #120]	; 0x78
100019d8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
100019da:	0139      	lsls	r1, r7, #4
100019dc:	3b01      	subs	r3, #1
100019de:	9f1e      	ldr	r7, [sp, #120]	; 0x78
100019e0:	941a      	str	r4, [sp, #104]	; 0x68
100019e2:	0070      	lsls	r0, r6, #1
100019e4:	00ec      	lsls	r4, r5, #3
100019e6:	931d      	str	r3, [sp, #116]	; 0x74
100019e8:	9407      	str	r4, [sp, #28]
100019ea:	00d3      	lsls	r3, r2, #3
100019ec:	9c20      	ldr	r4, [sp, #128]	; 0x80
100019ee:	1982      	adds	r2, r0, r6
100019f0:	9d22      	ldr	r5, [sp, #136]	; 0x88
100019f2:	911b      	str	r1, [sp, #108]	; 0x6c
100019f4:	931c      	str	r3, [sp, #112]	; 0x70
100019f6:	0139      	lsls	r1, r7, #4
100019f8:	00d3      	lsls	r3, r2, #3
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
100019fa:	2700      	movs	r7, #0
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100019fc:	9106      	str	r1, [sp, #24]
100019fe:	9308      	str	r3, [sp, #32]
10001a00:	9519      	str	r5, [sp, #100]	; 0x64
10001a02:	9418      	str	r4, [sp, #96]	; 0x60
10001a04:	9417      	str	r4, [sp, #92]	; 0x5c
10001a06:	9416      	str	r4, [sp, #88]	; 0x58
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
10001a08:	9715      	str	r7, [sp, #84]	; 0x54
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
10001a0a:	9916      	ldr	r1, [sp, #88]	; 0x58
         si1 = pCoef[(ia1 * 2u) + 1u];
10001a0c:	9816      	ldr	r0, [sp, #88]	; 0x58
         co2 = pCoef[ia2 * 2u];
10001a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
10001a10:	680e      	ldr	r6, [r1, #0]
         si1 = pCoef[(ia1 * 2u) + 1u];
10001a12:	6842      	ldr	r2, [r0, #4]
         co2 = pCoef[ia2 * 2u];
10001a14:	681d      	ldr	r5, [r3, #0]
         si2 = pCoef[(ia2 * 2u) + 1u];
10001a16:	9c17      	ldr	r4, [sp, #92]	; 0x5c
         co3 = pCoef[ia3 * 2u];
10001a18:	9918      	ldr	r1, [sp, #96]	; 0x60
         si3 = pCoef[(ia3 * 2u) + 1u];
10001a1a:	9818      	ldr	r0, [sp, #96]	; 0x60
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
10001a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
10001a1e:	6867      	ldr	r7, [r4, #4]
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
10001a20:	960c      	str	r6, [sp, #48]	; 0x30
         si1 = pCoef[(ia1 * 2u) + 1u];
10001a22:	920d      	str	r2, [sp, #52]	; 0x34
         co2 = pCoef[ia2 * 2u];
10001a24:	950e      	str	r5, [sp, #56]	; 0x38
         si2 = pCoef[(ia2 * 2u) + 1u];
         co3 = pCoef[ia3 * 2u];
10001a26:	680e      	ldr	r6, [r1, #0]
         si3 = pCoef[(ia3 * 2u) + 1u];
10001a28:	6842      	ldr	r2, [r0, #4]

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;

         i0 = j;
10001a2a:	9d15      	ldr	r5, [sp, #84]	; 0x54
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
10001a2c:	3304      	adds	r3, #4
10001a2e:	9c19      	ldr	r4, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
10001a30:	970f      	str	r7, [sp, #60]	; 0x3c
         co3 = pCoef[ia3 * 2u];
10001a32:	9610      	str	r6, [sp, #64]	; 0x40
         si3 = pCoef[(ia3 * 2u) + 1u];
10001a34:	9211      	str	r2, [sp, #68]	; 0x44

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;

         i0 = j;
10001a36:	9509      	str	r5, [sp, #36]	; 0x24
10001a38:	1c1f      	adds	r7, r3, #0
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
10001a3a:	6821      	ldr	r1, [r4, #0]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
10001a3c:	9807      	ldr	r0, [sp, #28]
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
10001a3e:	468b      	mov	fp, r1
            yaIn = pSrc[(2u * i0) + 1u];
10001a40:	683e      	ldr	r6, [r7, #0]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
10001a42:	9906      	ldr	r1, [sp, #24]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
10001a44:	5822      	ldr	r2, [r4, r0]
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];
10001a46:	9602      	str	r6, [sp, #8]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];
10001a48:	9806      	ldr	r0, [sp, #24]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
10001a4a:	5866      	ldr	r6, [r4, r1]
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001a4c:	9908      	ldr	r1, [sp, #32]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
10001a4e:	4691      	mov	r9, r2
            ybIn = pSrc[(2u * i1) + 1u];
10001a50:	9b07      	ldr	r3, [sp, #28]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001a52:	9a08      	ldr	r2, [sp, #32]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
10001a54:	46b2      	mov	sl, r6
            ycIn = pSrc[(2u * i2) + 1u];
10001a56:	583e      	ldr	r6, [r7, r0]

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001a58:	5878      	ldr	r0, [r7, r1]

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];
10001a5a:	58fd      	ldr	r5, [r7, r3]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001a5c:	58a3      	ldr	r3, [r4, r2]
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001a5e:	4651      	mov	r1, sl

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001a60:	9001      	str	r0, [sp, #4]

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001a62:	4658      	mov	r0, fp
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001a64:	4698      	mov	r8, r3
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001a66:	f001 fb79 	bl	1000315c <__aeabi_fsub>
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001a6a:	4641      	mov	r1, r8

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001a6c:	9003      	str	r0, [sp, #12]
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001a6e:	4648      	mov	r0, r9
10001a70:	f001 fb74 	bl	1000315c <__aeabi_fsub>
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001a74:	1c31      	adds	r1, r6, #0
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001a76:	9004      	str	r0, [sp, #16]
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001a78:	9802      	ldr	r0, [sp, #8]
10001a7a:	f001 fb6f 	bl	1000315c <__aeabi_fsub>
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001a7e:	9901      	ldr	r1, [sp, #4]
            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001a80:	9005      	str	r0, [sp, #20]
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001a82:	1c28      	adds	r0, r5, #0
10001a84:	f001 fb6a 	bl	1000315c <__aeabi_fsub>

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001a88:	4651      	mov	r1, sl
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001a8a:	900a      	str	r0, [sp, #40]	; 0x28

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001a8c:	4658      	mov	r0, fp
10001a8e:	f000 fe6d 	bl	1000276c <__aeabi_fadd>
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001a92:	4641      	mov	r1, r8
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001a94:	4682      	mov	sl, r0
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001a96:	4648      	mov	r0, r9
10001a98:	f000 fe68 	bl	1000276c <__aeabi_fadd>
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001a9c:	1c31      	adds	r1, r6, #0
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001a9e:	4680      	mov	r8, r0
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001aa0:	9802      	ldr	r0, [sp, #8]
10001aa2:	f000 fe63 	bl	1000276c <__aeabi_fadd>
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001aa6:	9901      	ldr	r1, [sp, #4]
            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001aa8:	1c06      	adds	r6, r0, #0
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001aaa:	1c28      	adds	r0, r5, #0
10001aac:	f000 fe5e 	bl	1000276c <__aeabi_fadd>

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
10001ab0:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001ab2:	1c05      	adds	r5, r0, #0

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
10001ab4:	9803      	ldr	r0, [sp, #12]
10001ab6:	f001 fb51 	bl	1000315c <__aeabi_fsub>
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
10001aba:	9904      	ldr	r1, [sp, #16]
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
10001abc:	9002      	str	r0, [sp, #8]
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
10001abe:	9805      	ldr	r0, [sp, #20]
10001ac0:	f000 fe54 	bl	1000276c <__aeabi_fadd>
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001ac4:	4641      	mov	r1, r8
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
10001ac6:	4681      	mov	r9, r0
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001ac8:	4650      	mov	r0, sl
10001aca:	f001 fb47 	bl	1000315c <__aeabi_fsub>
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001ace:	1c29      	adds	r1, r5, #0
            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001ad0:	9001      	str	r0, [sp, #4]
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001ad2:	1c30      	adds	r0, r6, #0
10001ad4:	f001 fb42 	bl	1000315c <__aeabi_fsub>
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
10001ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001ada:	900b      	str	r0, [sp, #44]	; 0x2c
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
10001adc:	9803      	ldr	r0, [sp, #12]
10001ade:	f000 fe45 	bl	1000276c <__aeabi_fadd>
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
10001ae2:	9904      	ldr	r1, [sp, #16]
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
10001ae4:	4683      	mov	fp, r0
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
10001ae6:	9805      	ldr	r0, [sp, #20]
10001ae8:	f001 fb38 	bl	1000315c <__aeabi_fsub>

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001aec:	4641      	mov	r1, r8
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
10001aee:	9003      	str	r0, [sp, #12]

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001af0:	4650      	mov	r0, sl
10001af2:	f000 fe3b 	bl	1000276c <__aeabi_fadd>
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001af6:	1c29      	adds	r1, r5, #0
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001af8:	6020      	str	r0, [r4, #0]
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001afa:	1c30      	adds	r0, r6, #0
10001afc:	f000 fe36 	bl	1000276c <__aeabi_fadd>

            Xb12_out = Xb12C_out * co1;
10001b00:	990c      	ldr	r1, [sp, #48]	; 0x30
            Xd12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001b02:	6038      	str	r0, [r7, #0]

            Xb12_out = Xb12C_out * co1;
10001b04:	9802      	ldr	r0, [sp, #8]
10001b06:	f001 f9f9 	bl	10002efc <__aeabi_fmul>
            Yb12_out = Yb12C_out * co1;
10001b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
            Yd12C_out = (Yaminusc - Xbminusd);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
10001b0c:	4680      	mov	r8, r0
            Yb12_out = Yb12C_out * co1;
10001b0e:	4648      	mov	r0, r9
10001b10:	f001 f9f4 	bl	10002efc <__aeabi_fmul>
            Xc12_out = Xc12C_out * co2;
10001b14:	990e      	ldr	r1, [sp, #56]	; 0x38

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
10001b16:	1c06      	adds	r6, r0, #0
            Xc12_out = Xc12C_out * co2;
10001b18:	9801      	ldr	r0, [sp, #4]
10001b1a:	f001 f9ef 	bl	10002efc <__aeabi_fmul>
            Yc12_out = Yc12C_out * co2;
10001b1e:	990e      	ldr	r1, [sp, #56]	; 0x38
            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
10001b20:	9004      	str	r0, [sp, #16]
            Yc12_out = Yc12C_out * co2;
10001b22:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001b24:	f001 f9ea 	bl	10002efc <__aeabi_fmul>
            Xd12_out = Xd12C_out * co3;
10001b28:	9910      	ldr	r1, [sp, #64]	; 0x40
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
10001b2a:	4682      	mov	sl, r0
            Xd12_out = Xd12C_out * co3;
10001b2c:	4658      	mov	r0, fp
10001b2e:	f001 f9e5 	bl	10002efc <__aeabi_fmul>
            Yd12_out = Yd12C_out * co3;
10001b32:	9910      	ldr	r1, [sp, #64]	; 0x40

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
10001b34:	1c05      	adds	r5, r0, #0
            Yd12_out = Yd12C_out * co3;
10001b36:	9803      	ldr	r0, [sp, #12]
10001b38:	f001 f9e0 	bl	10002efc <__aeabi_fmul>
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
10001b3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;
10001b3e:	9005      	str	r0, [sp, #20]
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
10001b40:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001b42:	f001 f9db 	bl	10002efc <__aeabi_fmul>
10001b46:	1c01      	adds	r1, r0, #0
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
10001b48:	9804      	ldr	r0, [sp, #16]
10001b4a:	f001 fb07 	bl	1000315c <__aeabi_fsub>
            Yc12_out += p3;
            Xd12_out -= p4;
            Yd12_out += p5;

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
10001b4e:	9a07      	ldr	r2, [sp, #28]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
10001b50:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Yc12_out += p3;
            Xd12_out -= p4;
            Yd12_out += p5;

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
10001b52:	50a0      	str	r0, [r4, r2]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
10001b54:	9801      	ldr	r0, [sp, #4]
10001b56:	f001 f9d1 	bl	10002efc <__aeabi_fmul>
10001b5a:	1c01      	adds	r1, r0, #0
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
            Yc12_out += p3;
10001b5c:	4650      	mov	r0, sl
10001b5e:	f000 fe05 	bl	1000276c <__aeabi_fadd>

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;

            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;
10001b62:	9b07      	ldr	r3, [sp, #28]
10001b64:	50f8      	str	r0, [r7, r3]
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
10001b66:	990d      	ldr	r1, [sp, #52]	; 0x34
10001b68:	4648      	mov	r0, r9
10001b6a:	f001 f9c7 	bl	10002efc <__aeabi_fmul>
10001b6e:	1c01      	adds	r1, r0, #0
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
10001b70:	4640      	mov	r0, r8
10001b72:	f001 faf3 	bl	1000315c <__aeabi_fsub>

            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;
10001b76:	9906      	ldr	r1, [sp, #24]
10001b78:	5060      	str	r0, [r4, r1]
            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
10001b7a:	990d      	ldr	r1, [sp, #52]	; 0x34
10001b7c:	9802      	ldr	r0, [sp, #8]
10001b7e:	f001 f9bd 	bl	10002efc <__aeabi_fmul>
10001b82:	1c01      	adds	r1, r0, #0
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
            Yb12_out += p1;
10001b84:	1c30      	adds	r0, r6, #0
10001b86:	f000 fdf1 	bl	1000276c <__aeabi_fadd>

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
10001b8a:	9e06      	ldr	r6, [sp, #24]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10001b8c:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
10001b8e:	51b8      	str	r0, [r7, r6]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10001b90:	9803      	ldr	r0, [sp, #12]
10001b92:	f001 f9b3 	bl	10002efc <__aeabi_fmul>
10001b96:	1c01      	adds	r1, r0, #0
            
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
            Yc12_out += p3;
            Xd12_out -= p4;
10001b98:	1c28      	adds	r0, r5, #0
10001b9a:	f001 fadf 	bl	1000315c <__aeabi_fsub>

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
10001b9e:	9d08      	ldr	r5, [sp, #32]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10001ba0:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
10001ba2:	5160      	str	r0, [r4, r5]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10001ba4:	4658      	mov	r0, fp
10001ba6:	f001 f9a9 	bl	10002efc <__aeabi_fmul>
10001baa:	1c01      	adds	r1, r0, #0
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
            Yc12_out += p3;
            Xd12_out -= p4;
            Yd12_out += p5;
10001bac:	9805      	ldr	r0, [sp, #20]
10001bae:	f000 fddd 	bl	1000276c <__aeabi_fadd>

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
10001bb2:	9a08      	ldr	r2, [sp, #32]

            i0 += n1;
10001bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
10001bb6:	50b8      	str	r0, [r7, r2]

            i0 += n1;
10001bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
10001bba:	9e12      	ldr	r6, [sp, #72]	; 0x48
10001bbc:	18c1      	adds	r1, r0, r3
10001bbe:	9109      	str	r1, [sp, #36]	; 0x24
         } while(i0 < fftLen);
10001bc0:	9d14      	ldr	r5, [sp, #80]	; 0x50
10001bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001bc4:	19a4      	adds	r4, r4, r6
10001bc6:	19bf      	adds	r7, r7, r6
10001bc8:	4295      	cmp	r5, r2
10001bca:	d900      	bls.n	10001bce <arm_radix4_butterfly_inverse_f32+0x436>
10001bcc:	e735      	b.n	10001a3a <arm_radix4_butterfly_inverse_f32+0x2a2>
         j++;
10001bce:	9815      	ldr	r0, [sp, #84]	; 0x54
10001bd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001bd2:	991a      	ldr	r1, [sp, #104]	; 0x68
10001bd4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
10001bd6:	3001      	adds	r0, #1
10001bd8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
10001bda:	185e      	adds	r6, r3, r1
10001bdc:	9015      	str	r0, [sp, #84]	; 0x54
10001bde:	9919      	ldr	r1, [sp, #100]	; 0x64
10001be0:	9818      	ldr	r0, [sp, #96]	; 0x60
10001be2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
10001be4:	19e5      	adds	r5, r4, r7
10001be6:	9616      	str	r6, [sp, #88]	; 0x58
      } while(j <= (n2 - 1u));
10001be8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
10001bea:	9e15      	ldr	r6, [sp, #84]	; 0x54
10001bec:	1883      	adds	r3, r0, r2
10001bee:	3108      	adds	r1, #8
10001bf0:	9517      	str	r5, [sp, #92]	; 0x5c
10001bf2:	9318      	str	r3, [sp, #96]	; 0x60
10001bf4:	9119      	str	r1, [sp, #100]	; 0x64
10001bf6:	42a6      	cmp	r6, r4
10001bf8:	d800      	bhi.n	10001bfc <arm_radix4_butterfly_inverse_f32+0x464>
10001bfa:	e706      	b.n	10001a0a <arm_radix4_butterfly_inverse_f32+0x272>
      twidCoefModifier <<= 2u;
10001bfc:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001bfe:	9a21      	ldr	r2, [sp, #132]	; 0x84

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10001c00:	00bd      	lsls	r5, r7, #2
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001c02:	991e      	ldr	r1, [sp, #120]	; 0x78

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10001c04:	b2a8      	uxth	r0, r5
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001c06:	0893      	lsrs	r3, r2, #2

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10001c08:	901f      	str	r0, [sp, #124]	; 0x7c
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001c0a:	9321      	str	r3, [sp, #132]	; 0x84
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001c0c:	9113      	str	r1, [sp, #76]	; 0x4c
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001c0e:	2b04      	cmp	r3, #4
10001c10:	d902      	bls.n	10001c18 <arm_radix4_butterfly_inverse_f32+0x480>
10001c12:	00cd      	lsls	r5, r1, #3
10001c14:	9512      	str	r5, [sp, #72]	; 0x48
10001c16:	e6d5      	b.n	100019c4 <arm_radix4_butterfly_inverse_f32+0x22c>
10001c18:	9e23      	ldr	r6, [sp, #140]	; 0x8c
         si3 = pCoef[(ia3 * 2u) + 1u];

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;

         i0 = j;
10001c1a:	9c22      	ldr	r4, [sp, #136]	; 0x88
10001c1c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
10001c1e:	46b3      	mov	fp, r6

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
10001c20:	6860      	ldr	r0, [r4, #4]
   ptr1 = &pSrc[0];

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
10001c22:	6827      	ldr	r7, [r4, #0]
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
10001c24:	6923      	ldr	r3, [r4, #16]

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
10001c26:	4681      	mov	r9, r0
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
      xdIn = ptr1[6];
10001c28:	69a1      	ldr	r1, [r4, #24]
      ydIn = ptr1[7];
10001c2a:	69e0      	ldr	r0, [r4, #28]
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
10001c2c:	68e2      	ldr	r2, [r4, #12]
   ptr1 = &pSrc[0];

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
10001c2e:	46ba      	mov	sl, r7
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
      xdIn = ptr1[6];
10001c30:	9107      	str	r1, [sp, #28]
      ydIn = ptr1[7];
10001c32:	9008      	str	r0, [sp, #32]

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001c34:	1c19      	adds	r1, r3, #0
10001c36:	4650      	mov	r0, sl
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
10001c38:	4698      	mov	r8, r3
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
10001c3a:	9206      	str	r2, [sp, #24]
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001c3c:	f000 fd96 	bl	1000276c <__aeabi_fadd>

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001c40:	4641      	mov	r1, r8
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001c42:	9009      	str	r0, [sp, #36]	; 0x24

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001c44:	4650      	mov	r0, sl
10001c46:	f001 fa89 	bl	1000315c <__aeabi_fsub>
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
10001c4a:	6967      	ldr	r7, [r4, #20]
      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001c4c:	4680      	mov	r8, r0

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10001c4e:	1c39      	adds	r1, r7, #0
10001c50:	4648      	mov	r0, r9
10001c52:	f000 fd8b 	bl	1000276c <__aeabi_fadd>

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001c56:	1c39      	adds	r1, r7, #0

      /* xa - xc */
      Xaminusc = xaIn - xcIn;

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10001c58:	4682      	mov	sl, r0

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001c5a:	4648      	mov	r0, r9
10001c5c:	f001 fa7e 	bl	1000315c <__aeabi_fsub>
   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
10001c60:	68a6      	ldr	r6, [r4, #8]

      /* ya - yc */
      Yaminusc = yaIn - ycIn;

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001c62:	9907      	ldr	r1, [sp, #28]

      /* ya + yc */
      Yaplusc = yaIn + ycIn;

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001c64:	9002      	str	r0, [sp, #8]

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001c66:	1c30      	adds	r0, r6, #0
10001c68:	f000 fd80 	bl	1000276c <__aeabi_fadd>

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001c6c:	9908      	ldr	r1, [sp, #32]

      /* ya - yc */
      Yaminusc = yaIn - ycIn;

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001c6e:	9001      	str	r0, [sp, #4]

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001c70:	9806      	ldr	r0, [sp, #24]
10001c72:	f000 fd7b 	bl	1000276c <__aeabi_fadd>

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
10001c76:	9907      	ldr	r1, [sp, #28]

      /* xb + xd */
      Xbplusd = xbIn + xdIn;

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001c78:	4681      	mov	r9, r0

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
10001c7a:	1c30      	adds	r0, r6, #0
10001c7c:	f001 fa6e 	bl	1000315c <__aeabi_fsub>

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10001c80:	9908      	ldr	r1, [sp, #32]

      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
10001c82:	1c06      	adds	r6, r0, #0

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10001c84:	9806      	ldr	r0, [sp, #24]
10001c86:	f001 fa69 	bl	1000315c <__aeabi_fsub>
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
10001c8a:	9901      	ldr	r1, [sp, #4]

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10001c8c:	1c07      	adds	r7, r0, #0
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
10001c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
10001c90:	f000 fd6c 	bl	1000276c <__aeabi_fadd>
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
10001c94:	1c29      	adds	r1, r5, #0
10001c96:	f001 f931 	bl	10002efc <__aeabi_fmul>
      Ybminusd = ybIn - ydIn;
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
10001c9a:	4649      	mov	r1, r9
      p5 = a5 * onebyfftLen;
      p6 = a6 * onebyfftLen;
      p7 = a7 * onebyfftLen;
   
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
10001c9c:	6020      	str	r0, [r4, #0]
      Ybminusd = ybIn - ydIn;
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
10001c9e:	4650      	mov	r0, sl
10001ca0:	f000 fd64 	bl	1000276c <__aeabi_fadd>
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
10001ca4:	1c29      	adds	r1, r5, #0
10001ca6:	f001 f929 	bl	10002efc <__aeabi_fmul>
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
10001caa:	9901      	ldr	r1, [sp, #4]
      p7 = a7 * onebyfftLen;
   
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
10001cac:	6060      	str	r0, [r4, #4]
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
10001cae:	9809      	ldr	r0, [sp, #36]	; 0x24
10001cb0:	f001 fa54 	bl	1000315c <__aeabi_fsub>
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
10001cb4:	1c29      	adds	r1, r5, #0
10001cb6:	f001 f921 	bl	10002efc <__aeabi_fmul>
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
10001cba:	4649      	mov	r1, r9
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
10001cbc:	60a0      	str	r0, [r4, #8]
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
10001cbe:	4650      	mov	r0, sl
10001cc0:	f001 fa4c 	bl	1000315c <__aeabi_fsub>
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
10001cc4:	1c29      	adds	r1, r5, #0
10001cc6:	f001 f919 	bl	10002efc <__aeabi_fmul>
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
10001cca:	1c39      	adds	r1, r7, #0
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
10001ccc:	60e0      	str	r0, [r4, #12]
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
10001cce:	4640      	mov	r0, r8
10001cd0:	f001 fa44 	bl	1000315c <__aeabi_fsub>
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
10001cd4:	1c29      	adds	r1, r5, #0
10001cd6:	f001 f911 	bl	10002efc <__aeabi_fmul>
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
10001cda:	1c31      	adds	r1, r6, #0
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
10001cdc:	6120      	str	r0, [r4, #16]
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
10001cde:	9802      	ldr	r0, [sp, #8]
10001ce0:	f000 fd44 	bl	1000276c <__aeabi_fadd>
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
      p5 = a5 * onebyfftLen;
10001ce4:	1c29      	adds	r1, r5, #0
10001ce6:	f001 f909 	bl	10002efc <__aeabi_fmul>
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
10001cea:	1c39      	adds	r1, r7, #0
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
10001cec:	6160      	str	r0, [r4, #20]
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
10001cee:	4640      	mov	r0, r8
10001cf0:	f000 fd3c 	bl	1000276c <__aeabi_fadd>
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
      p5 = a5 * onebyfftLen;
      p6 = a6 * onebyfftLen;
10001cf4:	1c29      	adds	r1, r5, #0
10001cf6:	f001 f901 	bl	10002efc <__aeabi_fmul>
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
10001cfa:	1c31      	adds	r1, r6, #0
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[6] = p6;
10001cfc:	61a0      	str	r0, [r4, #24]
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
10001cfe:	9802      	ldr	r0, [sp, #8]
10001d00:	f001 fa2c 	bl	1000315c <__aeabi_fsub>
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
      p5 = a5 * onebyfftLen;
      p6 = a6 * onebyfftLen;
      p7 = a7 * onebyfftLen;
10001d04:	1c29      	adds	r1, r5, #0
10001d06:	f001 f8f9 	bl	10002efc <__aeabi_fmul>
      ptr1[7] = p7;

      /* increment source pointer by 8 for next calculations */
      ptr1 = ptr1 + 8u;

   } while(--j);
10001d0a:	2201      	movs	r2, #1
10001d0c:	4253      	negs	r3, r2
10001d0e:	449b      	add	fp, r3
10001d10:	4659      	mov	r1, fp
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[6] = p6;
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      ptr1[7] = p7;
10001d12:	61e0      	str	r0, [r4, #28]

      /* increment source pointer by 8 for next calculations */
      ptr1 = ptr1 + 8u;
10001d14:	3420      	adds	r4, #32

   } while(--j);
10001d16:	2900      	cmp	r1, #0
10001d18:	d182      	bne.n	10001c20 <arm_radix4_butterfly_inverse_f32+0x488>
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      pSrc[(2u * i3) + 1u] = s2 * onebyfftLen;
   }

#endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */
}
10001d1a:	b025      	add	sp, #148	; 0x94
10001d1c:	bc3c      	pop	{r2, r3, r4, r5}
10001d1e:	4690      	mov	r8, r2
10001d20:	4699      	mov	r9, r3
10001d22:	46a2      	mov	sl, r4
10001d24:	46ab      	mov	fp, r5
10001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001d28 <arm_cfft_radix4_f32>:
*/

void arm_cfft_radix4_f32(
const arm_cfft_radix4_instance_f32 * S,
float32_t * pSrc)
{
10001d28:	b530      	push	{r4, r5, lr}

   if(S->ifftFlag == 1u)
10001d2a:	7883      	ldrb	r3, [r0, #2]
*/

void arm_cfft_radix4_f32(
const arm_cfft_radix4_instance_f32 * S,
float32_t * pSrc)
{
10001d2c:	1c0d      	adds	r5, r1, #0
10001d2e:	b083      	sub	sp, #12
10001d30:	1c04      	adds	r4, r0, #0

   if(S->ifftFlag == 1u)
   {
      /*  Complex IFFT radix-4  */
      arm_radix4_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
10001d32:	8801      	ldrh	r1, [r0, #0]
void arm_cfft_radix4_f32(
const arm_cfft_radix4_instance_f32 * S,
float32_t * pSrc)
{

   if(S->ifftFlag == 1u)
10001d34:	2b01      	cmp	r3, #1
10001d36:	d009      	beq.n	10001d4c <arm_cfft_radix4_f32+0x24>
      S->twidCoefModifier, S->onebyfftLen);
   }
   else
   {
      /*  Complex FFT radix-4  */
      arm_radix4_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
10001d38:	8983      	ldrh	r3, [r0, #12]
10001d3a:	6862      	ldr	r2, [r4, #4]
10001d3c:	1c28      	adds	r0, r5, #0
10001d3e:	f7ff fa7f 	bl	10001240 <arm_radix4_butterfly_f32>
      S->twidCoefModifier);
   }

   if(S->bitReverseFlag == 1u)
10001d42:	78e0      	ldrb	r0, [r4, #3]
10001d44:	2801      	cmp	r0, #1
10001d46:	d00b      	beq.n	10001d60 <arm_cfft_radix4_f32+0x38>
   {
      /*  Bit Reversal */
      arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
   }

}
10001d48:	b003      	add	sp, #12
10001d4a:	bd30      	pop	{r4, r5, pc}
{

   if(S->ifftFlag == 1u)
   {
      /*  Complex IFFT radix-4  */
      arm_radix4_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
10001d4c:	6902      	ldr	r2, [r0, #16]
10001d4e:	8983      	ldrh	r3, [r0, #12]
10001d50:	9200      	str	r2, [sp, #0]
10001d52:	1c28      	adds	r0, r5, #0
10001d54:	6862      	ldr	r2, [r4, #4]
10001d56:	f7ff fd1f 	bl	10001798 <arm_radix4_butterfly_inverse_f32>
      /*  Complex FFT radix-4  */
      arm_radix4_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
      S->twidCoefModifier);
   }

   if(S->bitReverseFlag == 1u)
10001d5a:	78e0      	ldrb	r0, [r4, #3]
10001d5c:	2801      	cmp	r0, #1
10001d5e:	d1f3      	bne.n	10001d48 <arm_cfft_radix4_f32+0x20>
   {
      /*  Bit Reversal */
      arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
10001d60:	8821      	ldrh	r1, [r4, #0]
10001d62:	89e2      	ldrh	r2, [r4, #14]
10001d64:	68a3      	ldr	r3, [r4, #8]
10001d66:	1c28      	adds	r0, r5, #0
10001d68:	f000 f97c 	bl	10002064 <arm_bitreversal_f32>
10001d6c:	e7ec      	b.n	10001d48 <arm_cfft_radix4_f32+0x20>
10001d6e:	46c0      	nop			; (mov r8, r8)

10001d70 <arm_cfft_radix4_init_f32>:
arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
10001d70:	b510      	push	{r4, lr}

  /*  Initialise the FFT length */
  S->fftLen = fftLen;

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;
10001d72:	4c23      	ldr	r4, [pc, #140]	; (10001e00 <arm_cfft_radix4_init_f32+0x90>)

  /*  Initialise the Flag for selection of CFFT or CIFFT */
  S->ifftFlag = ifftFlag;

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;
10001d74:	70c3      	strb	r3, [r0, #3]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
10001d76:	2380      	movs	r3, #128	; 0x80

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;

  /*  Initialise the Flag for selection of CFFT or CIFFT */
  S->ifftFlag = ifftFlag;
10001d78:	7082      	strb	r2, [r0, #2]
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;

  /*  Initialise the FFT length */
  S->fftLen = fftLen;
10001d7a:	8001      	strh	r1, [r0, #0]

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;
10001d7c:	6044      	str	r4, [r0, #4]

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
10001d7e:	005a      	lsls	r2, r3, #1
10001d80:	4291      	cmp	r1, r2
10001d82:	d033      	beq.n	10001dec <arm_cfft_radix4_init_f32+0x7c>
10001d84:	d90a      	bls.n	10001d9c <arm_cfft_radix4_init_f32+0x2c>
10001d86:	2480      	movs	r4, #128	; 0x80
10001d88:	00e3      	lsls	r3, r4, #3
10001d8a:	4299      	cmp	r1, r3
10001d8c:	d01c      	beq.n	10001dc8 <arm_cfft_radix4_init_f32+0x58>
10001d8e:	2280      	movs	r2, #128	; 0x80
10001d90:	0154      	lsls	r4, r2, #5
10001d92:	42a1      	cmp	r1, r4
10001d94:	d00f      	beq.n	10001db6 <arm_cfft_radix4_init_f32+0x46>
    break;


  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
10001d96:	20ff      	movs	r0, #255	; 0xff
    break;
  }

  return (status);
10001d98:	b240      	sxtb	r0, r0
}
10001d9a:	bd10      	pop	{r4, pc}

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
10001d9c:	2910      	cmp	r1, #16
10001d9e:	d01c      	beq.n	10001dda <arm_cfft_radix4_init_f32+0x6a>
10001da0:	2940      	cmp	r1, #64	; 0x40
10001da2:	d1f8      	bne.n	10001d96 <arm_cfft_radix4_init_f32+0x26>
    S->onebyfftLen = 0.00390625f;
    break;

  case 64u:
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64u;
10001da4:	4917      	ldr	r1, [pc, #92]	; (10001e04 <arm_cfft_radix4_init_f32+0x94>)
    S->bitRevFactor = 64u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
10001da6:	4c18      	ldr	r4, [pc, #96]	; (10001e08 <arm_cfft_radix4_init_f32+0x98>)
    S->onebyfftLen = 0.015625f;
10001da8:	23f2      	movs	r3, #242	; 0xf2
10001daa:	059a      	lsls	r2, r3, #22
    S->onebyfftLen = 0.00390625f;
    break;

  case 64u:
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64u;
10001dac:	60c1      	str	r1, [r0, #12]
    S->bitRevFactor = 64u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
10001dae:	6084      	str	r4, [r0, #8]
    S->onebyfftLen = 0.015625f;
10001db0:	6102      	str	r2, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10001db2:	2000      	movs	r0, #0
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64u;
    S->bitRevFactor = 64u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
    S->onebyfftLen = 0.015625f;
    break;
10001db4:	e7f0      	b.n	10001d98 <arm_cfft_radix4_init_f32+0x28>

  case 4096u:
    /*  Initializations of structure parameters for 4096 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 1u;
10001db6:	4915      	ldr	r1, [pc, #84]	; (10001e0c <arm_cfft_radix4_init_f32+0x9c>)
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 1u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
10001db8:	4b15      	ldr	r3, [pc, #84]	; (10001e10 <arm_cfft_radix4_init_f32+0xa0>)
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
10001dba:	22e6      	movs	r2, #230	; 0xe6
10001dbc:	0594      	lsls	r4, r2, #22

  case 4096u:
    /*  Initializations of structure parameters for 4096 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 1u;
10001dbe:	60c1      	str	r1, [r0, #12]
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 1u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
10001dc0:	6083      	str	r3, [r0, #8]
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
10001dc2:	6104      	str	r4, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10001dc4:	2000      	movs	r0, #0
    S->bitRevFactor = 1u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
    break;
10001dc6:	e7e7      	b.n	10001d98 <arm_cfft_radix4_init_f32+0x28>

  case 1024u:
    /*  Initializations of structure parameters for 1024 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 4u;
10001dc8:	4912      	ldr	r1, [pc, #72]	; (10001e14 <arm_cfft_radix4_init_f32+0xa4>)
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 4u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
10001dca:	4b13      	ldr	r3, [pc, #76]	; (10001e18 <arm_cfft_radix4_init_f32+0xa8>)
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
10001dcc:	22ea      	movs	r2, #234	; 0xea
10001dce:	0594      	lsls	r4, r2, #22

  case 1024u:
    /*  Initializations of structure parameters for 1024 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 4u;
10001dd0:	60c1      	str	r1, [r0, #12]
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 4u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
10001dd2:	6083      	str	r3, [r0, #8]
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
10001dd4:	6104      	str	r4, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10001dd6:	2000      	movs	r0, #0
    S->bitRevFactor = 4u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
    break;
10001dd8:	e7de      	b.n	10001d98 <arm_cfft_radix4_init_f32+0x28>
    S->onebyfftLen = 0.015625f;
    break;

  case 16u:
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256u;
10001dda:	4910      	ldr	r1, [pc, #64]	; (10001e1c <arm_cfft_radix4_init_f32+0xac>)
    S->bitRevFactor = 256u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
10001ddc:	4c10      	ldr	r4, [pc, #64]	; (10001e20 <arm_cfft_radix4_init_f32+0xb0>)
    S->onebyfftLen = 0.0625f;
10001dde:	23f6      	movs	r3, #246	; 0xf6
10001de0:	059a      	lsls	r2, r3, #22
    S->onebyfftLen = 0.015625f;
    break;

  case 16u:
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256u;
10001de2:	60c1      	str	r1, [r0, #12]
    S->bitRevFactor = 256u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
10001de4:	6084      	str	r4, [r0, #8]
    S->onebyfftLen = 0.0625f;
10001de6:	6102      	str	r2, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10001de8:	2000      	movs	r0, #0
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256u;
    S->bitRevFactor = 256u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
    S->onebyfftLen = 0.0625f;
    break;
10001dea:	e7d5      	b.n	10001d98 <arm_cfft_radix4_init_f32+0x28>
    break;


  case 256u:
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16u;
10001dec:	490d      	ldr	r1, [pc, #52]	; (10001e24 <arm_cfft_radix4_init_f32+0xb4>)
    S->bitRevFactor = 16u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
10001dee:	4b0e      	ldr	r3, [pc, #56]	; (10001e28 <arm_cfft_radix4_init_f32+0xb8>)
    S->onebyfftLen = 0.00390625f;
10001df0:	22ee      	movs	r2, #238	; 0xee
10001df2:	0594      	lsls	r4, r2, #22
    break;


  case 256u:
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16u;
10001df4:	60c1      	str	r1, [r0, #12]
    S->bitRevFactor = 16u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
10001df6:	6083      	str	r3, [r0, #8]
    S->onebyfftLen = 0.00390625f;
10001df8:	6104      	str	r4, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10001dfa:	2000      	movs	r0, #0
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16u;
    S->bitRevFactor = 16u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
    S->onebyfftLen = 0.00390625f;
    break;
10001dfc:	e7cc      	b.n	10001d98 <arm_cfft_radix4_init_f32+0x28>
10001dfe:	46c0      	nop			; (mov r8, r8)
10001e00:	1001a2e4 	.word	0x1001a2e4
10001e04:	00400040 	.word	0x00400040
10001e08:	1002a2e2 	.word	0x1002a2e2
10001e0c:	00010001 	.word	0x00010001
10001e10:	1002a264 	.word	0x1002a264
10001e14:	00040004 	.word	0x00040004
10001e18:	1002a26a 	.word	0x1002a26a
10001e1c:	01000100 	.word	0x01000100
10001e20:	1002a462 	.word	0x1002a462
10001e24:	00100010 	.word	0x00100010
10001e28:	1002a282 	.word	0x1002a282

10001e2c <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
10001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e2e:	464d      	mov	r5, r9
10001e30:	465f      	mov	r7, fp
10001e32:	4656      	mov	r6, sl
10001e34:	4644      	mov	r4, r8
10001e36:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t blkCnt, outIndex;                     /* loop counter */

  /* Initialise the index value to zero. */
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
10001e38:	1c05      	adds	r5, r0, #0
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
10001e3a:	b085      	sub	sp, #20
10001e3c:	4689      	mov	r9, r1
10001e3e:	9202      	str	r2, [sp, #8]
10001e40:	9303      	str	r3, [sp, #12]
  uint32_t blkCnt, outIndex;                     /* loop counter */

  /* Initialise the index value to zero. */
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
10001e42:	cd80      	ldmia	r5!, {r7}

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001e44:	2901      	cmp	r1, #1
10001e46:	d100      	bne.n	10001e4a <arm_max_f32+0x1e>
10001e48:	e072      	b.n	10001f30 <arm_max_f32+0x104>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
10001e4a:	cd10      	ldmia	r5!, {r4}
10001e4c:	2001      	movs	r0, #1
10001e4e:	464a      	mov	r2, r9
10001e50:	4002      	ands	r2, r0
10001e52:	1c39      	adds	r1, r7, #0
10001e54:	1c20      	adds	r0, r4, #0
10001e56:	9201      	str	r2, [sp, #4]
10001e58:	f000 fc74 	bl	10002744 <__aeabi_fcmpgt>
10001e5c:	1c26      	adds	r6, r4, #0
10001e5e:	2800      	cmp	r0, #0
10001e60:	d05b      	beq.n	10001f1a <arm_max_f32+0xee>
10001e62:	1c20      	adds	r0, r4, #0
10001e64:	1c39      	adds	r1, r7, #0
10001e66:	f000 fc6d 	bl	10002744 <__aeabi_fcmpgt>
10001e6a:	2402      	movs	r4, #2
10001e6c:	1e43      	subs	r3, r0, #1
10001e6e:	4198      	sbcs	r0, r3
10001e70:	46b3      	mov	fp, r6
10001e72:	4682      	mov	sl, r0
10001e74:	4680      	mov	r8, r0
10001e76:	1c37      	adds	r7, r6, #0

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001e78:	454c      	cmp	r4, r9
10001e7a:	d041      	beq.n	10001f00 <arm_max_f32+0xd4>
10001e7c:	9901      	ldr	r1, [sp, #4]
10001e7e:	2900      	cmp	r1, #0
10001e80:	d015      	beq.n	10001eae <arm_max_f32+0x82>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
10001e82:	cd80      	ldmia	r5!, {r7}
10001e84:	1c31      	adds	r1, r6, #0
10001e86:	1c38      	adds	r0, r7, #0
10001e88:	f000 fc5c 	bl	10002744 <__aeabi_fcmpgt>
10001e8c:	9701      	str	r7, [sp, #4]
10001e8e:	2800      	cmp	r0, #0
10001e90:	d04c      	beq.n	10001f2c <arm_max_f32+0x100>
10001e92:	9b01      	ldr	r3, [sp, #4]
10001e94:	1c38      	adds	r0, r7, #0
10001e96:	1c31      	adds	r1, r6, #0
10001e98:	469b      	mov	fp, r3
10001e9a:	f000 fc53 	bl	10002744 <__aeabi_fcmpgt>
10001e9e:	1c22      	adds	r2, r4, #0
10001ea0:	2800      	cmp	r0, #0
10001ea2:	d03c      	beq.n	10001f1e <arm_max_f32+0xf2>
10001ea4:	3401      	adds	r4, #1
10001ea6:	4690      	mov	r8, r2
10001ea8:	9f01      	ldr	r7, [sp, #4]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001eaa:	454c      	cmp	r4, r9
10001eac:	d028      	beq.n	10001f00 <arm_max_f32+0xd4>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
10001eae:	cd01      	ldmia	r5!, {r0}
10001eb0:	1c39      	adds	r1, r7, #0
10001eb2:	4683      	mov	fp, r0
10001eb4:	f000 fc46 	bl	10002744 <__aeabi_fcmpgt>
10001eb8:	465e      	mov	r6, fp
10001eba:	2800      	cmp	r0, #0
10001ebc:	d100      	bne.n	10001ec0 <arm_max_f32+0x94>
10001ebe:	1c3e      	adds	r6, r7, #0
10001ec0:	4658      	mov	r0, fp
10001ec2:	1c39      	adds	r1, r7, #0
10001ec4:	f000 fc3e 	bl	10002744 <__aeabi_fcmpgt>
10001ec8:	46a2      	mov	sl, r4
10001eca:	2800      	cmp	r0, #0
10001ecc:	d100      	bne.n	10001ed0 <arm_max_f32+0xa4>
10001ece:	46c2      	mov	sl, r8
10001ed0:	cd02      	ldmia	r5!, {r1}
10001ed2:	3401      	adds	r4, #1
10001ed4:	4688      	mov	r8, r1
10001ed6:	1c08      	adds	r0, r1, #0
10001ed8:	1c31      	adds	r1, r6, #0
10001eda:	f000 fc33 	bl	10002744 <__aeabi_fcmpgt>
10001ede:	4647      	mov	r7, r8
10001ee0:	2800      	cmp	r0, #0
10001ee2:	d100      	bne.n	10001ee6 <arm_max_f32+0xba>
10001ee4:	1c37      	adds	r7, r6, #0
10001ee6:	4640      	mov	r0, r8
10001ee8:	1c31      	adds	r1, r6, #0
10001eea:	f000 fc2b 	bl	10002744 <__aeabi_fcmpgt>
10001eee:	46bb      	mov	fp, r7
10001ef0:	1c23      	adds	r3, r4, #0
10001ef2:	2800      	cmp	r0, #0
10001ef4:	d100      	bne.n	10001ef8 <arm_max_f32+0xcc>
10001ef6:	4653      	mov	r3, sl
10001ef8:	3401      	adds	r4, #1
10001efa:	4698      	mov	r8, r3

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001efc:	454c      	cmp	r4, r9
10001efe:	d1d6      	bne.n	10001eae <arm_max_f32+0x82>
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
10001f00:	9c02      	ldr	r4, [sp, #8]
  *pIndex = outIndex;
10001f02:	9803      	ldr	r0, [sp, #12]
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
10001f04:	465d      	mov	r5, fp
  *pIndex = outIndex;
10001f06:	4642      	mov	r2, r8
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
10001f08:	6025      	str	r5, [r4, #0]
  *pIndex = outIndex;
10001f0a:	6002      	str	r2, [r0, #0]
}
10001f0c:	b005      	add	sp, #20
10001f0e:	bc3c      	pop	{r2, r3, r4, r5}
10001f10:	4690      	mov	r8, r2
10001f12:	4699      	mov	r9, r3
10001f14:	46a2      	mov	sl, r4
10001f16:	46ab      	mov	fp, r5
10001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f1a:	1c3e      	adds	r6, r7, #0
10001f1c:	e7a1      	b.n	10001e62 <arm_max_f32+0x36>
10001f1e:	4652      	mov	r2, sl
10001f20:	3401      	adds	r4, #1
10001f22:	4690      	mov	r8, r2
10001f24:	9f01      	ldr	r7, [sp, #4]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001f26:	454c      	cmp	r4, r9
10001f28:	d1c1      	bne.n	10001eae <arm_max_f32+0x82>
10001f2a:	e7e9      	b.n	10001f00 <arm_max_f32+0xd4>
10001f2c:	9601      	str	r6, [sp, #4]
10001f2e:	e7b0      	b.n	10001e92 <arm_max_f32+0x66>
  /* Run the below code for Cortex-M0 */
  float32_t maxVal1, out;                        /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex;                     /* loop counter */

  /* Initialise the index value to zero. */
  outIndex = 0u;
10001f30:	2300      	movs	r3, #0
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
10001f32:	46bb      	mov	fp, r7
  /* Run the below code for Cortex-M0 */
  float32_t maxVal1, out;                        /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex;                     /* loop counter */

  /* Initialise the index value to zero. */
  outIndex = 0u;
10001f34:	4698      	mov	r8, r3
10001f36:	e7e3      	b.n	10001f00 <arm_max_f32+0xd4>

10001f38 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
10001f38:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f3a:	464e      	mov	r6, r9
10001f3c:	4645      	mov	r5, r8
10001f3e:	4657      	mov	r7, sl
10001f40:	b4e0      	push	{r5, r6, r7}
10001f42:	1c0d      	adds	r5, r1, #0
10001f44:	1e16      	subs	r6, r2, #0

#else

  /* Run the below code for Cortex-M0 */

  while(numSamples > 0u)
10001f46:	d07c      	beq.n	10002042 <arm_cmplx_mag_f32+0x10a>
10001f48:	1e51      	subs	r1, r2, #1
10001f4a:	2701      	movs	r7, #1
10001f4c:	400f      	ands	r7, r1
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
10001f4e:	6801      	ldr	r1, [r0, #0]
    imagIn = *pSrc++;
10001f50:	6842      	ldr	r2, [r0, #4]

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in > 0)
10001f52:	2300      	movs	r3, #0
 * @return none.    
 *    
 */


void arm_cmplx_mag_f32(
10001f54:	1c04      	adds	r4, r0, #0
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001f56:	1c08      	adds	r0, r1, #0

  while(numSamples > 0u)
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
10001f58:	4691      	mov	r9, r2
10001f5a:	4698      	mov	r8, r3
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001f5c:	f000 ffce 	bl	10002efc <__aeabi_fmul>
10001f60:	4649      	mov	r1, r9
10001f62:	4682      	mov	sl, r0
10001f64:	4648      	mov	r0, r9
10001f66:	f000 ffc9 	bl	10002efc <__aeabi_fmul>
10001f6a:	1c01      	adds	r1, r0, #0
10001f6c:	4650      	mov	r0, sl
10001f6e:	f000 fbfd 	bl	1000276c <__aeabi_fadd>
10001f72:	4641      	mov	r1, r8
 * @return none.    
 *    
 */


void arm_cmplx_mag_f32(
10001f74:	3408      	adds	r4, #8
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001f76:	4681      	mov	r9, r0
10001f78:	f000 fbe4 	bl	10002744 <__aeabi_fcmpgt>
10001f7c:	2800      	cmp	r0, #0
10001f7e:	d06b      	beq.n	10002058 <arm_cmplx_mag_f32+0x120>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
10001f80:	4648      	mov	r0, r9
10001f82:	f000 fa69 	bl	10002458 <sqrtf>
10001f86:	6028      	str	r0, [r5, #0]

    /* Decrement the loop counter */
    numSamples--;
10001f88:	3e01      	subs	r6, #1
10001f8a:	3504      	adds	r5, #4

#else

  /* Run the below code for Cortex-M0 */

  while(numSamples > 0u)
10001f8c:	2e00      	cmp	r6, #0
10001f8e:	d058      	beq.n	10002042 <arm_cmplx_mag_f32+0x10a>
10001f90:	2f00      	cmp	r7, #0
10001f92:	d01c      	beq.n	10001fce <arm_cmplx_mag_f32+0x96>
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
10001f94:	6821      	ldr	r1, [r4, #0]
    imagIn = *pSrc++;
10001f96:	6867      	ldr	r7, [r4, #4]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001f98:	1c08      	adds	r0, r1, #0
10001f9a:	f000 ffaf 	bl	10002efc <__aeabi_fmul>
10001f9e:	1c39      	adds	r1, r7, #0
10001fa0:	4682      	mov	sl, r0
10001fa2:	1c38      	adds	r0, r7, #0
10001fa4:	f000 ffaa 	bl	10002efc <__aeabi_fmul>
10001fa8:	1c01      	adds	r1, r0, #0
10001faa:	4650      	mov	r0, sl
10001fac:	f000 fbde 	bl	1000276c <__aeabi_fadd>

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in > 0)
10001fb0:	2100      	movs	r1, #0
 * @return none.    
 *    
 */


void arm_cmplx_mag_f32(
10001fb2:	3408      	adds	r4, #8
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001fb4:	1c07      	adds	r7, r0, #0
10001fb6:	f000 fbc5 	bl	10002744 <__aeabi_fcmpgt>
10001fba:	2800      	cmp	r0, #0
10001fbc:	d04f      	beq.n	1000205e <arm_cmplx_mag_f32+0x126>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
10001fbe:	1c38      	adds	r0, r7, #0
10001fc0:	f000 fa4a 	bl	10002458 <sqrtf>
10001fc4:	6028      	str	r0, [r5, #0]

    /* Decrement the loop counter */
    numSamples--;
10001fc6:	3e01      	subs	r6, #1
10001fc8:	3504      	adds	r5, #4

#else

  /* Run the below code for Cortex-M0 */

  while(numSamples > 0u)
10001fca:	2e00      	cmp	r6, #0
10001fcc:	d039      	beq.n	10002042 <arm_cmplx_mag_f32+0x10a>
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
10001fce:	6821      	ldr	r1, [r4, #0]
    imagIn = *pSrc++;
10001fd0:	6867      	ldr	r7, [r4, #4]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001fd2:	1c08      	adds	r0, r1, #0
10001fd4:	f000 ff92 	bl	10002efc <__aeabi_fmul>
10001fd8:	1c39      	adds	r1, r7, #0
10001fda:	4681      	mov	r9, r0
10001fdc:	1c38      	adds	r0, r7, #0
10001fde:	f000 ff8d 	bl	10002efc <__aeabi_fmul>
10001fe2:	1c01      	adds	r1, r0, #0
10001fe4:	4648      	mov	r0, r9
10001fe6:	f000 fbc1 	bl	1000276c <__aeabi_fadd>

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in > 0)
10001fea:	2100      	movs	r1, #0
 * @return none.    
 *    
 */


void arm_cmplx_mag_f32(
10001fec:	3408      	adds	r4, #8
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10001fee:	1c07      	adds	r7, r0, #0
10001ff0:	f000 fba8 	bl	10002744 <__aeabi_fcmpgt>
10001ff4:	2800      	cmp	r0, #0
10001ff6:	d029      	beq.n	1000204c <arm_cmplx_mag_f32+0x114>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
10001ff8:	1c38      	adds	r0, r7, #0
10001ffa:	f000 fa2d 	bl	10002458 <sqrtf>
10001ffe:	6028      	str	r0, [r5, #0]
  /* Run the below code for Cortex-M0 */

  while(numSamples > 0u)
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
10002000:	6821      	ldr	r1, [r4, #0]
10002002:	1d2a      	adds	r2, r5, #4
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10002004:	1c08      	adds	r0, r1, #0
10002006:	4691      	mov	r9, r2
10002008:	f000 ff78 	bl	10002efc <__aeabi_fmul>

  while(numSamples > 0u)
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
1000200c:	6867      	ldr	r7, [r4, #4]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
1000200e:	4682      	mov	sl, r0
10002010:	1c39      	adds	r1, r7, #0
10002012:	1c38      	adds	r0, r7, #0
10002014:	f000 ff72 	bl	10002efc <__aeabi_fmul>
10002018:	1c01      	adds	r1, r0, #0
1000201a:	4650      	mov	r0, sl
1000201c:	f000 fba6 	bl	1000276c <__aeabi_fadd>

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in > 0)
10002020:	2100      	movs	r1, #0

    /* Decrement the loop counter */
    numSamples--;
10002022:	3e01      	subs	r6, #1
 * @return none.    
 *    
 */


void arm_cmplx_mag_f32(
10002024:	3408      	adds	r4, #8
  {
    /* out = sqrt((real * real) + (imag * imag)) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
10002026:	1c07      	adds	r7, r0, #0
10002028:	f000 fb8c 	bl	10002744 <__aeabi_fcmpgt>
1000202c:	2800      	cmp	r0, #0
1000202e:	d010      	beq.n	10002052 <arm_cmplx_mag_f32+0x11a>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
10002030:	1c38      	adds	r0, r7, #0
10002032:	f000 fa11 	bl	10002458 <sqrtf>
10002036:	6068      	str	r0, [r5, #4]
10002038:	464d      	mov	r5, r9

    /* Decrement the loop counter */
    numSamples--;
1000203a:	3e01      	subs	r6, #1
1000203c:	3504      	adds	r5, #4

#else

  /* Run the below code for Cortex-M0 */

  while(numSamples > 0u)
1000203e:	2e00      	cmp	r6, #0
10002040:	d1c5      	bne.n	10001fce <arm_cmplx_mag_f32+0x96>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
10002042:	bc1c      	pop	{r2, r3, r4}
10002044:	4690      	mov	r8, r2
10002046:	4699      	mov	r9, r3
10002048:	46a2      	mov	sl, r4
1000204a:	bdf0      	pop	{r4, r5, r6, r7, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
1000204c:	4641      	mov	r1, r8
1000204e:	6029      	str	r1, [r5, #0]
10002050:	e7d6      	b.n	10002000 <arm_cmplx_mag_f32+0xc8>
10002052:	4640      	mov	r0, r8
10002054:	6068      	str	r0, [r5, #4]
10002056:	e7ef      	b.n	10002038 <arm_cmplx_mag_f32+0x100>
10002058:	4640      	mov	r0, r8
1000205a:	6028      	str	r0, [r5, #0]
1000205c:	e794      	b.n	10001f88 <arm_cmplx_mag_f32+0x50>
1000205e:	4643      	mov	r3, r8
10002060:	602b      	str	r3, [r5, #0]
10002062:	e7b0      	b.n	10001fc6 <arm_cmplx_mag_f32+0x8e>

10002064 <arm_bitreversal_f32>:
void arm_bitreversal_f32(
float32_t * pSrc,
uint16_t fftSize,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
10002064:	b5f0      	push	{r4, r5, r6, r7, lr}
10002066:	4656      	mov	r6, sl
10002068:	464d      	mov	r5, r9
1000206a:	4644      	mov	r4, r8
1000206c:	465f      	mov	r7, fp
1000206e:	b4f0      	push	{r4, r5, r6, r7}
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002070:	2502      	movs	r5, #2
   float32_t in;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;
10002072:	2401      	movs	r4, #1

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002074:	426e      	negs	r6, r5
   uint16_t i, j;
   float32_t in;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
10002076:	0849      	lsrs	r1, r1, #1
10002078:	4688      	mov	r8, r1
   fftLenBy2p1 = (fftSize >> 1u) + 1u;
1000207a:	46a2      	mov	sl, r4
1000207c:	0052      	lsls	r2, r2, #1
void arm_bitreversal_f32(
float32_t * pSrc,
uint16_t fftSize,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
1000207e:	b085      	sub	sp, #20
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002080:	46b1      	mov	r9, r6
10002082:	9203      	str	r2, [sp, #12]
   float32_t in;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;
10002084:	44c2      	add	sl, r8

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002086:	44c1      	add	r9, r8
10002088:	2200      	movs	r2, #0
   uint16_t fftLenBy2, fftLenBy2p1;
   uint16_t i, j;
   float32_t in;

   /*  Initializations */
   j = 0u;
1000208a:	2400      	movs	r4, #0
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
1000208c:	2500      	movs	r5, #0
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
1000208e:	1c6f      	adds	r7, r5, #1
10002090:	00f9      	lsls	r1, r7, #3
10002092:	1846      	adds	r6, r0, r1
10002094:	6835      	ldr	r5, [r6, #0]
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002096:	4444      	add	r4, r8
10002098:	00e4      	lsls	r4, r4, #3
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
1000209a:	46ac      	mov	ip, r5
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
1000209c:	1905      	adds	r5, r0, r4
1000209e:	682f      	ldr	r7, [r5, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
100020a0:	3104      	adds	r1, #4

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
100020a2:	6037      	str	r7, [r6, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100020a4:	3404      	adds	r4, #4
      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;
100020a6:	4666      	mov	r6, ip
100020a8:	602e      	str	r6, [r5, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100020aa:	1904      	adds	r4, r0, r4
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
100020ac:	1841      	adds	r1, r0, r1
100020ae:	680d      	ldr	r5, [r1, #0]
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100020b0:	6827      	ldr	r7, [r4, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
100020b2:	9e03      	ldr	r6, [sp, #12]
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100020b4:	3202      	adds	r2, #2
100020b6:	b292      	uxth	r2, r2
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100020b8:	600f      	str	r7, [r1, #0]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
100020ba:	6025      	str	r5, [r4, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
100020bc:	881c      	ldrh	r4, [r3, #0]
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100020be:	1c15      	adds	r5, r2, #0

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
100020c0:	199b      	adds	r3, r3, r6
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100020c2:	454a      	cmp	r2, r9
100020c4:	d835      	bhi.n	10002132 <arm_bitreversal_f32+0xce>
   {
      if(i < j)
100020c6:	4294      	cmp	r4, r2
100020c8:	d9e1      	bls.n	1000208e <arm_bitreversal_f32+0x2a>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
100020ca:	00d1      	lsls	r1, r2, #3
100020cc:	180e      	adds	r6, r1, r0
100020ce:	6837      	ldr	r7, [r6, #0]
100020d0:	9102      	str	r1, [sp, #8]
         pSrc[2u * i] = pSrc[2u * j];
100020d2:	00e1      	lsls	r1, r4, #3
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
100020d4:	46bb      	mov	fp, r7
         pSrc[2u * i] = pSrc[2u * j];
100020d6:	1847      	adds	r7, r0, r1
100020d8:	9101      	str	r1, [sp, #4]
100020da:	6839      	ldr	r1, [r7, #0]
100020dc:	6031      	str	r1, [r6, #0]
         pSrc[2u * j] = in;
100020de:	465e      	mov	r6, fp
100020e0:	603e      	str	r6, [r7, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
100020e2:	9f02      	ldr	r7, [sp, #8]
100020e4:	3704      	adds	r7, #4
100020e6:	19c6      	adds	r6, r0, r7
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
100020e8:	9f01      	ldr	r7, [sp, #4]
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
100020ea:	6831      	ldr	r1, [r6, #0]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
100020ec:	3704      	adds	r7, #4
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
100020ee:	468c      	mov	ip, r1
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
100020f0:	19c1      	adds	r1, r0, r7
100020f2:	680f      	ldr	r7, [r1, #0]
100020f4:	6037      	str	r7, [r6, #0]
         pSrc[(2u * j) + 1u] = in;
100020f6:	4666      	mov	r6, ip

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
100020f8:	4657      	mov	r7, sl
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;
100020fa:	600e      	str	r6, [r1, #0]

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
100020fc:	19d1      	adds	r1, r2, r7
100020fe:	00ce      	lsls	r6, r1, #3
10002100:	9602      	str	r6, [sp, #8]
10002102:	1836      	adds	r6, r6, r0
10002104:	6831      	ldr	r1, [r6, #0]
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002106:	193f      	adds	r7, r7, r4
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002108:	468b      	mov	fp, r1
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
1000210a:	00f9      	lsls	r1, r7, #3
1000210c:	1847      	adds	r7, r0, r1
1000210e:	9101      	str	r1, [sp, #4]
10002110:	6839      	ldr	r1, [r7, #0]
10002112:	6031      	str	r1, [r6, #0]
         pSrc[2u * (j + fftLenBy2p1)] = in;
10002114:	465e      	mov	r6, fp
10002116:	603e      	str	r6, [r7, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002118:	9f02      	ldr	r7, [sp, #8]
1000211a:	3704      	adds	r7, #4
1000211c:	19c6      	adds	r6, r0, r7
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
1000211e:	9f01      	ldr	r7, [sp, #4]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002120:	6831      	ldr	r1, [r6, #0]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002122:	3704      	adds	r7, #4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002124:	468c      	mov	ip, r1
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002126:	19c1      	adds	r1, r0, r7
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
10002128:	680f      	ldr	r7, [r1, #0]
1000212a:	6037      	str	r7, [r6, #0]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
1000212c:	4666      	mov	r6, ip
1000212e:	600e      	str	r6, [r1, #0]
10002130:	e7ad      	b.n	1000208e <arm_bitreversal_f32+0x2a>
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
   }
}
10002132:	b005      	add	sp, #20
10002134:	bc3c      	pop	{r2, r3, r4, r5}
10002136:	4690      	mov	r8, r2
10002138:	4699      	mov	r9, r3
1000213a:	46a2      	mov	sl, r4
1000213c:	46ab      	mov	fp, r5
1000213e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002140 <arm_bitreversal_q31>:
void arm_bitreversal_q31(
q31_t * pSrc,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTable)
{
10002140:	b5f0      	push	{r4, r5, r6, r7, lr}
10002142:	464d      	mov	r5, r9
10002144:	465f      	mov	r7, fp
10002146:	4656      	mov	r6, sl
10002148:	4644      	mov	r4, r8
1000214a:	b4f0      	push	{r4, r5, r6, r7}
   uint32_t fftLenBy2, fftLenBy2p1, i, j;
   q31_t in;

   /*  Initializations      */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
1000214c:	0849      	lsrs	r1, r1, #1
void arm_bitreversal_q31(
q31_t * pSrc,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTable)
{
1000214e:	b085      	sub	sp, #20
   q31_t in;

   /*  Initializations      */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002150:	1c4c      	adds	r4, r1, #1
10002152:	0052      	lsls	r2, r2, #1
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002154:	00cd      	lsls	r5, r1, #3
   q31_t in;

   /*  Initializations      */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002156:	9403      	str	r4, [sp, #12]

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002158:	1e8e      	subs	r6, r1, #2
1000215a:	4694      	mov	ip, r2
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
1000215c:	1c04      	adds	r4, r0, #0
1000215e:	351c      	adds	r5, #28
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002160:	2200      	movs	r2, #0
10002162:	46b1      	mov	r9, r6
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002164:	3408      	adds	r4, #8
10002166:	1945      	adds	r5, r0, r5
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002168:	9202      	str	r2, [sp, #8]
{
   uint32_t fftLenBy2, fftLenBy2p1, i, j;
   q31_t in;

   /*  Initializations      */
   j = 0u;
1000216a:	2700      	movs	r7, #0
1000216c:	07b6      	lsls	r6, r6, #30
1000216e:	d500      	bpl.n	10002172 <arm_bitreversal_q31+0x32>
10002170:	e094      	b.n	1000229c <arm_bitreversal_q31+0x15c>
10002172:	9101      	str	r1, [sp, #4]
10002174:	e076      	b.n	10002264 <arm_bitreversal_q31+0x124>
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
10002176:	4297      	cmp	r7, r2
10002178:	d92b      	bls.n	100021d2 <arm_bitreversal_q31+0x92>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
1000217a:	00f9      	lsls	r1, r7, #3
1000217c:	468a      	mov	sl, r1
1000217e:	4680      	mov	r8, r0
10002180:	44d0      	add	r8, sl
10002182:	4641      	mov	r1, r8
10002184:	6809      	ldr	r1, [r1, #0]
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002186:	68a6      	ldr	r6, [r4, #8]
         pSrc[2u * i] = pSrc[2u * j];
10002188:	60a1      	str	r1, [r4, #8]
         pSrc[2u * j] = in;
1000218a:	4641      	mov	r1, r8
1000218c:	600e      	str	r6, [r1, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
1000218e:	68e6      	ldr	r6, [r4, #12]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002190:	4651      	mov	r1, sl
10002192:	3104      	adds	r1, #4
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002194:	46b3      	mov	fp, r6
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002196:	1846      	adds	r6, r0, r1
10002198:	6831      	ldr	r1, [r6, #0]
1000219a:	60e1      	str	r1, [r4, #12]
         pSrc[(2u * j) + 1u] = in;
1000219c:	4659      	mov	r1, fp
1000219e:	6031      	str	r1, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
100021a0:	1f2e      	subs	r6, r5, #4
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
100021a2:	6831      	ldr	r1, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
100021a4:	46b2      	mov	sl, r6
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
100021a6:	9e03      	ldr	r6, [sp, #12]
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
100021a8:	468b      	mov	fp, r1
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
100021aa:	19b9      	adds	r1, r7, r6
100021ac:	00ce      	lsls	r6, r1, #3
100021ae:	1831      	adds	r1, r6, r0
100021b0:	9602      	str	r6, [sp, #8]
100021b2:	680e      	ldr	r6, [r1, #0]
100021b4:	4688      	mov	r8, r1
100021b6:	4651      	mov	r1, sl
100021b8:	600e      	str	r6, [r1, #0]
         pSrc[2u * (j + fftLenBy2p1)] = in;
100021ba:	465e      	mov	r6, fp
100021bc:	4641      	mov	r1, r8
100021be:	600e      	str	r6, [r1, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
100021c0:	9902      	ldr	r1, [sp, #8]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
100021c2:	682e      	ldr	r6, [r5, #0]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
100021c4:	3104      	adds	r1, #4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
100021c6:	46b2      	mov	sl, r6
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
100021c8:	1846      	adds	r6, r0, r1
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
100021ca:	6831      	ldr	r1, [r6, #0]
100021cc:	6029      	str	r1, [r5, #0]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
100021ce:	4651      	mov	r1, sl
100021d0:	6031      	str	r1, [r6, #0]
100021d2:	2110      	movs	r1, #16
100021d4:	1949      	adds	r1, r1, r5
100021d6:	4688      	mov	r8, r1

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
100021d8:	6921      	ldr	r1, [r4, #16]
100021da:	1c26      	adds	r6, r4, #0
100021dc:	468a      	mov	sl, r1
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
100021de:	9901      	ldr	r1, [sp, #4]
100021e0:	3610      	adds	r6, #16
100021e2:	187f      	adds	r7, r7, r1
100021e4:	00f9      	lsls	r1, r7, #3
100021e6:	180f      	adds	r7, r1, r0
100021e8:	9102      	str	r1, [sp, #8]
100021ea:	6839      	ldr	r1, [r7, #0]
100021ec:	46bb      	mov	fp, r7
100021ee:	6121      	str	r1, [r4, #16]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100021f0:	9902      	ldr	r1, [sp, #8]
      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;
100021f2:	4657      	mov	r7, sl
100021f4:	465c      	mov	r4, fp

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100021f6:	3104      	adds	r1, #4
      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;
100021f8:	6027      	str	r7, [r4, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100021fa:	1847      	adds	r7, r0, r1
100021fc:	6839      	ldr	r1, [r7, #0]
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
100021fe:	6874      	ldr	r4, [r6, #4]
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002200:	6071      	str	r1, [r6, #4]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
10002202:	603c      	str	r4, [r7, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;
10002204:	881f      	ldrh	r7, [r3, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002206:	3202      	adds	r2, #2

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
10002208:	4463      	add	r3, ip
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
1000220a:	4297      	cmp	r7, r2
1000220c:	d925      	bls.n	1000225a <arm_bitreversal_q31+0x11a>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
1000220e:	68b4      	ldr	r4, [r6, #8]
         pSrc[2u * i] = pSrc[2u * j];
10002210:	00f9      	lsls	r1, r7, #3
10002212:	9102      	str	r1, [sp, #8]
10002214:	1809      	adds	r1, r1, r0
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002216:	46a2      	mov	sl, r4
         pSrc[2u * i] = pSrc[2u * j];
10002218:	680c      	ldr	r4, [r1, #0]
1000221a:	60b4      	str	r4, [r6, #8]
         pSrc[2u * j] = in;
1000221c:	4654      	mov	r4, sl
1000221e:	600c      	str	r4, [r1, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002220:	9c02      	ldr	r4, [sp, #8]
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002222:	68f1      	ldr	r1, [r6, #12]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002224:	3404      	adds	r4, #4
10002226:	1904      	adds	r4, r0, r4
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002228:	468b      	mov	fp, r1
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
1000222a:	6821      	ldr	r1, [r4, #0]
1000222c:	60f1      	str	r1, [r6, #12]
         pSrc[(2u * j) + 1u] = in;
1000222e:	4659      	mov	r1, fp
10002230:	6021      	str	r1, [r4, #0]

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002232:	68ec      	ldr	r4, [r5, #12]
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002234:	9903      	ldr	r1, [sp, #12]
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002236:	46a3      	mov	fp, r4
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002238:	187c      	adds	r4, r7, r1
1000223a:	00e1      	lsls	r1, r4, #3
1000223c:	180c      	adds	r4, r1, r0
1000223e:	9102      	str	r1, [sp, #8]
10002240:	6821      	ldr	r1, [r4, #0]
10002242:	60e9      	str	r1, [r5, #12]
         pSrc[2u * (j + fftLenBy2p1)] = in;
10002244:	4659      	mov	r1, fp
10002246:	6021      	str	r1, [r4, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002248:	9c02      	ldr	r4, [sp, #8]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
1000224a:	6929      	ldr	r1, [r5, #16]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
1000224c:	3404      	adds	r4, #4
1000224e:	1904      	adds	r4, r0, r4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002250:	468b      	mov	fp, r1
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
10002252:	6821      	ldr	r1, [r4, #0]
10002254:	6129      	str	r1, [r5, #16]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
10002256:	465d      	mov	r5, fp
10002258:	6025      	str	r5, [r4, #0]
1000225a:	1c34      	adds	r4, r6, #0
1000225c:	4645      	mov	r5, r8
1000225e:	9901      	ldr	r1, [sp, #4]
10002260:	3410      	adds	r4, #16
10002262:	3510      	adds	r5, #16

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
10002264:	6826      	ldr	r6, [r4, #0]
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002266:	1879      	adds	r1, r7, r1
10002268:	00cf      	lsls	r7, r1, #3
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
1000226a:	46b3      	mov	fp, r6
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
1000226c:	19c6      	adds	r6, r0, r7
1000226e:	6831      	ldr	r1, [r6, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002270:	3704      	adds	r7, #4

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002272:	6021      	str	r1, [r4, #0]
      pSrc[2u * (j + fftLenBy2)] = in;
10002274:	4659      	mov	r1, fp
10002276:	6031      	str	r1, [r6, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002278:	19c7      	adds	r7, r0, r7
1000227a:	6839      	ldr	r1, [r7, #0]
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
1000227c:	6866      	ldr	r6, [r4, #4]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
1000227e:	3202      	adds	r2, #2
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002280:	6061      	str	r1, [r4, #4]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
10002282:	603e      	str	r6, [r7, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;
10002284:	881f      	ldrh	r7, [r3, #0]

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
10002286:	4463      	add	r3, ip
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002288:	454a      	cmp	r2, r9
1000228a:	d800      	bhi.n	1000228e <arm_bitreversal_q31+0x14e>
1000228c:	e773      	b.n	10002176 <arm_bitreversal_q31+0x36>
      j = *pBitRevTable;

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
   }
}
1000228e:	b005      	add	sp, #20
10002290:	bc3c      	pop	{r2, r3, r4, r5}
10002292:	4690      	mov	r8, r2
10002294:	4699      	mov	r9, r3
10002296:	46a2      	mov	sl, r4
10002298:	46ab      	mov	fp, r5
1000229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
1000229c:	6827      	ldr	r7, [r4, #0]
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
1000229e:	00ca      	lsls	r2, r1, #3
100022a0:	1886      	adds	r6, r0, r2
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
100022a2:	46b8      	mov	r8, r7
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
100022a4:	6837      	ldr	r7, [r6, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100022a6:	3204      	adds	r2, #4

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
100022a8:	6027      	str	r7, [r4, #0]
      pSrc[2u * (j + fftLenBy2)] = in;
100022aa:	4647      	mov	r7, r8
100022ac:	6037      	str	r7, [r6, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100022ae:	1882      	adds	r2, r0, r2
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
100022b0:	6866      	ldr	r6, [r4, #4]
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
100022b2:	6817      	ldr	r7, [r2, #0]
100022b4:	6067      	str	r7, [r4, #4]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
100022b6:	6016      	str	r6, [r2, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100022b8:	2602      	movs	r6, #2
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;
100022ba:	881f      	ldrh	r7, [r3, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100022bc:	9602      	str	r6, [sp, #8]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
100022be:	4463      	add	r3, ip
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100022c0:	454e      	cmp	r6, r9
100022c2:	d8e4      	bhi.n	1000228e <arm_bitreversal_q31+0x14e>
   {
      if(i < j)
100022c4:	2202      	movs	r2, #2
100022c6:	4297      	cmp	r7, r2
100022c8:	d92b      	bls.n	10002322 <arm_bitreversal_q31+0x1e2>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
100022ca:	00fe      	lsls	r6, r7, #3
100022cc:	46b3      	mov	fp, r6
100022ce:	4682      	mov	sl, r0
100022d0:	44da      	add	sl, fp
100022d2:	4656      	mov	r6, sl
100022d4:	6836      	ldr	r6, [r6, #0]
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
100022d6:	68a2      	ldr	r2, [r4, #8]
         pSrc[2u * i] = pSrc[2u * j];
100022d8:	60a6      	str	r6, [r4, #8]
         pSrc[2u * j] = in;
100022da:	4656      	mov	r6, sl
100022dc:	6032      	str	r2, [r6, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
100022de:	465e      	mov	r6, fp
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
100022e0:	68e2      	ldr	r2, [r4, #12]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
100022e2:	3604      	adds	r6, #4
100022e4:	1986      	adds	r6, r0, r6
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
100022e6:	4690      	mov	r8, r2
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
100022e8:	6832      	ldr	r2, [r6, #0]
100022ea:	60e2      	str	r2, [r4, #12]
         pSrc[(2u * j) + 1u] = in;
100022ec:	4642      	mov	r2, r8
100022ee:	6032      	str	r2, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
100022f0:	1f2e      	subs	r6, r5, #4
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
100022f2:	6832      	ldr	r2, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
100022f4:	46b2      	mov	sl, r6
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
100022f6:	9e03      	ldr	r6, [sp, #12]
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
100022f8:	4693      	mov	fp, r2
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
100022fa:	19ba      	adds	r2, r7, r6
100022fc:	00d6      	lsls	r6, r2, #3
100022fe:	1832      	adds	r2, r6, r0
10002300:	9601      	str	r6, [sp, #4]
10002302:	6816      	ldr	r6, [r2, #0]
10002304:	4690      	mov	r8, r2
10002306:	4652      	mov	r2, sl
10002308:	6016      	str	r6, [r2, #0]
         pSrc[2u * (j + fftLenBy2p1)] = in;
1000230a:	465e      	mov	r6, fp
1000230c:	4642      	mov	r2, r8
1000230e:	6016      	str	r6, [r2, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002310:	9a01      	ldr	r2, [sp, #4]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002312:	682e      	ldr	r6, [r5, #0]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002314:	3204      	adds	r2, #4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002316:	46b2      	mov	sl, r6
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002318:	1886      	adds	r6, r0, r2
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
1000231a:	6832      	ldr	r2, [r6, #0]
1000231c:	602a      	str	r2, [r5, #0]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
1000231e:	4652      	mov	r2, sl
10002320:	6032      	str	r2, [r6, #0]
10002322:	3410      	adds	r4, #16
10002324:	3510      	adds	r5, #16
10002326:	9101      	str	r1, [sp, #4]
10002328:	9a02      	ldr	r2, [sp, #8]
1000232a:	e79b      	b.n	10002264 <arm_bitreversal_q31+0x124>

1000232c <arm_bitreversal_q15>:
void arm_bitreversal_q15(
q15_t * pSrc16,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
1000232c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000232e:	4656      	mov	r6, sl
10002330:	464d      	mov	r5, r9
10002332:	465f      	mov	r7, fp
10002334:	4644      	mov	r4, r8
10002336:	b4f0      	push	{r4, r5, r6, r7}
   uint32_t fftLenBy2, fftLenBy2p1;
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
10002338:	0849      	lsrs	r1, r1, #1
void arm_bitreversal_q15(
q15_t * pSrc16,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
1000233a:	b083      	sub	sp, #12
   uint32_t fftLenBy2, fftLenBy2p1;
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
1000233c:	9101      	str	r1, [sp, #4]
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
1000233e:	9d01      	ldr	r5, [sp, #4]
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002340:	468a      	mov	sl, r1

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002342:	2602      	movs	r6, #2
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
10002344:	9901      	ldr	r1, [sp, #4]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002346:	4277      	negs	r7, r6
10002348:	46a9      	mov	r9, r5
1000234a:	44b9      	add	r9, r7
1000234c:	0052      	lsls	r2, r2, #1
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
1000234e:	3103      	adds	r1, #3
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002350:	2401      	movs	r4, #1
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
10002352:	008d      	lsls	r5, r1, #2
10002354:	4694      	mov	ip, r2
10002356:	464a      	mov	r2, r9
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002358:	44a2      	add	sl, r4
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
1000235a:	1946      	adds	r6, r0, r5
1000235c:	1d04      	adds	r4, r0, #4
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
1000235e:	2700      	movs	r7, #0
   q31_t in;
   uint32_t fftLenBy2, fftLenBy2p1;
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
10002360:	2500      	movs	r5, #0
10002362:	0791      	lsls	r1, r2, #30
10002364:	d561      	bpl.n	1000242a <arm_bitreversal_q15+0xfe>
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002366:	9f01      	ldr	r7, [sp, #4]
         pSrc[j + fftLenBy2p1] = in;
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
10002368:	6825      	ldr	r5, [r4, #0]
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
1000236a:	00b9      	lsls	r1, r7, #2
1000236c:	1842      	adds	r2, r0, r1
1000236e:	6817      	ldr	r7, [r2, #0]
10002370:	6027      	str	r7, [r4, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002372:	2702      	movs	r7, #2

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
      pSrc[j + fftLenBy2] = in;
10002374:	6015      	str	r5, [r2, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
10002376:	881d      	ldrh	r5, [r3, #0]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002378:	4463      	add	r3, ip
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
1000237a:	454f      	cmp	r7, r9
1000237c:	d863      	bhi.n	10002446 <arm_bitreversal_q15+0x11a>
   {
      if(i < j)
1000237e:	42bd      	cmp	r5, r7
10002380:	d911      	bls.n	100023a6 <arm_bitreversal_q15+0x7a>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002382:	6861      	ldr	r1, [r4, #4]
         pSrc[i] = pSrc[j];
10002384:	00aa      	lsls	r2, r5, #2
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002386:	4688      	mov	r8, r1
         pSrc[i] = pSrc[j];
10002388:	1881      	adds	r1, r0, r2
1000238a:	680a      	ldr	r2, [r1, #0]
1000238c:	6062      	str	r2, [r4, #4]
         pSrc[j] = in;
1000238e:	4642      	mov	r2, r8
10002390:	600a      	str	r2, [r1, #0]

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002392:	6831      	ldr	r1, [r6, #0]
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002394:	4652      	mov	r2, sl
         pSrc[i] = pSrc[j];
         pSrc[j] = in;

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002396:	468b      	mov	fp, r1
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002398:	18a9      	adds	r1, r5, r2
1000239a:	008a      	lsls	r2, r1, #2
1000239c:	1881      	adds	r1, r0, r2
1000239e:	680a      	ldr	r2, [r1, #0]
100023a0:	6032      	str	r2, [r6, #0]
         pSrc[j + fftLenBy2p1] = in;
100023a2:	465a      	mov	r2, fp
100023a4:	600a      	str	r2, [r1, #0]
100023a6:	3408      	adds	r4, #8
100023a8:	3608      	adds	r6, #8
100023aa:	e03e      	b.n	1000242a <arm_bitreversal_q15+0xfe>
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
100023ac:	42bd      	cmp	r5, r7
100023ae:	d911      	bls.n	100023d4 <arm_bitreversal_q15+0xa8>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
100023b0:	6863      	ldr	r3, [r4, #4]
         pSrc[i] = pSrc[j];
100023b2:	00aa      	lsls	r2, r5, #2
100023b4:	1882      	adds	r2, r0, r2
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
100023b6:	4698      	mov	r8, r3
         pSrc[i] = pSrc[j];
100023b8:	6813      	ldr	r3, [r2, #0]
100023ba:	6063      	str	r3, [r4, #4]
         pSrc[j] = in;
100023bc:	4643      	mov	r3, r8
100023be:	6013      	str	r3, [r2, #0]

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
100023c0:	6832      	ldr	r2, [r6, #0]
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
100023c2:	4653      	mov	r3, sl
         pSrc[i] = pSrc[j];
         pSrc[j] = in;

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
100023c4:	4693      	mov	fp, r2
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
100023c6:	18ea      	adds	r2, r5, r3
100023c8:	0093      	lsls	r3, r2, #2
100023ca:	18c2      	adds	r2, r0, r3
100023cc:	6813      	ldr	r3, [r2, #0]
100023ce:	6033      	str	r3, [r6, #0]
         pSrc[j + fftLenBy2p1] = in;
100023d0:	465b      	mov	r3, fp
100023d2:	6013      	str	r3, [r2, #0]
100023d4:	2308      	movs	r3, #8
100023d6:	199b      	adds	r3, r3, r6
100023d8:	4698      	mov	r8, r3
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
100023da:	68a3      	ldr	r3, [r4, #8]
100023dc:	1c22      	adds	r2, r4, #0
100023de:	469b      	mov	fp, r3
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
100023e0:	9b01      	ldr	r3, [sp, #4]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100023e2:	3702      	adds	r7, #2
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
100023e4:	18ed      	adds	r5, r5, r3
100023e6:	00ab      	lsls	r3, r5, #2
100023e8:	18c5      	adds	r5, r0, r3
100023ea:	682b      	ldr	r3, [r5, #0]
100023ec:	3208      	adds	r2, #8
100023ee:	60a3      	str	r3, [r4, #8]
      pSrc[j + fftLenBy2] = in;
100023f0:	465c      	mov	r4, fp
100023f2:	602c      	str	r4, [r5, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
100023f4:	880d      	ldrh	r5, [r1, #0]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
100023f6:	4663      	mov	r3, ip
100023f8:	18cb      	adds	r3, r1, r3
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
100023fa:	42bd      	cmp	r5, r7
100023fc:	d911      	bls.n	10002422 <arm_bitreversal_q15+0xf6>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
100023fe:	6851      	ldr	r1, [r2, #4]
         pSrc[i] = pSrc[j];
10002400:	00ac      	lsls	r4, r5, #2
10002402:	1904      	adds	r4, r0, r4
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002404:	468b      	mov	fp, r1
         pSrc[i] = pSrc[j];
10002406:	6821      	ldr	r1, [r4, #0]
10002408:	6051      	str	r1, [r2, #4]
         pSrc[j] = in;
1000240a:	4659      	mov	r1, fp
1000240c:	6021      	str	r1, [r4, #0]

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
1000240e:	68b4      	ldr	r4, [r6, #8]
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002410:	4651      	mov	r1, sl
         pSrc[i] = pSrc[j];
         pSrc[j] = in;

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002412:	46a3      	mov	fp, r4
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002414:	186c      	adds	r4, r5, r1
10002416:	00a1      	lsls	r1, r4, #2
10002418:	1844      	adds	r4, r0, r1
1000241a:	6821      	ldr	r1, [r4, #0]
1000241c:	60b1      	str	r1, [r6, #8]
         pSrc[j + fftLenBy2p1] = in;
1000241e:	465e      	mov	r6, fp
10002420:	6026      	str	r6, [r4, #0]
10002422:	1c14      	adds	r4, r2, #0
10002424:	4646      	mov	r6, r8
10002426:	3408      	adds	r4, #8
10002428:	3608      	adds	r6, #8
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
1000242a:	9a01      	ldr	r2, [sp, #4]
         pSrc[j + fftLenBy2p1] = in;
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
1000242c:	6821      	ldr	r1, [r4, #0]
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
1000242e:	18ad      	adds	r5, r5, r2
10002430:	00aa      	lsls	r2, r5, #2
10002432:	1885      	adds	r5, r0, r2
10002434:	682a      	ldr	r2, [r5, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002436:	3702      	adds	r7, #2
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002438:	6022      	str	r2, [r4, #0]
      pSrc[j + fftLenBy2] = in;
1000243a:	6029      	str	r1, [r5, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
1000243c:	4661      	mov	r1, ip
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
      pSrc[j + fftLenBy2] = in;

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
1000243e:	881d      	ldrh	r5, [r3, #0]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002440:	1859      	adds	r1, r3, r1
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002442:	454f      	cmp	r7, r9
10002444:	d9b2      	bls.n	100023ac <arm_bitreversal_q15+0x80>
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
   }
}
10002446:	b003      	add	sp, #12
10002448:	bc3c      	pop	{r2, r3, r4, r5}
1000244a:	4690      	mov	r8, r2
1000244c:	4699      	mov	r9, r3
1000244e:	46a2      	mov	sl, r4
10002450:	46ab      	mov	fp, r5
10002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002454:	0000      	movs	r0, r0
	...

10002458 <sqrtf>:
10002458:	b570      	push	{r4, r5, r6, lr}
1000245a:	b08a      	sub	sp, #40	; 0x28
1000245c:	1c04      	adds	r4, r0, #0
1000245e:	f000 f853 	bl	10002508 <__ieee754_sqrtf>
10002462:	4e27      	ldr	r6, [pc, #156]	; (10002500 <sqrtf+0xa8>)
10002464:	2300      	movs	r3, #0
10002466:	1c05      	adds	r5, r0, #0
10002468:	56f0      	ldrsb	r0, [r6, r3]
1000246a:	1c43      	adds	r3, r0, #1
1000246c:	d00a      	beq.n	10002484 <sqrtf+0x2c>
1000246e:	1c20      	adds	r0, r4, #0
10002470:	f000 f8c0 	bl	100025f4 <__fpclassifyf>
10002474:	2800      	cmp	r0, #0
10002476:	d005      	beq.n	10002484 <sqrtf+0x2c>
10002478:	1c20      	adds	r0, r4, #0
1000247a:	2100      	movs	r1, #0
1000247c:	f000 f94e 	bl	1000271c <__aeabi_fcmplt>
10002480:	2800      	cmp	r0, #0
10002482:	d102      	bne.n	1000248a <sqrtf+0x32>
10002484:	1c28      	adds	r0, r5, #0
10002486:	b00a      	add	sp, #40	; 0x28
10002488:	bd70      	pop	{r4, r5, r6, pc}
1000248a:	4a1e      	ldr	r2, [pc, #120]	; (10002504 <sqrtf+0xac>)
1000248c:	2101      	movs	r1, #1
1000248e:	1c20      	adds	r0, r4, #0
10002490:	2500      	movs	r5, #0
10002492:	9100      	str	r1, [sp, #0]
10002494:	9201      	str	r2, [sp, #4]
10002496:	9508      	str	r5, [sp, #32]
10002498:	f001 fb16 	bl	10003ac8 <__aeabi_f2d>
1000249c:	7834      	ldrb	r4, [r6, #0]
1000249e:	9004      	str	r0, [sp, #16]
100024a0:	9105      	str	r1, [sp, #20]
100024a2:	9002      	str	r0, [sp, #8]
100024a4:	9103      	str	r1, [sp, #12]
100024a6:	2c00      	cmp	r4, #0
100024a8:	d111      	bne.n	100024ce <sqrtf+0x76>
100024aa:	4c14      	ldr	r4, [pc, #80]	; (100024fc <sqrtf+0xa4>)
100024ac:	4b12      	ldr	r3, [pc, #72]	; (100024f8 <sqrtf+0xa0>)
100024ae:	9306      	str	r3, [sp, #24]
100024b0:	9407      	str	r4, [sp, #28]
100024b2:	4668      	mov	r0, sp
100024b4:	f000 f89c 	bl	100025f0 <matherr>
100024b8:	2800      	cmp	r0, #0
100024ba:	d012      	beq.n	100024e2 <sqrtf+0x8a>
100024bc:	9808      	ldr	r0, [sp, #32]
100024be:	2800      	cmp	r0, #0
100024c0:	d114      	bne.n	100024ec <sqrtf+0x94>
100024c2:	9806      	ldr	r0, [sp, #24]
100024c4:	9907      	ldr	r1, [sp, #28]
100024c6:	f001 fb53 	bl	10003b70 <__aeabi_d2f>
100024ca:	1c05      	adds	r5, r0, #0
100024cc:	e7da      	b.n	10002484 <sqrtf+0x2c>
100024ce:	490b      	ldr	r1, [pc, #44]	; (100024fc <sqrtf+0xa4>)
100024d0:	4809      	ldr	r0, [pc, #36]	; (100024f8 <sqrtf+0xa0>)
100024d2:	1c02      	adds	r2, r0, #0
100024d4:	1c0b      	adds	r3, r1, #0
100024d6:	f001 f81b 	bl	10003510 <__aeabi_ddiv>
100024da:	9006      	str	r0, [sp, #24]
100024dc:	9107      	str	r1, [sp, #28]
100024de:	2c02      	cmp	r4, #2
100024e0:	d1e7      	bne.n	100024b2 <sqrtf+0x5a>
100024e2:	f001 fc05 	bl	10003cf0 <__errno>
100024e6:	2621      	movs	r6, #33	; 0x21
100024e8:	6006      	str	r6, [r0, #0]
100024ea:	e7e7      	b.n	100024bc <sqrtf+0x64>
100024ec:	f001 fc00 	bl	10003cf0 <__errno>
100024f0:	9908      	ldr	r1, [sp, #32]
100024f2:	6001      	str	r1, [r0, #0]
100024f4:	e7e5      	b.n	100024c2 <sqrtf+0x6a>
100024f6:	46c0      	nop			; (mov r8, r8)
	...
10002500:	2000396c 	.word	0x2000396c
10002504:	1002aa64 	.word	0x1002aa64

10002508 <__ieee754_sqrtf>:
10002508:	4937      	ldr	r1, [pc, #220]	; (100025e8 <__ieee754_sqrtf+0xe0>)
1000250a:	0042      	lsls	r2, r0, #1
1000250c:	b570      	push	{r4, r5, r6, lr}
1000250e:	1c03      	adds	r3, r0, #0
10002510:	1c04      	adds	r4, r0, #0
10002512:	0850      	lsrs	r0, r2, #1
10002514:	4288      	cmp	r0, r1
10002516:	d849      	bhi.n	100025ac <__ieee754_sqrtf+0xa4>
10002518:	2800      	cmp	r0, #0
1000251a:	d045      	beq.n	100025a8 <__ieee754_sqrtf+0xa0>
1000251c:	2c00      	cmp	r4, #0
1000251e:	db56      	blt.n	100025ce <__ieee754_sqrtf+0xc6>
10002520:	15e6      	asrs	r6, r4, #23
10002522:	4c32      	ldr	r4, [pc, #200]	; (100025ec <__ieee754_sqrtf+0xe4>)
10002524:	42a0      	cmp	r0, r4
10002526:	d80b      	bhi.n	10002540 <__ieee754_sqrtf+0x38>
10002528:	2580      	movs	r5, #128	; 0x80
1000252a:	0428      	lsls	r0, r5, #16
1000252c:	4203      	tst	r3, r0
1000252e:	d157      	bne.n	100025e0 <__ieee754_sqrtf+0xd8>
10002530:	2400      	movs	r4, #0
10002532:	005b      	lsls	r3, r3, #1
10002534:	3401      	adds	r4, #1
10002536:	4203      	tst	r3, r0
10002538:	d0fb      	beq.n	10002532 <__ieee754_sqrtf+0x2a>
1000253a:	2101      	movs	r1, #1
1000253c:	1b0a      	subs	r2, r1, r4
1000253e:	18b6      	adds	r6, r6, r2
10002540:	025d      	lsls	r5, r3, #9
10002542:	2280      	movs	r2, #128	; 0x80
10002544:	0a68      	lsrs	r0, r5, #9
10002546:	0414      	lsls	r4, r2, #16
10002548:	3e7f      	subs	r6, #127	; 0x7f
1000254a:	4304      	orrs	r4, r0
1000254c:	07f2      	lsls	r2, r6, #31
1000254e:	d500      	bpl.n	10002552 <__ieee754_sqrtf+0x4a>
10002550:	0064      	lsls	r4, r4, #1
10002552:	2580      	movs	r5, #128	; 0x80
10002554:	1070      	asrs	r0, r6, #1
10002556:	0063      	lsls	r3, r4, #1
10002558:	2600      	movs	r6, #0
1000255a:	2100      	movs	r1, #0
1000255c:	046a      	lsls	r2, r5, #17
1000255e:	429a      	cmp	r2, r3
10002560:	dd2e      	ble.n	100025c0 <__ieee754_sqrtf+0xb8>
10002562:	2580      	movs	r5, #128	; 0x80
10002564:	005b      	lsls	r3, r3, #1
10002566:	042a      	lsls	r2, r5, #16
10002568:	2418      	movs	r4, #24
1000256a:	188d      	adds	r5, r1, r2
1000256c:	429d      	cmp	r5, r3
1000256e:	dc02      	bgt.n	10002576 <__ieee754_sqrtf+0x6e>
10002570:	18a9      	adds	r1, r5, r2
10002572:	1b5b      	subs	r3, r3, r5
10002574:	18b6      	adds	r6, r6, r2
10002576:	0852      	lsrs	r2, r2, #1
10002578:	188d      	adds	r5, r1, r2
1000257a:	005b      	lsls	r3, r3, #1
1000257c:	3c01      	subs	r4, #1
1000257e:	429d      	cmp	r5, r3
10002580:	dc02      	bgt.n	10002588 <__ieee754_sqrtf+0x80>
10002582:	18a9      	adds	r1, r5, r2
10002584:	1b5b      	subs	r3, r3, r5
10002586:	18b6      	adds	r6, r6, r2
10002588:	3c01      	subs	r4, #1
1000258a:	005b      	lsls	r3, r3, #1
1000258c:	0852      	lsrs	r2, r2, #1
1000258e:	2c00      	cmp	r4, #0
10002590:	d1eb      	bne.n	1000256a <__ieee754_sqrtf+0x62>
10002592:	2b00      	cmp	r3, #0
10002594:	d002      	beq.n	1000259c <__ieee754_sqrtf+0x94>
10002596:	2401      	movs	r4, #1
10002598:	4034      	ands	r4, r6
1000259a:	1936      	adds	r6, r6, r4
1000259c:	21fc      	movs	r1, #252	; 0xfc
1000259e:	1075      	asrs	r5, r6, #1
100025a0:	058e      	lsls	r6, r1, #22
100025a2:	19ab      	adds	r3, r5, r6
100025a4:	05c0      	lsls	r0, r0, #23
100025a6:	18c4      	adds	r4, r0, r3
100025a8:	1c20      	adds	r0, r4, #0
100025aa:	bd70      	pop	{r4, r5, r6, pc}
100025ac:	1c21      	adds	r1, r4, #0
100025ae:	1c20      	adds	r0, r4, #0
100025b0:	f000 fca4 	bl	10002efc <__aeabi_fmul>
100025b4:	1c01      	adds	r1, r0, #0
100025b6:	1c20      	adds	r0, r4, #0
100025b8:	f000 f8d8 	bl	1000276c <__aeabi_fadd>
100025bc:	1c04      	adds	r4, r0, #0
100025be:	e7f3      	b.n	100025a8 <__ieee754_sqrtf+0xa0>
100025c0:	26ff      	movs	r6, #255	; 0xff
100025c2:	0634      	lsls	r4, r6, #24
100025c4:	2180      	movs	r1, #128	; 0x80
100025c6:	0489      	lsls	r1, r1, #18
100025c8:	191b      	adds	r3, r3, r4
100025ca:	1c16      	adds	r6, r2, #0
100025cc:	e7c9      	b.n	10002562 <__ieee754_sqrtf+0x5a>
100025ce:	1c21      	adds	r1, r4, #0
100025d0:	1c20      	adds	r0, r4, #0
100025d2:	f000 fdc3 	bl	1000315c <__aeabi_fsub>
100025d6:	1c01      	adds	r1, r0, #0
100025d8:	f000 fa9e 	bl	10002b18 <__aeabi_fdiv>
100025dc:	1c04      	adds	r4, r0, #0
100025de:	e7e3      	b.n	100025a8 <__ieee754_sqrtf+0xa0>
100025e0:	2201      	movs	r2, #1
100025e2:	18b6      	adds	r6, r6, r2
100025e4:	e7ac      	b.n	10002540 <__ieee754_sqrtf+0x38>
100025e6:	46c0      	nop			; (mov r8, r8)
100025e8:	7f7fffff 	.word	0x7f7fffff
100025ec:	007fffff 	.word	0x007fffff

100025f0 <matherr>:
100025f0:	2000      	movs	r0, #0
100025f2:	4770      	bx	lr

100025f4 <__fpclassifyf>:
100025f4:	1c03      	adds	r3, r0, #0
100025f6:	b510      	push	{r4, lr}
100025f8:	2002      	movs	r0, #2
100025fa:	2b00      	cmp	r3, #0
100025fc:	d100      	bne.n	10002600 <__fpclassifyf+0xc>
100025fe:	bd10      	pop	{r4, pc}
10002600:	2280      	movs	r2, #128	; 0x80
10002602:	0611      	lsls	r1, r2, #24
10002604:	428b      	cmp	r3, r1
10002606:	d0fa      	beq.n	100025fe <__fpclassifyf+0xa>
10002608:	480f      	ldr	r0, [pc, #60]	; (10002648 <__fpclassifyf+0x54>)
1000260a:	4a10      	ldr	r2, [pc, #64]	; (1000264c <__fpclassifyf+0x58>)
1000260c:	181c      	adds	r4, r3, r0
1000260e:	2004      	movs	r0, #4
10002610:	4294      	cmp	r4, r2
10002612:	d9f4      	bls.n	100025fe <__fpclassifyf+0xa>
10002614:	21ff      	movs	r1, #255	; 0xff
10002616:	05cc      	lsls	r4, r1, #23
10002618:	1919      	adds	r1, r3, r4
1000261a:	4291      	cmp	r1, r2
1000261c:	d9ef      	bls.n	100025fe <__fpclassifyf+0xa>
1000261e:	4a0c      	ldr	r2, [pc, #48]	; (10002650 <__fpclassifyf+0x5c>)
10002620:	1e5c      	subs	r4, r3, #1
10002622:	2003      	movs	r0, #3
10002624:	4294      	cmp	r4, r2
10002626:	d9ea      	bls.n	100025fe <__fpclassifyf+0xa>
10002628:	490a      	ldr	r1, [pc, #40]	; (10002654 <__fpclassifyf+0x60>)
1000262a:	185c      	adds	r4, r3, r1
1000262c:	4294      	cmp	r4, r2
1000262e:	d9e6      	bls.n	100025fe <__fpclassifyf+0xa>
10002630:	20ff      	movs	r0, #255	; 0xff
10002632:	05c2      	lsls	r2, r0, #23
10002634:	4293      	cmp	r3, r2
10002636:	d005      	beq.n	10002644 <__fpclassifyf+0x50>
10002638:	2180      	movs	r1, #128	; 0x80
1000263a:	040c      	lsls	r4, r1, #16
1000263c:	191b      	adds	r3, r3, r4
1000263e:	4258      	negs	r0, r3
10002640:	4158      	adcs	r0, r3
10002642:	e7dc      	b.n	100025fe <__fpclassifyf+0xa>
10002644:	2001      	movs	r0, #1
10002646:	e7da      	b.n	100025fe <__fpclassifyf+0xa>
10002648:	ff800000 	.word	0xff800000
1000264c:	7effffff 	.word	0x7effffff
10002650:	007ffffe 	.word	0x007ffffe
10002654:	7fffffff 	.word	0x7fffffff

10002658 <__aeabi_uidiv>:
10002658:	2900      	cmp	r1, #0
1000265a:	d034      	beq.n	100026c6 <.udivsi3_skip_div0_test+0x6a>

1000265c <.udivsi3_skip_div0_test>:
1000265c:	2301      	movs	r3, #1
1000265e:	2200      	movs	r2, #0
10002660:	b410      	push	{r4}
10002662:	4288      	cmp	r0, r1
10002664:	d32c      	bcc.n	100026c0 <.udivsi3_skip_div0_test+0x64>
10002666:	2401      	movs	r4, #1
10002668:	0724      	lsls	r4, r4, #28
1000266a:	42a1      	cmp	r1, r4
1000266c:	d204      	bcs.n	10002678 <.udivsi3_skip_div0_test+0x1c>
1000266e:	4281      	cmp	r1, r0
10002670:	d202      	bcs.n	10002678 <.udivsi3_skip_div0_test+0x1c>
10002672:	0109      	lsls	r1, r1, #4
10002674:	011b      	lsls	r3, r3, #4
10002676:	e7f8      	b.n	1000266a <.udivsi3_skip_div0_test+0xe>
10002678:	00e4      	lsls	r4, r4, #3
1000267a:	42a1      	cmp	r1, r4
1000267c:	d204      	bcs.n	10002688 <.udivsi3_skip_div0_test+0x2c>
1000267e:	4281      	cmp	r1, r0
10002680:	d202      	bcs.n	10002688 <.udivsi3_skip_div0_test+0x2c>
10002682:	0049      	lsls	r1, r1, #1
10002684:	005b      	lsls	r3, r3, #1
10002686:	e7f8      	b.n	1000267a <.udivsi3_skip_div0_test+0x1e>
10002688:	4288      	cmp	r0, r1
1000268a:	d301      	bcc.n	10002690 <.udivsi3_skip_div0_test+0x34>
1000268c:	1a40      	subs	r0, r0, r1
1000268e:	431a      	orrs	r2, r3
10002690:	084c      	lsrs	r4, r1, #1
10002692:	42a0      	cmp	r0, r4
10002694:	d302      	bcc.n	1000269c <.udivsi3_skip_div0_test+0x40>
10002696:	1b00      	subs	r0, r0, r4
10002698:	085c      	lsrs	r4, r3, #1
1000269a:	4322      	orrs	r2, r4
1000269c:	088c      	lsrs	r4, r1, #2
1000269e:	42a0      	cmp	r0, r4
100026a0:	d302      	bcc.n	100026a8 <.udivsi3_skip_div0_test+0x4c>
100026a2:	1b00      	subs	r0, r0, r4
100026a4:	089c      	lsrs	r4, r3, #2
100026a6:	4322      	orrs	r2, r4
100026a8:	08cc      	lsrs	r4, r1, #3
100026aa:	42a0      	cmp	r0, r4
100026ac:	d302      	bcc.n	100026b4 <.udivsi3_skip_div0_test+0x58>
100026ae:	1b00      	subs	r0, r0, r4
100026b0:	08dc      	lsrs	r4, r3, #3
100026b2:	4322      	orrs	r2, r4
100026b4:	2800      	cmp	r0, #0
100026b6:	d003      	beq.n	100026c0 <.udivsi3_skip_div0_test+0x64>
100026b8:	091b      	lsrs	r3, r3, #4
100026ba:	d001      	beq.n	100026c0 <.udivsi3_skip_div0_test+0x64>
100026bc:	0909      	lsrs	r1, r1, #4
100026be:	e7e3      	b.n	10002688 <.udivsi3_skip_div0_test+0x2c>
100026c0:	1c10      	adds	r0, r2, #0
100026c2:	bc10      	pop	{r4}
100026c4:	4770      	bx	lr
100026c6:	2800      	cmp	r0, #0
100026c8:	d001      	beq.n	100026ce <.udivsi3_skip_div0_test+0x72>
100026ca:	2000      	movs	r0, #0
100026cc:	43c0      	mvns	r0, r0
100026ce:	b407      	push	{r0, r1, r2}
100026d0:	4802      	ldr	r0, [pc, #8]	; (100026dc <.udivsi3_skip_div0_test+0x80>)
100026d2:	a102      	add	r1, pc, #8	; (adr r1, 100026dc <.udivsi3_skip_div0_test+0x80>)
100026d4:	1840      	adds	r0, r0, r1
100026d6:	9002      	str	r0, [sp, #8]
100026d8:	bd03      	pop	{r0, r1, pc}
100026da:	46c0      	nop			; (mov r8, r8)
100026dc:	00000019 	.word	0x00000019

100026e0 <__aeabi_uidivmod>:
100026e0:	2900      	cmp	r1, #0
100026e2:	d0f0      	beq.n	100026c6 <.udivsi3_skip_div0_test+0x6a>
100026e4:	b503      	push	{r0, r1, lr}
100026e6:	f7ff ffb9 	bl	1000265c <.udivsi3_skip_div0_test>
100026ea:	bc0e      	pop	{r1, r2, r3}
100026ec:	4342      	muls	r2, r0
100026ee:	1a89      	subs	r1, r1, r2
100026f0:	4718      	bx	r3
100026f2:	46c0      	nop			; (mov r8, r8)

100026f4 <__aeabi_idiv0>:
100026f4:	4770      	bx	lr
100026f6:	46c0      	nop			; (mov r8, r8)

100026f8 <__aeabi_cfrcmple>:
100026f8:	4684      	mov	ip, r0
100026fa:	1c08      	adds	r0, r1, #0
100026fc:	4661      	mov	r1, ip
100026fe:	e7ff      	b.n	10002700 <__aeabi_cfcmpeq>

10002700 <__aeabi_cfcmpeq>:
10002700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002702:	f000 fbb3 	bl	10002e6c <__lesf2>
10002706:	2800      	cmp	r0, #0
10002708:	d401      	bmi.n	1000270e <__aeabi_cfcmpeq+0xe>
1000270a:	2100      	movs	r1, #0
1000270c:	42c8      	cmn	r0, r1
1000270e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002710 <__aeabi_fcmpeq>:
10002710:	b510      	push	{r4, lr}
10002712:	f000 fb3b 	bl	10002d8c <__eqsf2>
10002716:	4240      	negs	r0, r0
10002718:	3001      	adds	r0, #1
1000271a:	bd10      	pop	{r4, pc}

1000271c <__aeabi_fcmplt>:
1000271c:	b510      	push	{r4, lr}
1000271e:	f000 fba5 	bl	10002e6c <__lesf2>
10002722:	2800      	cmp	r0, #0
10002724:	db01      	blt.n	1000272a <__aeabi_fcmplt+0xe>
10002726:	2000      	movs	r0, #0
10002728:	bd10      	pop	{r4, pc}
1000272a:	2001      	movs	r0, #1
1000272c:	bd10      	pop	{r4, pc}
1000272e:	46c0      	nop			; (mov r8, r8)

10002730 <__aeabi_fcmple>:
10002730:	b510      	push	{r4, lr}
10002732:	f000 fb9b 	bl	10002e6c <__lesf2>
10002736:	2800      	cmp	r0, #0
10002738:	dd01      	ble.n	1000273e <__aeabi_fcmple+0xe>
1000273a:	2000      	movs	r0, #0
1000273c:	bd10      	pop	{r4, pc}
1000273e:	2001      	movs	r0, #1
10002740:	bd10      	pop	{r4, pc}
10002742:	46c0      	nop			; (mov r8, r8)

10002744 <__aeabi_fcmpgt>:
10002744:	b510      	push	{r4, lr}
10002746:	f000 fb49 	bl	10002ddc <__gesf2>
1000274a:	2800      	cmp	r0, #0
1000274c:	dc01      	bgt.n	10002752 <__aeabi_fcmpgt+0xe>
1000274e:	2000      	movs	r0, #0
10002750:	bd10      	pop	{r4, pc}
10002752:	2001      	movs	r0, #1
10002754:	bd10      	pop	{r4, pc}
10002756:	46c0      	nop			; (mov r8, r8)

10002758 <__aeabi_fcmpge>:
10002758:	b510      	push	{r4, lr}
1000275a:	f000 fb3f 	bl	10002ddc <__gesf2>
1000275e:	2800      	cmp	r0, #0
10002760:	da01      	bge.n	10002766 <__aeabi_fcmpge+0xe>
10002762:	2000      	movs	r0, #0
10002764:	bd10      	pop	{r4, pc}
10002766:	2001      	movs	r0, #1
10002768:	bd10      	pop	{r4, pc}
1000276a:	46c0      	nop			; (mov r8, r8)

1000276c <__aeabi_fadd>:
1000276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000276e:	0243      	lsls	r3, r0, #9
10002770:	0042      	lsls	r2, r0, #1
10002772:	024f      	lsls	r7, r1, #9
10002774:	004c      	lsls	r4, r1, #1
10002776:	0fc0      	lsrs	r0, r0, #31
10002778:	099b      	lsrs	r3, r3, #6
1000277a:	0e12      	lsrs	r2, r2, #24
1000277c:	1c06      	adds	r6, r0, #0
1000277e:	469c      	mov	ip, r3
10002780:	0e24      	lsrs	r4, r4, #24
10002782:	0fc9      	lsrs	r1, r1, #31
10002784:	09bf      	lsrs	r7, r7, #6
10002786:	4288      	cmp	r0, r1
10002788:	d057      	beq.n	1000283a <__aeabi_fadd+0xce>
1000278a:	1b15      	subs	r5, r2, r4
1000278c:	2d00      	cmp	r5, #0
1000278e:	dc00      	bgt.n	10002792 <__aeabi_fadd+0x26>
10002790:	e07e      	b.n	10002890 <__aeabi_fadd+0x124>
10002792:	2c00      	cmp	r4, #0
10002794:	d141      	bne.n	1000281a <__aeabi_fadd+0xae>
10002796:	2f00      	cmp	r7, #0
10002798:	d064      	beq.n	10002864 <__aeabi_fadd+0xf8>
1000279a:	3d01      	subs	r5, #1
1000279c:	2d00      	cmp	r5, #0
1000279e:	d000      	beq.n	100027a2 <__aeabi_fadd+0x36>
100027a0:	e0ab      	b.n	100028fa <__aeabi_fadd+0x18e>
100027a2:	1bdb      	subs	r3, r3, r7
100027a4:	1c14      	adds	r4, r2, #0
100027a6:	1c06      	adds	r6, r0, #0
100027a8:	0159      	lsls	r1, r3, #5
100027aa:	d544      	bpl.n	10002836 <__aeabi_fadd+0xca>
100027ac:	019a      	lsls	r2, r3, #6
100027ae:	0995      	lsrs	r5, r2, #6
100027b0:	1c28      	adds	r0, r5, #0
100027b2:	f001 fa7f 	bl	10003cb4 <__clzsi2>
100027b6:	3805      	subs	r0, #5
100027b8:	4085      	lsls	r5, r0
100027ba:	4284      	cmp	r4, r0
100027bc:	dd00      	ble.n	100027c0 <__aeabi_fadd+0x54>
100027be:	e079      	b.n	100028b4 <__aeabi_fadd+0x148>
100027c0:	1b00      	subs	r0, r0, r4
100027c2:	241f      	movs	r4, #31
100027c4:	1c2b      	adds	r3, r5, #0
100027c6:	1c41      	adds	r1, r0, #1
100027c8:	1a22      	subs	r2, r4, r0
100027ca:	40cb      	lsrs	r3, r1
100027cc:	4095      	lsls	r5, r2
100027ce:	1c1f      	adds	r7, r3, #0
100027d0:	1c2b      	adds	r3, r5, #0
100027d2:	1e5d      	subs	r5, r3, #1
100027d4:	41ab      	sbcs	r3, r5
100027d6:	433b      	orrs	r3, r7
100027d8:	2501      	movs	r5, #1
100027da:	2400      	movs	r4, #0
100027dc:	200f      	movs	r0, #15
100027de:	4018      	ands	r0, r3
100027e0:	2804      	cmp	r0, #4
100027e2:	d000      	beq.n	100027e6 <__aeabi_fadd+0x7a>
100027e4:	3304      	adds	r3, #4
100027e6:	2180      	movs	r1, #128	; 0x80
100027e8:	04cf      	lsls	r7, r1, #19
100027ea:	2201      	movs	r2, #1
100027ec:	401f      	ands	r7, r3
100027ee:	4016      	ands	r6, r2
100027f0:	2f00      	cmp	r7, #0
100027f2:	d005      	beq.n	10002800 <__aeabi_fadd+0x94>
100027f4:	2dff      	cmp	r5, #255	; 0xff
100027f6:	d05a      	beq.n	100028ae <__aeabi_fadd+0x142>
100027f8:	4cb3      	ldr	r4, [pc, #716]	; (10002ac8 <__aeabi_fadd+0x35c>)
100027fa:	4023      	ands	r3, r4
100027fc:	1c2c      	adds	r4, r5, #0
100027fe:	3501      	adds	r5, #1
10002800:	b2ed      	uxtb	r5, r5
10002802:	08da      	lsrs	r2, r3, #3
10002804:	2d01      	cmp	r5, #1
10002806:	dd3b      	ble.n	10002880 <__aeabi_fadd+0x114>
10002808:	0253      	lsls	r3, r2, #9
1000280a:	0a5a      	lsrs	r2, r3, #9
1000280c:	b2e4      	uxtb	r4, r4
1000280e:	05e4      	lsls	r4, r4, #23
10002810:	4322      	orrs	r2, r4
10002812:	07f6      	lsls	r6, r6, #31
10002814:	1c10      	adds	r0, r2, #0
10002816:	4330      	orrs	r0, r6
10002818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000281a:	2aff      	cmp	r2, #255	; 0xff
1000281c:	d02b      	beq.n	10002876 <__aeabi_fadd+0x10a>
1000281e:	2180      	movs	r1, #128	; 0x80
10002820:	04cc      	lsls	r4, r1, #19
10002822:	4327      	orrs	r7, r4
10002824:	2301      	movs	r3, #1
10002826:	2d1b      	cmp	r5, #27
10002828:	dd49      	ble.n	100028be <__aeabi_fadd+0x152>
1000282a:	4667      	mov	r7, ip
1000282c:	1afb      	subs	r3, r7, r3
1000282e:	1c14      	adds	r4, r2, #0
10002830:	1c06      	adds	r6, r0, #0
10002832:	0159      	lsls	r1, r3, #5
10002834:	d4ba      	bmi.n	100027ac <__aeabi_fadd+0x40>
10002836:	1c65      	adds	r5, r4, #1
10002838:	e7d0      	b.n	100027dc <__aeabi_fadd+0x70>
1000283a:	1b15      	subs	r5, r2, r4
1000283c:	2d00      	cmp	r5, #0
1000283e:	dd4f      	ble.n	100028e0 <__aeabi_fadd+0x174>
10002840:	2c00      	cmp	r4, #0
10002842:	d013      	beq.n	1000286c <__aeabi_fadd+0x100>
10002844:	2aff      	cmp	r2, #255	; 0xff
10002846:	d05a      	beq.n	100028fe <__aeabi_fadd+0x192>
10002848:	2480      	movs	r4, #128	; 0x80
1000284a:	04e1      	lsls	r1, r4, #19
1000284c:	430f      	orrs	r7, r1
1000284e:	2301      	movs	r3, #1
10002850:	2d1b      	cmp	r5, #27
10002852:	dc00      	bgt.n	10002856 <__aeabi_fadd+0xea>
10002854:	e0b0      	b.n	100029b8 <__aeabi_fadd+0x24c>
10002856:	4463      	add	r3, ip
10002858:	1c14      	adds	r4, r2, #0
1000285a:	0159      	lsls	r1, r3, #5
1000285c:	d455      	bmi.n	1000290a <__aeabi_fadd+0x19e>
1000285e:	1c65      	adds	r5, r4, #1
10002860:	1c06      	adds	r6, r0, #0
10002862:	e7bb      	b.n	100027dc <__aeabi_fadd+0x70>
10002864:	1c55      	adds	r5, r2, #1
10002866:	1c14      	adds	r4, r2, #0
10002868:	1c06      	adds	r6, r0, #0
1000286a:	e7b7      	b.n	100027dc <__aeabi_fadd+0x70>
1000286c:	2f00      	cmp	r7, #0
1000286e:	d17c      	bne.n	1000296a <__aeabi_fadd+0x1fe>
10002870:	1c55      	adds	r5, r2, #1
10002872:	1c14      	adds	r4, r2, #0
10002874:	e7b2      	b.n	100027dc <__aeabi_fadd+0x70>
10002876:	2780      	movs	r7, #128	; 0x80
10002878:	4663      	mov	r3, ip
1000287a:	007d      	lsls	r5, r7, #1
1000287c:	24ff      	movs	r4, #255	; 0xff
1000287e:	e7ad      	b.n	100027dc <__aeabi_fadd+0x70>
10002880:	2a00      	cmp	r2, #0
10002882:	d0c3      	beq.n	1000280c <__aeabi_fadd+0xa0>
10002884:	2c00      	cmp	r4, #0
10002886:	d028      	beq.n	100028da <__aeabi_fadd+0x16e>
10002888:	2080      	movs	r0, #128	; 0x80
1000288a:	03c1      	lsls	r1, r0, #15
1000288c:	430a      	orrs	r2, r1
1000288e:	e7bb      	b.n	10002808 <__aeabi_fadd+0x9c>
10002890:	2d00      	cmp	r5, #0
10002892:	d147      	bne.n	10002924 <__aeabi_fadd+0x1b8>
10002894:	1c50      	adds	r0, r2, #1
10002896:	b2c3      	uxtb	r3, r0
10002898:	2b01      	cmp	r3, #1
1000289a:	dc00      	bgt.n	1000289e <__aeabi_fadd+0x132>
1000289c:	e096      	b.n	100029cc <__aeabi_fadd+0x260>
1000289e:	4664      	mov	r4, ip
100028a0:	1be5      	subs	r5, r4, r7
100028a2:	0168      	lsls	r0, r5, #5
100028a4:	d558      	bpl.n	10002958 <__aeabi_fadd+0x1ec>
100028a6:	1b3d      	subs	r5, r7, r4
100028a8:	1c0e      	adds	r6, r1, #0
100028aa:	1c14      	adds	r4, r2, #0
100028ac:	e780      	b.n	100027b0 <__aeabi_fadd+0x44>
100028ae:	24ff      	movs	r4, #255	; 0xff
100028b0:	2200      	movs	r2, #0
100028b2:	e7ac      	b.n	1000280e <__aeabi_fadd+0xa2>
100028b4:	4b84      	ldr	r3, [pc, #528]	; (10002ac8 <__aeabi_fadd+0x35c>)
100028b6:	1a24      	subs	r4, r4, r0
100028b8:	402b      	ands	r3, r5
100028ba:	1c65      	adds	r5, r4, #1
100028bc:	e78e      	b.n	100027dc <__aeabi_fadd+0x70>
100028be:	1c3e      	adds	r6, r7, #0
100028c0:	2120      	movs	r1, #32
100028c2:	40ee      	lsrs	r6, r5
100028c4:	1b4d      	subs	r5, r1, r5
100028c6:	40af      	lsls	r7, r5
100028c8:	1c3b      	adds	r3, r7, #0
100028ca:	1e5f      	subs	r7, r3, #1
100028cc:	41bb      	sbcs	r3, r7
100028ce:	4333      	orrs	r3, r6
100028d0:	4667      	mov	r7, ip
100028d2:	1afb      	subs	r3, r7, r3
100028d4:	1c14      	adds	r4, r2, #0
100028d6:	1c06      	adds	r6, r0, #0
100028d8:	e7ab      	b.n	10002832 <__aeabi_fadd+0xc6>
100028da:	0257      	lsls	r7, r2, #9
100028dc:	0a7a      	lsrs	r2, r7, #9
100028de:	e796      	b.n	1000280e <__aeabi_fadd+0xa2>
100028e0:	2d00      	cmp	r5, #0
100028e2:	d17f      	bne.n	100029e4 <__aeabi_fadd+0x278>
100028e4:	1c54      	adds	r4, r2, #1
100028e6:	b2e1      	uxtb	r1, r4
100028e8:	2901      	cmp	r1, #1
100028ea:	dd53      	ble.n	10002994 <__aeabi_fadd+0x228>
100028ec:	2cff      	cmp	r4, #255	; 0xff
100028ee:	d100      	bne.n	100028f2 <__aeabi_fadd+0x186>
100028f0:	e09b      	b.n	10002a2a <__aeabi_fadd+0x2be>
100028f2:	18fb      	adds	r3, r7, r3
100028f4:	085b      	lsrs	r3, r3, #1
100028f6:	1c95      	adds	r5, r2, #2
100028f8:	e770      	b.n	100027dc <__aeabi_fadd+0x70>
100028fa:	2aff      	cmp	r2, #255	; 0xff
100028fc:	d192      	bne.n	10002824 <__aeabi_fadd+0xb8>
100028fe:	1c06      	adds	r6, r0, #0
10002900:	2080      	movs	r0, #128	; 0x80
10002902:	4663      	mov	r3, ip
10002904:	0045      	lsls	r5, r0, #1
10002906:	24ff      	movs	r4, #255	; 0xff
10002908:	e768      	b.n	100027dc <__aeabi_fadd+0x70>
1000290a:	1c67      	adds	r7, r4, #1
1000290c:	2fff      	cmp	r7, #255	; 0xff
1000290e:	d03c      	beq.n	1000298a <__aeabi_fadd+0x21e>
10002910:	4a6d      	ldr	r2, [pc, #436]	; (10002ac8 <__aeabi_fadd+0x35c>)
10002912:	2601      	movs	r6, #1
10002914:	401e      	ands	r6, r3
10002916:	4013      	ands	r3, r2
10002918:	085b      	lsrs	r3, r3, #1
1000291a:	4333      	orrs	r3, r6
1000291c:	1ca5      	adds	r5, r4, #2
1000291e:	1c06      	adds	r6, r0, #0
10002920:	1c3c      	adds	r4, r7, #0
10002922:	e75b      	b.n	100027dc <__aeabi_fadd+0x70>
10002924:	4268      	negs	r0, r5
10002926:	2a00      	cmp	r2, #0
10002928:	d025      	beq.n	10002976 <__aeabi_fadd+0x20a>
1000292a:	2cff      	cmp	r4, #255	; 0xff
1000292c:	d070      	beq.n	10002a10 <__aeabi_fadd+0x2a4>
1000292e:	2280      	movs	r2, #128	; 0x80
10002930:	04d6      	lsls	r6, r2, #19
10002932:	1c1d      	adds	r5, r3, #0
10002934:	4335      	orrs	r5, r6
10002936:	46ac      	mov	ip, r5
10002938:	2601      	movs	r6, #1
1000293a:	281b      	cmp	r0, #27
1000293c:	dc09      	bgt.n	10002952 <__aeabi_fadd+0x1e6>
1000293e:	4662      	mov	r2, ip
10002940:	2520      	movs	r5, #32
10002942:	40c2      	lsrs	r2, r0
10002944:	1a2b      	subs	r3, r5, r0
10002946:	4660      	mov	r0, ip
10002948:	4098      	lsls	r0, r3
1000294a:	1c06      	adds	r6, r0, #0
1000294c:	1e70      	subs	r0, r6, #1
1000294e:	4186      	sbcs	r6, r0
10002950:	4316      	orrs	r6, r2
10002952:	1bbb      	subs	r3, r7, r6
10002954:	1c0e      	adds	r6, r1, #0
10002956:	e727      	b.n	100027a8 <__aeabi_fadd+0x3c>
10002958:	1c14      	adds	r4, r2, #0
1000295a:	2d00      	cmp	r5, #0
1000295c:	d000      	beq.n	10002960 <__aeabi_fadd+0x1f4>
1000295e:	e727      	b.n	100027b0 <__aeabi_fadd+0x44>
10002960:	2600      	movs	r6, #0
10002962:	2501      	movs	r5, #1
10002964:	2304      	movs	r3, #4
10002966:	2400      	movs	r4, #0
10002968:	e74a      	b.n	10002800 <__aeabi_fadd+0x94>
1000296a:	3d01      	subs	r5, #1
1000296c:	2d00      	cmp	r5, #0
1000296e:	d108      	bne.n	10002982 <__aeabi_fadd+0x216>
10002970:	18fb      	adds	r3, r7, r3
10002972:	1c14      	adds	r4, r2, #0
10002974:	e771      	b.n	1000285a <__aeabi_fadd+0xee>
10002976:	2b00      	cmp	r3, #0
10002978:	d150      	bne.n	10002a1c <__aeabi_fadd+0x2b0>
1000297a:	1c65      	adds	r5, r4, #1
1000297c:	1c3b      	adds	r3, r7, #0
1000297e:	1c0e      	adds	r6, r1, #0
10002980:	e72c      	b.n	100027dc <__aeabi_fadd+0x70>
10002982:	2aff      	cmp	r2, #255	; 0xff
10002984:	d000      	beq.n	10002988 <__aeabi_fadd+0x21c>
10002986:	e762      	b.n	1000284e <__aeabi_fadd+0xe2>
10002988:	e7b9      	b.n	100028fe <__aeabi_fadd+0x192>
1000298a:	2380      	movs	r3, #128	; 0x80
1000298c:	005d      	lsls	r5, r3, #1
1000298e:	24ff      	movs	r4, #255	; 0xff
10002990:	2304      	movs	r3, #4
10002992:	e735      	b.n	10002800 <__aeabi_fadd+0x94>
10002994:	2a00      	cmp	r2, #0
10002996:	d17c      	bne.n	10002a92 <__aeabi_fadd+0x326>
10002998:	2b00      	cmp	r3, #0
1000299a:	d100      	bne.n	1000299e <__aeabi_fadd+0x232>
1000299c:	e0a1      	b.n	10002ae2 <__aeabi_fadd+0x376>
1000299e:	2f00      	cmp	r7, #0
100029a0:	d100      	bne.n	100029a4 <__aeabi_fadd+0x238>
100029a2:	e0af      	b.n	10002b04 <__aeabi_fadd+0x398>
100029a4:	18fb      	adds	r3, r7, r3
100029a6:	0159      	lsls	r1, r3, #5
100029a8:	d400      	bmi.n	100029ac <__aeabi_fadd+0x240>
100029aa:	e0b0      	b.n	10002b0e <__aeabi_fadd+0x3a2>
100029ac:	4e46      	ldr	r6, [pc, #280]	; (10002ac8 <__aeabi_fadd+0x35c>)
100029ae:	2502      	movs	r5, #2
100029b0:	4033      	ands	r3, r6
100029b2:	2401      	movs	r4, #1
100029b4:	1c06      	adds	r6, r0, #0
100029b6:	e711      	b.n	100027dc <__aeabi_fadd+0x70>
100029b8:	1c3c      	adds	r4, r7, #0
100029ba:	2320      	movs	r3, #32
100029bc:	40ec      	lsrs	r4, r5
100029be:	1b5d      	subs	r5, r3, r5
100029c0:	40af      	lsls	r7, r5
100029c2:	1c3b      	adds	r3, r7, #0
100029c4:	1e5f      	subs	r7, r3, #1
100029c6:	41bb      	sbcs	r3, r7
100029c8:	4323      	orrs	r3, r4
100029ca:	e744      	b.n	10002856 <__aeabi_fadd+0xea>
100029cc:	2a00      	cmp	r2, #0
100029ce:	d112      	bne.n	100029f6 <__aeabi_fadd+0x28a>
100029d0:	4665      	mov	r5, ip
100029d2:	2d00      	cmp	r5, #0
100029d4:	d141      	bne.n	10002a5a <__aeabi_fadd+0x2ee>
100029d6:	2f00      	cmp	r7, #0
100029d8:	d0c2      	beq.n	10002960 <__aeabi_fadd+0x1f4>
100029da:	1c3b      	adds	r3, r7, #0
100029dc:	1c0e      	adds	r6, r1, #0
100029de:	2501      	movs	r5, #1
100029e0:	2400      	movs	r4, #0
100029e2:	e6fb      	b.n	100027dc <__aeabi_fadd+0x70>
100029e4:	426d      	negs	r5, r5
100029e6:	2a00      	cmp	r2, #0
100029e8:	d123      	bne.n	10002a32 <__aeabi_fadd+0x2c6>
100029ea:	2b00      	cmp	r3, #0
100029ec:	d166      	bne.n	10002abc <__aeabi_fadd+0x350>
100029ee:	1c65      	adds	r5, r4, #1
100029f0:	1c3b      	adds	r3, r7, #0
100029f2:	1c06      	adds	r6, r0, #0
100029f4:	e6f2      	b.n	100027dc <__aeabi_fadd+0x70>
100029f6:	4662      	mov	r2, ip
100029f8:	2a00      	cmp	r2, #0
100029fa:	d138      	bne.n	10002a6e <__aeabi_fadd+0x302>
100029fc:	2f00      	cmp	r7, #0
100029fe:	d107      	bne.n	10002a10 <__aeabi_fadd+0x2a4>
10002a00:	2280      	movs	r2, #128	; 0x80
10002a02:	2600      	movs	r6, #0
10002a04:	0055      	lsls	r5, r2, #1
10002a06:	4b31      	ldr	r3, [pc, #196]	; (10002acc <__aeabi_fadd+0x360>)
10002a08:	24ff      	movs	r4, #255	; 0xff
10002a0a:	e6f9      	b.n	10002800 <__aeabi_fadd+0x94>
10002a0c:	2cff      	cmp	r4, #255	; 0xff
10002a0e:	d193      	bne.n	10002938 <__aeabi_fadd+0x1cc>
10002a10:	1c3b      	adds	r3, r7, #0
10002a12:	2780      	movs	r7, #128	; 0x80
10002a14:	1c0e      	adds	r6, r1, #0
10002a16:	007d      	lsls	r5, r7, #1
10002a18:	24ff      	movs	r4, #255	; 0xff
10002a1a:	e6df      	b.n	100027dc <__aeabi_fadd+0x70>
10002a1c:	3801      	subs	r0, #1
10002a1e:	2800      	cmp	r0, #0
10002a20:	d1f4      	bne.n	10002a0c <__aeabi_fadd+0x2a0>
10002a22:	4666      	mov	r6, ip
10002a24:	1bbb      	subs	r3, r7, r6
10002a26:	1c0e      	adds	r6, r1, #0
10002a28:	e6be      	b.n	100027a8 <__aeabi_fadd+0x3c>
10002a2a:	2780      	movs	r7, #128	; 0x80
10002a2c:	007d      	lsls	r5, r7, #1
10002a2e:	2304      	movs	r3, #4
10002a30:	e6e6      	b.n	10002800 <__aeabi_fadd+0x94>
10002a32:	2cff      	cmp	r4, #255	; 0xff
10002a34:	d05c      	beq.n	10002af0 <__aeabi_fadd+0x384>
10002a36:	2280      	movs	r2, #128	; 0x80
10002a38:	04d1      	lsls	r1, r2, #19
10002a3a:	430b      	orrs	r3, r1
10002a3c:	469c      	mov	ip, r3
10002a3e:	2301      	movs	r3, #1
10002a40:	2d1b      	cmp	r5, #27
10002a42:	dc08      	bgt.n	10002a56 <__aeabi_fadd+0x2ea>
10002a44:	2120      	movs	r1, #32
10002a46:	4662      	mov	r2, ip
10002a48:	40ea      	lsrs	r2, r5
10002a4a:	4663      	mov	r3, ip
10002a4c:	1b4d      	subs	r5, r1, r5
10002a4e:	40ab      	lsls	r3, r5
10002a50:	1e59      	subs	r1, r3, #1
10002a52:	418b      	sbcs	r3, r1
10002a54:	4313      	orrs	r3, r2
10002a56:	19db      	adds	r3, r3, r7
10002a58:	e6ff      	b.n	1000285a <__aeabi_fadd+0xee>
10002a5a:	2f00      	cmp	r7, #0
10002a5c:	d038      	beq.n	10002ad0 <__aeabi_fadd+0x364>
10002a5e:	1beb      	subs	r3, r5, r7
10002a60:	015a      	lsls	r2, r3, #5
10002a62:	d54b      	bpl.n	10002afc <__aeabi_fadd+0x390>
10002a64:	1b7b      	subs	r3, r7, r5
10002a66:	1c0e      	adds	r6, r1, #0
10002a68:	2501      	movs	r5, #1
10002a6a:	2400      	movs	r4, #0
10002a6c:	e6b6      	b.n	100027dc <__aeabi_fadd+0x70>
10002a6e:	2f00      	cmp	r7, #0
10002a70:	d100      	bne.n	10002a74 <__aeabi_fadd+0x308>
10002a72:	e700      	b.n	10002876 <__aeabi_fadd+0x10a>
10002a74:	2080      	movs	r0, #128	; 0x80
10002a76:	08d3      	lsrs	r3, r2, #3
10002a78:	03c4      	lsls	r4, r0, #15
10002a7a:	4223      	tst	r3, r4
10002a7c:	d004      	beq.n	10002a88 <__aeabi_fadd+0x31c>
10002a7e:	08ff      	lsrs	r7, r7, #3
10002a80:	4227      	tst	r7, r4
10002a82:	d101      	bne.n	10002a88 <__aeabi_fadd+0x31c>
10002a84:	1c3b      	adds	r3, r7, #0
10002a86:	1c0e      	adds	r6, r1, #0
10002a88:	2180      	movs	r1, #128	; 0x80
10002a8a:	00db      	lsls	r3, r3, #3
10002a8c:	004d      	lsls	r5, r1, #1
10002a8e:	24ff      	movs	r4, #255	; 0xff
10002a90:	e6a4      	b.n	100027dc <__aeabi_fadd+0x70>
10002a92:	2b00      	cmp	r3, #0
10002a94:	d020      	beq.n	10002ad8 <__aeabi_fadd+0x36c>
10002a96:	2f00      	cmp	r7, #0
10002a98:	d100      	bne.n	10002a9c <__aeabi_fadd+0x330>
10002a9a:	e6ec      	b.n	10002876 <__aeabi_fadd+0x10a>
10002a9c:	2280      	movs	r2, #128	; 0x80
10002a9e:	08de      	lsrs	r6, r3, #3
10002aa0:	03d5      	lsls	r5, r2, #15
10002aa2:	1c31      	adds	r1, r6, #0
10002aa4:	422e      	tst	r6, r5
10002aa6:	d003      	beq.n	10002ab0 <__aeabi_fadd+0x344>
10002aa8:	08f9      	lsrs	r1, r7, #3
10002aaa:	4229      	tst	r1, r5
10002aac:	d000      	beq.n	10002ab0 <__aeabi_fadd+0x344>
10002aae:	1c31      	adds	r1, r6, #0
10002ab0:	1c06      	adds	r6, r0, #0
10002ab2:	2080      	movs	r0, #128	; 0x80
10002ab4:	00cb      	lsls	r3, r1, #3
10002ab6:	0045      	lsls	r5, r0, #1
10002ab8:	24ff      	movs	r4, #255	; 0xff
10002aba:	e68f      	b.n	100027dc <__aeabi_fadd+0x70>
10002abc:	3d01      	subs	r5, #1
10002abe:	2d00      	cmp	r5, #0
10002ac0:	d114      	bne.n	10002aec <__aeabi_fadd+0x380>
10002ac2:	18fb      	adds	r3, r7, r3
10002ac4:	e6c9      	b.n	1000285a <__aeabi_fadd+0xee>
10002ac6:	46c0      	nop			; (mov r8, r8)
10002ac8:	fbffffff 	.word	0xfbffffff
10002acc:	03fffffc 	.word	0x03fffffc
10002ad0:	4663      	mov	r3, ip
10002ad2:	2501      	movs	r5, #1
10002ad4:	2400      	movs	r4, #0
10002ad6:	e681      	b.n	100027dc <__aeabi_fadd+0x70>
10002ad8:	2480      	movs	r4, #128	; 0x80
10002ada:	0065      	lsls	r5, r4, #1
10002adc:	1c3b      	adds	r3, r7, #0
10002ade:	24ff      	movs	r4, #255	; 0xff
10002ae0:	e67c      	b.n	100027dc <__aeabi_fadd+0x70>
10002ae2:	1c3b      	adds	r3, r7, #0
10002ae4:	1c06      	adds	r6, r0, #0
10002ae6:	2501      	movs	r5, #1
10002ae8:	2400      	movs	r4, #0
10002aea:	e677      	b.n	100027dc <__aeabi_fadd+0x70>
10002aec:	2cff      	cmp	r4, #255	; 0xff
10002aee:	d1a6      	bne.n	10002a3e <__aeabi_fadd+0x2d2>
10002af0:	1c3b      	adds	r3, r7, #0
10002af2:	2780      	movs	r7, #128	; 0x80
10002af4:	1c06      	adds	r6, r0, #0
10002af6:	007d      	lsls	r5, r7, #1
10002af8:	24ff      	movs	r4, #255	; 0xff
10002afa:	e66f      	b.n	100027dc <__aeabi_fadd+0x70>
10002afc:	2b00      	cmp	r3, #0
10002afe:	d100      	bne.n	10002b02 <__aeabi_fadd+0x396>
10002b00:	e72e      	b.n	10002960 <__aeabi_fadd+0x1f4>
10002b02:	e669      	b.n	100027d8 <__aeabi_fadd+0x6c>
10002b04:	4663      	mov	r3, ip
10002b06:	1c06      	adds	r6, r0, #0
10002b08:	2501      	movs	r5, #1
10002b0a:	2400      	movs	r4, #0
10002b0c:	e666      	b.n	100027dc <__aeabi_fadd+0x70>
10002b0e:	1c06      	adds	r6, r0, #0
10002b10:	2501      	movs	r5, #1
10002b12:	2400      	movs	r4, #0
10002b14:	e662      	b.n	100027dc <__aeabi_fadd+0x70>
10002b16:	46c0      	nop			; (mov r8, r8)

10002b18 <__aeabi_fdiv>:
10002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b1a:	465f      	mov	r7, fp
10002b1c:	4656      	mov	r6, sl
10002b1e:	464d      	mov	r5, r9
10002b20:	4644      	mov	r4, r8
10002b22:	b4f0      	push	{r4, r5, r6, r7}
10002b24:	0245      	lsls	r5, r0, #9
10002b26:	0044      	lsls	r4, r0, #1
10002b28:	b083      	sub	sp, #12
10002b2a:	1c0e      	adds	r6, r1, #0
10002b2c:	0a6d      	lsrs	r5, r5, #9
10002b2e:	0e24      	lsrs	r4, r4, #24
10002b30:	0fc7      	lsrs	r7, r0, #31
10002b32:	2c00      	cmp	r4, #0
10002b34:	d107      	bne.n	10002b46 <__aeabi_fdiv+0x2e>
10002b36:	2d00      	cmp	r5, #0
10002b38:	d000      	beq.n	10002b3c <__aeabi_fdiv+0x24>
10002b3a:	e091      	b.n	10002c60 <__aeabi_fdiv+0x148>
10002b3c:	2104      	movs	r1, #4
10002b3e:	2201      	movs	r2, #1
10002b40:	4688      	mov	r8, r1
10002b42:	4692      	mov	sl, r2
10002b44:	e009      	b.n	10002b5a <__aeabi_fdiv+0x42>
10002b46:	2cff      	cmp	r4, #255	; 0xff
10002b48:	d055      	beq.n	10002bf6 <__aeabi_fdiv+0xde>
10002b4a:	2380      	movs	r3, #128	; 0x80
10002b4c:	0418      	lsls	r0, r3, #16
10002b4e:	2100      	movs	r1, #0
10002b50:	4305      	orrs	r5, r0
10002b52:	00ed      	lsls	r5, r5, #3
10002b54:	3c7f      	subs	r4, #127	; 0x7f
10002b56:	4688      	mov	r8, r1
10002b58:	468a      	mov	sl, r1
10002b5a:	1c33      	adds	r3, r6, #0
10002b5c:	0058      	lsls	r0, r3, #1
10002b5e:	0276      	lsls	r6, r6, #9
10002b60:	0fd9      	lsrs	r1, r3, #31
10002b62:	0a76      	lsrs	r6, r6, #9
10002b64:	0e00      	lsrs	r0, r0, #24
10002b66:	468b      	mov	fp, r1
10002b68:	d14c      	bne.n	10002c04 <__aeabi_fdiv+0xec>
10002b6a:	2201      	movs	r2, #1
10002b6c:	4694      	mov	ip, r2
10002b6e:	2e00      	cmp	r6, #0
10002b70:	d000      	beq.n	10002b74 <__aeabi_fdiv+0x5c>
10002b72:	e081      	b.n	10002c78 <__aeabi_fdiv+0x160>
10002b74:	465b      	mov	r3, fp
10002b76:	407b      	eors	r3, r7
10002b78:	4662      	mov	r2, ip
10002b7a:	4641      	mov	r1, r8
10002b7c:	9301      	str	r3, [sp, #4]
10002b7e:	430a      	orrs	r2, r1
10002b80:	2a0f      	cmp	r2, #15
10002b82:	d950      	bls.n	10002c26 <__aeabi_fdiv+0x10e>
10002b84:	1a20      	subs	r0, r4, r0
10002b86:	0169      	lsls	r1, r5, #5
10002b88:	4681      	mov	r9, r0
10002b8a:	0175      	lsls	r5, r6, #5
10002b8c:	42a9      	cmp	r1, r5
10002b8e:	d300      	bcc.n	10002b92 <__aeabi_fdiv+0x7a>
10002b90:	e0b3      	b.n	10002cfa <__aeabi_fdiv+0x1e2>
10002b92:	2201      	movs	r2, #1
10002b94:	4253      	negs	r3, r2
10002b96:	4499      	add	r9, r3
10002b98:	241b      	movs	r4, #27
10002b9a:	2600      	movs	r6, #0
10002b9c:	2701      	movs	r7, #1
10002b9e:	1e62      	subs	r2, r4, #1
10002ba0:	1c38      	adds	r0, r7, #0
10002ba2:	4010      	ands	r0, r2
10002ba4:	004b      	lsls	r3, r1, #1
10002ba6:	0076      	lsls	r6, r6, #1
10002ba8:	2900      	cmp	r1, #0
10002baa:	da00      	bge.n	10002bae <__aeabi_fdiv+0x96>
10002bac:	e0a9      	b.n	10002d02 <__aeabi_fdiv+0x1ea>
10002bae:	429d      	cmp	r5, r3
10002bb0:	d800      	bhi.n	10002bb4 <__aeabi_fdiv+0x9c>
10002bb2:	e0a6      	b.n	10002d02 <__aeabi_fdiv+0x1ea>
10002bb4:	3c01      	subs	r4, #1
10002bb6:	2c00      	cmp	r4, #0
10002bb8:	dc00      	bgt.n	10002bbc <__aeabi_fdiv+0xa4>
10002bba:	e0ab      	b.n	10002d14 <__aeabi_fdiv+0x1fc>
10002bbc:	2800      	cmp	r0, #0
10002bbe:	d00c      	beq.n	10002bda <__aeabi_fdiv+0xc2>
10002bc0:	1c19      	adds	r1, r3, #0
10002bc2:	0076      	lsls	r6, r6, #1
10002bc4:	005b      	lsls	r3, r3, #1
10002bc6:	2900      	cmp	r1, #0
10002bc8:	db01      	blt.n	10002bce <__aeabi_fdiv+0xb6>
10002bca:	429d      	cmp	r5, r3
10002bcc:	d801      	bhi.n	10002bd2 <__aeabi_fdiv+0xba>
10002bce:	1b5b      	subs	r3, r3, r5
10002bd0:	433e      	orrs	r6, r7
10002bd2:	3c01      	subs	r4, #1
10002bd4:	2c00      	cmp	r4, #0
10002bd6:	dc00      	bgt.n	10002bda <__aeabi_fdiv+0xc2>
10002bd8:	e09c      	b.n	10002d14 <__aeabi_fdiv+0x1fc>
10002bda:	0059      	lsls	r1, r3, #1
10002bdc:	0072      	lsls	r2, r6, #1
10002bde:	2b00      	cmp	r3, #0
10002be0:	db01      	blt.n	10002be6 <__aeabi_fdiv+0xce>
10002be2:	428d      	cmp	r5, r1
10002be4:	d801      	bhi.n	10002bea <__aeabi_fdiv+0xd2>
10002be6:	1b49      	subs	r1, r1, r5
10002be8:	433a      	orrs	r2, r7
10002bea:	3c01      	subs	r4, #1
10002bec:	004b      	lsls	r3, r1, #1
10002bee:	0056      	lsls	r6, r2, #1
10002bf0:	2900      	cmp	r1, #0
10002bf2:	daea      	bge.n	10002bca <__aeabi_fdiv+0xb2>
10002bf4:	e7eb      	b.n	10002bce <__aeabi_fdiv+0xb6>
10002bf6:	2d00      	cmp	r5, #0
10002bf8:	d12d      	bne.n	10002c56 <__aeabi_fdiv+0x13e>
10002bfa:	2008      	movs	r0, #8
10002bfc:	2102      	movs	r1, #2
10002bfe:	4680      	mov	r8, r0
10002c00:	468a      	mov	sl, r1
10002c02:	e7aa      	b.n	10002b5a <__aeabi_fdiv+0x42>
10002c04:	28ff      	cmp	r0, #255	; 0xff
10002c06:	d020      	beq.n	10002c4a <__aeabi_fdiv+0x132>
10002c08:	2280      	movs	r2, #128	; 0x80
10002c0a:	0413      	lsls	r3, r2, #16
10002c0c:	2100      	movs	r1, #0
10002c0e:	431e      	orrs	r6, r3
10002c10:	468c      	mov	ip, r1
10002c12:	465b      	mov	r3, fp
10002c14:	407b      	eors	r3, r7
10002c16:	4662      	mov	r2, ip
10002c18:	4641      	mov	r1, r8
10002c1a:	00f6      	lsls	r6, r6, #3
10002c1c:	387f      	subs	r0, #127	; 0x7f
10002c1e:	9301      	str	r3, [sp, #4]
10002c20:	430a      	orrs	r2, r1
10002c22:	2a0f      	cmp	r2, #15
10002c24:	d8ae      	bhi.n	10002b84 <__aeabi_fdiv+0x6c>
10002c26:	4956      	ldr	r1, [pc, #344]	; (10002d80 <__aeabi_fdiv+0x268>)
10002c28:	0092      	lsls	r2, r2, #2
10002c2a:	588a      	ldr	r2, [r1, r2]
10002c2c:	4697      	mov	pc, r2
10002c2e:	9b01      	ldr	r3, [sp, #4]
10002c30:	26ff      	movs	r6, #255	; 0xff
10002c32:	2500      	movs	r5, #0
10002c34:	05f0      	lsls	r0, r6, #23
10002c36:	4328      	orrs	r0, r5
10002c38:	07de      	lsls	r6, r3, #31
10002c3a:	4330      	orrs	r0, r6
10002c3c:	b003      	add	sp, #12
10002c3e:	bc3c      	pop	{r2, r3, r4, r5}
10002c40:	4690      	mov	r8, r2
10002c42:	4699      	mov	r9, r3
10002c44:	46a2      	mov	sl, r4
10002c46:	46ab      	mov	fp, r5
10002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002c4a:	1c33      	adds	r3, r6, #0
10002c4c:	1e5a      	subs	r2, r3, #1
10002c4e:	4193      	sbcs	r3, r2
10002c50:	3302      	adds	r3, #2
10002c52:	469c      	mov	ip, r3
10002c54:	e78e      	b.n	10002b74 <__aeabi_fdiv+0x5c>
10002c56:	220c      	movs	r2, #12
10002c58:	2303      	movs	r3, #3
10002c5a:	4690      	mov	r8, r2
10002c5c:	469a      	mov	sl, r3
10002c5e:	e77c      	b.n	10002b5a <__aeabi_fdiv+0x42>
10002c60:	1c28      	adds	r0, r5, #0
10002c62:	f001 f827 	bl	10003cb4 <__clzsi2>
10002c66:	2276      	movs	r2, #118	; 0x76
10002c68:	1f44      	subs	r4, r0, #5
10002c6a:	4253      	negs	r3, r2
10002c6c:	40a5      	lsls	r5, r4
10002c6e:	1a1c      	subs	r4, r3, r0
10002c70:	2000      	movs	r0, #0
10002c72:	4680      	mov	r8, r0
10002c74:	4682      	mov	sl, r0
10002c76:	e770      	b.n	10002b5a <__aeabi_fdiv+0x42>
10002c78:	1c30      	adds	r0, r6, #0
10002c7a:	f001 f81b 	bl	10003cb4 <__clzsi2>
10002c7e:	2376      	movs	r3, #118	; 0x76
10002c80:	1f41      	subs	r1, r0, #5
10002c82:	408e      	lsls	r6, r1
10002c84:	425a      	negs	r2, r3
10002c86:	2100      	movs	r1, #0
10002c88:	1a10      	subs	r0, r2, r0
10002c8a:	468c      	mov	ip, r1
10002c8c:	e772      	b.n	10002b74 <__aeabi_fdiv+0x5c>
10002c8e:	2300      	movs	r3, #0
10002c90:	4d3c      	ldr	r5, [pc, #240]	; (10002d84 <__aeabi_fdiv+0x26c>)
10002c92:	26ff      	movs	r6, #255	; 0xff
10002c94:	e7ce      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002c96:	465f      	mov	r7, fp
10002c98:	1c35      	adds	r5, r6, #0
10002c9a:	9701      	str	r7, [sp, #4]
10002c9c:	4663      	mov	r3, ip
10002c9e:	2b02      	cmp	r3, #2
10002ca0:	d0c5      	beq.n	10002c2e <__aeabi_fdiv+0x116>
10002ca2:	2b03      	cmp	r3, #3
10002ca4:	d063      	beq.n	10002d6e <__aeabi_fdiv+0x256>
10002ca6:	2b01      	cmp	r3, #1
10002ca8:	d043      	beq.n	10002d32 <__aeabi_fdiv+0x21a>
10002caa:	4649      	mov	r1, r9
10002cac:	317f      	adds	r1, #127	; 0x7f
10002cae:	2900      	cmp	r1, #0
10002cb0:	dd35      	ble.n	10002d1e <__aeabi_fdiv+0x206>
10002cb2:	270f      	movs	r7, #15
10002cb4:	402f      	ands	r7, r5
10002cb6:	2f04      	cmp	r7, #4
10002cb8:	d000      	beq.n	10002cbc <__aeabi_fdiv+0x1a4>
10002cba:	3504      	adds	r5, #4
10002cbc:	012b      	lsls	r3, r5, #4
10002cbe:	d503      	bpl.n	10002cc8 <__aeabi_fdiv+0x1b0>
10002cc0:	4a31      	ldr	r2, [pc, #196]	; (10002d88 <__aeabi_fdiv+0x270>)
10002cc2:	4649      	mov	r1, r9
10002cc4:	4015      	ands	r5, r2
10002cc6:	3180      	adds	r1, #128	; 0x80
10002cc8:	29fe      	cmp	r1, #254	; 0xfe
10002cca:	dcb0      	bgt.n	10002c2e <__aeabi_fdiv+0x116>
10002ccc:	01a8      	lsls	r0, r5, #6
10002cce:	0a45      	lsrs	r5, r0, #9
10002cd0:	b2ce      	uxtb	r6, r1
10002cd2:	9b01      	ldr	r3, [sp, #4]
10002cd4:	e7ae      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002cd6:	2600      	movs	r6, #0
10002cd8:	2500      	movs	r5, #0
10002cda:	e7ab      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002cdc:	2080      	movs	r0, #128	; 0x80
10002cde:	03c1      	lsls	r1, r0, #15
10002ce0:	420d      	tst	r5, r1
10002ce2:	d011      	beq.n	10002d08 <__aeabi_fdiv+0x1f0>
10002ce4:	420e      	tst	r6, r1
10002ce6:	d10f      	bne.n	10002d08 <__aeabi_fdiv+0x1f0>
10002ce8:	430e      	orrs	r6, r1
10002cea:	0273      	lsls	r3, r6, #9
10002cec:	0a5d      	lsrs	r5, r3, #9
10002cee:	26ff      	movs	r6, #255	; 0xff
10002cf0:	465b      	mov	r3, fp
10002cf2:	e79f      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002cf4:	9701      	str	r7, [sp, #4]
10002cf6:	4653      	mov	r3, sl
10002cf8:	e7d1      	b.n	10002c9e <__aeabi_fdiv+0x186>
10002cfa:	1b49      	subs	r1, r1, r5
10002cfc:	241a      	movs	r4, #26
10002cfe:	2601      	movs	r6, #1
10002d00:	e74c      	b.n	10002b9c <__aeabi_fdiv+0x84>
10002d02:	1b5b      	subs	r3, r3, r5
10002d04:	433e      	orrs	r6, r7
10002d06:	e755      	b.n	10002bb4 <__aeabi_fdiv+0x9c>
10002d08:	430d      	orrs	r5, r1
10002d0a:	026a      	lsls	r2, r5, #9
10002d0c:	0a55      	lsrs	r5, r2, #9
10002d0e:	1c3b      	adds	r3, r7, #0
10002d10:	26ff      	movs	r6, #255	; 0xff
10002d12:	e78f      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002d14:	1c1d      	adds	r5, r3, #0
10002d16:	1e6b      	subs	r3, r5, #1
10002d18:	419d      	sbcs	r5, r3
10002d1a:	4335      	orrs	r5, r6
10002d1c:	e7c5      	b.n	10002caa <__aeabi_fdiv+0x192>
10002d1e:	247e      	movs	r4, #126	; 0x7e
10002d20:	4267      	negs	r7, r4
10002d22:	464a      	mov	r2, r9
10002d24:	1ab9      	subs	r1, r7, r2
10002d26:	291b      	cmp	r1, #27
10002d28:	dd08      	ble.n	10002d3c <__aeabi_fdiv+0x224>
10002d2a:	9b01      	ldr	r3, [sp, #4]
10002d2c:	2600      	movs	r6, #0
10002d2e:	2500      	movs	r5, #0
10002d30:	e780      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002d32:	9d01      	ldr	r5, [sp, #4]
10002d34:	2600      	movs	r6, #0
10002d36:	402b      	ands	r3, r5
10002d38:	2500      	movs	r5, #0
10002d3a:	e77b      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002d3c:	464e      	mov	r6, r9
10002d3e:	369e      	adds	r6, #158	; 0x9e
10002d40:	1c28      	adds	r0, r5, #0
10002d42:	40b5      	lsls	r5, r6
10002d44:	1c2b      	adds	r3, r5, #0
10002d46:	1e5d      	subs	r5, r3, #1
10002d48:	41ab      	sbcs	r3, r5
10002d4a:	40c8      	lsrs	r0, r1
10002d4c:	4303      	orrs	r3, r0
10002d4e:	250f      	movs	r5, #15
10002d50:	401d      	ands	r5, r3
10002d52:	2d04      	cmp	r5, #4
10002d54:	d000      	beq.n	10002d58 <__aeabi_fdiv+0x240>
10002d56:	3304      	adds	r3, #4
10002d58:	015a      	lsls	r2, r3, #5
10002d5a:	d503      	bpl.n	10002d64 <__aeabi_fdiv+0x24c>
10002d5c:	9b01      	ldr	r3, [sp, #4]
10002d5e:	2601      	movs	r6, #1
10002d60:	2500      	movs	r5, #0
10002d62:	e767      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002d64:	019c      	lsls	r4, r3, #6
10002d66:	0a65      	lsrs	r5, r4, #9
10002d68:	9b01      	ldr	r3, [sp, #4]
10002d6a:	2600      	movs	r6, #0
10002d6c:	e762      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002d6e:	2780      	movs	r7, #128	; 0x80
10002d70:	03fc      	lsls	r4, r7, #15
10002d72:	4325      	orrs	r5, r4
10002d74:	026e      	lsls	r6, r5, #9
10002d76:	0a75      	lsrs	r5, r6, #9
10002d78:	9b01      	ldr	r3, [sp, #4]
10002d7a:	26ff      	movs	r6, #255	; 0xff
10002d7c:	e75a      	b.n	10002c34 <__aeabi_fdiv+0x11c>
10002d7e:	46c0      	nop			; (mov r8, r8)
10002d80:	1002aa6c 	.word	0x1002aa6c
10002d84:	007fffff 	.word	0x007fffff
10002d88:	f7ffffff 	.word	0xf7ffffff

10002d8c <__eqsf2>:
10002d8c:	0243      	lsls	r3, r0, #9
10002d8e:	0042      	lsls	r2, r0, #1
10002d90:	b570      	push	{r4, r5, r6, lr}
10002d92:	0a5c      	lsrs	r4, r3, #9
10002d94:	0fc6      	lsrs	r6, r0, #31
10002d96:	0e13      	lsrs	r3, r2, #24
10002d98:	0248      	lsls	r0, r1, #9
10002d9a:	004a      	lsls	r2, r1, #1
10002d9c:	0a45      	lsrs	r5, r0, #9
10002d9e:	0e12      	lsrs	r2, r2, #24
10002da0:	0fc9      	lsrs	r1, r1, #31
10002da2:	2bff      	cmp	r3, #255	; 0xff
10002da4:	d005      	beq.n	10002db2 <__eqsf2+0x26>
10002da6:	2aff      	cmp	r2, #255	; 0xff
10002da8:	d008      	beq.n	10002dbc <__eqsf2+0x30>
10002daa:	2001      	movs	r0, #1
10002dac:	4293      	cmp	r3, r2
10002dae:	d00b      	beq.n	10002dc8 <__eqsf2+0x3c>
10002db0:	bd70      	pop	{r4, r5, r6, pc}
10002db2:	2001      	movs	r0, #1
10002db4:	2c00      	cmp	r4, #0
10002db6:	d1fb      	bne.n	10002db0 <__eqsf2+0x24>
10002db8:	2aff      	cmp	r2, #255	; 0xff
10002dba:	d1f6      	bne.n	10002daa <__eqsf2+0x1e>
10002dbc:	2001      	movs	r0, #1
10002dbe:	2d00      	cmp	r5, #0
10002dc0:	d1f6      	bne.n	10002db0 <__eqsf2+0x24>
10002dc2:	2001      	movs	r0, #1
10002dc4:	4293      	cmp	r3, r2
10002dc6:	d1f3      	bne.n	10002db0 <__eqsf2+0x24>
10002dc8:	42ac      	cmp	r4, r5
10002dca:	d1f1      	bne.n	10002db0 <__eqsf2+0x24>
10002dcc:	428e      	cmp	r6, r1
10002dce:	d003      	beq.n	10002dd8 <__eqsf2+0x4c>
10002dd0:	2b00      	cmp	r3, #0
10002dd2:	d1ed      	bne.n	10002db0 <__eqsf2+0x24>
10002dd4:	2c00      	cmp	r4, #0
10002dd6:	d1eb      	bne.n	10002db0 <__eqsf2+0x24>
10002dd8:	2000      	movs	r0, #0
10002dda:	e7e9      	b.n	10002db0 <__eqsf2+0x24>

10002ddc <__gesf2>:
10002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10002dde:	0243      	lsls	r3, r0, #9
10002de0:	0042      	lsls	r2, r0, #1
10002de2:	004f      	lsls	r7, r1, #1
10002de4:	0fc6      	lsrs	r6, r0, #31
10002de6:	0248      	lsls	r0, r1, #9
10002de8:	0a5c      	lsrs	r4, r3, #9
10002dea:	0a45      	lsrs	r5, r0, #9
10002dec:	0e13      	lsrs	r3, r2, #24
10002dee:	0fc9      	lsrs	r1, r1, #31
10002df0:	0e3a      	lsrs	r2, r7, #24
10002df2:	2bff      	cmp	r3, #255	; 0xff
10002df4:	d026      	beq.n	10002e44 <__gesf2+0x68>
10002df6:	2aff      	cmp	r2, #255	; 0xff
10002df8:	d029      	beq.n	10002e4e <__gesf2+0x72>
10002dfa:	2b00      	cmp	r3, #0
10002dfc:	d10c      	bne.n	10002e18 <__gesf2+0x3c>
10002dfe:	4260      	negs	r0, r4
10002e00:	4160      	adcs	r0, r4
10002e02:	4684      	mov	ip, r0
10002e04:	2a00      	cmp	r2, #0
10002e06:	d00a      	beq.n	10002e1e <__gesf2+0x42>
10002e08:	2800      	cmp	r0, #0
10002e0a:	d116      	bne.n	10002e3a <__gesf2+0x5e>
10002e0c:	428e      	cmp	r6, r1
10002e0e:	d021      	beq.n	10002e54 <__gesf2+0x78>
10002e10:	2e00      	cmp	r6, #0
10002e12:	d114      	bne.n	10002e3e <__gesf2+0x62>
10002e14:	2001      	movs	r0, #1
10002e16:	e014      	b.n	10002e42 <__gesf2+0x66>
10002e18:	2a00      	cmp	r2, #0
10002e1a:	d1f7      	bne.n	10002e0c <__gesf2+0x30>
10002e1c:	4694      	mov	ip, r2
10002e1e:	426f      	negs	r7, r5
10002e20:	416f      	adcs	r7, r5
10002e22:	4660      	mov	r0, ip
10002e24:	2800      	cmp	r0, #0
10002e26:	d105      	bne.n	10002e34 <__gesf2+0x58>
10002e28:	2f00      	cmp	r7, #0
10002e2a:	d0ef      	beq.n	10002e0c <__gesf2+0x30>
10002e2c:	2001      	movs	r0, #1
10002e2e:	2e00      	cmp	r6, #0
10002e30:	d007      	beq.n	10002e42 <__gesf2+0x66>
10002e32:	e004      	b.n	10002e3e <__gesf2+0x62>
10002e34:	2000      	movs	r0, #0
10002e36:	2f00      	cmp	r7, #0
10002e38:	d103      	bne.n	10002e42 <__gesf2+0x66>
10002e3a:	2900      	cmp	r1, #0
10002e3c:	d1ea      	bne.n	10002e14 <__gesf2+0x38>
10002e3e:	2101      	movs	r1, #1
10002e40:	4248      	negs	r0, r1
10002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002e44:	2c00      	cmp	r4, #0
10002e46:	d0d6      	beq.n	10002df6 <__gesf2+0x1a>
10002e48:	2202      	movs	r2, #2
10002e4a:	4250      	negs	r0, r2
10002e4c:	e7f9      	b.n	10002e42 <__gesf2+0x66>
10002e4e:	2d00      	cmp	r5, #0
10002e50:	d0d3      	beq.n	10002dfa <__gesf2+0x1e>
10002e52:	e7f9      	b.n	10002e48 <__gesf2+0x6c>
10002e54:	4293      	cmp	r3, r2
10002e56:	dcdb      	bgt.n	10002e10 <__gesf2+0x34>
10002e58:	db04      	blt.n	10002e64 <__gesf2+0x88>
10002e5a:	42ac      	cmp	r4, r5
10002e5c:	d8d8      	bhi.n	10002e10 <__gesf2+0x34>
10002e5e:	2000      	movs	r0, #0
10002e60:	42ac      	cmp	r4, r5
10002e62:	d2ee      	bcs.n	10002e42 <__gesf2+0x66>
10002e64:	2e00      	cmp	r6, #0
10002e66:	d0ea      	beq.n	10002e3e <__gesf2+0x62>
10002e68:	2001      	movs	r0, #1
10002e6a:	e7ea      	b.n	10002e42 <__gesf2+0x66>

10002e6c <__lesf2>:
10002e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002e6e:	0243      	lsls	r3, r0, #9
10002e70:	0042      	lsls	r2, r0, #1
10002e72:	004f      	lsls	r7, r1, #1
10002e74:	0fc6      	lsrs	r6, r0, #31
10002e76:	0248      	lsls	r0, r1, #9
10002e78:	0a5c      	lsrs	r4, r3, #9
10002e7a:	0a45      	lsrs	r5, r0, #9
10002e7c:	0e13      	lsrs	r3, r2, #24
10002e7e:	0fc9      	lsrs	r1, r1, #31
10002e80:	0e3a      	lsrs	r2, r7, #24
10002e82:	2bff      	cmp	r3, #255	; 0xff
10002e84:	d026      	beq.n	10002ed4 <__lesf2+0x68>
10002e86:	2aff      	cmp	r2, #255	; 0xff
10002e88:	d028      	beq.n	10002edc <__lesf2+0x70>
10002e8a:	2b00      	cmp	r3, #0
10002e8c:	d00f      	beq.n	10002eae <__lesf2+0x42>
10002e8e:	2a00      	cmp	r2, #0
10002e90:	d114      	bne.n	10002ebc <__lesf2+0x50>
10002e92:	4694      	mov	ip, r2
10002e94:	426f      	negs	r7, r5
10002e96:	416f      	adcs	r7, r5
10002e98:	4660      	mov	r0, ip
10002e9a:	2800      	cmp	r0, #0
10002e9c:	d014      	beq.n	10002ec8 <__lesf2+0x5c>
10002e9e:	2000      	movs	r0, #0
10002ea0:	2f00      	cmp	r7, #0
10002ea2:	d103      	bne.n	10002eac <__lesf2+0x40>
10002ea4:	2900      	cmp	r1, #0
10002ea6:	d10d      	bne.n	10002ec4 <__lesf2+0x58>
10002ea8:	2101      	movs	r1, #1
10002eaa:	4248      	negs	r0, r1
10002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002eae:	4260      	negs	r0, r4
10002eb0:	4160      	adcs	r0, r4
10002eb2:	4684      	mov	ip, r0
10002eb4:	2a00      	cmp	r2, #0
10002eb6:	d0ed      	beq.n	10002e94 <__lesf2+0x28>
10002eb8:	2800      	cmp	r0, #0
10002eba:	d1f3      	bne.n	10002ea4 <__lesf2+0x38>
10002ebc:	428e      	cmp	r6, r1
10002ebe:	d011      	beq.n	10002ee4 <__lesf2+0x78>
10002ec0:	2e00      	cmp	r6, #0
10002ec2:	d1f1      	bne.n	10002ea8 <__lesf2+0x3c>
10002ec4:	2001      	movs	r0, #1
10002ec6:	e7f1      	b.n	10002eac <__lesf2+0x40>
10002ec8:	2f00      	cmp	r7, #0
10002eca:	d0f7      	beq.n	10002ebc <__lesf2+0x50>
10002ecc:	2001      	movs	r0, #1
10002ece:	2e00      	cmp	r6, #0
10002ed0:	d0ec      	beq.n	10002eac <__lesf2+0x40>
10002ed2:	e7e9      	b.n	10002ea8 <__lesf2+0x3c>
10002ed4:	2002      	movs	r0, #2
10002ed6:	2c00      	cmp	r4, #0
10002ed8:	d1e8      	bne.n	10002eac <__lesf2+0x40>
10002eda:	e7d4      	b.n	10002e86 <__lesf2+0x1a>
10002edc:	2002      	movs	r0, #2
10002ede:	2d00      	cmp	r5, #0
10002ee0:	d1e4      	bne.n	10002eac <__lesf2+0x40>
10002ee2:	e7d2      	b.n	10002e8a <__lesf2+0x1e>
10002ee4:	4293      	cmp	r3, r2
10002ee6:	dceb      	bgt.n	10002ec0 <__lesf2+0x54>
10002ee8:	db04      	blt.n	10002ef4 <__lesf2+0x88>
10002eea:	42ac      	cmp	r4, r5
10002eec:	d8e8      	bhi.n	10002ec0 <__lesf2+0x54>
10002eee:	2000      	movs	r0, #0
10002ef0:	42ac      	cmp	r4, r5
10002ef2:	d2db      	bcs.n	10002eac <__lesf2+0x40>
10002ef4:	2e00      	cmp	r6, #0
10002ef6:	d0d7      	beq.n	10002ea8 <__lesf2+0x3c>
10002ef8:	2001      	movs	r0, #1
10002efa:	e7d7      	b.n	10002eac <__lesf2+0x40>

10002efc <__aeabi_fmul>:
10002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10002efe:	465f      	mov	r7, fp
10002f00:	4656      	mov	r6, sl
10002f02:	464d      	mov	r5, r9
10002f04:	4644      	mov	r4, r8
10002f06:	b4f0      	push	{r4, r5, r6, r7}
10002f08:	0245      	lsls	r5, r0, #9
10002f0a:	0046      	lsls	r6, r0, #1
10002f0c:	b083      	sub	sp, #12
10002f0e:	1c0f      	adds	r7, r1, #0
10002f10:	0a6d      	lsrs	r5, r5, #9
10002f12:	0e36      	lsrs	r6, r6, #24
10002f14:	0fc4      	lsrs	r4, r0, #31
10002f16:	2e00      	cmp	r6, #0
10002f18:	d106      	bne.n	10002f28 <__aeabi_fmul+0x2c>
10002f1a:	2d00      	cmp	r5, #0
10002f1c:	d170      	bne.n	10003000 <__aeabi_fmul+0x104>
10002f1e:	2104      	movs	r1, #4
10002f20:	2201      	movs	r2, #1
10002f22:	4688      	mov	r8, r1
10002f24:	4692      	mov	sl, r2
10002f26:	e009      	b.n	10002f3c <__aeabi_fmul+0x40>
10002f28:	2eff      	cmp	r6, #255	; 0xff
10002f2a:	d043      	beq.n	10002fb4 <__aeabi_fmul+0xb8>
10002f2c:	2380      	movs	r3, #128	; 0x80
10002f2e:	0418      	lsls	r0, r3, #16
10002f30:	2100      	movs	r1, #0
10002f32:	4305      	orrs	r5, r0
10002f34:	00ed      	lsls	r5, r5, #3
10002f36:	3e7f      	subs	r6, #127	; 0x7f
10002f38:	4688      	mov	r8, r1
10002f3a:	468a      	mov	sl, r1
10002f3c:	1c38      	adds	r0, r7, #0
10002f3e:	0043      	lsls	r3, r0, #1
10002f40:	027f      	lsls	r7, r7, #9
10002f42:	0fc1      	lsrs	r1, r0, #31
10002f44:	0a7f      	lsrs	r7, r7, #9
10002f46:	0e1b      	lsrs	r3, r3, #24
10002f48:	468b      	mov	fp, r1
10002f4a:	d13a      	bne.n	10002fc2 <__aeabi_fmul+0xc6>
10002f4c:	2101      	movs	r1, #1
10002f4e:	2f00      	cmp	r7, #0
10002f50:	d162      	bne.n	10003018 <__aeabi_fmul+0x11c>
10002f52:	4658      	mov	r0, fp
10002f54:	4060      	eors	r0, r4
10002f56:	4642      	mov	r2, r8
10002f58:	9001      	str	r0, [sp, #4]
10002f5a:	430a      	orrs	r2, r1
10002f5c:	2a0f      	cmp	r2, #15
10002f5e:	d93f      	bls.n	10002fe0 <__aeabi_fmul+0xe4>
10002f60:	042c      	lsls	r4, r5, #16
10002f62:	18f0      	adds	r0, r6, r3
10002f64:	0c26      	lsrs	r6, r4, #16
10002f66:	043b      	lsls	r3, r7, #16
10002f68:	0c1a      	lsrs	r2, r3, #16
10002f6a:	1c31      	adds	r1, r6, #0
10002f6c:	4351      	muls	r1, r2
10002f6e:	0c3f      	lsrs	r7, r7, #16
10002f70:	0c2d      	lsrs	r5, r5, #16
10002f72:	437e      	muls	r6, r7
10002f74:	436a      	muls	r2, r5
10002f76:	4681      	mov	r9, r0
10002f78:	0c08      	lsrs	r0, r1, #16
10002f7a:	1836      	adds	r6, r6, r0
10002f7c:	1c2c      	adds	r4, r5, #0
10002f7e:	18b3      	adds	r3, r6, r2
10002f80:	437c      	muls	r4, r7
10002f82:	429a      	cmp	r2, r3
10002f84:	d900      	bls.n	10002f88 <__aeabi_fmul+0x8c>
10002f86:	e09a      	b.n	100030be <__aeabi_fmul+0x1c2>
10002f88:	0409      	lsls	r1, r1, #16
10002f8a:	041d      	lsls	r5, r3, #16
10002f8c:	0c08      	lsrs	r0, r1, #16
10002f8e:	182e      	adds	r6, r5, r0
10002f90:	01b5      	lsls	r5, r6, #6
10002f92:	0c1b      	lsrs	r3, r3, #16
10002f94:	1e69      	subs	r1, r5, #1
10002f96:	418d      	sbcs	r5, r1
10002f98:	0eb2      	lsrs	r2, r6, #26
10002f9a:	18e7      	adds	r7, r4, r3
10002f9c:	4315      	orrs	r5, r2
10002f9e:	01bc      	lsls	r4, r7, #6
10002fa0:	4325      	orrs	r5, r4
10002fa2:	012b      	lsls	r3, r5, #4
10002fa4:	d54b      	bpl.n	1000303e <__aeabi_fmul+0x142>
10002fa6:	2001      	movs	r0, #1
10002fa8:	4028      	ands	r0, r5
10002faa:	2101      	movs	r1, #1
10002fac:	086d      	lsrs	r5, r5, #1
10002fae:	4489      	add	r9, r1
10002fb0:	4305      	orrs	r5, r0
10002fb2:	e044      	b.n	1000303e <__aeabi_fmul+0x142>
10002fb4:	2d00      	cmp	r5, #0
10002fb6:	d11e      	bne.n	10002ff6 <__aeabi_fmul+0xfa>
10002fb8:	2008      	movs	r0, #8
10002fba:	2102      	movs	r1, #2
10002fbc:	4680      	mov	r8, r0
10002fbe:	468a      	mov	sl, r1
10002fc0:	e7bc      	b.n	10002f3c <__aeabi_fmul+0x40>
10002fc2:	2bff      	cmp	r3, #255	; 0xff
10002fc4:	d012      	beq.n	10002fec <__aeabi_fmul+0xf0>
10002fc6:	2280      	movs	r2, #128	; 0x80
10002fc8:	0410      	lsls	r0, r2, #16
10002fca:	4307      	orrs	r7, r0
10002fcc:	4658      	mov	r0, fp
10002fce:	2100      	movs	r1, #0
10002fd0:	4060      	eors	r0, r4
10002fd2:	4642      	mov	r2, r8
10002fd4:	00ff      	lsls	r7, r7, #3
10002fd6:	3b7f      	subs	r3, #127	; 0x7f
10002fd8:	9001      	str	r0, [sp, #4]
10002fda:	430a      	orrs	r2, r1
10002fdc:	2a0f      	cmp	r2, #15
10002fde:	d8bf      	bhi.n	10002f60 <__aeabi_fmul+0x64>
10002fe0:	0090      	lsls	r0, r2, #2
10002fe2:	4a5b      	ldr	r2, [pc, #364]	; (10003150 <__aeabi_fmul+0x254>)
10002fe4:	4684      	mov	ip, r0
10002fe6:	4462      	add	r2, ip
10002fe8:	6810      	ldr	r0, [r2, #0]
10002fea:	4687      	mov	pc, r0
10002fec:	1c39      	adds	r1, r7, #0
10002fee:	1e4a      	subs	r2, r1, #1
10002ff0:	4191      	sbcs	r1, r2
10002ff2:	3102      	adds	r1, #2
10002ff4:	e7ad      	b.n	10002f52 <__aeabi_fmul+0x56>
10002ff6:	220c      	movs	r2, #12
10002ff8:	2303      	movs	r3, #3
10002ffa:	4690      	mov	r8, r2
10002ffc:	469a      	mov	sl, r3
10002ffe:	e79d      	b.n	10002f3c <__aeabi_fmul+0x40>
10003000:	1c28      	adds	r0, r5, #0
10003002:	f000 fe57 	bl	10003cb4 <__clzsi2>
10003006:	2276      	movs	r2, #118	; 0x76
10003008:	1f46      	subs	r6, r0, #5
1000300a:	4253      	negs	r3, r2
1000300c:	40b5      	lsls	r5, r6
1000300e:	1a1e      	subs	r6, r3, r0
10003010:	2000      	movs	r0, #0
10003012:	4680      	mov	r8, r0
10003014:	4682      	mov	sl, r0
10003016:	e791      	b.n	10002f3c <__aeabi_fmul+0x40>
10003018:	1c38      	adds	r0, r7, #0
1000301a:	f000 fe4b 	bl	10003cb4 <__clzsi2>
1000301e:	2176      	movs	r1, #118	; 0x76
10003020:	1f43      	subs	r3, r0, #5
10003022:	424a      	negs	r2, r1
10003024:	409f      	lsls	r7, r3
10003026:	2100      	movs	r1, #0
10003028:	1a13      	subs	r3, r2, r0
1000302a:	e792      	b.n	10002f52 <__aeabi_fmul+0x56>
1000302c:	9401      	str	r4, [sp, #4]
1000302e:	4651      	mov	r1, sl
10003030:	2902      	cmp	r1, #2
10003032:	d02c      	beq.n	1000308e <__aeabi_fmul+0x192>
10003034:	2903      	cmp	r1, #3
10003036:	d100      	bne.n	1000303a <__aeabi_fmul+0x13e>
10003038:	e080      	b.n	1000313c <__aeabi_fmul+0x240>
1000303a:	2901      	cmp	r1, #1
1000303c:	d048      	beq.n	100030d0 <__aeabi_fmul+0x1d4>
1000303e:	464e      	mov	r6, r9
10003040:	367f      	adds	r6, #127	; 0x7f
10003042:	2e00      	cmp	r6, #0
10003044:	dd51      	ble.n	100030ea <__aeabi_fmul+0x1ee>
10003046:	240f      	movs	r4, #15
10003048:	402c      	ands	r4, r5
1000304a:	2c04      	cmp	r4, #4
1000304c:	d000      	beq.n	10003050 <__aeabi_fmul+0x154>
1000304e:	3504      	adds	r5, #4
10003050:	012a      	lsls	r2, r5, #4
10003052:	d503      	bpl.n	1000305c <__aeabi_fmul+0x160>
10003054:	493f      	ldr	r1, [pc, #252]	; (10003154 <__aeabi_fmul+0x258>)
10003056:	464e      	mov	r6, r9
10003058:	400d      	ands	r5, r1
1000305a:	3680      	adds	r6, #128	; 0x80
1000305c:	2efe      	cmp	r6, #254	; 0xfe
1000305e:	dd3d      	ble.n	100030dc <__aeabi_fmul+0x1e0>
10003060:	9b01      	ldr	r3, [sp, #4]
10003062:	2401      	movs	r4, #1
10003064:	401c      	ands	r4, r3
10003066:	21ff      	movs	r1, #255	; 0xff
10003068:	2500      	movs	r5, #0
1000306a:	05c8      	lsls	r0, r1, #23
1000306c:	07e2      	lsls	r2, r4, #31
1000306e:	4328      	orrs	r0, r5
10003070:	4310      	orrs	r0, r2
10003072:	b003      	add	sp, #12
10003074:	bc3c      	pop	{r2, r3, r4, r5}
10003076:	4690      	mov	r8, r2
10003078:	4699      	mov	r9, r3
1000307a:	46a2      	mov	sl, r4
1000307c:	46ab      	mov	fp, r5
1000307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003080:	2400      	movs	r4, #0
10003082:	4d35      	ldr	r5, [pc, #212]	; (10003158 <__aeabi_fmul+0x25c>)
10003084:	21ff      	movs	r1, #255	; 0xff
10003086:	e7f0      	b.n	1000306a <__aeabi_fmul+0x16e>
10003088:	4651      	mov	r1, sl
1000308a:	2902      	cmp	r1, #2
1000308c:	d1d2      	bne.n	10003034 <__aeabi_fmul+0x138>
1000308e:	9d01      	ldr	r5, [sp, #4]
10003090:	2401      	movs	r4, #1
10003092:	402c      	ands	r4, r5
10003094:	21ff      	movs	r1, #255	; 0xff
10003096:	2500      	movs	r5, #0
10003098:	e7e7      	b.n	1000306a <__aeabi_fmul+0x16e>
1000309a:	465e      	mov	r6, fp
1000309c:	1c3d      	adds	r5, r7, #0
1000309e:	9601      	str	r6, [sp, #4]
100030a0:	e7c6      	b.n	10003030 <__aeabi_fmul+0x134>
100030a2:	1c3d      	adds	r5, r7, #0
100030a4:	e7c4      	b.n	10003030 <__aeabi_fmul+0x134>
100030a6:	2680      	movs	r6, #128	; 0x80
100030a8:	03f3      	lsls	r3, r6, #15
100030aa:	421d      	tst	r5, r3
100030ac:	d00b      	beq.n	100030c6 <__aeabi_fmul+0x1ca>
100030ae:	421f      	tst	r7, r3
100030b0:	d109      	bne.n	100030c6 <__aeabi_fmul+0x1ca>
100030b2:	431f      	orrs	r7, r3
100030b4:	027a      	lsls	r2, r7, #9
100030b6:	0a55      	lsrs	r5, r2, #9
100030b8:	465c      	mov	r4, fp
100030ba:	21ff      	movs	r1, #255	; 0xff
100030bc:	e7d5      	b.n	1000306a <__aeabi_fmul+0x16e>
100030be:	2280      	movs	r2, #128	; 0x80
100030c0:	0257      	lsls	r7, r2, #9
100030c2:	19e4      	adds	r4, r4, r7
100030c4:	e760      	b.n	10002f88 <__aeabi_fmul+0x8c>
100030c6:	431d      	orrs	r5, r3
100030c8:	026f      	lsls	r7, r5, #9
100030ca:	0a7d      	lsrs	r5, r7, #9
100030cc:	21ff      	movs	r1, #255	; 0xff
100030ce:	e7cc      	b.n	1000306a <__aeabi_fmul+0x16e>
100030d0:	9b01      	ldr	r3, [sp, #4]
100030d2:	2500      	movs	r5, #0
100030d4:	4019      	ands	r1, r3
100030d6:	b2cc      	uxtb	r4, r1
100030d8:	2100      	movs	r1, #0
100030da:	e7c6      	b.n	1000306a <__aeabi_fmul+0x16e>
100030dc:	9801      	ldr	r0, [sp, #4]
100030de:	01ad      	lsls	r5, r5, #6
100030e0:	2401      	movs	r4, #1
100030e2:	0a6d      	lsrs	r5, r5, #9
100030e4:	b2f1      	uxtb	r1, r6
100030e6:	4004      	ands	r4, r0
100030e8:	e7bf      	b.n	1000306a <__aeabi_fmul+0x16e>
100030ea:	267e      	movs	r6, #126	; 0x7e
100030ec:	4273      	negs	r3, r6
100030ee:	464a      	mov	r2, r9
100030f0:	1a9f      	subs	r7, r3, r2
100030f2:	2f1b      	cmp	r7, #27
100030f4:	dd05      	ble.n	10003102 <__aeabi_fmul+0x206>
100030f6:	9d01      	ldr	r5, [sp, #4]
100030f8:	2401      	movs	r4, #1
100030fa:	402c      	ands	r4, r5
100030fc:	2100      	movs	r1, #0
100030fe:	2500      	movs	r5, #0
10003100:	e7b3      	b.n	1000306a <__aeabi_fmul+0x16e>
10003102:	4649      	mov	r1, r9
10003104:	319e      	adds	r1, #158	; 0x9e
10003106:	1c2c      	adds	r4, r5, #0
10003108:	408d      	lsls	r5, r1
1000310a:	1c2e      	adds	r6, r5, #0
1000310c:	40fc      	lsrs	r4, r7
1000310e:	1e75      	subs	r5, r6, #1
10003110:	41ae      	sbcs	r6, r5
10003112:	4326      	orrs	r6, r4
10003114:	200f      	movs	r0, #15
10003116:	4030      	ands	r0, r6
10003118:	2804      	cmp	r0, #4
1000311a:	d000      	beq.n	1000311e <__aeabi_fmul+0x222>
1000311c:	3604      	adds	r6, #4
1000311e:	0170      	lsls	r0, r6, #5
10003120:	d505      	bpl.n	1000312e <__aeabi_fmul+0x232>
10003122:	9f01      	ldr	r7, [sp, #4]
10003124:	2401      	movs	r4, #1
10003126:	403c      	ands	r4, r7
10003128:	2101      	movs	r1, #1
1000312a:	2500      	movs	r5, #0
1000312c:	e79d      	b.n	1000306a <__aeabi_fmul+0x16e>
1000312e:	9a01      	ldr	r2, [sp, #4]
10003130:	01b3      	lsls	r3, r6, #6
10003132:	2401      	movs	r4, #1
10003134:	0a5d      	lsrs	r5, r3, #9
10003136:	4014      	ands	r4, r2
10003138:	2100      	movs	r1, #0
1000313a:	e796      	b.n	1000306a <__aeabi_fmul+0x16e>
1000313c:	2280      	movs	r2, #128	; 0x80
1000313e:	03d0      	lsls	r0, r2, #15
10003140:	4305      	orrs	r5, r0
10003142:	026c      	lsls	r4, r5, #9
10003144:	9901      	ldr	r1, [sp, #4]
10003146:	0a65      	lsrs	r5, r4, #9
10003148:	2401      	movs	r4, #1
1000314a:	400c      	ands	r4, r1
1000314c:	21ff      	movs	r1, #255	; 0xff
1000314e:	e78c      	b.n	1000306a <__aeabi_fmul+0x16e>
10003150:	1002aaac 	.word	0x1002aaac
10003154:	f7ffffff 	.word	0xf7ffffff
10003158:	007fffff 	.word	0x007fffff

1000315c <__aeabi_fsub>:
1000315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000315e:	0243      	lsls	r3, r0, #9
10003160:	0045      	lsls	r5, r0, #1
10003162:	024f      	lsls	r7, r1, #9
10003164:	004c      	lsls	r4, r1, #1
10003166:	0fc2      	lsrs	r2, r0, #31
10003168:	0998      	lsrs	r0, r3, #6
1000316a:	4684      	mov	ip, r0
1000316c:	0e2d      	lsrs	r5, r5, #24
1000316e:	0e20      	lsrs	r0, r4, #24
10003170:	0fc9      	lsrs	r1, r1, #31
10003172:	09bf      	lsrs	r7, r7, #6
10003174:	28ff      	cmp	r0, #255	; 0xff
10003176:	d054      	beq.n	10003222 <__aeabi_fsub+0xc6>
10003178:	2601      	movs	r6, #1
1000317a:	4071      	eors	r1, r6
1000317c:	428a      	cmp	r2, r1
1000317e:	d03b      	beq.n	100031f8 <__aeabi_fsub+0x9c>
10003180:	1a2c      	subs	r4, r5, r0
10003182:	2c00      	cmp	r4, #0
10003184:	dc00      	bgt.n	10003188 <__aeabi_fsub+0x2c>
10003186:	e089      	b.n	1000329c <__aeabi_fsub+0x140>
10003188:	2800      	cmp	r0, #0
1000318a:	d125      	bne.n	100031d8 <__aeabi_fsub+0x7c>
1000318c:	2f00      	cmp	r7, #0
1000318e:	d14b      	bne.n	10003228 <__aeabi_fsub+0xcc>
10003190:	1c6e      	adds	r6, r5, #1
10003192:	1c2c      	adds	r4, r5, #0
10003194:	4663      	mov	r3, ip
10003196:	1c15      	adds	r5, r2, #0
10003198:	220f      	movs	r2, #15
1000319a:	401a      	ands	r2, r3
1000319c:	2a04      	cmp	r2, #4
1000319e:	d000      	beq.n	100031a2 <__aeabi_fsub+0x46>
100031a0:	3304      	adds	r3, #4
100031a2:	2780      	movs	r7, #128	; 0x80
100031a4:	04f9      	lsls	r1, r7, #19
100031a6:	2201      	movs	r2, #1
100031a8:	4019      	ands	r1, r3
100031aa:	402a      	ands	r2, r5
100031ac:	2900      	cmp	r1, #0
100031ae:	d006      	beq.n	100031be <__aeabi_fsub+0x62>
100031b0:	2eff      	cmp	r6, #255	; 0xff
100031b2:	d100      	bne.n	100031b6 <__aeabi_fsub+0x5a>
100031b4:	e081      	b.n	100032ba <__aeabi_fsub+0x15e>
100031b6:	4db1      	ldr	r5, [pc, #708]	; (1000347c <__aeabi_fsub+0x320>)
100031b8:	1c34      	adds	r4, r6, #0
100031ba:	402b      	ands	r3, r5
100031bc:	3601      	adds	r6, #1
100031be:	b2f6      	uxtb	r6, r6
100031c0:	08dd      	lsrs	r5, r3, #3
100031c2:	2e01      	cmp	r6, #1
100031c4:	dd62      	ble.n	1000328c <__aeabi_fsub+0x130>
100031c6:	026b      	lsls	r3, r5, #9
100031c8:	0a5d      	lsrs	r5, r3, #9
100031ca:	b2e4      	uxtb	r4, r4
100031cc:	05e4      	lsls	r4, r4, #23
100031ce:	4325      	orrs	r5, r4
100031d0:	1c28      	adds	r0, r5, #0
100031d2:	07d2      	lsls	r2, r2, #31
100031d4:	4310      	orrs	r0, r2
100031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100031d8:	2dff      	cmp	r5, #255	; 0xff
100031da:	d051      	beq.n	10003280 <__aeabi_fsub+0x124>
100031dc:	2180      	movs	r1, #128	; 0x80
100031de:	04cb      	lsls	r3, r1, #19
100031e0:	431f      	orrs	r7, r3
100031e2:	2601      	movs	r6, #1
100031e4:	2c1b      	cmp	r4, #27
100031e6:	dd70      	ble.n	100032ca <__aeabi_fsub+0x16e>
100031e8:	4667      	mov	r7, ip
100031ea:	1c2c      	adds	r4, r5, #0
100031ec:	1bbb      	subs	r3, r7, r6
100031ee:	1c15      	adds	r5, r2, #0
100031f0:	0158      	lsls	r0, r3, #5
100031f2:	d422      	bmi.n	1000323a <__aeabi_fsub+0xde>
100031f4:	1c66      	adds	r6, r4, #1
100031f6:	e7cf      	b.n	10003198 <__aeabi_fsub+0x3c>
100031f8:	1a2e      	subs	r6, r5, r0
100031fa:	2e00      	cmp	r6, #0
100031fc:	dd76      	ble.n	100032ec <__aeabi_fsub+0x190>
100031fe:	2800      	cmp	r0, #0
10003200:	d032      	beq.n	10003268 <__aeabi_fsub+0x10c>
10003202:	2dff      	cmp	r5, #255	; 0xff
10003204:	d03c      	beq.n	10003280 <__aeabi_fsub+0x124>
10003206:	2480      	movs	r4, #128	; 0x80
10003208:	04e1      	lsls	r1, r4, #19
1000320a:	430f      	orrs	r7, r1
1000320c:	2301      	movs	r3, #1
1000320e:	2e1b      	cmp	r6, #27
10003210:	dc00      	bgt.n	10003214 <__aeabi_fsub+0xb8>
10003212:	e0d1      	b.n	100033b8 <__aeabi_fsub+0x25c>
10003214:	4463      	add	r3, ip
10003216:	1c2c      	adds	r4, r5, #0
10003218:	0158      	lsls	r0, r3, #5
1000321a:	d47a      	bmi.n	10003312 <__aeabi_fsub+0x1b6>
1000321c:	1c66      	adds	r6, r4, #1
1000321e:	1c15      	adds	r5, r2, #0
10003220:	e7ba      	b.n	10003198 <__aeabi_fsub+0x3c>
10003222:	2f00      	cmp	r7, #0
10003224:	d1aa      	bne.n	1000317c <__aeabi_fsub+0x20>
10003226:	e7a7      	b.n	10003178 <__aeabi_fsub+0x1c>
10003228:	3c01      	subs	r4, #1
1000322a:	2c00      	cmp	r4, #0
1000322c:	d16d      	bne.n	1000330a <__aeabi_fsub+0x1ae>
1000322e:	4663      	mov	r3, ip
10003230:	1c2c      	adds	r4, r5, #0
10003232:	1bdb      	subs	r3, r3, r7
10003234:	1c15      	adds	r5, r2, #0
10003236:	0158      	lsls	r0, r3, #5
10003238:	d5dc      	bpl.n	100031f4 <__aeabi_fsub+0x98>
1000323a:	019a      	lsls	r2, r3, #6
1000323c:	0996      	lsrs	r6, r2, #6
1000323e:	1c30      	adds	r0, r6, #0
10003240:	f000 fd38 	bl	10003cb4 <__clzsi2>
10003244:	3805      	subs	r0, #5
10003246:	4086      	lsls	r6, r0
10003248:	4284      	cmp	r4, r0
1000324a:	dc39      	bgt.n	100032c0 <__aeabi_fsub+0x164>
1000324c:	1b00      	subs	r0, r0, r4
1000324e:	231f      	movs	r3, #31
10003250:	1a1a      	subs	r2, r3, r0
10003252:	1c33      	adds	r3, r6, #0
10003254:	1c31      	adds	r1, r6, #0
10003256:	1c44      	adds	r4, r0, #1
10003258:	4093      	lsls	r3, r2
1000325a:	40e1      	lsrs	r1, r4
1000325c:	1e5e      	subs	r6, r3, #1
1000325e:	41b3      	sbcs	r3, r6
10003260:	430b      	orrs	r3, r1
10003262:	2601      	movs	r6, #1
10003264:	2400      	movs	r4, #0
10003266:	e797      	b.n	10003198 <__aeabi_fsub+0x3c>
10003268:	2f00      	cmp	r7, #0
1000326a:	d100      	bne.n	1000326e <__aeabi_fsub+0x112>
1000326c:	e790      	b.n	10003190 <__aeabi_fsub+0x34>
1000326e:	3e01      	subs	r6, #1
10003270:	2e00      	cmp	r6, #0
10003272:	d103      	bne.n	1000327c <__aeabi_fsub+0x120>
10003274:	4664      	mov	r4, ip
10003276:	193b      	adds	r3, r7, r4
10003278:	1c2c      	adds	r4, r5, #0
1000327a:	e7cd      	b.n	10003218 <__aeabi_fsub+0xbc>
1000327c:	2dff      	cmp	r5, #255	; 0xff
1000327e:	d1c5      	bne.n	1000320c <__aeabi_fsub+0xb0>
10003280:	1c15      	adds	r5, r2, #0
10003282:	2280      	movs	r2, #128	; 0x80
10003284:	4663      	mov	r3, ip
10003286:	0056      	lsls	r6, r2, #1
10003288:	24ff      	movs	r4, #255	; 0xff
1000328a:	e785      	b.n	10003198 <__aeabi_fsub+0x3c>
1000328c:	2d00      	cmp	r5, #0
1000328e:	d09c      	beq.n	100031ca <__aeabi_fsub+0x6e>
10003290:	2c00      	cmp	r4, #0
10003292:	d028      	beq.n	100032e6 <__aeabi_fsub+0x18a>
10003294:	2080      	movs	r0, #128	; 0x80
10003296:	03c7      	lsls	r7, r0, #15
10003298:	433d      	orrs	r5, r7
1000329a:	e794      	b.n	100031c6 <__aeabi_fsub+0x6a>
1000329c:	2c00      	cmp	r4, #0
1000329e:	d145      	bne.n	1000332c <__aeabi_fsub+0x1d0>
100032a0:	1c6b      	adds	r3, r5, #1
100032a2:	b2d8      	uxtb	r0, r3
100032a4:	2801      	cmp	r0, #1
100032a6:	dc00      	bgt.n	100032aa <__aeabi_fsub+0x14e>
100032a8:	e090      	b.n	100033cc <__aeabi_fsub+0x270>
100032aa:	4664      	mov	r4, ip
100032ac:	1be6      	subs	r6, r4, r7
100032ae:	0173      	lsls	r3, r6, #5
100032b0:	d557      	bpl.n	10003362 <__aeabi_fsub+0x206>
100032b2:	1b3e      	subs	r6, r7, r4
100032b4:	1c2c      	adds	r4, r5, #0
100032b6:	1c0d      	adds	r5, r1, #0
100032b8:	e7c1      	b.n	1000323e <__aeabi_fsub+0xe2>
100032ba:	24ff      	movs	r4, #255	; 0xff
100032bc:	2500      	movs	r5, #0
100032be:	e785      	b.n	100031cc <__aeabi_fsub+0x70>
100032c0:	4b6e      	ldr	r3, [pc, #440]	; (1000347c <__aeabi_fsub+0x320>)
100032c2:	1a24      	subs	r4, r4, r0
100032c4:	4033      	ands	r3, r6
100032c6:	1c66      	adds	r6, r4, #1
100032c8:	e766      	b.n	10003198 <__aeabi_fsub+0x3c>
100032ca:	1c38      	adds	r0, r7, #0
100032cc:	2120      	movs	r1, #32
100032ce:	40e0      	lsrs	r0, r4
100032d0:	1b0c      	subs	r4, r1, r4
100032d2:	40a7      	lsls	r7, r4
100032d4:	1c3e      	adds	r6, r7, #0
100032d6:	1e77      	subs	r7, r6, #1
100032d8:	41be      	sbcs	r6, r7
100032da:	4306      	orrs	r6, r0
100032dc:	4667      	mov	r7, ip
100032de:	1c2c      	adds	r4, r5, #0
100032e0:	1bbb      	subs	r3, r7, r6
100032e2:	1c15      	adds	r5, r2, #0
100032e4:	e784      	b.n	100031f0 <__aeabi_fsub+0x94>
100032e6:	0269      	lsls	r1, r5, #9
100032e8:	0a4d      	lsrs	r5, r1, #9
100032ea:	e76f      	b.n	100031cc <__aeabi_fsub+0x70>
100032ec:	2e00      	cmp	r6, #0
100032ee:	d179      	bne.n	100033e4 <__aeabi_fsub+0x288>
100032f0:	1c6c      	adds	r4, r5, #1
100032f2:	b2e0      	uxtb	r0, r4
100032f4:	2801      	cmp	r0, #1
100032f6:	dd4b      	ble.n	10003390 <__aeabi_fsub+0x234>
100032f8:	2cff      	cmp	r4, #255	; 0xff
100032fa:	d100      	bne.n	100032fe <__aeabi_fsub+0x1a2>
100032fc:	e098      	b.n	10003430 <__aeabi_fsub+0x2d4>
100032fe:	4661      	mov	r1, ip
10003300:	187f      	adds	r7, r7, r1
10003302:	1cae      	adds	r6, r5, #2
10003304:	087b      	lsrs	r3, r7, #1
10003306:	1c15      	adds	r5, r2, #0
10003308:	e746      	b.n	10003198 <__aeabi_fsub+0x3c>
1000330a:	2dff      	cmp	r5, #255	; 0xff
1000330c:	d000      	beq.n	10003310 <__aeabi_fsub+0x1b4>
1000330e:	e768      	b.n	100031e2 <__aeabi_fsub+0x86>
10003310:	e7b6      	b.n	10003280 <__aeabi_fsub+0x124>
10003312:	1c67      	adds	r7, r4, #1
10003314:	2fff      	cmp	r7, #255	; 0xff
10003316:	d036      	beq.n	10003386 <__aeabi_fsub+0x22a>
10003318:	4858      	ldr	r0, [pc, #352]	; (1000347c <__aeabi_fsub+0x320>)
1000331a:	2101      	movs	r1, #1
1000331c:	4019      	ands	r1, r3
1000331e:	4003      	ands	r3, r0
10003320:	085b      	lsrs	r3, r3, #1
10003322:	1ca6      	adds	r6, r4, #2
10003324:	430b      	orrs	r3, r1
10003326:	1c3c      	adds	r4, r7, #0
10003328:	1c15      	adds	r5, r2, #0
1000332a:	e735      	b.n	10003198 <__aeabi_fsub+0x3c>
1000332c:	4266      	negs	r6, r4
1000332e:	2d00      	cmp	r5, #0
10003330:	d01e      	beq.n	10003370 <__aeabi_fsub+0x214>
10003332:	28ff      	cmp	r0, #255	; 0xff
10003334:	d06f      	beq.n	10003416 <__aeabi_fsub+0x2ba>
10003336:	2580      	movs	r5, #128	; 0x80
10003338:	4662      	mov	r2, ip
1000333a:	04eb      	lsls	r3, r5, #19
1000333c:	431a      	orrs	r2, r3
1000333e:	4694      	mov	ip, r2
10003340:	2501      	movs	r5, #1
10003342:	2e1b      	cmp	r6, #27
10003344:	dc09      	bgt.n	1000335a <__aeabi_fsub+0x1fe>
10003346:	4662      	mov	r2, ip
10003348:	2320      	movs	r3, #32
1000334a:	40f2      	lsrs	r2, r6
1000334c:	4664      	mov	r4, ip
1000334e:	1b9e      	subs	r6, r3, r6
10003350:	40b4      	lsls	r4, r6
10003352:	1c25      	adds	r5, r4, #0
10003354:	1e6c      	subs	r4, r5, #1
10003356:	41a5      	sbcs	r5, r4
10003358:	4315      	orrs	r5, r2
1000335a:	1b7b      	subs	r3, r7, r5
1000335c:	1c04      	adds	r4, r0, #0
1000335e:	1c0d      	adds	r5, r1, #0
10003360:	e769      	b.n	10003236 <__aeabi_fsub+0xda>
10003362:	2e00      	cmp	r6, #0
10003364:	d10c      	bne.n	10003380 <__aeabi_fsub+0x224>
10003366:	2200      	movs	r2, #0
10003368:	2601      	movs	r6, #1
1000336a:	2304      	movs	r3, #4
1000336c:	2400      	movs	r4, #0
1000336e:	e726      	b.n	100031be <__aeabi_fsub+0x62>
10003370:	4664      	mov	r4, ip
10003372:	2c00      	cmp	r4, #0
10003374:	d155      	bne.n	10003422 <__aeabi_fsub+0x2c6>
10003376:	1c46      	adds	r6, r0, #1
10003378:	1c3b      	adds	r3, r7, #0
1000337a:	1c04      	adds	r4, r0, #0
1000337c:	1c0d      	adds	r5, r1, #0
1000337e:	e70b      	b.n	10003198 <__aeabi_fsub+0x3c>
10003380:	1c2c      	adds	r4, r5, #0
10003382:	1c15      	adds	r5, r2, #0
10003384:	e75b      	b.n	1000323e <__aeabi_fsub+0xe2>
10003386:	2380      	movs	r3, #128	; 0x80
10003388:	005e      	lsls	r6, r3, #1
1000338a:	24ff      	movs	r4, #255	; 0xff
1000338c:	2304      	movs	r3, #4
1000338e:	e716      	b.n	100031be <__aeabi_fsub+0x62>
10003390:	2d00      	cmp	r5, #0
10003392:	d000      	beq.n	10003396 <__aeabi_fsub+0x23a>
10003394:	e08d      	b.n	100034b2 <__aeabi_fsub+0x356>
10003396:	4665      	mov	r5, ip
10003398:	2d00      	cmp	r5, #0
1000339a:	d100      	bne.n	1000339e <__aeabi_fsub+0x242>
1000339c:	e0ad      	b.n	100034fa <__aeabi_fsub+0x39e>
1000339e:	2f00      	cmp	r7, #0
100033a0:	d100      	bne.n	100033a4 <__aeabi_fsub+0x248>
100033a2:	e081      	b.n	100034a8 <__aeabi_fsub+0x34c>
100033a4:	197b      	adds	r3, r7, r5
100033a6:	015c      	lsls	r4, r3, #5
100033a8:	d400      	bmi.n	100033ac <__aeabi_fsub+0x250>
100033aa:	e07e      	b.n	100034aa <__aeabi_fsub+0x34e>
100033ac:	4f33      	ldr	r7, [pc, #204]	; (1000347c <__aeabi_fsub+0x320>)
100033ae:	1c15      	adds	r5, r2, #0
100033b0:	403b      	ands	r3, r7
100033b2:	2602      	movs	r6, #2
100033b4:	2401      	movs	r4, #1
100033b6:	e6ef      	b.n	10003198 <__aeabi_fsub+0x3c>
100033b8:	1c38      	adds	r0, r7, #0
100033ba:	2320      	movs	r3, #32
100033bc:	40f0      	lsrs	r0, r6
100033be:	1b9e      	subs	r6, r3, r6
100033c0:	40b7      	lsls	r7, r6
100033c2:	1c3b      	adds	r3, r7, #0
100033c4:	1e5f      	subs	r7, r3, #1
100033c6:	41bb      	sbcs	r3, r7
100033c8:	4303      	orrs	r3, r0
100033ca:	e723      	b.n	10003214 <__aeabi_fsub+0xb8>
100033cc:	2d00      	cmp	r5, #0
100033ce:	d115      	bne.n	100033fc <__aeabi_fsub+0x2a0>
100033d0:	4665      	mov	r5, ip
100033d2:	2d00      	cmp	r5, #0
100033d4:	d147      	bne.n	10003466 <__aeabi_fsub+0x30a>
100033d6:	2f00      	cmp	r7, #0
100033d8:	d0c5      	beq.n	10003366 <__aeabi_fsub+0x20a>
100033da:	1c3b      	adds	r3, r7, #0
100033dc:	1c0d      	adds	r5, r1, #0
100033de:	2601      	movs	r6, #1
100033e0:	2400      	movs	r4, #0
100033e2:	e6d9      	b.n	10003198 <__aeabi_fsub+0x3c>
100033e4:	4276      	negs	r6, r6
100033e6:	2d00      	cmp	r5, #0
100033e8:	d126      	bne.n	10003438 <__aeabi_fsub+0x2dc>
100033ea:	4665      	mov	r5, ip
100033ec:	2d00      	cmp	r5, #0
100033ee:	d000      	beq.n	100033f2 <__aeabi_fsub+0x296>
100033f0:	e07d      	b.n	100034ee <__aeabi_fsub+0x392>
100033f2:	1c46      	adds	r6, r0, #1
100033f4:	1c3b      	adds	r3, r7, #0
100033f6:	1c04      	adds	r4, r0, #0
100033f8:	1c15      	adds	r5, r2, #0
100033fa:	e6cd      	b.n	10003198 <__aeabi_fsub+0x3c>
100033fc:	4665      	mov	r5, ip
100033fe:	2d00      	cmp	r5, #0
10003400:	d140      	bne.n	10003484 <__aeabi_fsub+0x328>
10003402:	2f00      	cmp	r7, #0
10003404:	d107      	bne.n	10003416 <__aeabi_fsub+0x2ba>
10003406:	2180      	movs	r1, #128	; 0x80
10003408:	2200      	movs	r2, #0
1000340a:	004e      	lsls	r6, r1, #1
1000340c:	4b1c      	ldr	r3, [pc, #112]	; (10003480 <__aeabi_fsub+0x324>)
1000340e:	24ff      	movs	r4, #255	; 0xff
10003410:	e6d5      	b.n	100031be <__aeabi_fsub+0x62>
10003412:	28ff      	cmp	r0, #255	; 0xff
10003414:	d194      	bne.n	10003340 <__aeabi_fsub+0x1e4>
10003416:	2080      	movs	r0, #128	; 0x80
10003418:	1c3b      	adds	r3, r7, #0
1000341a:	1c0d      	adds	r5, r1, #0
1000341c:	0046      	lsls	r6, r0, #1
1000341e:	24ff      	movs	r4, #255	; 0xff
10003420:	e6ba      	b.n	10003198 <__aeabi_fsub+0x3c>
10003422:	3e01      	subs	r6, #1
10003424:	2e00      	cmp	r6, #0
10003426:	d1f4      	bne.n	10003412 <__aeabi_fsub+0x2b6>
10003428:	1b3b      	subs	r3, r7, r4
1000342a:	1c0d      	adds	r5, r1, #0
1000342c:	1c04      	adds	r4, r0, #0
1000342e:	e702      	b.n	10003236 <__aeabi_fsub+0xda>
10003430:	2580      	movs	r5, #128	; 0x80
10003432:	006e      	lsls	r6, r5, #1
10003434:	2304      	movs	r3, #4
10003436:	e6c2      	b.n	100031be <__aeabi_fsub+0x62>
10003438:	28ff      	cmp	r0, #255	; 0xff
1000343a:	d052      	beq.n	100034e2 <__aeabi_fsub+0x386>
1000343c:	2480      	movs	r4, #128	; 0x80
1000343e:	4661      	mov	r1, ip
10003440:	04e3      	lsls	r3, r4, #19
10003442:	4319      	orrs	r1, r3
10003444:	468c      	mov	ip, r1
10003446:	2301      	movs	r3, #1
10003448:	2e1b      	cmp	r6, #27
1000344a:	dc09      	bgt.n	10003460 <__aeabi_fsub+0x304>
1000344c:	2120      	movs	r1, #32
1000344e:	4664      	mov	r4, ip
10003450:	40f4      	lsrs	r4, r6
10003452:	4665      	mov	r5, ip
10003454:	1b8e      	subs	r6, r1, r6
10003456:	40b5      	lsls	r5, r6
10003458:	1c2b      	adds	r3, r5, #0
1000345a:	1e59      	subs	r1, r3, #1
1000345c:	418b      	sbcs	r3, r1
1000345e:	4323      	orrs	r3, r4
10003460:	19db      	adds	r3, r3, r7
10003462:	1c04      	adds	r4, r0, #0
10003464:	e6d8      	b.n	10003218 <__aeabi_fsub+0xbc>
10003466:	2f00      	cmp	r7, #0
10003468:	d01e      	beq.n	100034a8 <__aeabi_fsub+0x34c>
1000346a:	1beb      	subs	r3, r5, r7
1000346c:	0158      	lsls	r0, r3, #5
1000346e:	d54b      	bpl.n	10003508 <__aeabi_fsub+0x3ac>
10003470:	1b7b      	subs	r3, r7, r5
10003472:	2601      	movs	r6, #1
10003474:	1c0d      	adds	r5, r1, #0
10003476:	2400      	movs	r4, #0
10003478:	e68e      	b.n	10003198 <__aeabi_fsub+0x3c>
1000347a:	46c0      	nop			; (mov r8, r8)
1000347c:	fbffffff 	.word	0xfbffffff
10003480:	03fffffc 	.word	0x03fffffc
10003484:	2f00      	cmp	r7, #0
10003486:	d100      	bne.n	1000348a <__aeabi_fsub+0x32e>
10003488:	e6fa      	b.n	10003280 <__aeabi_fsub+0x124>
1000348a:	2080      	movs	r0, #128	; 0x80
1000348c:	08eb      	lsrs	r3, r5, #3
1000348e:	03c4      	lsls	r4, r0, #15
10003490:	4223      	tst	r3, r4
10003492:	d037      	beq.n	10003504 <__aeabi_fsub+0x3a8>
10003494:	08ff      	lsrs	r7, r7, #3
10003496:	4227      	tst	r7, r4
10003498:	d134      	bne.n	10003504 <__aeabi_fsub+0x3a8>
1000349a:	1c3b      	adds	r3, r7, #0
1000349c:	1c0d      	adds	r5, r1, #0
1000349e:	2280      	movs	r2, #128	; 0x80
100034a0:	00db      	lsls	r3, r3, #3
100034a2:	0056      	lsls	r6, r2, #1
100034a4:	24ff      	movs	r4, #255	; 0xff
100034a6:	e677      	b.n	10003198 <__aeabi_fsub+0x3c>
100034a8:	4663      	mov	r3, ip
100034aa:	1c15      	adds	r5, r2, #0
100034ac:	2601      	movs	r6, #1
100034ae:	2400      	movs	r4, #0
100034b0:	e672      	b.n	10003198 <__aeabi_fsub+0x3c>
100034b2:	4664      	mov	r4, ip
100034b4:	2c00      	cmp	r4, #0
100034b6:	d014      	beq.n	100034e2 <__aeabi_fsub+0x386>
100034b8:	2f00      	cmp	r7, #0
100034ba:	d100      	bne.n	100034be <__aeabi_fsub+0x362>
100034bc:	e6e0      	b.n	10003280 <__aeabi_fsub+0x124>
100034be:	2380      	movs	r3, #128	; 0x80
100034c0:	08e6      	lsrs	r6, r4, #3
100034c2:	03d8      	lsls	r0, r3, #15
100034c4:	1c31      	adds	r1, r6, #0
100034c6:	4206      	tst	r6, r0
100034c8:	d003      	beq.n	100034d2 <__aeabi_fsub+0x376>
100034ca:	08f9      	lsrs	r1, r7, #3
100034cc:	4201      	tst	r1, r0
100034ce:	d000      	beq.n	100034d2 <__aeabi_fsub+0x376>
100034d0:	1c31      	adds	r1, r6, #0
100034d2:	1c15      	adds	r5, r2, #0
100034d4:	2280      	movs	r2, #128	; 0x80
100034d6:	00cb      	lsls	r3, r1, #3
100034d8:	0056      	lsls	r6, r2, #1
100034da:	24ff      	movs	r4, #255	; 0xff
100034dc:	e65c      	b.n	10003198 <__aeabi_fsub+0x3c>
100034de:	28ff      	cmp	r0, #255	; 0xff
100034e0:	d1b1      	bne.n	10003446 <__aeabi_fsub+0x2ea>
100034e2:	2080      	movs	r0, #128	; 0x80
100034e4:	1c3b      	adds	r3, r7, #0
100034e6:	1c15      	adds	r5, r2, #0
100034e8:	0046      	lsls	r6, r0, #1
100034ea:	24ff      	movs	r4, #255	; 0xff
100034ec:	e654      	b.n	10003198 <__aeabi_fsub+0x3c>
100034ee:	3e01      	subs	r6, #1
100034f0:	2e00      	cmp	r6, #0
100034f2:	d1f4      	bne.n	100034de <__aeabi_fsub+0x382>
100034f4:	197b      	adds	r3, r7, r5
100034f6:	1c04      	adds	r4, r0, #0
100034f8:	e68e      	b.n	10003218 <__aeabi_fsub+0xbc>
100034fa:	1c3b      	adds	r3, r7, #0
100034fc:	1c15      	adds	r5, r2, #0
100034fe:	2601      	movs	r6, #1
10003500:	2400      	movs	r4, #0
10003502:	e649      	b.n	10003198 <__aeabi_fsub+0x3c>
10003504:	1c15      	adds	r5, r2, #0
10003506:	e7ca      	b.n	1000349e <__aeabi_fsub+0x342>
10003508:	2b00      	cmp	r3, #0
1000350a:	d100      	bne.n	1000350e <__aeabi_fsub+0x3b2>
1000350c:	e72b      	b.n	10003366 <__aeabi_fsub+0x20a>
1000350e:	e7cc      	b.n	100034aa <__aeabi_fsub+0x34e>

10003510 <__aeabi_ddiv>:
10003510:	b5f0      	push	{r4, r5, r6, r7, lr}
10003512:	464d      	mov	r5, r9
10003514:	4644      	mov	r4, r8
10003516:	465f      	mov	r7, fp
10003518:	4656      	mov	r6, sl
1000351a:	b4f0      	push	{r4, r5, r6, r7}
1000351c:	1c1d      	adds	r5, r3, #0
1000351e:	004b      	lsls	r3, r1, #1
10003520:	1c14      	adds	r4, r2, #0
10003522:	030e      	lsls	r6, r1, #12
10003524:	0d5b      	lsrs	r3, r3, #21
10003526:	0fca      	lsrs	r2, r1, #31
10003528:	b087      	sub	sp, #28
1000352a:	1c07      	adds	r7, r0, #0
1000352c:	0b36      	lsrs	r6, r6, #12
1000352e:	4698      	mov	r8, r3
10003530:	4691      	mov	r9, r2
10003532:	2b00      	cmp	r3, #0
10003534:	d11d      	bne.n	10003572 <__aeabi_ddiv+0x62>
10003536:	1c32      	adds	r2, r6, #0
10003538:	4302      	orrs	r2, r0
1000353a:	d100      	bne.n	1000353e <__aeabi_ddiv+0x2e>
1000353c:	e181      	b.n	10003842 <__aeabi_ddiv+0x332>
1000353e:	2e00      	cmp	r6, #0
10003540:	d100      	bne.n	10003544 <__aeabi_ddiv+0x34>
10003542:	e204      	b.n	1000394e <__aeabi_ddiv+0x43e>
10003544:	1c30      	adds	r0, r6, #0
10003546:	f000 fbb5 	bl	10003cb4 <__clzsi2>
1000354a:	2827      	cmp	r0, #39	; 0x27
1000354c:	dd00      	ble.n	10003550 <__aeabi_ddiv+0x40>
1000354e:	e1f8      	b.n	10003942 <__aeabi_ddiv+0x432>
10003550:	2128      	movs	r1, #40	; 0x28
10003552:	1c03      	adds	r3, r0, #0
10003554:	3b08      	subs	r3, #8
10003556:	1a0a      	subs	r2, r1, r0
10003558:	1c39      	adds	r1, r7, #0
1000355a:	409e      	lsls	r6, r3
1000355c:	40d1      	lsrs	r1, r2
1000355e:	430e      	orrs	r6, r1
10003560:	409f      	lsls	r7, r3
10003562:	4bc1      	ldr	r3, [pc, #772]	; (10003868 <__aeabi_ddiv+0x358>)
10003564:	2100      	movs	r1, #0
10003566:	1a18      	subs	r0, r3, r0
10003568:	2200      	movs	r2, #0
1000356a:	4680      	mov	r8, r0
1000356c:	468a      	mov	sl, r1
1000356e:	9200      	str	r2, [sp, #0]
10003570:	e00f      	b.n	10003592 <__aeabi_ddiv+0x82>
10003572:	48be      	ldr	r0, [pc, #760]	; (1000386c <__aeabi_ddiv+0x35c>)
10003574:	4283      	cmp	r3, r0
10003576:	d031      	beq.n	100035dc <__aeabi_ddiv+0xcc>
10003578:	2180      	movs	r1, #128	; 0x80
1000357a:	034b      	lsls	r3, r1, #13
1000357c:	431e      	orrs	r6, r3
1000357e:	48bc      	ldr	r0, [pc, #752]	; (10003870 <__aeabi_ddiv+0x360>)
10003580:	0f7a      	lsrs	r2, r7, #29
10003582:	00f6      	lsls	r6, r6, #3
10003584:	2100      	movs	r1, #0
10003586:	2300      	movs	r3, #0
10003588:	4316      	orrs	r6, r2
1000358a:	00ff      	lsls	r7, r7, #3
1000358c:	4480      	add	r8, r0
1000358e:	468a      	mov	sl, r1
10003590:	9300      	str	r3, [sp, #0]
10003592:	1c29      	adds	r1, r5, #0
10003594:	1c20      	adds	r0, r4, #0
10003596:	1c25      	adds	r5, r4, #0
10003598:	004a      	lsls	r2, r1, #1
1000359a:	030c      	lsls	r4, r1, #12
1000359c:	0fcb      	lsrs	r3, r1, #31
1000359e:	0b24      	lsrs	r4, r4, #12
100035a0:	0d52      	lsrs	r2, r2, #21
100035a2:	469b      	mov	fp, r3
100035a4:	d125      	bne.n	100035f2 <__aeabi_ddiv+0xe2>
100035a6:	1c21      	adds	r1, r4, #0
100035a8:	4301      	orrs	r1, r0
100035aa:	d100      	bne.n	100035ae <__aeabi_ddiv+0x9e>
100035ac:	e150      	b.n	10003850 <__aeabi_ddiv+0x340>
100035ae:	2c00      	cmp	r4, #0
100035b0:	d100      	bne.n	100035b4 <__aeabi_ddiv+0xa4>
100035b2:	e1c2      	b.n	1000393a <__aeabi_ddiv+0x42a>
100035b4:	1c20      	adds	r0, r4, #0
100035b6:	f000 fb7d 	bl	10003cb4 <__clzsi2>
100035ba:	2827      	cmp	r0, #39	; 0x27
100035bc:	dd00      	ble.n	100035c0 <__aeabi_ddiv+0xb0>
100035be:	e1b6      	b.n	1000392e <__aeabi_ddiv+0x41e>
100035c0:	1c03      	adds	r3, r0, #0
100035c2:	2228      	movs	r2, #40	; 0x28
100035c4:	3b08      	subs	r3, #8
100035c6:	1c29      	adds	r1, r5, #0
100035c8:	1a12      	subs	r2, r2, r0
100035ca:	409c      	lsls	r4, r3
100035cc:	40d1      	lsrs	r1, r2
100035ce:	430c      	orrs	r4, r1
100035d0:	409d      	lsls	r5, r3
100035d2:	4ba5      	ldr	r3, [pc, #660]	; (10003868 <__aeabi_ddiv+0x358>)
100035d4:	1a1a      	subs	r2, r3, r0
100035d6:	2000      	movs	r0, #0
100035d8:	9002      	str	r0, [sp, #8]
100035da:	e019      	b.n	10003610 <__aeabi_ddiv+0x100>
100035dc:	1c32      	adds	r2, r6, #0
100035de:	433a      	orrs	r2, r7
100035e0:	d000      	beq.n	100035e4 <__aeabi_ddiv+0xd4>
100035e2:	e129      	b.n	10003838 <__aeabi_ddiv+0x328>
100035e4:	2708      	movs	r7, #8
100035e6:	2302      	movs	r3, #2
100035e8:	46ba      	mov	sl, r7
100035ea:	2600      	movs	r6, #0
100035ec:	2700      	movs	r7, #0
100035ee:	9300      	str	r3, [sp, #0]
100035f0:	e7cf      	b.n	10003592 <__aeabi_ddiv+0x82>
100035f2:	489e      	ldr	r0, [pc, #632]	; (1000386c <__aeabi_ddiv+0x35c>)
100035f4:	4282      	cmp	r2, r0
100035f6:	d100      	bne.n	100035fa <__aeabi_ddiv+0xea>
100035f8:	e113      	b.n	10003822 <__aeabi_ddiv+0x312>
100035fa:	2180      	movs	r1, #128	; 0x80
100035fc:	034b      	lsls	r3, r1, #13
100035fe:	431c      	orrs	r4, r3
10003600:	499b      	ldr	r1, [pc, #620]	; (10003870 <__aeabi_ddiv+0x360>)
10003602:	0f68      	lsrs	r0, r5, #29
10003604:	00e4      	lsls	r4, r4, #3
10003606:	2300      	movs	r3, #0
10003608:	4304      	orrs	r4, r0
1000360a:	00ed      	lsls	r5, r5, #3
1000360c:	1852      	adds	r2, r2, r1
1000360e:	9302      	str	r3, [sp, #8]
10003610:	4648      	mov	r0, r9
10003612:	465b      	mov	r3, fp
10003614:	4043      	eors	r3, r0
10003616:	9802      	ldr	r0, [sp, #8]
10003618:	4651      	mov	r1, sl
1000361a:	9301      	str	r3, [sp, #4]
1000361c:	4301      	orrs	r1, r0
1000361e:	290f      	cmp	r1, #15
10003620:	d800      	bhi.n	10003624 <__aeabi_ddiv+0x114>
10003622:	e0df      	b.n	100037e4 <__aeabi_ddiv+0x2d4>
10003624:	4643      	mov	r3, r8
10003626:	1a9a      	subs	r2, r3, r2
10003628:	9204      	str	r2, [sp, #16]
1000362a:	42a6      	cmp	r6, r4
1000362c:	d800      	bhi.n	10003630 <__aeabi_ddiv+0x120>
1000362e:	e16e      	b.n	1000390e <__aeabi_ddiv+0x3fe>
10003630:	0871      	lsrs	r1, r6, #1
10003632:	087b      	lsrs	r3, r7, #1
10003634:	07f6      	lsls	r6, r6, #31
10003636:	4333      	orrs	r3, r6
10003638:	07fa      	lsls	r2, r7, #31
1000363a:	4689      	mov	r9, r1
1000363c:	4698      	mov	r8, r3
1000363e:	9202      	str	r2, [sp, #8]
10003640:	0e28      	lsrs	r0, r5, #24
10003642:	0224      	lsls	r4, r4, #8
10003644:	4304      	orrs	r4, r0
10003646:	022d      	lsls	r5, r5, #8
10003648:	0427      	lsls	r7, r4, #16
1000364a:	0c39      	lsrs	r1, r7, #16
1000364c:	46ab      	mov	fp, r5
1000364e:	0c25      	lsrs	r5, r4, #16
10003650:	9100      	str	r1, [sp, #0]
10003652:	4648      	mov	r0, r9
10003654:	1c29      	adds	r1, r5, #0
10003656:	f7fe ffff 	bl	10002658 <__aeabi_uidiv>
1000365a:	9f00      	ldr	r7, [sp, #0]
1000365c:	1c06      	adds	r6, r0, #0
1000365e:	4347      	muls	r7, r0
10003660:	1c29      	adds	r1, r5, #0
10003662:	4648      	mov	r0, r9
10003664:	f7ff f83c 	bl	100026e0 <__aeabi_uidivmod>
10003668:	4643      	mov	r3, r8
1000366a:	0408      	lsls	r0, r1, #16
1000366c:	0c1a      	lsrs	r2, r3, #16
1000366e:	4310      	orrs	r0, r2
10003670:	4287      	cmp	r7, r0
10003672:	d907      	bls.n	10003684 <__aeabi_ddiv+0x174>
10003674:	1900      	adds	r0, r0, r4
10003676:	3e01      	subs	r6, #1
10003678:	4284      	cmp	r4, r0
1000367a:	d803      	bhi.n	10003684 <__aeabi_ddiv+0x174>
1000367c:	4287      	cmp	r7, r0
1000367e:	d901      	bls.n	10003684 <__aeabi_ddiv+0x174>
10003680:	3e01      	subs	r6, #1
10003682:	1900      	adds	r0, r0, r4
10003684:	1bc1      	subs	r1, r0, r7
10003686:	468a      	mov	sl, r1
10003688:	1c08      	adds	r0, r1, #0
1000368a:	1c29      	adds	r1, r5, #0
1000368c:	f7fe ffe4 	bl	10002658 <__aeabi_uidiv>
10003690:	9b00      	ldr	r3, [sp, #0]
10003692:	1c07      	adds	r7, r0, #0
10003694:	4343      	muls	r3, r0
10003696:	1c29      	adds	r1, r5, #0
10003698:	4650      	mov	r0, sl
1000369a:	4699      	mov	r9, r3
1000369c:	f7ff f820 	bl	100026e0 <__aeabi_uidivmod>
100036a0:	4642      	mov	r2, r8
100036a2:	0410      	lsls	r0, r2, #16
100036a4:	040b      	lsls	r3, r1, #16
100036a6:	0c01      	lsrs	r1, r0, #16
100036a8:	430b      	orrs	r3, r1
100036aa:	4599      	cmp	r9, r3
100036ac:	d904      	bls.n	100036b8 <__aeabi_ddiv+0x1a8>
100036ae:	191b      	adds	r3, r3, r4
100036b0:	3f01      	subs	r7, #1
100036b2:	429c      	cmp	r4, r3
100036b4:	d800      	bhi.n	100036b8 <__aeabi_ddiv+0x1a8>
100036b6:	e164      	b.n	10003982 <__aeabi_ddiv+0x472>
100036b8:	0436      	lsls	r6, r6, #16
100036ba:	433e      	orrs	r6, r7
100036bc:	465f      	mov	r7, fp
100036be:	464a      	mov	r2, r9
100036c0:	0c39      	lsrs	r1, r7, #16
100036c2:	4689      	mov	r9, r1
100036c4:	1a9b      	subs	r3, r3, r2
100036c6:	4659      	mov	r1, fp
100036c8:	0432      	lsls	r2, r6, #16
100036ca:	0c17      	lsrs	r7, r2, #16
100036cc:	040a      	lsls	r2, r1, #16
100036ce:	4649      	mov	r1, r9
100036d0:	4379      	muls	r1, r7
100036d2:	0c12      	lsrs	r2, r2, #16
100036d4:	9203      	str	r2, [sp, #12]
100036d6:	468c      	mov	ip, r1
100036d8:	9903      	ldr	r1, [sp, #12]
100036da:	0c30      	lsrs	r0, r6, #16
100036dc:	437a      	muls	r2, r7
100036de:	4341      	muls	r1, r0
100036e0:	464f      	mov	r7, r9
100036e2:	4378      	muls	r0, r7
100036e4:	448c      	add	ip, r1
100036e6:	0c17      	lsrs	r7, r2, #16
100036e8:	4467      	add	r7, ip
100036ea:	42b9      	cmp	r1, r7
100036ec:	d902      	bls.n	100036f4 <__aeabi_ddiv+0x1e4>
100036ee:	2180      	movs	r1, #128	; 0x80
100036f0:	0249      	lsls	r1, r1, #9
100036f2:	1840      	adds	r0, r0, r1
100036f4:	0c39      	lsrs	r1, r7, #16
100036f6:	0412      	lsls	r2, r2, #16
100036f8:	1840      	adds	r0, r0, r1
100036fa:	043f      	lsls	r7, r7, #16
100036fc:	0c11      	lsrs	r1, r2, #16
100036fe:	187f      	adds	r7, r7, r1
10003700:	4283      	cmp	r3, r0
10003702:	d200      	bcs.n	10003706 <__aeabi_ddiv+0x1f6>
10003704:	e127      	b.n	10003956 <__aeabi_ddiv+0x446>
10003706:	d100      	bne.n	1000370a <__aeabi_ddiv+0x1fa>
10003708:	e141      	b.n	1000398e <__aeabi_ddiv+0x47e>
1000370a:	9902      	ldr	r1, [sp, #8]
1000370c:	1a1b      	subs	r3, r3, r0
1000370e:	1bcf      	subs	r7, r1, r7
10003710:	42b9      	cmp	r1, r7
10003712:	4180      	sbcs	r0, r0
10003714:	4241      	negs	r1, r0
10003716:	1a5a      	subs	r2, r3, r1
10003718:	4690      	mov	r8, r2
1000371a:	42a2      	cmp	r2, r4
1000371c:	d100      	bne.n	10003720 <__aeabi_ddiv+0x210>
1000371e:	e15f      	b.n	100039e0 <__aeabi_ddiv+0x4d0>
10003720:	1c10      	adds	r0, r2, #0
10003722:	1c29      	adds	r1, r5, #0
10003724:	f7fe ff98 	bl	10002658 <__aeabi_uidiv>
10003728:	9b00      	ldr	r3, [sp, #0]
1000372a:	9002      	str	r0, [sp, #8]
1000372c:	4343      	muls	r3, r0
1000372e:	1c29      	adds	r1, r5, #0
10003730:	4640      	mov	r0, r8
10003732:	469a      	mov	sl, r3
10003734:	f7fe ffd4 	bl	100026e0 <__aeabi_uidivmod>
10003738:	0c38      	lsrs	r0, r7, #16
1000373a:	0409      	lsls	r1, r1, #16
1000373c:	4301      	orrs	r1, r0
1000373e:	458a      	cmp	sl, r1
10003740:	d90a      	bls.n	10003758 <__aeabi_ddiv+0x248>
10003742:	9a02      	ldr	r2, [sp, #8]
10003744:	1909      	adds	r1, r1, r4
10003746:	3a01      	subs	r2, #1
10003748:	9202      	str	r2, [sp, #8]
1000374a:	428c      	cmp	r4, r1
1000374c:	d804      	bhi.n	10003758 <__aeabi_ddiv+0x248>
1000374e:	458a      	cmp	sl, r1
10003750:	d902      	bls.n	10003758 <__aeabi_ddiv+0x248>
10003752:	3a01      	subs	r2, #1
10003754:	9202      	str	r2, [sp, #8]
10003756:	1909      	adds	r1, r1, r4
10003758:	4653      	mov	r3, sl
1000375a:	1ac8      	subs	r0, r1, r3
1000375c:	1c29      	adds	r1, r5, #0
1000375e:	9005      	str	r0, [sp, #20]
10003760:	f7fe ff7a 	bl	10002658 <__aeabi_uidiv>
10003764:	9a00      	ldr	r2, [sp, #0]
10003766:	1c29      	adds	r1, r5, #0
10003768:	4342      	muls	r2, r0
1000376a:	4680      	mov	r8, r0
1000376c:	9805      	ldr	r0, [sp, #20]
1000376e:	4692      	mov	sl, r2
10003770:	f7fe ffb6 	bl	100026e0 <__aeabi_uidivmod>
10003774:	043f      	lsls	r7, r7, #16
10003776:	040d      	lsls	r5, r1, #16
10003778:	0c3a      	lsrs	r2, r7, #16
1000377a:	432a      	orrs	r2, r5
1000377c:	4592      	cmp	sl, r2
1000377e:	d909      	bls.n	10003794 <__aeabi_ddiv+0x284>
10003780:	2101      	movs	r1, #1
10003782:	424b      	negs	r3, r1
10003784:	1912      	adds	r2, r2, r4
10003786:	4498      	add	r8, r3
10003788:	4294      	cmp	r4, r2
1000378a:	d803      	bhi.n	10003794 <__aeabi_ddiv+0x284>
1000378c:	4592      	cmp	sl, r2
1000378e:	d901      	bls.n	10003794 <__aeabi_ddiv+0x284>
10003790:	4498      	add	r8, r3
10003792:	1912      	adds	r2, r2, r4
10003794:	9d02      	ldr	r5, [sp, #8]
10003796:	4643      	mov	r3, r8
10003798:	042f      	lsls	r7, r5, #16
1000379a:	431f      	orrs	r7, r3
1000379c:	4650      	mov	r0, sl
1000379e:	1a11      	subs	r1, r2, r0
100037a0:	0438      	lsls	r0, r7, #16
100037a2:	0c03      	lsrs	r3, r0, #16
100037a4:	464d      	mov	r5, r9
100037a6:	435d      	muls	r5, r3
100037a8:	9803      	ldr	r0, [sp, #12]
100037aa:	46ac      	mov	ip, r5
100037ac:	9d03      	ldr	r5, [sp, #12]
100037ae:	0c3a      	lsrs	r2, r7, #16
100037b0:	4358      	muls	r0, r3
100037b2:	4355      	muls	r5, r2
100037b4:	464b      	mov	r3, r9
100037b6:	435a      	muls	r2, r3
100037b8:	44ac      	add	ip, r5
100037ba:	0c03      	lsrs	r3, r0, #16
100037bc:	4463      	add	r3, ip
100037be:	429d      	cmp	r5, r3
100037c0:	d902      	bls.n	100037c8 <__aeabi_ddiv+0x2b8>
100037c2:	2580      	movs	r5, #128	; 0x80
100037c4:	026d      	lsls	r5, r5, #9
100037c6:	1952      	adds	r2, r2, r5
100037c8:	0c1d      	lsrs	r5, r3, #16
100037ca:	0400      	lsls	r0, r0, #16
100037cc:	1952      	adds	r2, r2, r5
100037ce:	041b      	lsls	r3, r3, #16
100037d0:	0c05      	lsrs	r5, r0, #16
100037d2:	195b      	adds	r3, r3, r5
100037d4:	4291      	cmp	r1, r2
100037d6:	d200      	bcs.n	100037da <__aeabi_ddiv+0x2ca>
100037d8:	e0e6      	b.n	100039a8 <__aeabi_ddiv+0x498>
100037da:	d100      	bne.n	100037de <__aeabi_ddiv+0x2ce>
100037dc:	e13d      	b.n	10003a5a <__aeabi_ddiv+0x54a>
100037de:	2201      	movs	r2, #1
100037e0:	4317      	orrs	r7, r2
100037e2:	e05a      	b.n	1000389a <__aeabi_ddiv+0x38a>
100037e4:	0089      	lsls	r1, r1, #2
100037e6:	4823      	ldr	r0, [pc, #140]	; (10003874 <__aeabi_ddiv+0x364>)
100037e8:	468c      	mov	ip, r1
100037ea:	4460      	add	r0, ip
100037ec:	6801      	ldr	r1, [r0, #0]
100037ee:	468f      	mov	pc, r1
100037f0:	9b01      	ldr	r3, [sp, #4]
100037f2:	4a1e      	ldr	r2, [pc, #120]	; (1000386c <__aeabi_ddiv+0x35c>)
100037f4:	2600      	movs	r6, #0
100037f6:	2700      	movs	r7, #0
100037f8:	2000      	movs	r0, #0
100037fa:	2100      	movs	r1, #0
100037fc:	1c38      	adds	r0, r7, #0
100037fe:	0d0f      	lsrs	r7, r1, #20
10003800:	053c      	lsls	r4, r7, #20
10003802:	4d1d      	ldr	r5, [pc, #116]	; (10003878 <__aeabi_ddiv+0x368>)
10003804:	4334      	orrs	r4, r6
10003806:	0512      	lsls	r2, r2, #20
10003808:	4025      	ands	r5, r4
1000380a:	4315      	orrs	r5, r2
1000380c:	006e      	lsls	r6, r5, #1
1000380e:	07db      	lsls	r3, r3, #31
10003810:	0871      	lsrs	r1, r6, #1
10003812:	4319      	orrs	r1, r3
10003814:	b007      	add	sp, #28
10003816:	bc3c      	pop	{r2, r3, r4, r5}
10003818:	4690      	mov	r8, r2
1000381a:	4699      	mov	r9, r3
1000381c:	46a2      	mov	sl, r4
1000381e:	46ab      	mov	fp, r5
10003820:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003822:	1c21      	adds	r1, r4, #0
10003824:	2003      	movs	r0, #3
10003826:	4329      	orrs	r1, r5
10003828:	9002      	str	r0, [sp, #8]
1000382a:	d000      	beq.n	1000382e <__aeabi_ddiv+0x31e>
1000382c:	e6f0      	b.n	10003610 <__aeabi_ddiv+0x100>
1000382e:	2302      	movs	r3, #2
10003830:	2400      	movs	r4, #0
10003832:	2500      	movs	r5, #0
10003834:	9302      	str	r3, [sp, #8]
10003836:	e6eb      	b.n	10003610 <__aeabi_ddiv+0x100>
10003838:	200c      	movs	r0, #12
1000383a:	2103      	movs	r1, #3
1000383c:	4682      	mov	sl, r0
1000383e:	9100      	str	r1, [sp, #0]
10003840:	e6a7      	b.n	10003592 <__aeabi_ddiv+0x82>
10003842:	2704      	movs	r7, #4
10003844:	2301      	movs	r3, #1
10003846:	46ba      	mov	sl, r7
10003848:	2600      	movs	r6, #0
1000384a:	2700      	movs	r7, #0
1000384c:	9300      	str	r3, [sp, #0]
1000384e:	e6a0      	b.n	10003592 <__aeabi_ddiv+0x82>
10003850:	2101      	movs	r1, #1
10003852:	2400      	movs	r4, #0
10003854:	2500      	movs	r5, #0
10003856:	9102      	str	r1, [sp, #8]
10003858:	e6da      	b.n	10003610 <__aeabi_ddiv+0x100>
1000385a:	2701      	movs	r7, #1
1000385c:	2300      	movs	r3, #0
1000385e:	4e07      	ldr	r6, [pc, #28]	; (1000387c <__aeabi_ddiv+0x36c>)
10003860:	427f      	negs	r7, r7
10003862:	4a02      	ldr	r2, [pc, #8]	; (1000386c <__aeabi_ddiv+0x35c>)
10003864:	e7c8      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
10003866:	46c0      	nop			; (mov r8, r8)
10003868:	fffffc0d 	.word	0xfffffc0d
1000386c:	000007ff 	.word	0x000007ff
10003870:	fffffc01 	.word	0xfffffc01
10003874:	1002aaec 	.word	0x1002aaec
10003878:	800fffff 	.word	0x800fffff
1000387c:	000fffff 	.word	0x000fffff
10003880:	1c2f      	adds	r7, r5, #0
10003882:	465a      	mov	r2, fp
10003884:	9d02      	ldr	r5, [sp, #8]
10003886:	1c26      	adds	r6, r4, #0
10003888:	9201      	str	r2, [sp, #4]
1000388a:	2d02      	cmp	r5, #2
1000388c:	d0b0      	beq.n	100037f0 <__aeabi_ddiv+0x2e0>
1000388e:	2d03      	cmp	r5, #3
10003890:	d100      	bne.n	10003894 <__aeabi_ddiv+0x384>
10003892:	e101      	b.n	10003a98 <__aeabi_ddiv+0x588>
10003894:	2d01      	cmp	r5, #1
10003896:	d100      	bne.n	1000389a <__aeabi_ddiv+0x38a>
10003898:	e09c      	b.n	100039d4 <__aeabi_ddiv+0x4c4>
1000389a:	9b04      	ldr	r3, [sp, #16]
1000389c:	4882      	ldr	r0, [pc, #520]	; (10003aa8 <__aeabi_ddiv+0x598>)
1000389e:	181a      	adds	r2, r3, r0
100038a0:	2a00      	cmp	r2, #0
100038a2:	dc00      	bgt.n	100038a6 <__aeabi_ddiv+0x396>
100038a4:	e08c      	b.n	100039c0 <__aeabi_ddiv+0x4b0>
100038a6:	240f      	movs	r4, #15
100038a8:	403c      	ands	r4, r7
100038aa:	2c04      	cmp	r4, #4
100038ac:	d005      	beq.n	100038ba <__aeabi_ddiv+0x3aa>
100038ae:	1d3b      	adds	r3, r7, #4
100038b0:	42bb      	cmp	r3, r7
100038b2:	41bf      	sbcs	r7, r7
100038b4:	427d      	negs	r5, r7
100038b6:	1976      	adds	r6, r6, r5
100038b8:	1c1f      	adds	r7, r3, #0
100038ba:	01f1      	lsls	r1, r6, #7
100038bc:	d505      	bpl.n	100038ca <__aeabi_ddiv+0x3ba>
100038be:	4a7b      	ldr	r2, [pc, #492]	; (10003aac <__aeabi_ddiv+0x59c>)
100038c0:	9904      	ldr	r1, [sp, #16]
100038c2:	2080      	movs	r0, #128	; 0x80
100038c4:	00c4      	lsls	r4, r0, #3
100038c6:	4016      	ands	r6, r2
100038c8:	190a      	adds	r2, r1, r4
100038ca:	4b79      	ldr	r3, [pc, #484]	; (10003ab0 <__aeabi_ddiv+0x5a0>)
100038cc:	429a      	cmp	r2, r3
100038ce:	dd00      	ble.n	100038d2 <__aeabi_ddiv+0x3c2>
100038d0:	e78e      	b.n	100037f0 <__aeabi_ddiv+0x2e0>
100038d2:	0775      	lsls	r5, r6, #29
100038d4:	08ff      	lsrs	r7, r7, #3
100038d6:	0276      	lsls	r6, r6, #9
100038d8:	0551      	lsls	r1, r2, #21
100038da:	432f      	orrs	r7, r5
100038dc:	0b36      	lsrs	r6, r6, #12
100038de:	0d4a      	lsrs	r2, r1, #21
100038e0:	9b01      	ldr	r3, [sp, #4]
100038e2:	e789      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
100038e4:	2200      	movs	r2, #0
100038e6:	2600      	movs	r6, #0
100038e8:	2700      	movs	r7, #0
100038ea:	e785      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
100038ec:	2080      	movs	r0, #128	; 0x80
100038ee:	0301      	lsls	r1, r0, #12
100038f0:	420e      	tst	r6, r1
100038f2:	d016      	beq.n	10003922 <__aeabi_ddiv+0x412>
100038f4:	420c      	tst	r4, r1
100038f6:	d114      	bne.n	10003922 <__aeabi_ddiv+0x412>
100038f8:	430c      	orrs	r4, r1
100038fa:	0326      	lsls	r6, r4, #12
100038fc:	0b36      	lsrs	r6, r6, #12
100038fe:	465b      	mov	r3, fp
10003900:	1c2f      	adds	r7, r5, #0
10003902:	4a6c      	ldr	r2, [pc, #432]	; (10003ab4 <__aeabi_ddiv+0x5a4>)
10003904:	e778      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
10003906:	464c      	mov	r4, r9
10003908:	9401      	str	r4, [sp, #4]
1000390a:	9d00      	ldr	r5, [sp, #0]
1000390c:	e7bd      	b.n	1000388a <__aeabi_ddiv+0x37a>
1000390e:	42a6      	cmp	r6, r4
10003910:	d043      	beq.n	1000399a <__aeabi_ddiv+0x48a>
10003912:	9804      	ldr	r0, [sp, #16]
10003914:	46b8      	mov	r8, r7
10003916:	3801      	subs	r0, #1
10003918:	2700      	movs	r7, #0
1000391a:	9004      	str	r0, [sp, #16]
1000391c:	46b1      	mov	r9, r6
1000391e:	9702      	str	r7, [sp, #8]
10003920:	e68e      	b.n	10003640 <__aeabi_ddiv+0x130>
10003922:	430e      	orrs	r6, r1
10003924:	0333      	lsls	r3, r6, #12
10003926:	0b1e      	lsrs	r6, r3, #12
10003928:	4a62      	ldr	r2, [pc, #392]	; (10003ab4 <__aeabi_ddiv+0x5a4>)
1000392a:	464b      	mov	r3, r9
1000392c:	e764      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
1000392e:	1c04      	adds	r4, r0, #0
10003930:	3c28      	subs	r4, #40	; 0x28
10003932:	40a5      	lsls	r5, r4
10003934:	1c2c      	adds	r4, r5, #0
10003936:	2500      	movs	r5, #0
10003938:	e64b      	b.n	100035d2 <__aeabi_ddiv+0xc2>
1000393a:	f000 f9bb 	bl	10003cb4 <__clzsi2>
1000393e:	3020      	adds	r0, #32
10003940:	e63b      	b.n	100035ba <__aeabi_ddiv+0xaa>
10003942:	1c06      	adds	r6, r0, #0
10003944:	3e28      	subs	r6, #40	; 0x28
10003946:	40b7      	lsls	r7, r6
10003948:	1c3e      	adds	r6, r7, #0
1000394a:	2700      	movs	r7, #0
1000394c:	e609      	b.n	10003562 <__aeabi_ddiv+0x52>
1000394e:	f000 f9b1 	bl	10003cb4 <__clzsi2>
10003952:	3020      	adds	r0, #32
10003954:	e5f9      	b.n	1000354a <__aeabi_ddiv+0x3a>
10003956:	9a02      	ldr	r2, [sp, #8]
10003958:	3e01      	subs	r6, #1
1000395a:	1c11      	adds	r1, r2, #0
1000395c:	4459      	add	r1, fp
1000395e:	4559      	cmp	r1, fp
10003960:	4192      	sbcs	r2, r2
10003962:	4252      	negs	r2, r2
10003964:	1912      	adds	r2, r2, r4
10003966:	18d3      	adds	r3, r2, r3
10003968:	429c      	cmp	r4, r3
1000396a:	d204      	bcs.n	10003976 <__aeabi_ddiv+0x466>
1000396c:	4298      	cmp	r0, r3
1000396e:	d86b      	bhi.n	10003a48 <__aeabi_ddiv+0x538>
10003970:	d016      	beq.n	100039a0 <__aeabi_ddiv+0x490>
10003972:	1a1b      	subs	r3, r3, r0
10003974:	e6cb      	b.n	1000370e <__aeabi_ddiv+0x1fe>
10003976:	42a3      	cmp	r3, r4
10003978:	d1fb      	bne.n	10003972 <__aeabi_ddiv+0x462>
1000397a:	458b      	cmp	fp, r1
1000397c:	d9f6      	bls.n	1000396c <__aeabi_ddiv+0x45c>
1000397e:	1a23      	subs	r3, r4, r0
10003980:	e6c5      	b.n	1000370e <__aeabi_ddiv+0x1fe>
10003982:	4599      	cmp	r9, r3
10003984:	d800      	bhi.n	10003988 <__aeabi_ddiv+0x478>
10003986:	e697      	b.n	100036b8 <__aeabi_ddiv+0x1a8>
10003988:	3f01      	subs	r7, #1
1000398a:	191b      	adds	r3, r3, r4
1000398c:	e694      	b.n	100036b8 <__aeabi_ddiv+0x1a8>
1000398e:	9a02      	ldr	r2, [sp, #8]
10003990:	42ba      	cmp	r2, r7
10003992:	d3e0      	bcc.n	10003956 <__aeabi_ddiv+0x446>
10003994:	9902      	ldr	r1, [sp, #8]
10003996:	2300      	movs	r3, #0
10003998:	e6b9      	b.n	1000370e <__aeabi_ddiv+0x1fe>
1000399a:	42af      	cmp	r7, r5
1000399c:	d9b9      	bls.n	10003912 <__aeabi_ddiv+0x402>
1000399e:	e647      	b.n	10003630 <__aeabi_ddiv+0x120>
100039a0:	428f      	cmp	r7, r1
100039a2:	d851      	bhi.n	10003a48 <__aeabi_ddiv+0x538>
100039a4:	2300      	movs	r3, #0
100039a6:	e6b2      	b.n	1000370e <__aeabi_ddiv+0x1fe>
100039a8:	1909      	adds	r1, r1, r4
100039aa:	3f01      	subs	r7, #1
100039ac:	4658      	mov	r0, fp
100039ae:	428c      	cmp	r4, r1
100039b0:	d919      	bls.n	100039e6 <__aeabi_ddiv+0x4d6>
100039b2:	4291      	cmp	r1, r2
100039b4:	d000      	beq.n	100039b8 <__aeabi_ddiv+0x4a8>
100039b6:	e712      	b.n	100037de <__aeabi_ddiv+0x2ce>
100039b8:	4298      	cmp	r0, r3
100039ba:	d000      	beq.n	100039be <__aeabi_ddiv+0x4ae>
100039bc:	e70f      	b.n	100037de <__aeabi_ddiv+0x2ce>
100039be:	e76c      	b.n	1000389a <__aeabi_ddiv+0x38a>
100039c0:	4c3d      	ldr	r4, [pc, #244]	; (10003ab8 <__aeabi_ddiv+0x5a8>)
100039c2:	9d04      	ldr	r5, [sp, #16]
100039c4:	1b63      	subs	r3, r4, r5
100039c6:	2b38      	cmp	r3, #56	; 0x38
100039c8:	dd1c      	ble.n	10003a04 <__aeabi_ddiv+0x4f4>
100039ca:	9b01      	ldr	r3, [sp, #4]
100039cc:	2200      	movs	r2, #0
100039ce:	2600      	movs	r6, #0
100039d0:	2700      	movs	r7, #0
100039d2:	e711      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
100039d4:	9b01      	ldr	r3, [sp, #4]
100039d6:	2200      	movs	r2, #0
100039d8:	402b      	ands	r3, r5
100039da:	2600      	movs	r6, #0
100039dc:	2700      	movs	r7, #0
100039de:	e70b      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
100039e0:	2701      	movs	r7, #1
100039e2:	427f      	negs	r7, r7
100039e4:	e759      	b.n	1000389a <__aeabi_ddiv+0x38a>
100039e6:	428a      	cmp	r2, r1
100039e8:	d803      	bhi.n	100039f2 <__aeabi_ddiv+0x4e2>
100039ea:	d000      	beq.n	100039ee <__aeabi_ddiv+0x4de>
100039ec:	e6f7      	b.n	100037de <__aeabi_ddiv+0x2ce>
100039ee:	4298      	cmp	r0, r3
100039f0:	d2e2      	bcs.n	100039b8 <__aeabi_ddiv+0x4a8>
100039f2:	465d      	mov	r5, fp
100039f4:	0068      	lsls	r0, r5, #1
100039f6:	4558      	cmp	r0, fp
100039f8:	41ad      	sbcs	r5, r5
100039fa:	426d      	negs	r5, r5
100039fc:	192c      	adds	r4, r5, r4
100039fe:	3f01      	subs	r7, #1
10003a00:	1909      	adds	r1, r1, r4
10003a02:	e7d6      	b.n	100039b2 <__aeabi_ddiv+0x4a2>
10003a04:	2b1f      	cmp	r3, #31
10003a06:	dc34      	bgt.n	10003a72 <__aeabi_ddiv+0x562>
10003a08:	9c04      	ldr	r4, [sp, #16]
10003a0a:	4a2c      	ldr	r2, [pc, #176]	; (10003abc <__aeabi_ddiv+0x5ac>)
10003a0c:	1c38      	adds	r0, r7, #0
10003a0e:	18a5      	adds	r5, r4, r2
10003a10:	1c31      	adds	r1, r6, #0
10003a12:	40af      	lsls	r7, r5
10003a14:	40d8      	lsrs	r0, r3
10003a16:	40a9      	lsls	r1, r5
10003a18:	1c3c      	adds	r4, r7, #0
10003a1a:	4301      	orrs	r1, r0
10003a1c:	1e67      	subs	r7, r4, #1
10003a1e:	41bc      	sbcs	r4, r7
10003a20:	1c0f      	adds	r7, r1, #0
10003a22:	4327      	orrs	r7, r4
10003a24:	40de      	lsrs	r6, r3
10003a26:	230f      	movs	r3, #15
10003a28:	403b      	ands	r3, r7
10003a2a:	2b04      	cmp	r3, #4
10003a2c:	d005      	beq.n	10003a3a <__aeabi_ddiv+0x52a>
10003a2e:	1d3a      	adds	r2, r7, #4
10003a30:	42ba      	cmp	r2, r7
10003a32:	41bf      	sbcs	r7, r7
10003a34:	427d      	negs	r5, r7
10003a36:	1976      	adds	r6, r6, r5
10003a38:	1c17      	adds	r7, r2, #0
10003a3a:	0232      	lsls	r2, r6, #8
10003a3c:	d511      	bpl.n	10003a62 <__aeabi_ddiv+0x552>
10003a3e:	9b01      	ldr	r3, [sp, #4]
10003a40:	2201      	movs	r2, #1
10003a42:	2600      	movs	r6, #0
10003a44:	2700      	movs	r7, #0
10003a46:	e6d7      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
10003a48:	4459      	add	r1, fp
10003a4a:	4559      	cmp	r1, fp
10003a4c:	4192      	sbcs	r2, r2
10003a4e:	4252      	negs	r2, r2
10003a50:	1912      	adds	r2, r2, r4
10003a52:	18d3      	adds	r3, r2, r3
10003a54:	3e01      	subs	r6, #1
10003a56:	1a1b      	subs	r3, r3, r0
10003a58:	e659      	b.n	1000370e <__aeabi_ddiv+0x1fe>
10003a5a:	2b00      	cmp	r3, #0
10003a5c:	d1a4      	bne.n	100039a8 <__aeabi_ddiv+0x498>
10003a5e:	2000      	movs	r0, #0
10003a60:	e7aa      	b.n	100039b8 <__aeabi_ddiv+0x4a8>
10003a62:	0770      	lsls	r0, r6, #29
10003a64:	08ff      	lsrs	r7, r7, #3
10003a66:	0271      	lsls	r1, r6, #9
10003a68:	4307      	orrs	r7, r0
10003a6a:	0b0e      	lsrs	r6, r1, #12
10003a6c:	9b01      	ldr	r3, [sp, #4]
10003a6e:	2200      	movs	r2, #0
10003a70:	e6c2      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
10003a72:	4913      	ldr	r1, [pc, #76]	; (10003ac0 <__aeabi_ddiv+0x5b0>)
10003a74:	9c04      	ldr	r4, [sp, #16]
10003a76:	1c30      	adds	r0, r6, #0
10003a78:	1b0a      	subs	r2, r1, r4
10003a7a:	40d0      	lsrs	r0, r2
10003a7c:	1c05      	adds	r5, r0, #0
10003a7e:	2b20      	cmp	r3, #32
10003a80:	d008      	beq.n	10003a94 <__aeabi_ddiv+0x584>
10003a82:	4b10      	ldr	r3, [pc, #64]	; (10003ac4 <__aeabi_ddiv+0x5b4>)
10003a84:	18e1      	adds	r1, r4, r3
10003a86:	408e      	lsls	r6, r1
10003a88:	4337      	orrs	r7, r6
10003a8a:	1e7b      	subs	r3, r7, #1
10003a8c:	419f      	sbcs	r7, r3
10003a8e:	432f      	orrs	r7, r5
10003a90:	2600      	movs	r6, #0
10003a92:	e7c8      	b.n	10003a26 <__aeabi_ddiv+0x516>
10003a94:	2600      	movs	r6, #0
10003a96:	e7f7      	b.n	10003a88 <__aeabi_ddiv+0x578>
10003a98:	2280      	movs	r2, #128	; 0x80
10003a9a:	0310      	lsls	r0, r2, #12
10003a9c:	4306      	orrs	r6, r0
10003a9e:	0331      	lsls	r1, r6, #12
10003aa0:	0b0e      	lsrs	r6, r1, #12
10003aa2:	9b01      	ldr	r3, [sp, #4]
10003aa4:	4a03      	ldr	r2, [pc, #12]	; (10003ab4 <__aeabi_ddiv+0x5a4>)
10003aa6:	e6a7      	b.n	100037f8 <__aeabi_ddiv+0x2e8>
10003aa8:	000003ff 	.word	0x000003ff
10003aac:	feffffff 	.word	0xfeffffff
10003ab0:	000007fe 	.word	0x000007fe
10003ab4:	000007ff 	.word	0x000007ff
10003ab8:	fffffc02 	.word	0xfffffc02
10003abc:	0000041e 	.word	0x0000041e
10003ac0:	fffffbe2 	.word	0xfffffbe2
10003ac4:	0000043e 	.word	0x0000043e

10003ac8 <__aeabi_f2d>:
10003ac8:	0041      	lsls	r1, r0, #1
10003aca:	b570      	push	{r4, r5, r6, lr}
10003acc:	0e0e      	lsrs	r6, r1, #24
10003ace:	1c73      	adds	r3, r6, #1
10003ad0:	0242      	lsls	r2, r0, #9
10003ad2:	0fc5      	lsrs	r5, r0, #31
10003ad4:	b2d8      	uxtb	r0, r3
10003ad6:	0a54      	lsrs	r4, r2, #9
10003ad8:	2801      	cmp	r0, #1
10003ada:	dd15      	ble.n	10003b08 <__aeabi_f2d+0x40>
10003adc:	0763      	lsls	r3, r4, #29
10003ade:	24e0      	movs	r4, #224	; 0xe0
10003ae0:	00a0      	lsls	r0, r4, #2
10003ae2:	0b12      	lsrs	r2, r2, #12
10003ae4:	1834      	adds	r4, r6, r0
10003ae6:	2000      	movs	r0, #0
10003ae8:	2100      	movs	r1, #0
10003aea:	1c18      	adds	r0, r3, #0
10003aec:	0d0b      	lsrs	r3, r1, #20
10003aee:	051e      	lsls	r6, r3, #20
10003af0:	4b1c      	ldr	r3, [pc, #112]	; (10003b64 <__aeabi_f2d+0x9c>)
10003af2:	4332      	orrs	r2, r6
10003af4:	0561      	lsls	r1, r4, #21
10003af6:	084c      	lsrs	r4, r1, #1
10003af8:	4013      	ands	r3, r2
10003afa:	4323      	orrs	r3, r4
10003afc:	005a      	lsls	r2, r3, #1
10003afe:	0856      	lsrs	r6, r2, #1
10003b00:	07ed      	lsls	r5, r5, #31
10003b02:	1c31      	adds	r1, r6, #0
10003b04:	4329      	orrs	r1, r5
10003b06:	bd70      	pop	{r4, r5, r6, pc}
10003b08:	2e00      	cmp	r6, #0
10003b0a:	d116      	bne.n	10003b3a <__aeabi_f2d+0x72>
10003b0c:	2c00      	cmp	r4, #0
10003b0e:	d01e      	beq.n	10003b4e <__aeabi_f2d+0x86>
10003b10:	1c20      	adds	r0, r4, #0
10003b12:	f000 f8cf 	bl	10003cb4 <__clzsi2>
10003b16:	280a      	cmp	r0, #10
10003b18:	dc1d      	bgt.n	10003b56 <__aeabi_f2d+0x8e>
10003b1a:	220b      	movs	r2, #11
10003b1c:	1a11      	subs	r1, r2, r0
10003b1e:	1c02      	adds	r2, r0, #0
10003b20:	1c23      	adds	r3, r4, #0
10003b22:	3215      	adds	r2, #21
10003b24:	40cb      	lsrs	r3, r1
10003b26:	4094      	lsls	r4, r2
10003b28:	1c1e      	adds	r6, r3, #0
10003b2a:	1c23      	adds	r3, r4, #0
10003b2c:	0334      	lsls	r4, r6, #12
10003b2e:	4e0e      	ldr	r6, [pc, #56]	; (10003b68 <__aeabi_f2d+0xa0>)
10003b30:	0b22      	lsrs	r2, r4, #12
10003b32:	1a30      	subs	r0, r6, r0
10003b34:	0541      	lsls	r1, r0, #21
10003b36:	0d4c      	lsrs	r4, r1, #21
10003b38:	e7d5      	b.n	10003ae6 <__aeabi_f2d+0x1e>
10003b3a:	2c00      	cmp	r4, #0
10003b3c:	d003      	beq.n	10003b46 <__aeabi_f2d+0x7e>
10003b3e:	0763      	lsls	r3, r4, #29
10003b40:	0b12      	lsrs	r2, r2, #12
10003b42:	4c0a      	ldr	r4, [pc, #40]	; (10003b6c <__aeabi_f2d+0xa4>)
10003b44:	e7cf      	b.n	10003ae6 <__aeabi_f2d+0x1e>
10003b46:	4c09      	ldr	r4, [pc, #36]	; (10003b6c <__aeabi_f2d+0xa4>)
10003b48:	2200      	movs	r2, #0
10003b4a:	2300      	movs	r3, #0
10003b4c:	e7cb      	b.n	10003ae6 <__aeabi_f2d+0x1e>
10003b4e:	2400      	movs	r4, #0
10003b50:	2200      	movs	r2, #0
10003b52:	2300      	movs	r3, #0
10003b54:	e7c7      	b.n	10003ae6 <__aeabi_f2d+0x1e>
10003b56:	1c01      	adds	r1, r0, #0
10003b58:	390b      	subs	r1, #11
10003b5a:	408c      	lsls	r4, r1
10003b5c:	1c26      	adds	r6, r4, #0
10003b5e:	2300      	movs	r3, #0
10003b60:	e7e4      	b.n	10003b2c <__aeabi_f2d+0x64>
10003b62:	46c0      	nop			; (mov r8, r8)
10003b64:	800fffff 	.word	0x800fffff
10003b68:	00000389 	.word	0x00000389
10003b6c:	000007ff 	.word	0x000007ff

10003b70 <__aeabi_d2f>:
10003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b72:	1c04      	adds	r4, r0, #0
10003b74:	0048      	lsls	r0, r1, #1
10003b76:	0d40      	lsrs	r0, r0, #21
10003b78:	030a      	lsls	r2, r1, #12
10003b7a:	0fcd      	lsrs	r5, r1, #31
10003b7c:	1c41      	adds	r1, r0, #1
10003b7e:	0f63      	lsrs	r3, r4, #29
10003b80:	0a52      	lsrs	r2, r2, #9
10003b82:	054f      	lsls	r7, r1, #21
10003b84:	431a      	orrs	r2, r3
10003b86:	00e6      	lsls	r6, r4, #3
10003b88:	0d7b      	lsrs	r3, r7, #21
10003b8a:	2b01      	cmp	r3, #1
10003b8c:	dd3b      	ble.n	10003c06 <__aeabi_d2f+0x96>
10003b8e:	4942      	ldr	r1, [pc, #264]	; (10003c98 <__aeabi_d2f+0x128>)
10003b90:	1843      	adds	r3, r0, r1
10003b92:	2bfe      	cmp	r3, #254	; 0xfe
10003b94:	dc2c      	bgt.n	10003bf0 <__aeabi_d2f+0x80>
10003b96:	2b00      	cmp	r3, #0
10003b98:	dd4e      	ble.n	10003c38 <__aeabi_d2f+0xc8>
10003b9a:	01a4      	lsls	r4, r4, #6
10003b9c:	0f77      	lsrs	r7, r6, #29
10003b9e:	00d2      	lsls	r2, r2, #3
10003ba0:	1e61      	subs	r1, r4, #1
10003ba2:	418c      	sbcs	r4, r1
10003ba4:	4e3d      	ldr	r6, [pc, #244]	; (10003c9c <__aeabi_d2f+0x12c>)
10003ba6:	4322      	orrs	r2, r4
10003ba8:	1980      	adds	r0, r0, r6
10003baa:	433a      	orrs	r2, r7
10003bac:	260f      	movs	r6, #15
10003bae:	4016      	ands	r6, r2
10003bb0:	2e04      	cmp	r6, #4
10003bb2:	d147      	bne.n	10003c44 <__aeabi_d2f+0xd4>
10003bb4:	2780      	movs	r7, #128	; 0x80
10003bb6:	04fc      	lsls	r4, r7, #19
10003bb8:	4014      	ands	r4, r2
10003bba:	d01d      	beq.n	10003bf8 <__aeabi_d2f+0x88>
10003bbc:	28ff      	cmp	r0, #255	; 0xff
10003bbe:	d038      	beq.n	10003c32 <__aeabi_d2f+0xc2>
10003bc0:	4b37      	ldr	r3, [pc, #220]	; (10003ca0 <__aeabi_d2f+0x130>)
10003bc2:	401a      	ands	r2, r3
10003bc4:	1c03      	adds	r3, r0, #0
10003bc6:	3001      	adds	r0, #1
10003bc8:	b2c6      	uxtb	r6, r0
10003bca:	08d2      	lsrs	r2, r2, #3
10003bcc:	2e01      	cmp	r6, #1
10003bce:	dc17      	bgt.n	10003c00 <__aeabi_d2f+0x90>
10003bd0:	2a00      	cmp	r2, #0
10003bd2:	d006      	beq.n	10003be2 <__aeabi_d2f+0x72>
10003bd4:	2b00      	cmp	r3, #0
10003bd6:	d029      	beq.n	10003c2c <__aeabi_d2f+0xbc>
10003bd8:	2780      	movs	r7, #128	; 0x80
10003bda:	03fc      	lsls	r4, r7, #15
10003bdc:	4322      	orrs	r2, r4
10003bde:	0251      	lsls	r1, r2, #9
10003be0:	0a4a      	lsrs	r2, r1, #9
10003be2:	b2db      	uxtb	r3, r3
10003be4:	05db      	lsls	r3, r3, #23
10003be6:	431a      	orrs	r2, r3
10003be8:	07ed      	lsls	r5, r5, #31
10003bea:	1c10      	adds	r0, r2, #0
10003bec:	4328      	orrs	r0, r5
10003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003bf0:	2180      	movs	r1, #128	; 0x80
10003bf2:	0048      	lsls	r0, r1, #1
10003bf4:	2204      	movs	r2, #4
10003bf6:	23ff      	movs	r3, #255	; 0xff
10003bf8:	b2c6      	uxtb	r6, r0
10003bfa:	08d2      	lsrs	r2, r2, #3
10003bfc:	2e01      	cmp	r6, #1
10003bfe:	dde7      	ble.n	10003bd0 <__aeabi_d2f+0x60>
10003c00:	0251      	lsls	r1, r2, #9
10003c02:	0a4a      	lsrs	r2, r1, #9
10003c04:	e7ed      	b.n	10003be2 <__aeabi_d2f+0x72>
10003c06:	2800      	cmp	r0, #0
10003c08:	d106      	bne.n	10003c18 <__aeabi_d2f+0xa8>
10003c0a:	4332      	orrs	r2, r6
10003c0c:	2001      	movs	r0, #1
10003c0e:	2a00      	cmp	r2, #0
10003c10:	d115      	bne.n	10003c3e <__aeabi_d2f+0xce>
10003c12:	2204      	movs	r2, #4
10003c14:	2300      	movs	r3, #0
10003c16:	e7ef      	b.n	10003bf8 <__aeabi_d2f+0x88>
10003c18:	4316      	orrs	r6, r2
10003c1a:	d0e9      	beq.n	10003bf0 <__aeabi_d2f+0x80>
10003c1c:	2480      	movs	r4, #128	; 0x80
10003c1e:	04a0      	lsls	r0, r4, #18
10003c20:	00d2      	lsls	r2, r2, #3
10003c22:	2680      	movs	r6, #128	; 0x80
10003c24:	4302      	orrs	r2, r0
10003c26:	23ff      	movs	r3, #255	; 0xff
10003c28:	0070      	lsls	r0, r6, #1
10003c2a:	e7bf      	b.n	10003bac <__aeabi_d2f+0x3c>
10003c2c:	0250      	lsls	r0, r2, #9
10003c2e:	0a42      	lsrs	r2, r0, #9
10003c30:	e7d8      	b.n	10003be4 <__aeabi_d2f+0x74>
10003c32:	23ff      	movs	r3, #255	; 0xff
10003c34:	2200      	movs	r2, #0
10003c36:	e7d5      	b.n	10003be4 <__aeabi_d2f+0x74>
10003c38:	3317      	adds	r3, #23
10003c3a:	da05      	bge.n	10003c48 <__aeabi_d2f+0xd8>
10003c3c:	2001      	movs	r0, #1
10003c3e:	2205      	movs	r2, #5
10003c40:	2300      	movs	r3, #0
10003c42:	e7d9      	b.n	10003bf8 <__aeabi_d2f+0x88>
10003c44:	3204      	adds	r2, #4
10003c46:	e7b5      	b.n	10003bb4 <__aeabi_d2f+0x44>
10003c48:	2380      	movs	r3, #128	; 0x80
10003c4a:	4f16      	ldr	r7, [pc, #88]	; (10003ca4 <__aeabi_d2f+0x134>)
10003c4c:	0419      	lsls	r1, r3, #16
10003c4e:	430a      	orrs	r2, r1
10003c50:	1a3c      	subs	r4, r7, r0
10003c52:	2c1f      	cmp	r4, #31
10003c54:	dc0d      	bgt.n	10003c72 <__aeabi_d2f+0x102>
10003c56:	4914      	ldr	r1, [pc, #80]	; (10003ca8 <__aeabi_d2f+0x138>)
10003c58:	1c33      	adds	r3, r6, #0
10003c5a:	1847      	adds	r7, r0, r1
10003c5c:	40be      	lsls	r6, r7
10003c5e:	1c30      	adds	r0, r6, #0
10003c60:	1e46      	subs	r6, r0, #1
10003c62:	41b0      	sbcs	r0, r6
10003c64:	40ba      	lsls	r2, r7
10003c66:	40e3      	lsrs	r3, r4
10003c68:	4302      	orrs	r2, r0
10003c6a:	431a      	orrs	r2, r3
10003c6c:	2001      	movs	r0, #1
10003c6e:	2300      	movs	r3, #0
10003c70:	e79c      	b.n	10003bac <__aeabi_d2f+0x3c>
10003c72:	4b0e      	ldr	r3, [pc, #56]	; (10003cac <__aeabi_d2f+0x13c>)
10003c74:	1c17      	adds	r7, r2, #0
10003c76:	1a19      	subs	r1, r3, r0
10003c78:	40cf      	lsrs	r7, r1
10003c7a:	1c3b      	adds	r3, r7, #0
10003c7c:	2c20      	cmp	r4, #32
10003c7e:	d009      	beq.n	10003c94 <__aeabi_d2f+0x124>
10003c80:	4c0b      	ldr	r4, [pc, #44]	; (10003cb0 <__aeabi_d2f+0x140>)
10003c82:	1900      	adds	r0, r0, r4
10003c84:	4082      	lsls	r2, r0
10003c86:	4332      	orrs	r2, r6
10003c88:	1e56      	subs	r6, r2, #1
10003c8a:	41b2      	sbcs	r2, r6
10003c8c:	431a      	orrs	r2, r3
10003c8e:	2001      	movs	r0, #1
10003c90:	2300      	movs	r3, #0
10003c92:	e78b      	b.n	10003bac <__aeabi_d2f+0x3c>
10003c94:	2200      	movs	r2, #0
10003c96:	e7f6      	b.n	10003c86 <__aeabi_d2f+0x116>
10003c98:	fffffc80 	.word	0xfffffc80
10003c9c:	fffffc81 	.word	0xfffffc81
10003ca0:	fbffffff 	.word	0xfbffffff
10003ca4:	0000039e 	.word	0x0000039e
10003ca8:	fffffc82 	.word	0xfffffc82
10003cac:	0000037e 	.word	0x0000037e
10003cb0:	fffffca2 	.word	0xfffffca2

10003cb4 <__clzsi2>:
10003cb4:	211c      	movs	r1, #28
10003cb6:	2301      	movs	r3, #1
10003cb8:	041b      	lsls	r3, r3, #16
10003cba:	4298      	cmp	r0, r3
10003cbc:	d301      	bcc.n	10003cc2 <__clzsi2+0xe>
10003cbe:	0c00      	lsrs	r0, r0, #16
10003cc0:	3910      	subs	r1, #16
10003cc2:	0a1b      	lsrs	r3, r3, #8
10003cc4:	4298      	cmp	r0, r3
10003cc6:	d301      	bcc.n	10003ccc <__clzsi2+0x18>
10003cc8:	0a00      	lsrs	r0, r0, #8
10003cca:	3908      	subs	r1, #8
10003ccc:	091b      	lsrs	r3, r3, #4
10003cce:	4298      	cmp	r0, r3
10003cd0:	d301      	bcc.n	10003cd6 <__clzsi2+0x22>
10003cd2:	0900      	lsrs	r0, r0, #4
10003cd4:	3904      	subs	r1, #4
10003cd6:	a202      	add	r2, pc, #8	; (adr r2, 10003ce0 <__clzsi2+0x2c>)
10003cd8:	5c10      	ldrb	r0, [r2, r0]
10003cda:	1840      	adds	r0, r0, r1
10003cdc:	4770      	bx	lr
10003cde:	46c0      	nop			; (mov r8, r8)
10003ce0:	02020304 	.word	0x02020304
10003ce4:	01010101 	.word	0x01010101
	...

10003cf0 <__errno>:
10003cf0:	4b01      	ldr	r3, [pc, #4]	; (10003cf8 <__errno+0x8>)
10003cf2:	6818      	ldr	r0, [r3, #0]
10003cf4:	4770      	bx	lr
10003cf6:	46c0      	nop			; (mov r8, r8)
10003cf8:	20003d98 	.word	0x20003d98

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	1000116f 	.word	0x1000116f
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001171 	.word	0x10001171
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001173 	.word	0x10001173
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001175 	.word	0x10001175
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001177 	.word	0x10001177
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001179 	.word	0x10001179
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	1000117b 	.word	0x1000117b
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	1000117d 	.word	0x1000117d
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	1000117f 	.word	0x1000117f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001181 	.word	0x10001181
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001183 	.word	0x10001183
    MOV PC,R0
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001185 	.word	0x10001185
    MOV PC,R0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	100011a3 	.word	0x100011a3
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	100011a5 	.word	0x100011a5
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	100011a7 	.word	0x100011a7
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	100011a9 	.word	0x100011a9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	100011ab 	.word	0x100011ab
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	100011ad 	.word	0x100011ad
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	10001187 	.word	0x10001187
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001189 	.word	0x10001189
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	1000118b 	.word	0x1000118b
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	1000118d 	.word	0x1000118d
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	1000118f 	.word	0x1000118f
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001191 	.word	0x10001191
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001193 	.word	0x10001193
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001195 	.word	0x10001195
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10001197 	.word	0x10001197
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001199 	.word	0x10001199
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	1000119b 	.word	0x1000119b
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	1000119d 	.word	0x1000119d
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	1000119f 	.word	0x1000119f
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	100011a1 	.word	0x100011a1
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	100011af 	.word	0x100011af
