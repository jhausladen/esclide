   1              	# 1 "../Startup/startup_XMC1300.s"
   1              	/*****************************************************************************/
   0              	
   2              	/* Startup_XMC1300.s: Startup file for XMC1300 device series                 */
   0              	
   3              	/*****************************************************************************/
   4              	
   5              	/* ********************* Version History *********************************** */
   6              	/* ***************************************************************************
   7              	V1.0, Oct, 02, 2012 PKB:Startup file for XMC1  
   8              	V1.1, Oct, 19, 2012 PKB:ERU and MATH interrupt handlers  
   9              	V1.2, Nov, 02, 2012 PKB:Renamed AllowPLLInitByStartup to AllowClkInitByStartup  
  10              	V1.3, Dec, 10, 2012 PKB:Changed attributes of XmcVeneercode section  
  11              	V1.4, Dec, 13, 2012 PKB:Removed unwanted interrupts/vectors 
  12              	V1.5, Jan, 26, 2013 PKB:SSW support 
  13              	V1.6, Feb, 13, 2013 PKB:Relative path to Device_Data.h  
  14              	V1.7, Feb, 19, 2013 PKB:Included XMC1300_SCU.inc 
  15              	**************************************************************************** */
  16              	/**
  17              	* @file     Startup_XMC1300.s
  18              	*           XMC1300 Device Series
  19              	* @version  V1.7
  20              	* @date     Feb 2013
  21              	*
  22              	Copyright (C) 2013 Infineon Technologies AG. All rights reserved.
  23              	*
  24              	*
  25              	* @par
  26              	* Infineon Technologies AG (Infineon) is supplying this software for use with 
  27              	* Infineon's microcontrollers.  This file can be freely distributed
  28              	* within development tools that are supporting such microcontrollers.
  29              	*
  30              	* @par
  31              	* THIS SOFTWARE IS PROVIDED AS IS.  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  32              	* OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  33              	* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  34              	* ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  35              	* CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  36              	*
  37              	******************************************************************************/
  38              	#ifdef DAVE_CE
  39              	#include <XMC1300_SCU.inc>
  40              	#include "../Dave/Generated/inc/DAVESupport/Device_Data.h"
  41              	#else
  42              	#define CLKVAL1_SSW 0x80000000
  43              	#define CLKVAL2_SSW 0x80000000
  44              	#endif
  45              	
  46              	/* A macro to define vector table entries */
  47              	.macro Entry Handler
  48              	   .long \Handler
  49              	.endm
  50              	
  51              	/* A couple of macros to ease definition of the various handlers */
  52              	.macro Insert_ExceptionHandler Handler_Func 
  53              	   .weak \Handler_Func
  55              	   \Handler_Func:
  56              	   B  .
  58              	.endm    
  59              	
  60              	/* ================== START OF VECTOR TABLE DEFINITION ====================== */
  61              	/* Vector Table - This is indirectly branched to through the veneers */
  62              	    .syntax unified   
  63              	    .cpu cortex-m0
  64              	
  65              	    .section ".Xmc1300.reset"
  66              	    .globl  __Xmc1300_interrupt_vector_cortex_m
  68              	
  69              	__Xmc1300_interrupt_vector_cortex_m:
  70 0000 00000000 	    .long   __Xmc1300_stack             /* Top of Stack                 */
  71 0004 00000000 	    .long   __Xmc1300_reset_cortex_m    /* Reset Handler                */
  72              	/* 
  73              	 * All entries below are redundant for M0, but are retained because they can
  74              	 * in the future be directly ported to M0 Plus devices.
  75              	 */
  76 0008 00000000 	    Entry   NMI_Handler                 /* NMI Handler                  */
  77 000c 00000000 	    Entry   HardFault_Handler           /* Hard Fault Handler           */
  78 0010 00000080 	    .long   CLKVAL1_SSW                 /* Reserved                     */
  79 0014 00000080 	    .long   CLKVAL2_SSW                 /* Reserved                     */
  80              	#ifdef RETAIN_VECTOR_TABLE
  81              	    .long   0                           /* Reserved                     */
  82              	    .long   0                           /* Reserved                     */
  83              	    .long   0                           /* Reserved                     */
  84              	    .long   0                           /* Reserved                     */
  85              	    .long   0                           /* Reserved                     */
  86              	    .long   SVC_Handler                 /* SVCall Handler               */
  87              	    .long   0                           /* Reserved                     */
  88              	    .long   0                           /* Reserved                     */
  89              	    Entry   PendSV_Handler              /* PendSV Handler               */
  90              	    Entry   SysTick_Handler             /* SysTick Handler              */
  91              	
  92              	    /* Interrupt Handlers for Service Requests (SR) from XMC1300 Peripherals */
  93              	    Entry   SCU_0_IRQHandler            /* Handler name for SR SCU_0     */
  94              	    Entry   SCU_1_IRQHandler            /* Handler name for SR SCU_1     */
  95              	    Entry   SCU_2_IRQHandler            /* Handler name for SR SCU_2     */
  96              	    Entry   ERU0_0_IRQHandler           /* Handler name for SR ERU0_0    */
  97              	    Entry   ERU0_1_IRQHandler           /* Handler name for SR ERU0_1    */
  98              	    Entry   ERU0_2_IRQHandler           /* Handler name for SR ERU0_2    */
  99              	    Entry   ERU0_3_IRQHandler           /* Handler name for SR ERU0_3    */
 100              	    Entry   MATH0_0_IRQHandler          /* Handler name for SR MATH0_0   */
 101              	    .long   0                           /* Not Available                 */
 102              	    Entry   USIC0_0_IRQHandler          /* Handler name for SR USIC0_0   */
 103              	    Entry   USIC0_1_IRQHandler          /* Handler name for SR USIC0_1   */
 104              	    Entry   USIC0_2_IRQHandler          /* Handler name for SR USIC0_2   */
 105              	    Entry   USIC0_3_IRQHandler          /* Handler name for SR USIC0_3   */
 106              	    Entry   USIC0_4_IRQHandler          /* Handler name for SR USIC0_4   */
 107              	    Entry   USIC0_5_IRQHandler          /* Handler name for SR USIC0_5   */
 108              	    Entry   VADC0_C0_0_IRQHandler       /* Handler name for SR VADC0_C0_0  */
 109              	    Entry   VADC0_C0_1_IRQHandler       /* Handler name for SR VADC0_C0_1  */
 110              	    Entry   VADC0_G0_0_IRQHandler       /* Handler name for SR VADC0_G0_0  */
 111              	    Entry   VADC0_G0_1_IRQHandler       /* Handler name for SR VADC0_G0_1  */
 112              	    Entry   VADC0_G1_0_IRQHandler       /* Handler name for SR VADC0_G1_0  */
 113              	    Entry   VADC0_G1_1_IRQHandler       /* Handler name for SR VADC0_G1_1  */
 114              	    Entry   CCU40_0_IRQHandler          /* Handler name for SR CCU40_0   */
 115              	    Entry   CCU40_1_IRQHandler          /* Handler name for SR CCU40_1   */
 116              	    Entry   CCU40_2_IRQHandler          /* Handler name for SR CCU40_2   */
 117              	    Entry   CCU40_3_IRQHandler          /* Handler name for SR CCU40_3   */
 118              	    Entry   CCU80_0_IRQHandler          /* Handler name for SR CCU80_0   */
 119              	    Entry   CCU80_1_IRQHandler          /* Handler name for SR CCU80_1   */
 120              	    Entry   POSIF0_0_IRQHandler         /* Handler name for SR POSIF0_0  */
 121              	    Entry   POSIF0_1_IRQHandler         /* Handler name for SR POSIF0_1  */
 122              	    .long   0                           /* Not Available                 */
 123              	    .long   0                           /* Not Available                 */
 124              	    Entry   BCCU0_0_IRQHandler          /* Handler name for SR BCCU0_0  */
 125              	#endif
 126              	
 128              	/* ================== END OF VECTOR TABLE DEFINITION ======================= */
 129              	
 130              	/* ================== START OF VECTOR ROUTINES ============================= */
 131              	    .thumb 
 132              	/* ======================================================================== */
 133              	/* Reset Handler */
 134              	
 135              	    .thumb_func 
 136              	    .globl  __Xmc1300_reset_cortex_m
 138              	__Xmc1300_reset_cortex_m:
 139              	    .fnstart
 140              	
 141              	    /* C routines are likely to be called. Setup the stack now */
 142              	    /* This is already setup by BootROM,hence this step is optional */ 
 143 0018 0348     	    LDR R0,=__Xmc1300_stack
 144 001a 8546     	    MOV SP,R0
 145              	
 146              	    /* Clock tree, External memory setup etc may be done here */    
 147 001c 0348     	    LDR     R0, =SystemInit
 148 001e 8047     	    BLX     R0
 149              	
 150              	/* 
 151              	   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
 152              	   weakly defined here though for a potential override.
 153              	*/
 154 0020 0348     	    LDR     R0, =SystemInit_DAVE3 	
 155 0022 8047     	    BLX     R0
 156              	
 157 0024 FEE7     	    B       __Xmc1300_Program_Loader 
 158              	    
 159 0026 00000000 	    .pool
 159      00000000 
 159      00000000 
 159      0000
 160              	    .cantunwind
 161              	    .fnend
 163              	/* ======================================================================== */
 164              	/* __Xmc1300_reset must yield control to __Xmc1300_Program_Loader before control
 165              	   to C land is given */
 166              	   .section .Xmc1300.postreset,"x",%progbits
 167              	   __Xmc1300_Program_Loader:
 168              	   .fnstart
 169              	   /* Memories are accessible now*/
 170              	   
 171              	   /* DATA COPY */
 172              	   /* R0 = Start address, R1 = Destination address, R2 = Size */
 173 0000 1848     	   LDR R0, =DataLoadAddr
 174 0002 1949     	   LDR R1, =__Xmc1300_sData
 175 0004 194A     	   LDR R2, =__Xmc1300_Data_Size
 176              	
 177              	   /* Is there anything to be copied? */
 178 0006 002A     	   CMP R2,#0
 179 0008 0AD0     	   BEQ SKIPCOPY
 180              	   
 181              	   /* For bytecount less than 4, at least 1 word must be copied */
 182 000a 042A     	   CMP R2,#4
 183 000c 00D2     	   BCS STARTCOPY
 184              	   
 185              	   /* Byte count < 4 ; so bump it up */
 186 000e 0422     	   MOVS R2,#4
 187              	
 188              	STARTCOPY:
 189              	   /* 
 190              	      R2 contains byte count. Change it to word count. It is ensured in the 
 191              	      linker script that the length is always word aligned.
 192              	   */
 193 0010 9208     	   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
 194              	
 195              	   /* The proverbial loop from the schooldays */
 196              	COPYLOOP:
 197 0012 0368     	   LDR R3,[R0]
 198 0014 0B60     	   STR R3,[R1]
 199 0016 013A     	   SUBS R2,#1
 200 0018 02D0     	   BEQ SKIPCOPY
 201 001a 0430     	   ADDS R0,#4
 202 001c 0431     	   ADDS R1,#4
 203 001e F8E7     	   B COPYLOOP
 204              	    
 205              	SKIPCOPY:
 206              	   /* BSS CLEAR */
 207 0020 1348     	   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
 208 0022 1449     	   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
 209              	
 210              	   /* Find out if there are items assigned to BSS */   
 211 0024 0029     	   CMP R1,#0 
 212 0026 09D0     	   BEQ SKIPCLEAR
 213              	
 214              	   /* At least 1 word must be copied */
 215 0028 0429     	   CMP R1,#4
 216 002a 00D2     	   BCS STARTCLEAR
 217              	   
 218              	   /* Byte count < 4 ; so bump it up to a word*/
 219 002c 0421     	   MOVS R1,#4
 220              	
 221              	STARTCLEAR:
 222 002e 8908     	   LSRS R1,R1,#2            /* BSS size in words */
 223              	   
 224 0030 0022     	   MOVS R2,#0
 225              	CLEARLOOP:
 226 0032 0260     	   STR R2,[R0]
 227 0034 0139     	   SUBS R1,#1
 228 0036 01D0     	   BEQ SKIPCLEAR
 229 0038 0430     	   ADDS R0,#4
 230 003a FAE7     	   B CLEARLOOP
 231              	    
 232              	SKIPCLEAR:
 233              	
 234              	   /* VENEER COPY */
 235              	   /* R0 = Start address, R1 = Destination address, R2 = Size */
 236 003c 0E48     	   LDR R0, =VeneerLoadAddr
 237 003e 0F49     	   LDR R1, =VeneerStart
 238 0040 0F4A     	   LDR R2, =VeneerSize
 239              	
 240              	STARTVENEERCOPY:
 241              	   /* 
 242              	      R2 contains byte count. Change it to word count. It is ensured in the 
 243              	      linker script that the length is always word aligned.
 244              	   */
 245 0042 9208     	   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
 246              	
 247              	   /* The proverbial loop from the schooldays */
 248              	VENEERCOPYLOOP:
 249 0044 0368     	   LDR R3,[R0]
 250 0046 0B60     	   STR R3,[R1]
 251 0048 013A     	   SUBS R2,#1
 252 004a 02D0     	   BEQ SKIPVENEERCOPY
 253 004c 0430     	   ADDS R0,#4
 254 004e 0431     	   ADDS R1,#4
 255 0050 F8E7     	   B VENEERCOPYLOOP
 256              	    
 257              	SKIPVENEERCOPY:
 258              	   /* Update System Clock */
 259 0052 0C48     	   LDR R0,=SystemCoreClockUpdate
 260 0054 8047     	   BLX R0
 261              	
 262              	   /* Reset stack pointer before zipping off to user application, Optional */
 263 0056 0C48     	   LDR R0,=__Xmc1300_stack 
 264 0058 8546     	   MOV SP,R0
 265              	
 266 005a 0020     	   MOVS R0,#0
 267 005c 0021     	   MOVS R1,#0
 268 005e 0B4A     	   LDR R2, =main
 269 0060 9746     	   MOV PC,R2
 270              	
 271 0062 00000000 	   .pool
 271      00000000 
 271      00000000 
 271      00000000 
 271      00000000 
 272              	   .cantunwind
 273              	   .fnend
 275              	/* ======================================================================== */
 276              	/* ========== START OF EXCEPTION HANDLER DEFINITION ======================== */
 277              	
 278              	/* Default exception Handlers - Users may override this default functionality by
 279              	   defining handlers of the same name in their C code */
 280              	    .thumb 
 281              	    .text
 282              	
 283 0000 FEE7     	    Insert_ExceptionHandler NMI_Handler
 284              	/* ======================================================================== */
 285 0002 FEE7     	    Insert_ExceptionHandler HardFault_Handler
 286              	/* ======================================================================== */
 287 0004 FEE7     	    Insert_ExceptionHandler SVC_Handler
 288              	/* ======================================================================== */
 289 0006 FEE7     	    Insert_ExceptionHandler PendSV_Handler
 290              	/* ======================================================================== */
 291 0008 FEE7     	    Insert_ExceptionHandler SysTick_Handler
 292              	
 293              	/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */
 294              	
 295              	/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */
 296              	
 297              	/* IRQ Handlers */
 298 000a FEE7     	    Insert_ExceptionHandler SCU_0_IRQHandler
 299              	/* ======================================================================== */
 300 000c FEE7     	    Insert_ExceptionHandler SCU_1_IRQHandler
 301              	/* ======================================================================== */
 302 000e FEE7     	    Insert_ExceptionHandler SCU_2_IRQHandler
 303              	/* ======================================================================== */
 304 0010 FEE7     	    Insert_ExceptionHandler ERU0_0_IRQHandler
 305              	/* ======================================================================== */
 306 0012 FEE7     	    Insert_ExceptionHandler ERU0_1_IRQHandler
 307              	/* ======================================================================== */
 308 0014 FEE7     	    Insert_ExceptionHandler ERU0_2_IRQHandler
 309              	/* ======================================================================== */
 310 0016 FEE7     	    Insert_ExceptionHandler ERU0_3_IRQHandler
 311              	/* ======================================================================== */
 312 0018 FEE7     	    Insert_ExceptionHandler MATH0_0_IRQHandler
 313              	/* ======================================================================== */
 314 001a FEE7     	    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
 315              	/* ======================================================================== */
 316 001c FEE7     	    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
 317              	/* ======================================================================== */
 318 001e FEE7     	    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
 319              	/* ======================================================================== */
 320 0020 FEE7     	    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
 321              	/* ======================================================================== */
 322 0022 FEE7     	    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
 323              	/* ======================================================================== */
 324 0024 FEE7     	    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
 325              	/* ======================================================================== */
 326 0026 FEE7     	    Insert_ExceptionHandler CCU40_0_IRQHandler
 327              	/* ======================================================================== */
 328 0028 FEE7     	    Insert_ExceptionHandler CCU40_1_IRQHandler
 329              	/* ======================================================================== */
 330 002a FEE7     	    Insert_ExceptionHandler CCU40_2_IRQHandler
 331              	/* ======================================================================== */
 332 002c FEE7     	    Insert_ExceptionHandler CCU40_3_IRQHandler
 333              	/* ======================================================================== */
 334 002e FEE7     	    Insert_ExceptionHandler CCU80_0_IRQHandler
 335              	/* ======================================================================== */
 336 0030 FEE7     	    Insert_ExceptionHandler CCU80_1_IRQHandler
 337              	/* ======================================================================== */
 338 0032 FEE7     	    Insert_ExceptionHandler POSIF0_0_IRQHandler
 339              	/* ======================================================================== */
 340 0034 FEE7     	    Insert_ExceptionHandler POSIF0_1_IRQHandler
 341              	/* ======================================================================== */
 342 0036 FEE7     	    Insert_ExceptionHandler USIC0_0_IRQHandler
 343              	/* ======================================================================== */
 344 0038 FEE7     	    Insert_ExceptionHandler USIC0_1_IRQHandler
 345              	/* ======================================================================== */
 346 003a FEE7     	    Insert_ExceptionHandler USIC0_2_IRQHandler
 347              	/* ======================================================================== */
 348 003c FEE7     	    Insert_ExceptionHandler USIC0_3_IRQHandler
 349              	/* ======================================================================== */
 350 003e FEE7     	    Insert_ExceptionHandler USIC0_4_IRQHandler
 351              	/* ======================================================================== */
 352 0040 FEE7     	    Insert_ExceptionHandler USIC0_5_IRQHandler
 353              	/* ======================================================================== */
 354 0042 FEE7     	    Insert_ExceptionHandler BCCU0_0_IRQHandler
 355              	/* ======================================================================== */
 356              	/* ======================================================================== */
 357              	
 358              	/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
 359              	    .section ".XmcVeneerCode","ax",%progbits
 360              	.globl HardFault_Veneer
 361              	HardFault_Veneer:
 362 0000 2C48     	    LDR R0, =HardFault_Handler
 363 0002 8746     	    MOV PC,R0
 364 0004 00000000 	    .long 0
 365 0008 00000000 	    .long 0
 366 000c 00000000 	    .long 0
 367 0010 00000000 	    .long 0
 368 0014 00000000 	    .long 0
 369 0018 00000000 	    .long 0
 370 001c 00000000 	    .long 0
 371              	    
 372              	/* ======================================================================== */
 373              	.globl SVC_Veneer
 374              	SVC_Veneer:
 375 0020 2548     	    LDR R0, =SVC_Handler
 376 0022 8746     	    MOV PC,R0
 377 0024 00000000 	    .long 0
 378 0028 00000000 	    .long 0
 379              	/* ======================================================================== */
 380              	.globl PendSV_Veneer
 381              	PendSV_Veneer:
 382 002c 2348     	    LDR R0, =PendSV_Handler
 383 002e 8746     	    MOV PC,R0
 384              	/* ======================================================================== */
 385              	.globl SysTick_Veneer 
 386              	SysTick_Veneer:
 387 0030 2348     	    LDR R0, =SysTick_Handler
 388 0032 8746     	    MOV PC,R0
 389              	/* ======================================================================== */
 390              	.globl SCU_0_Veneer 
 391              	SCU_0_Veneer:
 392 0034 2348     	    LDR R0, =SCU_0_IRQHandler
 393 0036 8746     	    MOV PC,R0
 394              	/* ======================================================================== */
 395              	.globl SCU_1_Veneer 
 396              	SCU_1_Veneer:
 397 0038 2348     	    LDR R0, =SCU_1_IRQHandler
 398 003a 8746     	    MOV PC,R0
 399              	/* ======================================================================== */
 400              	.globl SCU_2_Veneer
 401              	SCU_2_Veneer:
 402 003c 2348     	    LDR R0, =SCU_2_IRQHandler
 403 003e 8746     	    MOV PC,R0
 404              	/* ======================================================================== */
 405              	.globl SCU_3_Veneer 
 406              	SCU_3_Veneer:
 407 0040 2348     	    LDR R0, =ERU0_0_IRQHandler
 408 0042 8746     	    MOV PC,R0
 409              	/* ======================================================================== */
 410              	.globl SCU_4_Veneer 
 411              	SCU_4_Veneer:
 412 0044 2348     	    LDR R0, =ERU0_1_IRQHandler
 413 0046 8746     	    MOV PC,R0
 414              	/* ======================================================================== */
 415              	.globl SCU_5_Veneer 
 416              	SCU_5_Veneer:
 417 0048 2348     	    LDR R0, =ERU0_2_IRQHandler
 418 004a 8746     	    MOV PC,R0
 419              	/* ======================================================================== */
 420              	.globl SCU_6_Veneer 
 421              	SCU_6_Veneer:
 422 004c 2348     	    LDR R0, =ERU0_3_IRQHandler
 423 004e 8746     	    MOV PC,R0
 424              	/* ======================================================================== */
 425              	.globl MATH_Veneer 
 426              	MATH_Veneer:
 427 0050 2348     	    LDR R0, =MATH0_0_IRQHandler
 428 0052 8746     	    MOV PC,R0
 429 0054 00000000 	    .long 0
 430              	/* ======================================================================== */
 431              	.globl USIC0_0_Veneer
 432              	USIC0_0_Veneer:
 433 0058 2248     	    LDR R0, =USIC0_0_IRQHandler
 434 005a 8746     	    MOV PC,R0
 435              	/* ======================================================================== */
 436              	.globl USIC0_1_Veneer
 437              	USIC0_1_Veneer:
 438 005c 2248     	    LDR R0, =USIC0_1_IRQHandler
 439 005e 8746     	    MOV PC,R0
 440              	/* ======================================================================== */
 441              	.globl USIC0_2_Veneer
 442              	USIC0_2_Veneer:
 443 0060 2248     	    LDR R0, =USIC0_2_IRQHandler
 444 0062 8746     	    MOV PC,R0
 445              	/* ======================================================================== */
 446              	.globl USIC0_3_Veneer
 447              	USIC0_3_Veneer:
 448 0064 2248     	    LDR R0, =USIC0_3_IRQHandler
 449 0066 8746     	    MOV PC,R0
 450              	/* ======================================================================== */
 451              	.globl USIC0_4_Veneer
 452              	USIC0_4_Veneer:
 453 0068 2248     	    LDR R0, =USIC0_4_IRQHandler
 454 006a 8746     	    MOV PC,R0
 455              	/* ======================================================================== */
 456              	.globl USIC0_5_Veneer
 457              	USIC0_5_Veneer:
 458 006c 2248     	    LDR R0, =USIC0_5_IRQHandler
 459 006e 8746     	    MOV PC,R0
 460              	/* ======================================================================== */
 461              	.globl VADC0_C0_0_Veneer 
 462              	VADC0_C0_0_Veneer:
 463 0070 2248     	    LDR R0, =VADC0_C0_0_IRQHandler
 464 0072 8746     	    MOV PC,R0
 465              	/* ======================================================================== */
 466              	.globl VADC0_C0_1_Veneer
 467              	VADC0_C0_1_Veneer:
 468 0074 2248     	    LDR R0, =VADC0_C0_1_IRQHandler
 469 0076 8746     	    MOV PC,R0
 470              	/* ======================================================================== */
 471              	.globl VADC0_G0_0_Veneer
 472              	VADC0_G0_0_Veneer:
 473 0078 2248     	    LDR R0, =VADC0_G0_0_IRQHandler
 474 007a 8746     	    MOV PC,R0
 475              	/* ======================================================================== */
 476              	.globl VADC0_G0_1_Veneer
 477              	VADC0_G0_1_Veneer:
 478 007c 2248     	    LDR R0, =VADC0_G0_1_IRQHandler
 479 007e 8746     	    MOV PC,R0
 480              	/* ======================================================================== */
 481              	.globl VADC0_G1_0_Veneer
 482              	VADC0_G1_0_Veneer:
 483 0080 2248     	    LDR R0, =VADC0_G1_0_IRQHandler
 484 0082 8746     	    MOV PC,R0
 485              	/* ======================================================================== */
 486              	.globl VADC0_G1_1_Veneer
 487              	VADC0_G1_1_Veneer:
 488 0084 2248     	    LDR R0, =VADC0_G1_1_IRQHandler
 489 0086 8746     	    MOV PC,R0
 490              	/* ======================================================================== */
 491              	.globl CCU40_0_Veneer
 492              	CCU40_0_Veneer:
 493 0088 2248     	    LDR R0, =CCU40_0_IRQHandler
 494 008a 8746     	    MOV PC,R0
 495              	/* ======================================================================== */
 496              	.globl CCU40_1_Veneer
 497              	CCU40_1_Veneer:
 498 008c 2248     	    LDR R0, =CCU40_1_IRQHandler
 499 008e 8746     	    MOV PC,R0
 500              	/* ======================================================================== */
 501              	.globl CCU40_2_Veneer
 502              	CCU40_2_Veneer:
 503 0090 2248     	    LDR R0, =CCU40_2_IRQHandler
 504 0092 8746     	    MOV PC,R0
 505              	/* ======================================================================== */
 506              	.globl CCU40_3_Veneer
 507              	CCU40_3_Veneer:
 508 0094 2248     	    LDR R0, =CCU40_3_IRQHandler
 509 0096 8746     	    MOV PC,R0
 510              	/* ======================================================================== */
 511              	.globl CCU80_0_Veneer
 512              	CCU80_0_Veneer:
 513 0098 2248     	    LDR R0, =CCU80_0_IRQHandler
 514 009a 8746     	    MOV PC,R0
 515              	/* ======================================================================== */
 516              	.globl CCU80_1_Veneer
 517              	CCU80_1_Veneer:
 518 009c 2248     	    LDR R0, =CCU80_1_IRQHandler
 519 009e 8746     	    MOV PC,R0
 520              	/* ======================================================================== */
 521              	.globl POSIF0_0_Veneer
 522              	POSIF0_0_Veneer:
 523 00a0 2248     	    LDR R0, =POSIF0_0_IRQHandler
 524 00a2 8746     	    MOV PC,R0
 525              	/* ======================================================================== */
 526              	.globl POSIF0_1_Veneer
 527              	POSIF0_1_Veneer:
 528 00a4 2248     	    LDR R0, =POSIF0_1_IRQHandler
 529 00a6 8746     	    MOV PC,R0
 530 00a8 00000000 	    .long 0
 531 00ac 00000000 	    .long 0
 532              	/* ======================================================================== */
 533              	    .globl BCCU0_0_Veneer
 534              	BCCU0_0_Veneer:
 535 00b0 2048     	    LDR R0, =BCCU0_0_IRQHandler
 536 00b2 8746     	    MOV PC,R0
 537              	
 538              	/* ======================================================================== */
 539              	/* ======================================================================== */
 540              	
 541              	/* ============= END OF INTERRUPT HANDLER DEFINITION ======================== */
 542              	
 543              	/* ===== Decision function queried by CMSIS startup for Clock tree setup === */
 544              	/* In the absence of DAVE code engine, CMSIS SystemInit() must perform clock 
 545              	   tree setup. 
 546              	   
 547              	   This decision routine defined here will always return TRUE.
 548              	   
 549              	   When overridden by a definition defined in DAVE code engine, this routine
 550              	   returns FALSE indicating that the code engine has performed the clock setup
 551              	*/   
 552              	     .section ".XmcStartup"
 553              	    .weak   AllowClkInitByStartup
 555              	AllowClkInitByStartup:
 556 0000 0120     	    MOVS R0,#1
 557 0002 7047     	    BX LR
 559              	
 560              	/* ======  Definition of the default weak SystemInit_DAVE3 function =========
 561              	If DAVE3 requires an extended SystemInit it will create its own version of
 562              	SystemInit_DAVE3 which overrides this weak definition. Example includes
 563              	setting up of external memory interfaces.
 564              	*/
 565              	     .weak SystemInit_DAVE3
 567              	SystemInit_DAVE3:
 568 0004 C046     	     NOP
 569 0006 7047     	     BX LR
 571              	/* ======================================================================== */
 572              	/* ======================================================================== */
 573              	
 574              	/* ======================== Data references =============================== */
 575              	
 576              	    .end
DEFINED SYMBOLS
../Startup/startup_XMC1300.s:69     .Xmc1300.reset:00000000 __Xmc1300_interrupt_vector_cortex_m
../Startup/startup_XMC1300.s:138    .Xmc1300.reset:00000018 __Xmc1300_reset_cortex_m
../Startup/startup_XMC1300.s:283    .text:00000000 NMI_Handler
../Startup/startup_XMC1300.s:285    .text:00000002 HardFault_Handler
                   .Xmc1300.reset:00000000 $d
../Startup/startup_XMC1300.s:143    .Xmc1300.reset:00000018 $t
../Startup/startup_XMC1300.s:567    .XmcStartup:00000004 SystemInit_DAVE3
../Startup/startup_XMC1300.s:167    .Xmc1300.postreset:00000000 __Xmc1300_Program_Loader
../Startup/startup_XMC1300.s:159    .Xmc1300.reset:00000026 $d
         .ARM.exidx.Xmc1300.reset:00000000 $d
../Startup/startup_XMC1300.s:173    .Xmc1300.postreset:00000000 $t
../Startup/startup_XMC1300.s:205    .Xmc1300.postreset:00000020 SKIPCOPY
../Startup/startup_XMC1300.s:188    .Xmc1300.postreset:00000010 STARTCOPY
../Startup/startup_XMC1300.s:196    .Xmc1300.postreset:00000012 COPYLOOP
../Startup/startup_XMC1300.s:232    .Xmc1300.postreset:0000003c SKIPCLEAR
../Startup/startup_XMC1300.s:221    .Xmc1300.postreset:0000002e STARTCLEAR
../Startup/startup_XMC1300.s:225    .Xmc1300.postreset:00000032 CLEARLOOP
../Startup/startup_XMC1300.s:240    .Xmc1300.postreset:00000042 STARTVENEERCOPY
../Startup/startup_XMC1300.s:248    .Xmc1300.postreset:00000044 VENEERCOPYLOOP
../Startup/startup_XMC1300.s:257    .Xmc1300.postreset:00000052 SKIPVENEERCOPY
../Startup/startup_XMC1300.s:271    .Xmc1300.postreset:00000062 $d
     .ARM.exidx.Xmc1300.postreset:00000000 $d
../Startup/startup_XMC1300.s:283    .text:00000000 $t
../Startup/startup_XMC1300.s:287    .text:00000004 SVC_Handler
../Startup/startup_XMC1300.s:289    .text:00000006 PendSV_Handler
../Startup/startup_XMC1300.s:291    .text:00000008 SysTick_Handler
../Startup/startup_XMC1300.s:298    .text:0000000a SCU_0_IRQHandler
../Startup/startup_XMC1300.s:300    .text:0000000c SCU_1_IRQHandler
../Startup/startup_XMC1300.s:302    .text:0000000e SCU_2_IRQHandler
../Startup/startup_XMC1300.s:304    .text:00000010 ERU0_0_IRQHandler
../Startup/startup_XMC1300.s:306    .text:00000012 ERU0_1_IRQHandler
../Startup/startup_XMC1300.s:308    .text:00000014 ERU0_2_IRQHandler
../Startup/startup_XMC1300.s:310    .text:00000016 ERU0_3_IRQHandler
../Startup/startup_XMC1300.s:312    .text:00000018 MATH0_0_IRQHandler
../Startup/startup_XMC1300.s:314    .text:0000001a VADC0_C0_0_IRQHandler
../Startup/startup_XMC1300.s:316    .text:0000001c VADC0_C0_1_IRQHandler
../Startup/startup_XMC1300.s:318    .text:0000001e VADC0_G0_0_IRQHandler
../Startup/startup_XMC1300.s:320    .text:00000020 VADC0_G0_1_IRQHandler
../Startup/startup_XMC1300.s:322    .text:00000022 VADC0_G1_0_IRQHandler
../Startup/startup_XMC1300.s:324    .text:00000024 VADC0_G1_1_IRQHandler
../Startup/startup_XMC1300.s:326    .text:00000026 CCU40_0_IRQHandler
../Startup/startup_XMC1300.s:328    .text:00000028 CCU40_1_IRQHandler
../Startup/startup_XMC1300.s:330    .text:0000002a CCU40_2_IRQHandler
../Startup/startup_XMC1300.s:332    .text:0000002c CCU40_3_IRQHandler
../Startup/startup_XMC1300.s:334    .text:0000002e CCU80_0_IRQHandler
../Startup/startup_XMC1300.s:336    .text:00000030 CCU80_1_IRQHandler
../Startup/startup_XMC1300.s:338    .text:00000032 POSIF0_0_IRQHandler
../Startup/startup_XMC1300.s:340    .text:00000034 POSIF0_1_IRQHandler
../Startup/startup_XMC1300.s:342    .text:00000036 USIC0_0_IRQHandler
../Startup/startup_XMC1300.s:344    .text:00000038 USIC0_1_IRQHandler
../Startup/startup_XMC1300.s:346    .text:0000003a USIC0_2_IRQHandler
../Startup/startup_XMC1300.s:348    .text:0000003c USIC0_3_IRQHandler
../Startup/startup_XMC1300.s:350    .text:0000003e USIC0_4_IRQHandler
../Startup/startup_XMC1300.s:352    .text:00000040 USIC0_5_IRQHandler
../Startup/startup_XMC1300.s:354    .text:00000042 BCCU0_0_IRQHandler
../Startup/startup_XMC1300.s:361    .XmcVeneerCode:00000000 HardFault_Veneer
../Startup/startup_XMC1300.s:362    .XmcVeneerCode:00000000 $t
../Startup/startup_XMC1300.s:364    .XmcVeneerCode:00000004 $d
../Startup/startup_XMC1300.s:374    .XmcVeneerCode:00000020 SVC_Veneer
../Startup/startup_XMC1300.s:375    .XmcVeneerCode:00000020 $t
../Startup/startup_XMC1300.s:377    .XmcVeneerCode:00000024 $d
../Startup/startup_XMC1300.s:381    .XmcVeneerCode:0000002c PendSV_Veneer
../Startup/startup_XMC1300.s:382    .XmcVeneerCode:0000002c $t
../Startup/startup_XMC1300.s:386    .XmcVeneerCode:00000030 SysTick_Veneer
../Startup/startup_XMC1300.s:391    .XmcVeneerCode:00000034 SCU_0_Veneer
../Startup/startup_XMC1300.s:396    .XmcVeneerCode:00000038 SCU_1_Veneer
../Startup/startup_XMC1300.s:401    .XmcVeneerCode:0000003c SCU_2_Veneer
../Startup/startup_XMC1300.s:406    .XmcVeneerCode:00000040 SCU_3_Veneer
../Startup/startup_XMC1300.s:411    .XmcVeneerCode:00000044 SCU_4_Veneer
../Startup/startup_XMC1300.s:416    .XmcVeneerCode:00000048 SCU_5_Veneer
../Startup/startup_XMC1300.s:421    .XmcVeneerCode:0000004c SCU_6_Veneer
../Startup/startup_XMC1300.s:426    .XmcVeneerCode:00000050 MATH_Veneer
../Startup/startup_XMC1300.s:429    .XmcVeneerCode:00000054 $d
../Startup/startup_XMC1300.s:432    .XmcVeneerCode:00000058 USIC0_0_Veneer
../Startup/startup_XMC1300.s:433    .XmcVeneerCode:00000058 $t
../Startup/startup_XMC1300.s:437    .XmcVeneerCode:0000005c USIC0_1_Veneer
../Startup/startup_XMC1300.s:442    .XmcVeneerCode:00000060 USIC0_2_Veneer
../Startup/startup_XMC1300.s:447    .XmcVeneerCode:00000064 USIC0_3_Veneer
../Startup/startup_XMC1300.s:452    .XmcVeneerCode:00000068 USIC0_4_Veneer
../Startup/startup_XMC1300.s:457    .XmcVeneerCode:0000006c USIC0_5_Veneer
../Startup/startup_XMC1300.s:462    .XmcVeneerCode:00000070 VADC0_C0_0_Veneer
../Startup/startup_XMC1300.s:467    .XmcVeneerCode:00000074 VADC0_C0_1_Veneer
../Startup/startup_XMC1300.s:472    .XmcVeneerCode:00000078 VADC0_G0_0_Veneer
../Startup/startup_XMC1300.s:477    .XmcVeneerCode:0000007c VADC0_G0_1_Veneer
../Startup/startup_XMC1300.s:482    .XmcVeneerCode:00000080 VADC0_G1_0_Veneer
../Startup/startup_XMC1300.s:487    .XmcVeneerCode:00000084 VADC0_G1_1_Veneer
../Startup/startup_XMC1300.s:492    .XmcVeneerCode:00000088 CCU40_0_Veneer
../Startup/startup_XMC1300.s:497    .XmcVeneerCode:0000008c CCU40_1_Veneer
../Startup/startup_XMC1300.s:502    .XmcVeneerCode:00000090 CCU40_2_Veneer
../Startup/startup_XMC1300.s:507    .XmcVeneerCode:00000094 CCU40_3_Veneer
../Startup/startup_XMC1300.s:512    .XmcVeneerCode:00000098 CCU80_0_Veneer
../Startup/startup_XMC1300.s:517    .XmcVeneerCode:0000009c CCU80_1_Veneer
../Startup/startup_XMC1300.s:522    .XmcVeneerCode:000000a0 POSIF0_0_Veneer
../Startup/startup_XMC1300.s:527    .XmcVeneerCode:000000a4 POSIF0_1_Veneer
../Startup/startup_XMC1300.s:530    .XmcVeneerCode:000000a8 $d
../Startup/startup_XMC1300.s:534    .XmcVeneerCode:000000b0 BCCU0_0_Veneer
../Startup/startup_XMC1300.s:535    .XmcVeneerCode:000000b0 $t
../Startup/startup_XMC1300.s:555    .XmcStartup:00000000 AllowClkInitByStartup
../Startup/startup_XMC1300.s:556    .XmcStartup:00000000 $t
../Startup/startup_XMC1300.s:552    .XmcVeneerCode:000000b4 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
__Xmc1300_stack
SystemInit
DataLoadAddr
__Xmc1300_sData
__Xmc1300_Data_Size
__Xmc1300_sBSS
__Xmc1300_BSS_Size
VeneerLoadAddr
VeneerStart
VeneerSize
SystemCoreClockUpdate
main
