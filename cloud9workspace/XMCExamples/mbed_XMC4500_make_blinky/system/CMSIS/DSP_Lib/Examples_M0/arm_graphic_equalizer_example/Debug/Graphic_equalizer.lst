
Graphic_equalizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c4c  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10005c4c  10005c4c  00005c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000fec  10005c5c  10005c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000138  2000000c  10006c50  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   0000000c  20000144  00000000  00000144  2**0
                  ALLOC
  5 Stack         00000800  20000150  00000000  00000150  2**0
                  ALLOC
  6 .bss          000006e8  20000950  20000950  00010950  2**3
                  ALLOC
  7 .data         00000e44  20001040  10006d88  00009040  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000230  00000000  00000000  00009e88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001c2a  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a49  00000000  00000000  0000bce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a28  00000000  00000000  0000c72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b40  00000000  00000000  0000f154  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00037967  00000000  00000000  0000fc94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019d5  00000000  00000000  000475fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00048fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000933  00000000  00000000  00049188  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000ae15  00000000  00000000  00049abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1300_interrupt_vector_cortex_m>:
10001000:	50 09 00 20 19 10 00 10 f1 12 00 10 f3 12 00 10     P.. ............
10001010:	00 00 00 80 00 00 00 80                             ........

10001018 <__Xmc1300_reset_cortex_m>:
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001018:	4803      	ldr	r0, [pc, #12]	; (10001028 <__Xmc1300_reset_cortex_m+0x10>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000101c:	4803      	ldr	r0, [pc, #12]	; (1000102c <__Xmc1300_reset_cortex_m+0x14>)
    BLX     R0
1000101e:	4780      	blx	r0

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001020:	4803      	ldr	r0, [pc, #12]	; (10001030 <__Xmc1300_reset_cortex_m+0x18>)
    BLX     R0
10001022:	4780      	blx	r0

    B       __Xmc1300_Program_Loader 
10001024:	e006      	b.n	10001034 <__Xmc1300_Program_Loader>
10001026:	0000      	.short	0x0000
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001028:	20000950 	.word	0x20000950
    MOV SP,R0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000102c:	10001335 	.word	0x10001335

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001030:	100010c9 	.word	0x100010c9

10001034 <__Xmc1300_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001034:	4818      	ldr	r0, [pc, #96]	; (10001098 <SKIPVENEERCOPY+0x12>)
   LDR R1, =__Xmc1300_sData
10001036:	4919      	ldr	r1, [pc, #100]	; (1000109c <SKIPVENEERCOPY+0x16>)
   LDR R2, =__Xmc1300_Data_Size
10001038:	4a19      	ldr	r2, [pc, #100]	; (100010a0 <SKIPVENEERCOPY+0x1a>)

   /* Is there anything to be copied? */
   CMP R2,#0
1000103a:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000103c:	d00a      	beq.n	10001054 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
1000103e:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001040:	d200      	bcs.n	10001044 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001042:	2204      	movs	r2, #4

10001044 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001044:	0892      	lsrs	r2, r2, #2

10001046 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001046:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
10001048:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000104a:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000104c:	d002      	beq.n	10001054 <SKIPCOPY>
   ADDS R0,#4
1000104e:	3004      	adds	r0, #4
   ADDS R1,#4
10001050:	3104      	adds	r1, #4
   B COPYLOOP
10001052:	e7f8      	b.n	10001046 <COPYLOOP>

10001054 <SKIPCOPY>:
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001054:	4813      	ldr	r0, [pc, #76]	; (100010a4 <SKIPVENEERCOPY+0x1e>)
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001056:	4914      	ldr	r1, [pc, #80]	; (100010a8 <SKIPVENEERCOPY+0x22>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
10001058:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000105a:	d009      	beq.n	10001070 <SKIPCLEAR>

   /* At least 1 word must be copied */
   CMP R1,#4
1000105c:	2904      	cmp	r1, #4
   BCS STARTCLEAR
1000105e:	d200      	bcs.n	10001062 <STARTCLEAR>
   
   /* Byte count < 4 ; so bump it up to a word*/
   MOVS R1,#4
10001060:	2104      	movs	r1, #4

10001062 <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
10001062:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001064:	2200      	movs	r2, #0

10001066 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001066:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001068:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
1000106a:	d001      	beq.n	10001070 <SKIPCLEAR>
   ADDS R0,#4
1000106c:	3004      	adds	r0, #4
   B CLEARLOOP
1000106e:	e7fa      	b.n	10001066 <CLEARLOOP>

10001070 <SKIPCLEAR>:
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
10001070:	480e      	ldr	r0, [pc, #56]	; (100010ac <SKIPVENEERCOPY+0x26>)
   LDR R1, =VeneerStart
10001072:	490f      	ldr	r1, [pc, #60]	; (100010b0 <SKIPVENEERCOPY+0x2a>)
   LDR R2, =VeneerSize
10001074:	4a0f      	ldr	r2, [pc, #60]	; (100010b4 <SKIPVENEERCOPY+0x2e>)

10001076 <STARTVENEERCOPY>:
STARTVENEERCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001076:	0892      	lsrs	r2, r2, #2

10001078 <VENEERCOPYLOOP>:

   /* The proverbial loop from the schooldays */
VENEERCOPYLOOP:
   LDR R3,[R0]
10001078:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000107a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000107c:	3a01      	subs	r2, #1
   BEQ SKIPVENEERCOPY
1000107e:	d002      	beq.n	10001086 <SKIPVENEERCOPY>
   ADDS R0,#4
10001080:	3004      	adds	r0, #4
   ADDS R1,#4
10001082:	3104      	adds	r1, #4
   B VENEERCOPYLOOP
10001084:	e7f8      	b.n	10001078 <VENEERCOPYLOOP>

10001086 <SKIPVENEERCOPY>:
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
10001086:	480c      	ldr	r0, [pc, #48]	; (100010b8 <SKIPVENEERCOPY+0x32>)
   BLX R0
10001088:	4780      	blx	r0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
1000108a:	480c      	ldr	r0, [pc, #48]	; (100010bc <SKIPVENEERCOPY+0x36>)
   MOV SP,R0
1000108c:	4685      	mov	sp, r0

   MOVS R0,#0
1000108e:	2000      	movs	r0, #0
   MOVS R1,#0
10001090:	2100      	movs	r1, #0
   LDR R2, =main
10001092:	4a0b      	ldr	r2, [pc, #44]	; (100010c0 <SKIPVENEERCOPY+0x3a>)
   MOV PC,R2
10001094:	4697      	mov	pc, r2
10001096:	0000      	.short	0x0000
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001098:	10006d88 	.word	0x10006d88
   LDR R1, =__Xmc1300_sData
1000109c:	20001040 	.word	0x20001040
   LDR R2, =__Xmc1300_Data_Size
100010a0:	00000e44 	.word	0x00000e44
   ADDS R1,#4
   B COPYLOOP
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
100010a4:	20000950 	.word	0x20000950
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
100010a8:	000006e8 	.word	0x000006e8
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010ac:	10006c50 	.word	0x10006c50
   LDR R1, =VeneerStart
100010b0:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b4:	00000138 	.word	0x00000138
   ADDS R1,#4
   B VENEERCOPYLOOP
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
100010b8:	10001341 	.word	0x10001341
   BLX R0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
100010bc:	20000950 	.word	0x20000950
   MOV SP,R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c0:	100010cd 	.word	0x100010cd

100010c4 <AllowClkInitByStartup>:
*/   
     .section ".XmcStartup"
    .weak   AllowClkInitByStartup
    .type   AllowClkInitByStartup, %function
AllowClkInitByStartup:
    MOVS R0,#1
100010c4:	2001      	movs	r0, #1
    BX LR
100010c6:	4770      	bx	lr

100010c8 <SystemInit_DAVE3>:
setting up of external memory interfaces.
*/
     .weak SystemInit_DAVE3
     .type SystemInit_DAVE3, %function
SystemInit_DAVE3:
     NOP
100010c8:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ca:	4770      	bx	lr

100010cc <main>:
/* ----------------------------------------------------------------------
 * Graphic equalizer Example
 * ------------------------------------------------------------------- */

int32_t main(void)
{
100010cc:	b590      	push	{r4, r7, lr}
100010ce:	b09b      	sub	sp, #108	; 0x6c
100010d0:	af02      	add	r7, sp, #8
  arm_biquad_casd_df1_inst_q31 S4;
  arm_biquad_casd_df1_inst_q31 S5;
  int i;
  int32_t status;

  inputF32 = &testInput_f32[0];
100010d2:	4b77      	ldr	r3, [pc, #476]	; (100012b0 <main+0x1e4>)
100010d4:	657b      	str	r3, [r7, #84]	; 0x54
  outputF32 = &testOutput[0];
100010d6:	4b77      	ldr	r3, [pc, #476]	; (100012b4 <main+0x1e8>)
100010d8:	653b      	str	r3, [r7, #80]	; 0x50

  /* Initialize the state and coefficient buffers for all Biquad sections */

  arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
            (q31_t *) &coeffTable[190*0 + 10*(gainDB[0] + 9)],
100010da:	4b77      	ldr	r3, [pc, #476]	; (100012b8 <main+0x1ec>)
100010dc:	681a      	ldr	r2, [r3, #0]
100010de:	1c13      	adds	r3, r2, #0
100010e0:	009b      	lsls	r3, r3, #2
100010e2:	189b      	adds	r3, r3, r2
100010e4:	005b      	lsls	r3, r3, #1
100010e6:	335a      	adds	r3, #90	; 0x5a
100010e8:	009a      	lsls	r2, r3, #2
100010ea:	4b74      	ldr	r3, [pc, #464]	; (100012bc <main+0x1f0>)
100010ec:	18d2      	adds	r2, r2, r3
  inputF32 = &testInput_f32[0];
  outputF32 = &testOutput[0];

  /* Initialize the state and coefficient buffers for all Biquad sections */

  arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
100010ee:	1c39      	adds	r1, r7, #0
100010f0:	3140      	adds	r1, #64	; 0x40
100010f2:	4b73      	ldr	r3, [pc, #460]	; (100012c0 <main+0x1f4>)
100010f4:	2002      	movs	r0, #2
100010f6:	9000      	str	r0, [sp, #0]
100010f8:	1c08      	adds	r0, r1, #0
100010fa:	2102      	movs	r1, #2
100010fc:	f000 fea0 	bl	10001e40 <arm_biquad_cas_df1_32x64_init_q31>
            (q31_t *) &coeffTable[190*0 + 10*(gainDB[0] + 9)],
            &biquadStateBand1Q31[0], 2);

  arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
            (q31_t *) &coeffTable[190*1 + 10*(gainDB[1] + 9)],
10001100:	4b6d      	ldr	r3, [pc, #436]	; (100012b8 <main+0x1ec>)
10001102:	685a      	ldr	r2, [r3, #4]
10001104:	1c13      	adds	r3, r2, #0
10001106:	009b      	lsls	r3, r3, #2
10001108:	189b      	adds	r3, r3, r2
1000110a:	005b      	lsls	r3, r3, #1
1000110c:	3319      	adds	r3, #25
1000110e:	33ff      	adds	r3, #255	; 0xff
10001110:	009a      	lsls	r2, r3, #2
10001112:	4b6a      	ldr	r3, [pc, #424]	; (100012bc <main+0x1f0>)
10001114:	18d2      	adds	r2, r2, r3

  arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
            (q31_t *) &coeffTable[190*0 + 10*(gainDB[0] + 9)],
            &biquadStateBand1Q31[0], 2);

  arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
10001116:	1c39      	adds	r1, r7, #0
10001118:	3130      	adds	r1, #48	; 0x30
1000111a:	4b6a      	ldr	r3, [pc, #424]	; (100012c4 <main+0x1f8>)
1000111c:	2002      	movs	r0, #2
1000111e:	9000      	str	r0, [sp, #0]
10001120:	1c08      	adds	r0, r1, #0
10001122:	2102      	movs	r1, #2
10001124:	f000 fe8c 	bl	10001e40 <arm_biquad_cas_df1_32x64_init_q31>
            (q31_t *) &coeffTable[190*1 + 10*(gainDB[1] + 9)],
            &biquadStateBand2Q31[0], 2);

  arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
          (q31_t *) &coeffTable[190*2 + 10*(gainDB[2] + 9)],
10001128:	4b63      	ldr	r3, [pc, #396]	; (100012b8 <main+0x1ec>)
1000112a:	689a      	ldr	r2, [r3, #8]
1000112c:	1c13      	adds	r3, r2, #0
1000112e:	009b      	lsls	r3, r3, #2
10001130:	189b      	adds	r3, r3, r2
10001132:	005b      	lsls	r3, r3, #1
10001134:	33d7      	adds	r3, #215	; 0xd7
10001136:	33ff      	adds	r3, #255	; 0xff
10001138:	009a      	lsls	r2, r3, #2
1000113a:	4b60      	ldr	r3, [pc, #384]	; (100012bc <main+0x1f0>)
1000113c:	18d2      	adds	r2, r2, r3

  arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
            (q31_t *) &coeffTable[190*1 + 10*(gainDB[1] + 9)],
            &biquadStateBand2Q31[0], 2);

  arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
1000113e:	1c39      	adds	r1, r7, #0
10001140:	3120      	adds	r1, #32
10001142:	4b61      	ldr	r3, [pc, #388]	; (100012c8 <main+0x1fc>)
10001144:	2002      	movs	r0, #2
10001146:	9000      	str	r0, [sp, #0]
10001148:	1c08      	adds	r0, r1, #0
1000114a:	2102      	movs	r1, #2
1000114c:	f000 ff86 	bl	1000205c <arm_biquad_cascade_df1_init_q31>
          (q31_t *) &coeffTable[190*2 + 10*(gainDB[2] + 9)],
          &biquadStateBand3Q31[0], 2);

  arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
          (q31_t *) &coeffTable[190*3 + 10*(gainDB[3] + 9)],
10001150:	4b59      	ldr	r3, [pc, #356]	; (100012b8 <main+0x1ec>)
10001152:	68da      	ldr	r2, [r3, #12]
10001154:	1c13      	adds	r3, r2, #0
10001156:	009b      	lsls	r3, r3, #2
10001158:	189b      	adds	r3, r3, r2
1000115a:	005b      	lsls	r3, r3, #1
1000115c:	22a5      	movs	r2, #165	; 0xa5
1000115e:	0092      	lsls	r2, r2, #2
10001160:	189b      	adds	r3, r3, r2
10001162:	009a      	lsls	r2, r3, #2
10001164:	4b55      	ldr	r3, [pc, #340]	; (100012bc <main+0x1f0>)
10001166:	18d2      	adds	r2, r2, r3

  arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
          (q31_t *) &coeffTable[190*2 + 10*(gainDB[2] + 9)],
          &biquadStateBand3Q31[0], 2);

  arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
10001168:	1c39      	adds	r1, r7, #0
1000116a:	3110      	adds	r1, #16
1000116c:	4b57      	ldr	r3, [pc, #348]	; (100012cc <main+0x200>)
1000116e:	2002      	movs	r0, #2
10001170:	9000      	str	r0, [sp, #0]
10001172:	1c08      	adds	r0, r1, #0
10001174:	2102      	movs	r1, #2
10001176:	f000 ff71 	bl	1000205c <arm_biquad_cascade_df1_init_q31>
          (q31_t *) &coeffTable[190*3 + 10*(gainDB[3] + 9)],
          &biquadStateBand4Q31[0], 2);

  arm_biquad_cascade_df1_init_q31(&S5, NUMSTAGES,
          (q31_t *) &coeffTable[190*4 + 10*(gainDB[4] + 9)],
1000117a:	4b4f      	ldr	r3, [pc, #316]	; (100012b8 <main+0x1ec>)
1000117c:	691a      	ldr	r2, [r3, #16]
1000117e:	1c13      	adds	r3, r2, #0
10001180:	009b      	lsls	r3, r3, #2
10001182:	189b      	adds	r3, r3, r2
10001184:	005b      	lsls	r3, r3, #1
10001186:	4a52      	ldr	r2, [pc, #328]	; (100012d0 <main+0x204>)
10001188:	189b      	adds	r3, r3, r2
1000118a:	009a      	lsls	r2, r3, #2
1000118c:	4b4b      	ldr	r3, [pc, #300]	; (100012bc <main+0x1f0>)
1000118e:	18d2      	adds	r2, r2, r3

  arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
          (q31_t *) &coeffTable[190*3 + 10*(gainDB[3] + 9)],
          &biquadStateBand4Q31[0], 2);

  arm_biquad_cascade_df1_init_q31(&S5, NUMSTAGES,
10001190:	1c39      	adds	r1, r7, #0
10001192:	4b50      	ldr	r3, [pc, #320]	; (100012d4 <main+0x208>)
10001194:	2002      	movs	r0, #2
10001196:	9000      	str	r0, [sp, #0]
10001198:	1c08      	adds	r0, r1, #0
1000119a:	2102      	movs	r1, #2
1000119c:	f000 ff5e 	bl	1000205c <arm_biquad_cascade_df1_init_q31>


  /* Call the process functions and needs to change filter coefficients
     for varying the gain of each band */

  for(i=0; i < NUMBLOCKS; i++)
100011a0:	2300      	movs	r3, #0
100011a2:	65fb      	str	r3, [r7, #92]	; 0x5c
100011a4:	e060      	b.n	10001268 <main+0x19c>

    /* ----------------------------------------------------------------------
    ** Convert block of input data from float to Q31
    ** ------------------------------------------------------------------- */

    arm_float_to_q31(inputF32 + (i*BLOCKSIZE), inputQ31, BLOCKSIZE);
100011a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100011a8:	01db      	lsls	r3, r3, #7
100011aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
100011ac:	18d2      	adds	r2, r2, r3
100011ae:	4b4a      	ldr	r3, [pc, #296]	; (100012d8 <main+0x20c>)
100011b0:	1c10      	adds	r0, r2, #0
100011b2:	1c19      	adds	r1, r3, #0
100011b4:	2220      	movs	r2, #32
100011b6:	f000 fd87 	bl	10001cc8 <arm_float_to_q31>
    /* ----------------------------------------------------------------------
    ** Scale down by 1/8.  This provides additional headroom so that the
    ** graphic EQ can apply gain.
    ** ------------------------------------------------------------------- */

    arm_scale_q31(inputQ31, 0x7FFFFFFF, -3, inputQ31, BLOCKSIZE);
100011ba:	4847      	ldr	r0, [pc, #284]	; (100012d8 <main+0x20c>)
100011bc:	4947      	ldr	r1, [pc, #284]	; (100012dc <main+0x210>)
100011be:	2303      	movs	r3, #3
100011c0:	425a      	negs	r2, r3
100011c2:	4b45      	ldr	r3, [pc, #276]	; (100012d8 <main+0x20c>)
100011c4:	2420      	movs	r4, #32
100011c6:	9400      	str	r4, [sp, #0]
100011c8:	f001 f84a 	bl	10002260 <arm_scale_q31>

    /* ----------------------------------------------------------------------
    ** Call the Q31 Biquad Cascade DF1 32x64 process function for band1, band2
    ** ------------------------------------------------------------------- */

    arm_biquad_cas_df1_32x64_q31(&S1, inputQ31, outputQ31, BLOCKSIZE);
100011cc:	1c39      	adds	r1, r7, #0
100011ce:	3140      	adds	r1, #64	; 0x40
100011d0:	4a41      	ldr	r2, [pc, #260]	; (100012d8 <main+0x20c>)
100011d2:	4b43      	ldr	r3, [pc, #268]	; (100012e0 <main+0x214>)
100011d4:	1c08      	adds	r0, r1, #0
100011d6:	1c11      	adds	r1, r2, #0
100011d8:	1c1a      	adds	r2, r3, #0
100011da:	2320      	movs	r3, #32
100011dc:	f000 fe40 	bl	10001e60 <arm_biquad_cas_df1_32x64_q31>
    arm_biquad_cas_df1_32x64_q31(&S2, outputQ31, outputQ31, BLOCKSIZE);
100011e0:	1c39      	adds	r1, r7, #0
100011e2:	3130      	adds	r1, #48	; 0x30
100011e4:	4a3e      	ldr	r2, [pc, #248]	; (100012e0 <main+0x214>)
100011e6:	4b3e      	ldr	r3, [pc, #248]	; (100012e0 <main+0x214>)
100011e8:	1c08      	adds	r0, r1, #0
100011ea:	1c11      	adds	r1, r2, #0
100011ec:	1c1a      	adds	r2, r3, #0
100011ee:	2320      	movs	r3, #32
100011f0:	f000 fe36 	bl	10001e60 <arm_biquad_cas_df1_32x64_q31>

    /* ----------------------------------------------------------------------
    ** Call the Q31 Biquad Cascade DF1 process function for band3, band4, band5
    ** ------------------------------------------------------------------- */

    arm_biquad_cascade_df1_q31(&S3, outputQ31, outputQ31, BLOCKSIZE);
100011f4:	1c39      	adds	r1, r7, #0
100011f6:	3120      	adds	r1, #32
100011f8:	4a39      	ldr	r2, [pc, #228]	; (100012e0 <main+0x214>)
100011fa:	4b39      	ldr	r3, [pc, #228]	; (100012e0 <main+0x214>)
100011fc:	1c08      	adds	r0, r1, #0
100011fe:	1c11      	adds	r1, r2, #0
10001200:	1c1a      	adds	r2, r3, #0
10001202:	2320      	movs	r3, #32
10001204:	f000 ff3a 	bl	1000207c <arm_biquad_cascade_df1_q31>
    arm_biquad_cascade_df1_q31(&S4, outputQ31, outputQ31, BLOCKSIZE);
10001208:	1c39      	adds	r1, r7, #0
1000120a:	3110      	adds	r1, #16
1000120c:	4a34      	ldr	r2, [pc, #208]	; (100012e0 <main+0x214>)
1000120e:	4b34      	ldr	r3, [pc, #208]	; (100012e0 <main+0x214>)
10001210:	1c08      	adds	r0, r1, #0
10001212:	1c11      	adds	r1, r2, #0
10001214:	1c1a      	adds	r2, r3, #0
10001216:	2320      	movs	r3, #32
10001218:	f000 ff30 	bl	1000207c <arm_biquad_cascade_df1_q31>
    arm_biquad_cascade_df1_q31(&S5, outputQ31, outputQ31, BLOCKSIZE);
1000121c:	1c39      	adds	r1, r7, #0
1000121e:	4a30      	ldr	r2, [pc, #192]	; (100012e0 <main+0x214>)
10001220:	4b2f      	ldr	r3, [pc, #188]	; (100012e0 <main+0x214>)
10001222:	1c08      	adds	r0, r1, #0
10001224:	1c11      	adds	r1, r2, #0
10001226:	1c1a      	adds	r2, r3, #0
10001228:	2320      	movs	r3, #32
1000122a:	f000 ff27 	bl	1000207c <arm_biquad_cascade_df1_q31>

    /* ----------------------------------------------------------------------
    ** Convert Q31 result back to float
    ** ------------------------------------------------------------------- */

    arm_q31_to_float(outputQ31, outputF32 + (i * BLOCKSIZE), BLOCKSIZE);
1000122e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001230:	01db      	lsls	r3, r3, #7
10001232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
10001234:	18d3      	adds	r3, r2, r3
10001236:	4a2a      	ldr	r2, [pc, #168]	; (100012e0 <main+0x214>)
10001238:	1c10      	adds	r0, r2, #0
1000123a:	1c19      	adds	r1, r3, #0
1000123c:	2220      	movs	r2, #32
1000123e:	f000 fdbb 	bl	10001db8 <arm_q31_to_float>

    /* ----------------------------------------------------------------------
    ** Scale back up
    ** ------------------------------------------------------------------- */

    arm_scale_f32(outputF32 + (i * BLOCKSIZE), 8.0f, outputF32 + (i * BLOCKSIZE), BLOCKSIZE);
10001242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001244:	01db      	lsls	r3, r3, #7
10001246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
10001248:	18d1      	adds	r1, r2, r3
1000124a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000124c:	01db      	lsls	r3, r3, #7
1000124e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
10001250:	18d3      	adds	r3, r2, r3
10001252:	2282      	movs	r2, #130	; 0x82
10001254:	05d2      	lsls	r2, r2, #23
10001256:	1c08      	adds	r0, r1, #0
10001258:	1c11      	adds	r1, r2, #0
1000125a:	1c1a      	adds	r2, r3, #0
1000125c:	2320      	movs	r3, #32
1000125e:	f000 ffc5 	bl	100021ec <arm_scale_f32>


  /* Call the process functions and needs to change filter coefficients
     for varying the gain of each band */

  for(i=0; i < NUMBLOCKS; i++)
10001262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001264:	3301      	adds	r3, #1
10001266:	65fb      	str	r3, [r7, #92]	; 0x5c
10001268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000126a:	2b09      	cmp	r3, #9
1000126c:	dd9b      	ble.n	100011a6 <main+0xda>
    ** ------------------------------------------------------------------- */

    arm_scale_f32(outputF32 + (i * BLOCKSIZE), 8.0f, outputF32 + (i * BLOCKSIZE), BLOCKSIZE);
  };

  snr = arm_snr_f32(testRefOutput_f32, testOutput, TESTLENGTH);
1000126e:	491d      	ldr	r1, [pc, #116]	; (100012e4 <main+0x218>)
10001270:	4a10      	ldr	r2, [pc, #64]	; (100012b4 <main+0x1e8>)
10001272:	23a0      	movs	r3, #160	; 0xa0
10001274:	005b      	lsls	r3, r3, #1
10001276:	1c08      	adds	r0, r1, #0
10001278:	1c11      	adds	r1, r2, #0
1000127a:	1c1a      	adds	r2, r3, #0
1000127c:	f000 f8a4 	bl	100013c8 <arm_snr_f32>
10001280:	1c02      	adds	r2, r0, #0
10001282:	4b19      	ldr	r3, [pc, #100]	; (100012e8 <main+0x21c>)
10001284:	601a      	str	r2, [r3, #0]

  if (snr < SNR_THRESHOLD_F32)
10001286:	4b18      	ldr	r3, [pc, #96]	; (100012e8 <main+0x21c>)
10001288:	681b      	ldr	r3, [r3, #0]
1000128a:	1c18      	adds	r0, r3, #0
1000128c:	4917      	ldr	r1, [pc, #92]	; (100012ec <main+0x220>)
1000128e:	f001 fcb7 	bl	10002c00 <__aeabi_fcmplt>
10001292:	1c03      	adds	r3, r0, #0
10001294:	2b00      	cmp	r3, #0
10001296:	d003      	beq.n	100012a0 <main+0x1d4>
  {
    status = ARM_MATH_TEST_FAILURE;
10001298:	2306      	movs	r3, #6
1000129a:	425b      	negs	r3, r3
1000129c:	65bb      	str	r3, [r7, #88]	; 0x58
1000129e:	e001      	b.n	100012a4 <main+0x1d8>
  }
  else
  {
    status = ARM_MATH_SUCCESS;
100012a0:	2300      	movs	r3, #0
100012a2:	65bb      	str	r3, [r7, #88]	; 0x58

  /* ----------------------------------------------------------------------
  ** Loop here if the signal does not match the reference output.
  ** ------------------------------------------------------------------- */

  if( status != ARM_MATH_SUCCESS)
100012a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
100012a6:	2b00      	cmp	r3, #0
100012a8:	d000      	beq.n	100012ac <main+0x1e0>
  {
    while(1);
100012aa:	e7fe      	b.n	100012aa <main+0x1de>
  }

  while(1);                             /* main function does not return */
100012ac:	e7fe      	b.n	100012ac <main+0x1e0>
100012ae:	46c0      	nop			; (mov r8, r8)
100012b0:	20001540 	.word	0x20001540
100012b4:	20000950 	.word	0x20000950
100012b8:	20001a40 	.word	0x20001a40
100012bc:	10005c5c 	.word	0x10005c5c
100012c0:	20000e50 	.word	0x20000e50
100012c4:	20000e90 	.word	0x20000e90
100012c8:	20000ed0 	.word	0x20000ed0
100012cc:	20000ef0 	.word	0x20000ef0
100012d0:	00000352 	.word	0x00000352
100012d4:	20000f10 	.word	0x20000f10
100012d8:	20000f30 	.word	0x20000f30
100012dc:	7fffffff 	.word	0x7fffffff
100012e0:	20000fb0 	.word	0x20000fb0
100012e4:	20001040 	.word	0x20001040
100012e8:	20001030 	.word	0x20001030
100012ec:	42c40000 	.word	0x42c40000

100012f0 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
100012f0:	e7fe      	b.n	100012f0 <NMI_Handler>

100012f2 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
100012f2:	e7fe      	b.n	100012f2 <HardFault_Handler>

100012f4 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
100012f4:	e7fe      	b.n	100012f4 <SVC_Handler>

100012f6 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
100012f6:	e7fe      	b.n	100012f6 <PendSV_Handler>

100012f8 <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
100012f8:	e7fe      	b.n	100012f8 <SysTick_Handler>

100012fa <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
100012fa:	e7fe      	b.n	100012fa <SCU_0_IRQHandler>

100012fc <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100012fc:	e7fe      	b.n	100012fc <SCU_1_IRQHandler>

100012fe <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100012fe:	e7fe      	b.n	100012fe <SCU_2_IRQHandler>

10001300 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
10001300:	e7fe      	b.n	10001300 <ERU0_0_IRQHandler>

10001302 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
10001302:	e7fe      	b.n	10001302 <ERU0_1_IRQHandler>

10001304 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
10001304:	e7fe      	b.n	10001304 <ERU0_2_IRQHandler>

10001306 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
10001306:	e7fe      	b.n	10001306 <ERU0_3_IRQHandler>

10001308 <MATH0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler MATH0_0_IRQHandler
10001308:	e7fe      	b.n	10001308 <MATH0_0_IRQHandler>

1000130a <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
1000130a:	e7fe      	b.n	1000130a <VADC0_C0_0_IRQHandler>

1000130c <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
1000130c:	e7fe      	b.n	1000130c <VADC0_C0_1_IRQHandler>

1000130e <VADC0_G0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
1000130e:	e7fe      	b.n	1000130e <VADC0_G0_0_IRQHandler>

10001310 <VADC0_G0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
10001310:	e7fe      	b.n	10001310 <VADC0_G0_1_IRQHandler>

10001312 <VADC0_G1_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
10001312:	e7fe      	b.n	10001312 <VADC0_G1_0_IRQHandler>

10001314 <VADC0_G1_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
10001314:	e7fe      	b.n	10001314 <VADC0_G1_1_IRQHandler>

10001316 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
10001316:	e7fe      	b.n	10001316 <CCU40_0_IRQHandler>

10001318 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
10001318:	e7fe      	b.n	10001318 <CCU40_1_IRQHandler>

1000131a <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
1000131a:	e7fe      	b.n	1000131a <CCU40_2_IRQHandler>

1000131c <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
1000131c:	e7fe      	b.n	1000131c <CCU40_3_IRQHandler>

1000131e <CCU80_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_0_IRQHandler
1000131e:	e7fe      	b.n	1000131e <CCU80_0_IRQHandler>

10001320 <CCU80_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_1_IRQHandler
10001320:	e7fe      	b.n	10001320 <CCU80_1_IRQHandler>

10001322 <POSIF0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_0_IRQHandler
10001322:	e7fe      	b.n	10001322 <POSIF0_0_IRQHandler>

10001324 <POSIF0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_1_IRQHandler
10001324:	e7fe      	b.n	10001324 <POSIF0_1_IRQHandler>

10001326 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
10001326:	e7fe      	b.n	10001326 <USIC0_0_IRQHandler>

10001328 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
10001328:	e7fe      	b.n	10001328 <USIC0_1_IRQHandler>

1000132a <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
1000132a:	e7fe      	b.n	1000132a <USIC0_2_IRQHandler>

1000132c <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
1000132c:	e7fe      	b.n	1000132c <USIC0_3_IRQHandler>

1000132e <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
1000132e:	e7fe      	b.n	1000132e <USIC0_4_IRQHandler>

10001330 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
10001330:	e7fe      	b.n	10001330 <USIC0_5_IRQHandler>

10001332 <BCCU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler BCCU0_0_IRQHandler
10001332:	e7fe      	b.n	10001332 <BCCU0_0_IRQHandler>

10001334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
10001334:	b580      	push	{r7, lr}
10001336:	af00      	add	r7, sp, #0

  /*
   * Clock tree setup by CMSIS routines is allowed only in the absence of DAVE
   * Clock app.
   */ 
  if(AllowClkInitByStartup()){ 
10001338:	f7ff fec4 	bl	100010c4 <AllowClkInitByStartup>
   * MCLK    = DCO_DCLK
   * PCLK    = MCLK
   * RTC CLK = Standby clock
   */
  }
}
1000133c:	46bd      	mov	sp, r7
1000133e:	bd80      	pop	{r7, pc}

10001340 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10001340:	b580      	push	{r7, lr}
10001342:	b086      	sub	sp, #24
10001344:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV, CLKCR, Clock;

  CLKCR = SCU_CLK -> CLKCR;
10001346:	4b1c      	ldr	r3, [pc, #112]	; (100013b8 <SystemCoreClockUpdate+0x78>)
10001348:	681b      	ldr	r3, [r3, #0]
1000134a:	613b      	str	r3, [r7, #16]
  IDIV = (CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000134c:	693a      	ldr	r2, [r7, #16]
1000134e:	23ff      	movs	r3, #255	; 0xff
10001350:	021b      	lsls	r3, r3, #8
10001352:	4013      	ands	r3, r2
10001354:	0a1b      	lsrs	r3, r3, #8
10001356:	60fb      	str	r3, [r7, #12]
  FDIV = (CLKCR & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001358:	693a      	ldr	r2, [r7, #16]
1000135a:	23ff      	movs	r3, #255	; 0xff
1000135c:	4013      	ands	r3, r2
1000135e:	60bb      	str	r3, [r7, #8]
  
  if(IDIV)
10001360:	68fb      	ldr	r3, [r7, #12]
10001362:	2b00      	cmp	r3, #0
10001364:	d01f      	beq.n	100013a6 <SystemCoreClockUpdate+0x66>
  {
    /* Divider is enabled and used */
    if(0 == FDIV)
10001366:	68bb      	ldr	r3, [r7, #8]
10001368:	2b00      	cmp	r3, #0
1000136a:	d106      	bne.n	1000137a <SystemCoreClockUpdate+0x3a>
     {
       /* No fractional divider, so MCLK = DCO_Clk / (2 * IDIV) */
       Clock = MCLK_MHZ / IDIV;
1000136c:	4813      	ldr	r0, [pc, #76]	; (100013bc <SystemCoreClockUpdate+0x7c>)
1000136e:	68f9      	ldr	r1, [r7, #12]
10001370:	f001 fba6 	bl	10002ac0 <__aeabi_uidiv>
10001374:	1c03      	adds	r3, r0, #0
10001376:	617b      	str	r3, [r7, #20]
10001378:	e017      	b.n	100013aa <SystemCoreClockUpdate+0x6a>
     }
    else
     {
       /* Both integer and fractional divider must be considered */
       /* 1. IDIV + FDIV/256 */
       Q_24_8 FDiv_IDiv_Sum = (IDIV << FRACBITS) + FDIV;  
1000137a:	68fb      	ldr	r3, [r7, #12]
1000137c:	021a      	lsls	r2, r3, #8
1000137e:	68bb      	ldr	r3, [r7, #8]
10001380:	18d3      	adds	r3, r2, r3
10001382:	607b      	str	r3, [r7, #4]

       /* 2. Fixed point division Q24.8 / Q9.8 = Q15.0 */
       Q_15_0 ClockVal = (DCO_DCLK_MULTIPLIER << FRACBITS)/ FDiv_IDiv_Sum;
10001384:	687b      	ldr	r3, [r7, #4]
10001386:	22fa      	movs	r2, #250	; 0xfa
10001388:	0610      	lsls	r0, r2, #24
1000138a:	1c19      	adds	r1, r3, #0
1000138c:	f001 fb98 	bl	10002ac0 <__aeabi_uidiv>
10001390:	1c03      	adds	r3, r0, #0
10001392:	603b      	str	r3, [r7, #0]
       Clock = ((uint32_t)ClockVal) * KHZ_MULTIPLIER;
10001394:	683b      	ldr	r3, [r7, #0]
10001396:	22fa      	movs	r2, #250	; 0xfa
10001398:	0092      	lsls	r2, r2, #2
1000139a:	4353      	muls	r3, r2
1000139c:	617b      	str	r3, [r7, #20]
       Clock = Clock >> DCO_DCLK_DIVIDER;
1000139e:	697b      	ldr	r3, [r7, #20]
100013a0:	0a5b      	lsrs	r3, r3, #9
100013a2:	617b      	str	r3, [r7, #20]
100013a4:	e001      	b.n	100013aa <SystemCoreClockUpdate+0x6a>
     }
  }
  else
  {
    /* Divider bypassed. Simply divide DCO_DCLK by 2 */
    Clock = MCLK_MHZ;
100013a6:	4b05      	ldr	r3, [pc, #20]	; (100013bc <SystemCoreClockUpdate+0x7c>)
100013a8:	617b      	str	r3, [r7, #20]
  }

  /* Finally with the math class over, update SystemCoreClock */
  SystemCoreClock = Clock;  
100013aa:	4b05      	ldr	r3, [pc, #20]	; (100013c0 <SystemCoreClockUpdate+0x80>)
100013ac:	697a      	ldr	r2, [r7, #20]
100013ae:	601a      	str	r2, [r3, #0]
}
100013b0:	46bd      	mov	sp, r7
100013b2:	b006      	add	sp, #24
100013b4:	bd80      	pop	{r7, pc}
100013b6:	46c0      	nop			; (mov r8, r8)
100013b8:	40010300 	.word	0x40010300
100013bc:	01e84800 	.word	0x01e84800
100013c0:	20001034 	.word	0x20001034
100013c4:	00000000 	.word	0x00000000

100013c8 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output 
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
100013c8:	b590      	push	{r4, r7, lr}
100013ca:	b08b      	sub	sp, #44	; 0x2c
100013cc:	af00      	add	r7, sp, #0
100013ce:	60f8      	str	r0, [r7, #12]
100013d0:	60b9      	str	r1, [r7, #8]
100013d2:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
100013d4:	2300      	movs	r3, #0
100013d6:	627b      	str	r3, [r7, #36]	; 0x24
100013d8:	2300      	movs	r3, #0
100013da:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
100013dc:	2300      	movs	r3, #0
100013de:	623b      	str	r3, [r7, #32]
100013e0:	e05f      	b.n	100014a2 <arm_snr_f32+0xda>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
100013e2:	6a3b      	ldr	r3, [r7, #32]
100013e4:	009b      	lsls	r3, r3, #2
100013e6:	68fa      	ldr	r2, [r7, #12]
100013e8:	18d3      	adds	r3, r2, r3
100013ea:	61fb      	str	r3, [r7, #28]
      temp =  *test;
100013ec:	69fb      	ldr	r3, [r7, #28]
100013ee:	681b      	ldr	r3, [r3, #0]
100013f0:	61bb      	str	r3, [r7, #24]

	  if(temp == 0x7FC00000)
100013f2:	69ba      	ldr	r2, [r7, #24]
100013f4:	4b48      	ldr	r3, [pc, #288]	; (10001518 <arm_snr_f32+0x150>)
100013f6:	429a      	cmp	r2, r3
100013f8:	d101      	bne.n	100013fe <arm_snr_f32+0x36>
	  {
	  		return(0);
100013fa:	2300      	movs	r3, #0
100013fc:	e081      	b.n	10001502 <arm_snr_f32+0x13a>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
100013fe:	6a3b      	ldr	r3, [r7, #32]
10001400:	009b      	lsls	r3, r3, #2
10001402:	68ba      	ldr	r2, [r7, #8]
10001404:	18d3      	adds	r3, r2, r3
10001406:	61fb      	str	r3, [r7, #28]
      temp =  *test;
10001408:	69fb      	ldr	r3, [r7, #28]
1000140a:	681b      	ldr	r3, [r3, #0]
1000140c:	61bb      	str	r3, [r7, #24]

	  if(temp == 0x7FC00000)
1000140e:	69ba      	ldr	r2, [r7, #24]
10001410:	4b41      	ldr	r3, [pc, #260]	; (10001518 <arm_snr_f32+0x150>)
10001412:	429a      	cmp	r2, r3
10001414:	d101      	bne.n	1000141a <arm_snr_f32+0x52>
	  {
	  		return(0);
10001416:	2300      	movs	r3, #0
10001418:	e073      	b.n	10001502 <arm_snr_f32+0x13a>
	  }
      EnergySignal += pRef[i] * pRef[i];
1000141a:	6a3b      	ldr	r3, [r7, #32]
1000141c:	009b      	lsls	r3, r3, #2
1000141e:	68fa      	ldr	r2, [r7, #12]
10001420:	18d3      	adds	r3, r2, r3
10001422:	681a      	ldr	r2, [r3, #0]
10001424:	6a3b      	ldr	r3, [r7, #32]
10001426:	009b      	lsls	r3, r3, #2
10001428:	68f9      	ldr	r1, [r7, #12]
1000142a:	18cb      	adds	r3, r1, r3
1000142c:	681b      	ldr	r3, [r3, #0]
1000142e:	1c10      	adds	r0, r2, #0
10001430:	1c19      	adds	r1, r3, #0
10001432:	f002 f835 	bl	100034a0 <__aeabi_fmul>
10001436:	1c03      	adds	r3, r0, #0
10001438:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000143a:	1c19      	adds	r1, r3, #0
1000143c:	f001 fc68 	bl	10002d10 <__aeabi_fadd>
10001440:	1c03      	adds	r3, r0, #0
10001442:	627b      	str	r3, [r7, #36]	; 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
10001444:	6a3b      	ldr	r3, [r7, #32]
10001446:	009b      	lsls	r3, r3, #2
10001448:	68fa      	ldr	r2, [r7, #12]
1000144a:	18d3      	adds	r3, r2, r3
1000144c:	681a      	ldr	r2, [r3, #0]
1000144e:	6a3b      	ldr	r3, [r7, #32]
10001450:	009b      	lsls	r3, r3, #2
10001452:	68b9      	ldr	r1, [r7, #8]
10001454:	18cb      	adds	r3, r1, r3
10001456:	681b      	ldr	r3, [r3, #0]
10001458:	1c10      	adds	r0, r2, #0
1000145a:	1c19      	adds	r1, r3, #0
1000145c:	f002 f950 	bl	10003700 <__aeabi_fsub>
10001460:	1c03      	adds	r3, r0, #0
10001462:	1c1c      	adds	r4, r3, #0
10001464:	6a3b      	ldr	r3, [r7, #32]
10001466:	009b      	lsls	r3, r3, #2
10001468:	68fa      	ldr	r2, [r7, #12]
1000146a:	18d3      	adds	r3, r2, r3
1000146c:	681a      	ldr	r2, [r3, #0]
1000146e:	6a3b      	ldr	r3, [r7, #32]
10001470:	009b      	lsls	r3, r3, #2
10001472:	68b9      	ldr	r1, [r7, #8]
10001474:	18cb      	adds	r3, r1, r3
10001476:	681b      	ldr	r3, [r3, #0]
10001478:	1c10      	adds	r0, r2, #0
1000147a:	1c19      	adds	r1, r3, #0
1000147c:	f002 f940 	bl	10003700 <__aeabi_fsub>
10001480:	1c03      	adds	r3, r0, #0
10001482:	1c20      	adds	r0, r4, #0
10001484:	1c19      	adds	r1, r3, #0
10001486:	f002 f80b 	bl	100034a0 <__aeabi_fmul>
1000148a:	1c03      	adds	r3, r0, #0
1000148c:	1c1a      	adds	r2, r3, #0
1000148e:	693b      	ldr	r3, [r7, #16]
10001490:	1c10      	adds	r0, r2, #0
10001492:	1c19      	adds	r1, r3, #0
10001494:	f001 fc3c 	bl	10002d10 <__aeabi_fadd>
10001498:	1c03      	adds	r3, r0, #0
1000149a:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
1000149c:	6a3b      	ldr	r3, [r7, #32]
1000149e:	3301      	adds	r3, #1
100014a0:	623b      	str	r3, [r7, #32]
100014a2:	6a3a      	ldr	r2, [r7, #32]
100014a4:	687b      	ldr	r3, [r7, #4]
100014a6:	429a      	cmp	r2, r3
100014a8:	d39b      	bcc.n	100013e2 <arm_snr_f32+0x1a>
      EnergySignal += pRef[i] * pRef[i];
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
100014aa:	1c3b      	adds	r3, r7, #0
100014ac:	3310      	adds	r3, #16
100014ae:	61fb      	str	r3, [r7, #28]
    temp =  *test;
100014b0:	69fb      	ldr	r3, [r7, #28]
100014b2:	681b      	ldr	r3, [r3, #0]
100014b4:	61bb      	str	r3, [r7, #24]

    if(temp == 0x7FC00000)
100014b6:	69ba      	ldr	r2, [r7, #24]
100014b8:	4b17      	ldr	r3, [pc, #92]	; (10001518 <arm_snr_f32+0x150>)
100014ba:	429a      	cmp	r2, r3
100014bc:	d101      	bne.n	100014c2 <arm_snr_f32+0xfa>
    {
  		return(0);
100014be:	2300      	movs	r3, #0
100014c0:	e01f      	b.n	10001502 <arm_snr_f32+0x13a>
    }
	

  SNR = 10 * log10 (EnergySignal / EnergyError);
100014c2:	693b      	ldr	r3, [r7, #16]
100014c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
100014c6:	1c19      	adds	r1, r3, #0
100014c8:	f001 fdf8 	bl	100030bc <__aeabi_fdiv>
100014cc:	1c03      	adds	r3, r0, #0
100014ce:	1c18      	adds	r0, r3, #0
100014d0:	f004 f9f6 	bl	100058c0 <__aeabi_f2d>
100014d4:	1c03      	adds	r3, r0, #0
100014d6:	1c0c      	adds	r4, r1, #0
100014d8:	1c18      	adds	r0, r3, #0
100014da:	1c21      	adds	r1, r4, #0
100014dc:	f000 ff7c 	bl	100023d8 <log10>
100014e0:	1c03      	adds	r3, r0, #0
100014e2:	1c0c      	adds	r4, r1, #0
100014e4:	1c18      	adds	r0, r3, #0
100014e6:	1c21      	adds	r1, r4, #0
100014e8:	4b0a      	ldr	r3, [pc, #40]	; (10001514 <arm_snr_f32+0x14c>)
100014ea:	4a09      	ldr	r2, [pc, #36]	; (10001510 <arm_snr_f32+0x148>)
100014ec:	f003 fb54 	bl	10004b98 <__aeabi_dmul>
100014f0:	1c03      	adds	r3, r0, #0
100014f2:	1c0c      	adds	r4, r1, #0
100014f4:	1c18      	adds	r0, r3, #0
100014f6:	1c21      	adds	r1, r4, #0
100014f8:	f004 fa36 	bl	10005968 <__aeabi_d2f>
100014fc:	1c03      	adds	r3, r0, #0
100014fe:	617b      	str	r3, [r7, #20]

  return (SNR);
10001500:	697b      	ldr	r3, [r7, #20]

}
10001502:	1c18      	adds	r0, r3, #0
10001504:	46bd      	mov	sp, r7
10001506:	b00b      	add	sp, #44	; 0x2c
10001508:	bd90      	pop	{r4, r7, pc}
1000150a:	46c0      	nop			; (mov r8, r8)
1000150c:	46c0      	nop			; (mov r8, r8)
1000150e:	46c0      	nop			; (mov r8, r8)
10001510:	00000000 	.word	0x00000000
10001514:	40240000 	.word	0x40240000
10001518:	7fc00000 	.word	0x7fc00000
1000151c:	46c0      	nop			; (mov r8, r8)
1000151e:	46c0      	nop			; (mov r8, r8)

10001520 <arm_provide_guard_bits_q15>:
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
10001520:	b580      	push	{r7, lr}
10001522:	b086      	sub	sp, #24
10001524:	af00      	add	r7, sp, #0
10001526:	60f8      	str	r0, [r7, #12]
10001528:	60b9      	str	r1, [r7, #8]
1000152a:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
1000152c:	2300      	movs	r3, #0
1000152e:	617b      	str	r3, [r7, #20]
10001530:	e012      	b.n	10001558 <arm_provide_guard_bits_q15+0x38>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
10001532:	697b      	ldr	r3, [r7, #20]
10001534:	005b      	lsls	r3, r3, #1
10001536:	68fa      	ldr	r2, [r7, #12]
10001538:	18d3      	adds	r3, r2, r3
1000153a:	697a      	ldr	r2, [r7, #20]
1000153c:	0052      	lsls	r2, r2, #1
1000153e:	68f9      	ldr	r1, [r7, #12]
10001540:	188a      	adds	r2, r1, r2
10001542:	8812      	ldrh	r2, [r2, #0]
10001544:	b211      	sxth	r1, r2
10001546:	687a      	ldr	r2, [r7, #4]
10001548:	1c08      	adds	r0, r1, #0
1000154a:	4110      	asrs	r0, r2
1000154c:	1c02      	adds	r2, r0, #0
1000154e:	b292      	uxth	r2, r2
10001550:	801a      	strh	r2, [r3, #0]
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001552:	697b      	ldr	r3, [r7, #20]
10001554:	3301      	adds	r3, #1
10001556:	617b      	str	r3, [r7, #20]
10001558:	697a      	ldr	r2, [r7, #20]
1000155a:	68bb      	ldr	r3, [r7, #8]
1000155c:	429a      	cmp	r2, r3
1000155e:	d3e8      	bcc.n	10001532 <arm_provide_guard_bits_q15+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
10001560:	46bd      	mov	sp, r7
10001562:	b006      	add	sp, #24
10001564:	bd80      	pop	{r7, pc}
10001566:	46c0      	nop			; (mov r8, r8)

10001568 <arm_float_to_q12_20>:
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
10001568:	b5f0      	push	{r4, r5, r6, r7, lr}
1000156a:	4647      	mov	r7, r8
1000156c:	b480      	push	{r7}
1000156e:	b086      	sub	sp, #24
10001570:	af00      	add	r7, sp, #0
10001572:	60f8      	str	r0, [r7, #12]
10001574:	60b9      	str	r1, [r7, #8]
10001576:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001578:	2300      	movs	r3, #0
1000157a:	617b      	str	r3, [r7, #20]
1000157c:	e058      	b.n	10001630 <arm_float_to_q12_20+0xc8>
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
1000157e:	697b      	ldr	r3, [r7, #20]
10001580:	009b      	lsls	r3, r3, #2
10001582:	68ba      	ldr	r2, [r7, #8]
10001584:	18d4      	adds	r4, r2, r3
10001586:	697b      	ldr	r3, [r7, #20]
10001588:	009b      	lsls	r3, r3, #2
1000158a:	68fa      	ldr	r2, [r7, #12]
1000158c:	18d3      	adds	r3, r2, r3
1000158e:	681b      	ldr	r3, [r3, #0]
10001590:	1c18      	adds	r0, r3, #0
10001592:	2193      	movs	r1, #147	; 0x93
10001594:	05c9      	lsls	r1, r1, #23
10001596:	f001 ff83 	bl	100034a0 <__aeabi_fmul>
1000159a:	1c03      	adds	r3, r0, #0
1000159c:	1c18      	adds	r0, r3, #0
1000159e:	f002 fa89 	bl	10003ab4 <__aeabi_f2iz>
100015a2:	1c03      	adds	r3, r0, #0
100015a4:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100015a6:	697b      	ldr	r3, [r7, #20]
100015a8:	009b      	lsls	r3, r3, #2
100015aa:	68ba      	ldr	r2, [r7, #8]
100015ac:	18d2      	adds	r2, r2, r3
100015ae:	4690      	mov	r8, r2
100015b0:	697b      	ldr	r3, [r7, #20]
100015b2:	009b      	lsls	r3, r3, #2
100015b4:	68ba      	ldr	r2, [r7, #8]
100015b6:	18d3      	adds	r3, r2, r3
100015b8:	681b      	ldr	r3, [r3, #0]
100015ba:	1c18      	adds	r0, r3, #0
100015bc:	f004 f914 	bl	100057e8 <__aeabi_i2d>
100015c0:	1c05      	adds	r5, r0, #0
100015c2:	1c0e      	adds	r6, r1, #0
100015c4:	697b      	ldr	r3, [r7, #20]
100015c6:	009b      	lsls	r3, r3, #2
100015c8:	68fa      	ldr	r2, [r7, #12]
100015ca:	18d3      	adds	r3, r2, r3
100015cc:	681b      	ldr	r3, [r3, #0]
100015ce:	1c18      	adds	r0, r3, #0
100015d0:	2100      	movs	r1, #0
100015d2:	f001 fb29 	bl	10002c28 <__aeabi_fcmpgt>
100015d6:	1c03      	adds	r3, r0, #0
100015d8:	2b00      	cmp	r3, #0
100015da:	d002      	beq.n	100015e2 <arm_float_to_q12_20+0x7a>
100015dc:	4c1b      	ldr	r4, [pc, #108]	; (1000164c <arm_float_to_q12_20+0xe4>)
100015de:	4b1a      	ldr	r3, [pc, #104]	; (10001648 <arm_float_to_q12_20+0xe0>)
100015e0:	e001      	b.n	100015e6 <arm_float_to_q12_20+0x7e>
100015e2:	4b1b      	ldr	r3, [pc, #108]	; (10001650 <arm_float_to_q12_20+0xe8>)
100015e4:	4c1b      	ldr	r4, [pc, #108]	; (10001654 <arm_float_to_q12_20+0xec>)
100015e6:	1c28      	adds	r0, r5, #0
100015e8:	1c31      	adds	r1, r6, #0
100015ea:	1c1a      	adds	r2, r3, #0
100015ec:	1c23      	adds	r3, r4, #0
100015ee:	f002 fb29 	bl	10003c44 <__aeabi_dadd>
100015f2:	1c03      	adds	r3, r0, #0
100015f4:	1c0c      	adds	r4, r1, #0
100015f6:	1c18      	adds	r0, r3, #0
100015f8:	1c21      	adds	r1, r4, #0
100015fa:	f004 f8c1 	bl	10005780 <__aeabi_d2iz>
100015fe:	1c03      	adds	r3, r0, #0
10001600:	4642      	mov	r2, r8
10001602:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 1.0)
10001604:	697b      	ldr	r3, [r7, #20]
10001606:	009b      	lsls	r3, r3, #2
10001608:	68fa      	ldr	r2, [r7, #12]
1000160a:	18d3      	adds	r3, r2, r3
1000160c:	681b      	ldr	r3, [r3, #0]
1000160e:	1c18      	adds	r0, r3, #0
10001610:	21fe      	movs	r1, #254	; 0xfe
10001612:	0589      	lsls	r1, r1, #22
10001614:	f001 faee 	bl	10002bf4 <__aeabi_fcmpeq>
10001618:	1c03      	adds	r3, r0, #0
1000161a:	2b00      	cmp	r3, #0
1000161c:	d005      	beq.n	1000162a <arm_float_to_q12_20+0xc2>
        {
          pOut[i] = 0x000FFFFF;
1000161e:	697b      	ldr	r3, [r7, #20]
10001620:	009b      	lsls	r3, r3, #2
10001622:	68ba      	ldr	r2, [r7, #8]
10001624:	18d3      	adds	r3, r2, r3
10001626:	4a0c      	ldr	r2, [pc, #48]	; (10001658 <arm_float_to_q12_20+0xf0>)
10001628:	601a      	str	r2, [r3, #0]

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
1000162a:	697b      	ldr	r3, [r7, #20]
1000162c:	3301      	adds	r3, #1
1000162e:	617b      	str	r3, [r7, #20]
10001630:	697a      	ldr	r2, [r7, #20]
10001632:	687b      	ldr	r3, [r7, #4]
10001634:	429a      	cmp	r2, r3
10001636:	d3a2      	bcc.n	1000157e <arm_float_to_q12_20+0x16>
      if (pIn[i] == (float) 1.0)
        {
          pOut[i] = 0x000FFFFF;
        }
    }
}
10001638:	46bd      	mov	sp, r7
1000163a:	b006      	add	sp, #24
1000163c:	bc04      	pop	{r2}
1000163e:	4690      	mov	r8, r2
10001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001642:	46c0      	nop			; (mov r8, r8)
10001644:	46c0      	nop			; (mov r8, r8)
10001646:	46c0      	nop			; (mov r8, r8)
10001648:	00000000 	.word	0x00000000
1000164c:	3fe00000 	.word	0x3fe00000
10001650:	00000000 	.word	0x00000000
10001654:	bfe00000 	.word	0xbfe00000
10001658:	000fffff 	.word	0x000fffff
1000165c:	46c0      	nop			; (mov r8, r8)
1000165e:	46c0      	nop			; (mov r8, r8)

10001660 <arm_compare_fixed_q15>:
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
{
10001660:	b580      	push	{r7, lr}
10001662:	b088      	sub	sp, #32
10001664:	af00      	add	r7, sp, #0
10001666:	60f8      	str	r0, [r7, #12]
10001668:	60b9      	str	r1, [r7, #8]
1000166a:	607a      	str	r2, [r7, #4]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
1000166c:	2300      	movs	r3, #0
1000166e:	617b      	str	r3, [r7, #20]
  uint32_t maxDiff = 0;
10001670:	2300      	movs	r3, #0
10001672:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < numSamples; i++)
10001674:	2300      	movs	r3, #0
10001676:	61fb      	str	r3, [r7, #28]
10001678:	e01b      	b.n	100016b2 <arm_compare_fixed_q15+0x52>
  {
  	diff = pIn[i] - pOut[i];
1000167a:	69fb      	ldr	r3, [r7, #28]
1000167c:	005b      	lsls	r3, r3, #1
1000167e:	68fa      	ldr	r2, [r7, #12]
10001680:	18d3      	adds	r3, r2, r3
10001682:	881b      	ldrh	r3, [r3, #0]
10001684:	b21a      	sxth	r2, r3
10001686:	69fb      	ldr	r3, [r7, #28]
10001688:	005b      	lsls	r3, r3, #1
1000168a:	68b9      	ldr	r1, [r7, #8]
1000168c:	18cb      	adds	r3, r1, r3
1000168e:	881b      	ldrh	r3, [r3, #0]
10001690:	b21b      	sxth	r3, r3
10001692:	1ad3      	subs	r3, r2, r3
10001694:	613b      	str	r3, [r7, #16]
  	diffCrnt = (diff > 0) ? diff : -diff;
10001696:	693b      	ldr	r3, [r7, #16]
10001698:	17da      	asrs	r2, r3, #31
1000169a:	189b      	adds	r3, r3, r2
1000169c:	4053      	eors	r3, r2
1000169e:	617b      	str	r3, [r7, #20]

	if(diffCrnt > maxDiff)
100016a0:	697a      	ldr	r2, [r7, #20]
100016a2:	69bb      	ldr	r3, [r7, #24]
100016a4:	429a      	cmp	r2, r3
100016a6:	d901      	bls.n	100016ac <arm_compare_fixed_q15+0x4c>
	{
		maxDiff = diffCrnt;
100016a8:	697b      	ldr	r3, [r7, #20]
100016aa:	61bb      	str	r3, [r7, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
100016ac:	69fb      	ldr	r3, [r7, #28]
100016ae:	3301      	adds	r3, #1
100016b0:	61fb      	str	r3, [r7, #28]
100016b2:	69fa      	ldr	r2, [r7, #28]
100016b4:	687b      	ldr	r3, [r7, #4]
100016b6:	429a      	cmp	r2, r3
100016b8:	d3df      	bcc.n	1000167a <arm_compare_fixed_q15+0x1a>
	{
		maxDiff = diffCrnt;
	}	
  }

  return(maxDiff);
100016ba:	69bb      	ldr	r3, [r7, #24]
}
100016bc:	1c18      	adds	r0, r3, #0
100016be:	46bd      	mov	sp, r7
100016c0:	b008      	add	sp, #32
100016c2:	bd80      	pop	{r7, pc}

100016c4 <arm_compare_fixed_q31>:
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
{
100016c4:	b580      	push	{r7, lr}
100016c6:	b088      	sub	sp, #32
100016c8:	af00      	add	r7, sp, #0
100016ca:	60f8      	str	r0, [r7, #12]
100016cc:	60b9      	str	r1, [r7, #8]
100016ce:	607a      	str	r2, [r7, #4]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
100016d0:	2300      	movs	r3, #0
100016d2:	617b      	str	r3, [r7, #20]
  uint32_t maxDiff = 0;
100016d4:	2300      	movs	r3, #0
100016d6:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < numSamples; i++)
100016d8:	2300      	movs	r3, #0
100016da:	61fb      	str	r3, [r7, #28]
100016dc:	e019      	b.n	10001712 <arm_compare_fixed_q31+0x4e>
  {
  	diff = pIn[i] - pOut[i];
100016de:	69fb      	ldr	r3, [r7, #28]
100016e0:	009b      	lsls	r3, r3, #2
100016e2:	68fa      	ldr	r2, [r7, #12]
100016e4:	18d3      	adds	r3, r2, r3
100016e6:	681a      	ldr	r2, [r3, #0]
100016e8:	69fb      	ldr	r3, [r7, #28]
100016ea:	009b      	lsls	r3, r3, #2
100016ec:	68b9      	ldr	r1, [r7, #8]
100016ee:	18cb      	adds	r3, r1, r3
100016f0:	681b      	ldr	r3, [r3, #0]
100016f2:	1ad3      	subs	r3, r2, r3
100016f4:	613b      	str	r3, [r7, #16]
  	diffCrnt = (diff > 0) ? diff : -diff;
100016f6:	693b      	ldr	r3, [r7, #16]
100016f8:	17da      	asrs	r2, r3, #31
100016fa:	189b      	adds	r3, r3, r2
100016fc:	4053      	eors	r3, r2
100016fe:	617b      	str	r3, [r7, #20]

	if(diffCrnt > maxDiff)
10001700:	697a      	ldr	r2, [r7, #20]
10001702:	69bb      	ldr	r3, [r7, #24]
10001704:	429a      	cmp	r2, r3
10001706:	d901      	bls.n	1000170c <arm_compare_fixed_q31+0x48>
	{
		maxDiff = diffCrnt;
10001708:	697b      	ldr	r3, [r7, #20]
1000170a:	61bb      	str	r3, [r7, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
1000170c:	69fb      	ldr	r3, [r7, #28]
1000170e:	3301      	adds	r3, #1
10001710:	61fb      	str	r3, [r7, #28]
10001712:	69fa      	ldr	r2, [r7, #28]
10001714:	687b      	ldr	r3, [r7, #4]
10001716:	429a      	cmp	r2, r3
10001718:	d3e1      	bcc.n	100016de <arm_compare_fixed_q31+0x1a>
	{
		maxDiff = diffCrnt;
	}
  }

  return(maxDiff);
1000171a:	69bb      	ldr	r3, [r7, #24]
}
1000171c:	1c18      	adds	r0, r3, #0
1000171e:	46bd      	mov	sp, r7
10001720:	b008      	add	sp, #32
10001722:	bd80      	pop	{r7, pc}

10001724 <arm_provide_guard_bits_q31>:
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
10001724:	b580      	push	{r7, lr}
10001726:	b086      	sub	sp, #24
10001728:	af00      	add	r7, sp, #0
1000172a:	60f8      	str	r0, [r7, #12]
1000172c:	60b9      	str	r1, [r7, #8]
1000172e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001730:	2300      	movs	r3, #0
10001732:	617b      	str	r3, [r7, #20]
10001734:	e010      	b.n	10001758 <arm_provide_guard_bits_q31+0x34>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
10001736:	697b      	ldr	r3, [r7, #20]
10001738:	009b      	lsls	r3, r3, #2
1000173a:	68fa      	ldr	r2, [r7, #12]
1000173c:	18d3      	adds	r3, r2, r3
1000173e:	697a      	ldr	r2, [r7, #20]
10001740:	0092      	lsls	r2, r2, #2
10001742:	68f9      	ldr	r1, [r7, #12]
10001744:	188a      	adds	r2, r1, r2
10001746:	6811      	ldr	r1, [r2, #0]
10001748:	687a      	ldr	r2, [r7, #4]
1000174a:	1c08      	adds	r0, r1, #0
1000174c:	4110      	asrs	r0, r2
1000174e:	1c02      	adds	r2, r0, #0
10001750:	601a      	str	r2, [r3, #0]
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001752:	697b      	ldr	r3, [r7, #20]
10001754:	3301      	adds	r3, #1
10001756:	617b      	str	r3, [r7, #20]
10001758:	697a      	ldr	r2, [r7, #20]
1000175a:	68bb      	ldr	r3, [r7, #8]
1000175c:	429a      	cmp	r2, r3
1000175e:	d3ea      	bcc.n	10001736 <arm_provide_guard_bits_q31+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
10001760:	46bd      	mov	sp, r7
10001762:	b006      	add	sp, #24
10001764:	bd80      	pop	{r7, pc}
10001766:	46c0      	nop			; (mov r8, r8)

10001768 <arm_provide_guard_bits_q7>:
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
								uint32_t blockSize,
                                uint32_t guard_bits)
{
10001768:	b580      	push	{r7, lr}
1000176a:	b086      	sub	sp, #24
1000176c:	af00      	add	r7, sp, #0
1000176e:	60f8      	str	r0, [r7, #12]
10001770:	60b9      	str	r1, [r7, #8]
10001772:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001774:	2300      	movs	r3, #0
10001776:	617b      	str	r3, [r7, #20]
10001778:	e010      	b.n	1000179c <arm_provide_guard_bits_q7+0x34>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
1000177a:	68fa      	ldr	r2, [r7, #12]
1000177c:	697b      	ldr	r3, [r7, #20]
1000177e:	18d3      	adds	r3, r2, r3
10001780:	68f9      	ldr	r1, [r7, #12]
10001782:	697a      	ldr	r2, [r7, #20]
10001784:	188a      	adds	r2, r1, r2
10001786:	7812      	ldrb	r2, [r2, #0]
10001788:	b251      	sxtb	r1, r2
1000178a:	687a      	ldr	r2, [r7, #4]
1000178c:	1c08      	adds	r0, r1, #0
1000178e:	4110      	asrs	r0, r2
10001790:	1c02      	adds	r2, r0, #0
10001792:	b2d2      	uxtb	r2, r2
10001794:	701a      	strb	r2, [r3, #0]
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001796:	697b      	ldr	r3, [r7, #20]
10001798:	3301      	adds	r3, #1
1000179a:	617b      	str	r3, [r7, #20]
1000179c:	697a      	ldr	r2, [r7, #20]
1000179e:	68bb      	ldr	r3, [r7, #8]
100017a0:	429a      	cmp	r2, r3
100017a2:	d3ea      	bcc.n	1000177a <arm_provide_guard_bits_q7+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
100017a4:	46bd      	mov	sp, r7
100017a6:	b006      	add	sp, #24
100017a8:	bd80      	pop	{r7, pc}
100017aa:	46c0      	nop			; (mov r8, r8)

100017ac <arm_calc_guard_bits>:
 * The function Caluclates the number of guard bits  
 * depending on the numtaps 
 */

uint32_t arm_calc_guard_bits (uint32_t num_adds)
{
100017ac:	b580      	push	{r7, lr}
100017ae:	b084      	sub	sp, #16
100017b0:	af00      	add	r7, sp, #0
100017b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 1, j = 0;
100017b4:	2301      	movs	r3, #1
100017b6:	60fb      	str	r3, [r7, #12]
100017b8:	2300      	movs	r3, #0
100017ba:	60bb      	str	r3, [r7, #8]

  if (num_adds == 1)
100017bc:	687b      	ldr	r3, [r7, #4]
100017be:	2b01      	cmp	r3, #1
100017c0:	d107      	bne.n	100017d2 <arm_calc_guard_bits+0x26>
    {
      return (0);
100017c2:	2300      	movs	r3, #0
100017c4:	e00a      	b.n	100017dc <arm_calc_guard_bits+0x30>
    }

  while (i < num_adds)
    {
      i = i * 2;
100017c6:	68fb      	ldr	r3, [r7, #12]
100017c8:	005b      	lsls	r3, r3, #1
100017ca:	60fb      	str	r3, [r7, #12]
      j++;
100017cc:	68bb      	ldr	r3, [r7, #8]
100017ce:	3301      	adds	r3, #1
100017d0:	60bb      	str	r3, [r7, #8]
  if (num_adds == 1)
    {
      return (0);
    }

  while (i < num_adds)
100017d2:	68fa      	ldr	r2, [r7, #12]
100017d4:	687b      	ldr	r3, [r7, #4]
100017d6:	429a      	cmp	r2, r3
100017d8:	d3f5      	bcc.n	100017c6 <arm_calc_guard_bits+0x1a>
    {
      i = i * 2;
      j++;
    }

  return (j);
100017da:	68bb      	ldr	r3, [r7, #8]
}
100017dc:	1c18      	adds	r0, r3, #0
100017de:	46bd      	mov	sp, r7
100017e0:	b004      	add	sp, #16
100017e2:	bd80      	pop	{r7, pc}

100017e4 <arm_apply_guard_bits>:
 */

void arm_apply_guard_bits (float32_t * pIn, 
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
100017e4:	b5b0      	push	{r4, r5, r7, lr}
100017e6:	b086      	sub	sp, #24
100017e8:	af00      	add	r7, sp, #0
100017ea:	60f8      	str	r0, [r7, #12]
100017ec:	60b9      	str	r1, [r7, #8]
100017ee:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100017f0:	2300      	movs	r3, #0
100017f2:	617b      	str	r3, [r7, #20]
100017f4:	e01a      	b.n	1000182c <arm_apply_guard_bits+0x48>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
100017f6:	697b      	ldr	r3, [r7, #20]
100017f8:	009b      	lsls	r3, r3, #2
100017fa:	68fa      	ldr	r2, [r7, #12]
100017fc:	18d4      	adds	r4, r2, r3
100017fe:	697b      	ldr	r3, [r7, #20]
10001800:	009b      	lsls	r3, r3, #2
10001802:	68fa      	ldr	r2, [r7, #12]
10001804:	18d3      	adds	r3, r2, r3
10001806:	681d      	ldr	r5, [r3, #0]
10001808:	687b      	ldr	r3, [r7, #4]
1000180a:	1c18      	adds	r0, r3, #0
1000180c:	f000 f816 	bl	1000183c <arm_calc_2pow>
10001810:	1c03      	adds	r3, r0, #0
10001812:	1c18      	adds	r0, r3, #0
10001814:	f002 f9c2 	bl	10003b9c <__aeabi_ui2f>
10001818:	1c03      	adds	r3, r0, #0
1000181a:	1c28      	adds	r0, r5, #0
1000181c:	1c19      	adds	r1, r3, #0
1000181e:	f001 fe3f 	bl	100034a0 <__aeabi_fmul>
10001822:	1c03      	adds	r3, r0, #0
10001824:	6023      	str	r3, [r4, #0]
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001826:	697b      	ldr	r3, [r7, #20]
10001828:	3301      	adds	r3, #1
1000182a:	617b      	str	r3, [r7, #20]
1000182c:	697a      	ldr	r2, [r7, #20]
1000182e:	68bb      	ldr	r3, [r7, #8]
10001830:	429a      	cmp	r2, r3
10001832:	d3e0      	bcc.n	100017f6 <arm_apply_guard_bits+0x12>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
    }
}
10001834:	46bd      	mov	sp, r7
10001836:	b006      	add	sp, #24
10001838:	bdb0      	pop	{r4, r5, r7, pc}
1000183a:	46c0      	nop			; (mov r8, r8)

1000183c <arm_calc_2pow>:
 * @brief  Calculates pow(2, numShifts)
 * @param  uint32_t 	number of shifts
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
{
1000183c:	b580      	push	{r7, lr}
1000183e:	b084      	sub	sp, #16
10001840:	af00      	add	r7, sp, #0
10001842:	6078      	str	r0, [r7, #4]

  uint32_t i, val = 1;
10001844:	2301      	movs	r3, #1
10001846:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < numShifts; i++)
10001848:	2300      	movs	r3, #0
1000184a:	60fb      	str	r3, [r7, #12]
1000184c:	e005      	b.n	1000185a <arm_calc_2pow+0x1e>
    {
      val = val * 2;
1000184e:	68bb      	ldr	r3, [r7, #8]
10001850:	005b      	lsls	r3, r3, #1
10001852:	60bb      	str	r3, [r7, #8]
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
10001854:	68fb      	ldr	r3, [r7, #12]
10001856:	3301      	adds	r3, #1
10001858:	60fb      	str	r3, [r7, #12]
1000185a:	68fa      	ldr	r2, [r7, #12]
1000185c:	687b      	ldr	r3, [r7, #4]
1000185e:	429a      	cmp	r2, r3
10001860:	d3f5      	bcc.n	1000184e <arm_calc_2pow+0x12>
    {
      val = val * 2;
    }	

  return(val);
10001862:	68bb      	ldr	r3, [r7, #8]
}
10001864:	1c18      	adds	r0, r3, #0
10001866:	46bd      	mov	sp, r7
10001868:	b004      	add	sp, #16
1000186a:	bd80      	pop	{r7, pc}
1000186c:	0000      	movs	r0, r0
	...

10001870 <arm_float_to_q14>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
10001870:	b5f0      	push	{r4, r5, r6, r7, lr}
10001872:	4647      	mov	r7, r8
10001874:	b480      	push	{r7}
10001876:	b086      	sub	sp, #24
10001878:	af00      	add	r7, sp, #0
1000187a:	60f8      	str	r0, [r7, #12]
1000187c:	60b9      	str	r1, [r7, #8]
1000187e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001880:	2300      	movs	r3, #0
10001882:	617b      	str	r3, [r7, #20]
10001884:	e05b      	b.n	1000193e <arm_float_to_q14+0xce>
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
10001886:	697b      	ldr	r3, [r7, #20]
10001888:	005b      	lsls	r3, r3, #1
1000188a:	68ba      	ldr	r2, [r7, #8]
1000188c:	18d4      	adds	r4, r2, r3
1000188e:	697b      	ldr	r3, [r7, #20]
10001890:	009b      	lsls	r3, r3, #2
10001892:	68fa      	ldr	r2, [r7, #12]
10001894:	18d3      	adds	r3, r2, r3
10001896:	681b      	ldr	r3, [r3, #0]
10001898:	1c18      	adds	r0, r3, #0
1000189a:	218d      	movs	r1, #141	; 0x8d
1000189c:	05c9      	lsls	r1, r1, #23
1000189e:	f001 fdff 	bl	100034a0 <__aeabi_fmul>
100018a2:	1c03      	adds	r3, r0, #0
100018a4:	1c18      	adds	r0, r3, #0
100018a6:	f002 f905 	bl	10003ab4 <__aeabi_f2iz>
100018aa:	1c03      	adds	r3, r0, #0
100018ac:	b29b      	uxth	r3, r3
100018ae:	8023      	strh	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100018b0:	697b      	ldr	r3, [r7, #20]
100018b2:	005b      	lsls	r3, r3, #1
100018b4:	68ba      	ldr	r2, [r7, #8]
100018b6:	18d2      	adds	r2, r2, r3
100018b8:	4690      	mov	r8, r2
100018ba:	697b      	ldr	r3, [r7, #20]
100018bc:	005b      	lsls	r3, r3, #1
100018be:	68ba      	ldr	r2, [r7, #8]
100018c0:	18d3      	adds	r3, r2, r3
100018c2:	881b      	ldrh	r3, [r3, #0]
100018c4:	b21b      	sxth	r3, r3
100018c6:	1c18      	adds	r0, r3, #0
100018c8:	f003 ff8e 	bl	100057e8 <__aeabi_i2d>
100018cc:	1c05      	adds	r5, r0, #0
100018ce:	1c0e      	adds	r6, r1, #0
100018d0:	697b      	ldr	r3, [r7, #20]
100018d2:	009b      	lsls	r3, r3, #2
100018d4:	68fa      	ldr	r2, [r7, #12]
100018d6:	18d3      	adds	r3, r2, r3
100018d8:	681b      	ldr	r3, [r3, #0]
100018da:	1c18      	adds	r0, r3, #0
100018dc:	2100      	movs	r1, #0
100018de:	f001 f9a3 	bl	10002c28 <__aeabi_fcmpgt>
100018e2:	1c03      	adds	r3, r0, #0
100018e4:	2b00      	cmp	r3, #0
100018e6:	d002      	beq.n	100018ee <arm_float_to_q14+0x7e>
100018e8:	4c1a      	ldr	r4, [pc, #104]	; (10001954 <arm_float_to_q14+0xe4>)
100018ea:	4b19      	ldr	r3, [pc, #100]	; (10001950 <arm_float_to_q14+0xe0>)
100018ec:	e001      	b.n	100018f2 <arm_float_to_q14+0x82>
100018ee:	4b1a      	ldr	r3, [pc, #104]	; (10001958 <arm_float_to_q14+0xe8>)
100018f0:	4c1a      	ldr	r4, [pc, #104]	; (1000195c <arm_float_to_q14+0xec>)
100018f2:	1c28      	adds	r0, r5, #0
100018f4:	1c31      	adds	r1, r6, #0
100018f6:	1c1a      	adds	r2, r3, #0
100018f8:	1c23      	adds	r3, r4, #0
100018fa:	f002 f9a3 	bl	10003c44 <__aeabi_dadd>
100018fe:	1c03      	adds	r3, r0, #0
10001900:	1c0c      	adds	r4, r1, #0
10001902:	1c18      	adds	r0, r3, #0
10001904:	1c21      	adds	r1, r4, #0
10001906:	f003 ff3b 	bl	10005780 <__aeabi_d2iz>
1000190a:	1c03      	adds	r3, r0, #0
1000190c:	b29b      	uxth	r3, r3
1000190e:	4642      	mov	r2, r8
10001910:	8013      	strh	r3, [r2, #0]

      if (pIn[i] == (float) 2.0)
10001912:	697b      	ldr	r3, [r7, #20]
10001914:	009b      	lsls	r3, r3, #2
10001916:	68fa      	ldr	r2, [r7, #12]
10001918:	18d3      	adds	r3, r2, r3
1000191a:	681b      	ldr	r3, [r3, #0]
1000191c:	1c18      	adds	r0, r3, #0
1000191e:	2180      	movs	r1, #128	; 0x80
10001920:	05c9      	lsls	r1, r1, #23
10001922:	f001 f967 	bl	10002bf4 <__aeabi_fcmpeq>
10001926:	1c03      	adds	r3, r0, #0
10001928:	2b00      	cmp	r3, #0
1000192a:	d005      	beq.n	10001938 <arm_float_to_q14+0xc8>
        {
          pOut[i] = 0x7FFF;
1000192c:	697b      	ldr	r3, [r7, #20]
1000192e:	005b      	lsls	r3, r3, #1
10001930:	68ba      	ldr	r2, [r7, #8]
10001932:	18d3      	adds	r3, r2, r3
10001934:	4a0a      	ldr	r2, [pc, #40]	; (10001960 <arm_float_to_q14+0xf0>)
10001936:	801a      	strh	r2, [r3, #0]
void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001938:	697b      	ldr	r3, [r7, #20]
1000193a:	3301      	adds	r3, #1
1000193c:	617b      	str	r3, [r7, #20]
1000193e:	697a      	ldr	r2, [r7, #20]
10001940:	687b      	ldr	r3, [r7, #4]
10001942:	429a      	cmp	r2, r3
10001944:	d39f      	bcc.n	10001886 <arm_float_to_q14+0x16>
          pOut[i] = 0x7FFF;
        }

    }

}
10001946:	46bd      	mov	sp, r7
10001948:	b006      	add	sp, #24
1000194a:	bc04      	pop	{r2}
1000194c:	4690      	mov	r8, r2
1000194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001950:	00000000 	.word	0x00000000
10001954:	3fe00000 	.word	0x3fe00000
10001958:	00000000 	.word	0x00000000
1000195c:	bfe00000 	.word	0xbfe00000
10001960:	00007fff 	.word	0x00007fff
10001964:	46c0      	nop			; (mov r8, r8)
10001966:	46c0      	nop			; (mov r8, r8)

10001968 <arm_float_to_q30>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
10001968:	b5f0      	push	{r4, r5, r6, r7, lr}
1000196a:	4647      	mov	r7, r8
1000196c:	b480      	push	{r7}
1000196e:	b086      	sub	sp, #24
10001970:	af00      	add	r7, sp, #0
10001972:	60f8      	str	r0, [r7, #12]
10001974:	60b9      	str	r1, [r7, #8]
10001976:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001978:	2300      	movs	r3, #0
1000197a:	617b      	str	r3, [r7, #20]
1000197c:	e058      	b.n	10001a30 <arm_float_to_q30+0xc8>
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
1000197e:	697b      	ldr	r3, [r7, #20]
10001980:	009b      	lsls	r3, r3, #2
10001982:	68ba      	ldr	r2, [r7, #8]
10001984:	18d4      	adds	r4, r2, r3
10001986:	697b      	ldr	r3, [r7, #20]
10001988:	009b      	lsls	r3, r3, #2
1000198a:	68fa      	ldr	r2, [r7, #12]
1000198c:	18d3      	adds	r3, r2, r3
1000198e:	681b      	ldr	r3, [r3, #0]
10001990:	1c18      	adds	r0, r3, #0
10001992:	219d      	movs	r1, #157	; 0x9d
10001994:	05c9      	lsls	r1, r1, #23
10001996:	f001 fd83 	bl	100034a0 <__aeabi_fmul>
1000199a:	1c03      	adds	r3, r0, #0
1000199c:	1c18      	adds	r0, r3, #0
1000199e:	f002 f889 	bl	10003ab4 <__aeabi_f2iz>
100019a2:	1c03      	adds	r3, r0, #0
100019a4:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100019a6:	697b      	ldr	r3, [r7, #20]
100019a8:	009b      	lsls	r3, r3, #2
100019aa:	68ba      	ldr	r2, [r7, #8]
100019ac:	18d2      	adds	r2, r2, r3
100019ae:	4690      	mov	r8, r2
100019b0:	697b      	ldr	r3, [r7, #20]
100019b2:	009b      	lsls	r3, r3, #2
100019b4:	68ba      	ldr	r2, [r7, #8]
100019b6:	18d3      	adds	r3, r2, r3
100019b8:	681b      	ldr	r3, [r3, #0]
100019ba:	1c18      	adds	r0, r3, #0
100019bc:	f003 ff14 	bl	100057e8 <__aeabi_i2d>
100019c0:	1c05      	adds	r5, r0, #0
100019c2:	1c0e      	adds	r6, r1, #0
100019c4:	697b      	ldr	r3, [r7, #20]
100019c6:	009b      	lsls	r3, r3, #2
100019c8:	68fa      	ldr	r2, [r7, #12]
100019ca:	18d3      	adds	r3, r2, r3
100019cc:	681b      	ldr	r3, [r3, #0]
100019ce:	1c18      	adds	r0, r3, #0
100019d0:	2100      	movs	r1, #0
100019d2:	f001 f929 	bl	10002c28 <__aeabi_fcmpgt>
100019d6:	1c03      	adds	r3, r0, #0
100019d8:	2b00      	cmp	r3, #0
100019da:	d002      	beq.n	100019e2 <arm_float_to_q30+0x7a>
100019dc:	4c1b      	ldr	r4, [pc, #108]	; (10001a4c <arm_float_to_q30+0xe4>)
100019de:	4b1a      	ldr	r3, [pc, #104]	; (10001a48 <arm_float_to_q30+0xe0>)
100019e0:	e001      	b.n	100019e6 <arm_float_to_q30+0x7e>
100019e2:	4b1b      	ldr	r3, [pc, #108]	; (10001a50 <arm_float_to_q30+0xe8>)
100019e4:	4c1b      	ldr	r4, [pc, #108]	; (10001a54 <arm_float_to_q30+0xec>)
100019e6:	1c28      	adds	r0, r5, #0
100019e8:	1c31      	adds	r1, r6, #0
100019ea:	1c1a      	adds	r2, r3, #0
100019ec:	1c23      	adds	r3, r4, #0
100019ee:	f002 f929 	bl	10003c44 <__aeabi_dadd>
100019f2:	1c03      	adds	r3, r0, #0
100019f4:	1c0c      	adds	r4, r1, #0
100019f6:	1c18      	adds	r0, r3, #0
100019f8:	1c21      	adds	r1, r4, #0
100019fa:	f003 fec1 	bl	10005780 <__aeabi_d2iz>
100019fe:	1c03      	adds	r3, r0, #0
10001a00:	4642      	mov	r2, r8
10001a02:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 2.0)
10001a04:	697b      	ldr	r3, [r7, #20]
10001a06:	009b      	lsls	r3, r3, #2
10001a08:	68fa      	ldr	r2, [r7, #12]
10001a0a:	18d3      	adds	r3, r2, r3
10001a0c:	681b      	ldr	r3, [r3, #0]
10001a0e:	1c18      	adds	r0, r3, #0
10001a10:	2180      	movs	r1, #128	; 0x80
10001a12:	05c9      	lsls	r1, r1, #23
10001a14:	f001 f8ee 	bl	10002bf4 <__aeabi_fcmpeq>
10001a18:	1c03      	adds	r3, r0, #0
10001a1a:	2b00      	cmp	r3, #0
10001a1c:	d005      	beq.n	10001a2a <arm_float_to_q30+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001a1e:	697b      	ldr	r3, [r7, #20]
10001a20:	009b      	lsls	r3, r3, #2
10001a22:	68ba      	ldr	r2, [r7, #8]
10001a24:	18d3      	adds	r3, r2, r3
10001a26:	4a0c      	ldr	r2, [pc, #48]	; (10001a58 <arm_float_to_q30+0xf0>)
10001a28:	601a      	str	r2, [r3, #0]
void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001a2a:	697b      	ldr	r3, [r7, #20]
10001a2c:	3301      	adds	r3, #1
10001a2e:	617b      	str	r3, [r7, #20]
10001a30:	697a      	ldr	r2, [r7, #20]
10001a32:	687b      	ldr	r3, [r7, #4]
10001a34:	429a      	cmp	r2, r3
10001a36:	d3a2      	bcc.n	1000197e <arm_float_to_q30+0x16>
      if (pIn[i] == (float) 2.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001a38:	46bd      	mov	sp, r7
10001a3a:	b006      	add	sp, #24
10001a3c:	bc04      	pop	{r2}
10001a3e:	4690      	mov	r8, r2
10001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001a42:	46c0      	nop			; (mov r8, r8)
10001a44:	46c0      	nop			; (mov r8, r8)
10001a46:	46c0      	nop			; (mov r8, r8)
10001a48:	00000000 	.word	0x00000000
10001a4c:	3fe00000 	.word	0x3fe00000
10001a50:	00000000 	.word	0x00000000
10001a54:	bfe00000 	.word	0xbfe00000
10001a58:	7fffffff 	.word	0x7fffffff
10001a5c:	46c0      	nop			; (mov r8, r8)
10001a5e:	46c0      	nop			; (mov r8, r8)

10001a60 <arm_float_to_q29>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
10001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a62:	4647      	mov	r7, r8
10001a64:	b480      	push	{r7}
10001a66:	b086      	sub	sp, #24
10001a68:	af00      	add	r7, sp, #0
10001a6a:	60f8      	str	r0, [r7, #12]
10001a6c:	60b9      	str	r1, [r7, #8]
10001a6e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001a70:	2300      	movs	r3, #0
10001a72:	617b      	str	r3, [r7, #20]
10001a74:	e058      	b.n	10001b28 <arm_float_to_q29+0xc8>
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
10001a76:	697b      	ldr	r3, [r7, #20]
10001a78:	009b      	lsls	r3, r3, #2
10001a7a:	68ba      	ldr	r2, [r7, #8]
10001a7c:	18d4      	adds	r4, r2, r3
10001a7e:	697b      	ldr	r3, [r7, #20]
10001a80:	009b      	lsls	r3, r3, #2
10001a82:	68fa      	ldr	r2, [r7, #12]
10001a84:	18d3      	adds	r3, r2, r3
10001a86:	681b      	ldr	r3, [r3, #0]
10001a88:	1c18      	adds	r0, r3, #0
10001a8a:	219c      	movs	r1, #156	; 0x9c
10001a8c:	05c9      	lsls	r1, r1, #23
10001a8e:	f001 fd07 	bl	100034a0 <__aeabi_fmul>
10001a92:	1c03      	adds	r3, r0, #0
10001a94:	1c18      	adds	r0, r3, #0
10001a96:	f002 f80d 	bl	10003ab4 <__aeabi_f2iz>
10001a9a:	1c03      	adds	r3, r0, #0
10001a9c:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001a9e:	697b      	ldr	r3, [r7, #20]
10001aa0:	009b      	lsls	r3, r3, #2
10001aa2:	68ba      	ldr	r2, [r7, #8]
10001aa4:	18d2      	adds	r2, r2, r3
10001aa6:	4690      	mov	r8, r2
10001aa8:	697b      	ldr	r3, [r7, #20]
10001aaa:	009b      	lsls	r3, r3, #2
10001aac:	68ba      	ldr	r2, [r7, #8]
10001aae:	18d3      	adds	r3, r2, r3
10001ab0:	681b      	ldr	r3, [r3, #0]
10001ab2:	1c18      	adds	r0, r3, #0
10001ab4:	f003 fe98 	bl	100057e8 <__aeabi_i2d>
10001ab8:	1c05      	adds	r5, r0, #0
10001aba:	1c0e      	adds	r6, r1, #0
10001abc:	697b      	ldr	r3, [r7, #20]
10001abe:	009b      	lsls	r3, r3, #2
10001ac0:	68fa      	ldr	r2, [r7, #12]
10001ac2:	18d3      	adds	r3, r2, r3
10001ac4:	681b      	ldr	r3, [r3, #0]
10001ac6:	1c18      	adds	r0, r3, #0
10001ac8:	2100      	movs	r1, #0
10001aca:	f001 f8ad 	bl	10002c28 <__aeabi_fcmpgt>
10001ace:	1c03      	adds	r3, r0, #0
10001ad0:	2b00      	cmp	r3, #0
10001ad2:	d002      	beq.n	10001ada <arm_float_to_q29+0x7a>
10001ad4:	4c1b      	ldr	r4, [pc, #108]	; (10001b44 <arm_float_to_q29+0xe4>)
10001ad6:	4b1a      	ldr	r3, [pc, #104]	; (10001b40 <arm_float_to_q29+0xe0>)
10001ad8:	e001      	b.n	10001ade <arm_float_to_q29+0x7e>
10001ada:	4b1b      	ldr	r3, [pc, #108]	; (10001b48 <arm_float_to_q29+0xe8>)
10001adc:	4c1b      	ldr	r4, [pc, #108]	; (10001b4c <arm_float_to_q29+0xec>)
10001ade:	1c28      	adds	r0, r5, #0
10001ae0:	1c31      	adds	r1, r6, #0
10001ae2:	1c1a      	adds	r2, r3, #0
10001ae4:	1c23      	adds	r3, r4, #0
10001ae6:	f002 f8ad 	bl	10003c44 <__aeabi_dadd>
10001aea:	1c03      	adds	r3, r0, #0
10001aec:	1c0c      	adds	r4, r1, #0
10001aee:	1c18      	adds	r0, r3, #0
10001af0:	1c21      	adds	r1, r4, #0
10001af2:	f003 fe45 	bl	10005780 <__aeabi_d2iz>
10001af6:	1c03      	adds	r3, r0, #0
10001af8:	4642      	mov	r2, r8
10001afa:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 4.0)
10001afc:	697b      	ldr	r3, [r7, #20]
10001afe:	009b      	lsls	r3, r3, #2
10001b00:	68fa      	ldr	r2, [r7, #12]
10001b02:	18d3      	adds	r3, r2, r3
10001b04:	681b      	ldr	r3, [r3, #0]
10001b06:	1c18      	adds	r0, r3, #0
10001b08:	2181      	movs	r1, #129	; 0x81
10001b0a:	05c9      	lsls	r1, r1, #23
10001b0c:	f001 f872 	bl	10002bf4 <__aeabi_fcmpeq>
10001b10:	1c03      	adds	r3, r0, #0
10001b12:	2b00      	cmp	r3, #0
10001b14:	d005      	beq.n	10001b22 <arm_float_to_q29+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001b16:	697b      	ldr	r3, [r7, #20]
10001b18:	009b      	lsls	r3, r3, #2
10001b1a:	68ba      	ldr	r2, [r7, #8]
10001b1c:	18d3      	adds	r3, r2, r3
10001b1e:	4a0c      	ldr	r2, [pc, #48]	; (10001b50 <arm_float_to_q29+0xf0>)
10001b20:	601a      	str	r2, [r3, #0]
void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001b22:	697b      	ldr	r3, [r7, #20]
10001b24:	3301      	adds	r3, #1
10001b26:	617b      	str	r3, [r7, #20]
10001b28:	697a      	ldr	r2, [r7, #20]
10001b2a:	687b      	ldr	r3, [r7, #4]
10001b2c:	429a      	cmp	r2, r3
10001b2e:	d3a2      	bcc.n	10001a76 <arm_float_to_q29+0x16>
      if (pIn[i] == (float) 4.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001b30:	46bd      	mov	sp, r7
10001b32:	b006      	add	sp, #24
10001b34:	bc04      	pop	{r2}
10001b36:	4690      	mov	r8, r2
10001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001b3a:	46c0      	nop			; (mov r8, r8)
10001b3c:	46c0      	nop			; (mov r8, r8)
10001b3e:	46c0      	nop			; (mov r8, r8)
10001b40:	00000000 	.word	0x00000000
10001b44:	3fe00000 	.word	0x3fe00000
10001b48:	00000000 	.word	0x00000000
10001b4c:	bfe00000 	.word	0xbfe00000
10001b50:	7fffffff 	.word	0x7fffffff
10001b54:	46c0      	nop			; (mov r8, r8)
10001b56:	46c0      	nop			; (mov r8, r8)

10001b58 <arm_float_to_q28>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
10001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b5a:	4647      	mov	r7, r8
10001b5c:	b480      	push	{r7}
10001b5e:	b086      	sub	sp, #24
10001b60:	af00      	add	r7, sp, #0
10001b62:	60f8      	str	r0, [r7, #12]
10001b64:	60b9      	str	r1, [r7, #8]
10001b66:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001b68:	2300      	movs	r3, #0
10001b6a:	617b      	str	r3, [r7, #20]
10001b6c:	e058      	b.n	10001c20 <arm_float_to_q28+0xc8>
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
10001b6e:	697b      	ldr	r3, [r7, #20]
10001b70:	009b      	lsls	r3, r3, #2
10001b72:	68ba      	ldr	r2, [r7, #8]
10001b74:	18d4      	adds	r4, r2, r3
10001b76:	697b      	ldr	r3, [r7, #20]
10001b78:	009b      	lsls	r3, r3, #2
10001b7a:	68fa      	ldr	r2, [r7, #12]
10001b7c:	18d3      	adds	r3, r2, r3
10001b7e:	681b      	ldr	r3, [r3, #0]
10001b80:	1c18      	adds	r0, r3, #0
10001b82:	219b      	movs	r1, #155	; 0x9b
10001b84:	05c9      	lsls	r1, r1, #23
10001b86:	f001 fc8b 	bl	100034a0 <__aeabi_fmul>
10001b8a:	1c03      	adds	r3, r0, #0
10001b8c:	1c18      	adds	r0, r3, #0
10001b8e:	f001 ff91 	bl	10003ab4 <__aeabi_f2iz>
10001b92:	1c03      	adds	r3, r0, #0
10001b94:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001b96:	697b      	ldr	r3, [r7, #20]
10001b98:	009b      	lsls	r3, r3, #2
10001b9a:	68ba      	ldr	r2, [r7, #8]
10001b9c:	18d2      	adds	r2, r2, r3
10001b9e:	4690      	mov	r8, r2
10001ba0:	697b      	ldr	r3, [r7, #20]
10001ba2:	009b      	lsls	r3, r3, #2
10001ba4:	68ba      	ldr	r2, [r7, #8]
10001ba6:	18d3      	adds	r3, r2, r3
10001ba8:	681b      	ldr	r3, [r3, #0]
10001baa:	1c18      	adds	r0, r3, #0
10001bac:	f003 fe1c 	bl	100057e8 <__aeabi_i2d>
10001bb0:	1c05      	adds	r5, r0, #0
10001bb2:	1c0e      	adds	r6, r1, #0
10001bb4:	697b      	ldr	r3, [r7, #20]
10001bb6:	009b      	lsls	r3, r3, #2
10001bb8:	68fa      	ldr	r2, [r7, #12]
10001bba:	18d3      	adds	r3, r2, r3
10001bbc:	681b      	ldr	r3, [r3, #0]
10001bbe:	1c18      	adds	r0, r3, #0
10001bc0:	2100      	movs	r1, #0
10001bc2:	f001 f831 	bl	10002c28 <__aeabi_fcmpgt>
10001bc6:	1c03      	adds	r3, r0, #0
10001bc8:	2b00      	cmp	r3, #0
10001bca:	d002      	beq.n	10001bd2 <arm_float_to_q28+0x7a>
10001bcc:	4c1b      	ldr	r4, [pc, #108]	; (10001c3c <arm_float_to_q28+0xe4>)
10001bce:	4b1a      	ldr	r3, [pc, #104]	; (10001c38 <arm_float_to_q28+0xe0>)
10001bd0:	e001      	b.n	10001bd6 <arm_float_to_q28+0x7e>
10001bd2:	4b1b      	ldr	r3, [pc, #108]	; (10001c40 <arm_float_to_q28+0xe8>)
10001bd4:	4c1b      	ldr	r4, [pc, #108]	; (10001c44 <arm_float_to_q28+0xec>)
10001bd6:	1c28      	adds	r0, r5, #0
10001bd8:	1c31      	adds	r1, r6, #0
10001bda:	1c1a      	adds	r2, r3, #0
10001bdc:	1c23      	adds	r3, r4, #0
10001bde:	f002 f831 	bl	10003c44 <__aeabi_dadd>
10001be2:	1c03      	adds	r3, r0, #0
10001be4:	1c0c      	adds	r4, r1, #0
10001be6:	1c18      	adds	r0, r3, #0
10001be8:	1c21      	adds	r1, r4, #0
10001bea:	f003 fdc9 	bl	10005780 <__aeabi_d2iz>
10001bee:	1c03      	adds	r3, r0, #0
10001bf0:	4642      	mov	r2, r8
10001bf2:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 8.0)
10001bf4:	697b      	ldr	r3, [r7, #20]
10001bf6:	009b      	lsls	r3, r3, #2
10001bf8:	68fa      	ldr	r2, [r7, #12]
10001bfa:	18d3      	adds	r3, r2, r3
10001bfc:	681b      	ldr	r3, [r3, #0]
10001bfe:	1c18      	adds	r0, r3, #0
10001c00:	2182      	movs	r1, #130	; 0x82
10001c02:	05c9      	lsls	r1, r1, #23
10001c04:	f000 fff6 	bl	10002bf4 <__aeabi_fcmpeq>
10001c08:	1c03      	adds	r3, r0, #0
10001c0a:	2b00      	cmp	r3, #0
10001c0c:	d005      	beq.n	10001c1a <arm_float_to_q28+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001c0e:	697b      	ldr	r3, [r7, #20]
10001c10:	009b      	lsls	r3, r3, #2
10001c12:	68ba      	ldr	r2, [r7, #8]
10001c14:	18d3      	adds	r3, r2, r3
10001c16:	4a0c      	ldr	r2, [pc, #48]	; (10001c48 <arm_float_to_q28+0xf0>)
10001c18:	601a      	str	r2, [r3, #0]
void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001c1a:	697b      	ldr	r3, [r7, #20]
10001c1c:	3301      	adds	r3, #1
10001c1e:	617b      	str	r3, [r7, #20]
10001c20:	697a      	ldr	r2, [r7, #20]
10001c22:	687b      	ldr	r3, [r7, #4]
10001c24:	429a      	cmp	r2, r3
10001c26:	d3a2      	bcc.n	10001b6e <arm_float_to_q28+0x16>
      if (pIn[i] == (float) 8.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001c28:	46bd      	mov	sp, r7
10001c2a:	b006      	add	sp, #24
10001c2c:	bc04      	pop	{r2}
10001c2e:	4690      	mov	r8, r2
10001c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001c32:	46c0      	nop			; (mov r8, r8)
10001c34:	46c0      	nop			; (mov r8, r8)
10001c36:	46c0      	nop			; (mov r8, r8)
10001c38:	00000000 	.word	0x00000000
10001c3c:	3fe00000 	.word	0x3fe00000
10001c40:	00000000 	.word	0x00000000
10001c44:	bfe00000 	.word	0xbfe00000
10001c48:	7fffffff 	.word	0x7fffffff
10001c4c:	46c0      	nop			; (mov r8, r8)
10001c4e:	46c0      	nop			; (mov r8, r8)

10001c50 <arm_clip_f32>:
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
10001c50:	b580      	push	{r7, lr}
10001c52:	b084      	sub	sp, #16
10001c54:	af00      	add	r7, sp, #0
10001c56:	6078      	str	r0, [r7, #4]
10001c58:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001c5a:	2300      	movs	r3, #0
10001c5c:	60fb      	str	r3, [r7, #12]
10001c5e:	e029      	b.n	10001cb4 <arm_clip_f32+0x64>
    {
      if(pIn[i] > 1.0f)
10001c60:	68fb      	ldr	r3, [r7, #12]
10001c62:	009b      	lsls	r3, r3, #2
10001c64:	687a      	ldr	r2, [r7, #4]
10001c66:	18d3      	adds	r3, r2, r3
10001c68:	681b      	ldr	r3, [r3, #0]
10001c6a:	1c18      	adds	r0, r3, #0
10001c6c:	21fe      	movs	r1, #254	; 0xfe
10001c6e:	0589      	lsls	r1, r1, #22
10001c70:	f000 ffda 	bl	10002c28 <__aeabi_fcmpgt>
10001c74:	1c03      	adds	r3, r0, #0
10001c76:	2b00      	cmp	r3, #0
10001c78:	d007      	beq.n	10001c8a <arm_clip_f32+0x3a>
	  {
	    pIn[i] = 1.0;
10001c7a:	68fb      	ldr	r3, [r7, #12]
10001c7c:	009b      	lsls	r3, r3, #2
10001c7e:	687a      	ldr	r2, [r7, #4]
10001c80:	18d3      	adds	r3, r2, r3
10001c82:	22fe      	movs	r2, #254	; 0xfe
10001c84:	0592      	lsls	r2, r2, #22
10001c86:	601a      	str	r2, [r3, #0]
10001c88:	e011      	b.n	10001cae <arm_clip_f32+0x5e>
	  }
	  else if( pIn[i] < -1.0f)
10001c8a:	68fb      	ldr	r3, [r7, #12]
10001c8c:	009b      	lsls	r3, r3, #2
10001c8e:	687a      	ldr	r2, [r7, #4]
10001c90:	18d3      	adds	r3, r2, r3
10001c92:	681b      	ldr	r3, [r3, #0]
10001c94:	1c18      	adds	r0, r3, #0
10001c96:	490b      	ldr	r1, [pc, #44]	; (10001cc4 <arm_clip_f32+0x74>)
10001c98:	f000 ffb2 	bl	10002c00 <__aeabi_fcmplt>
10001c9c:	1c03      	adds	r3, r0, #0
10001c9e:	2b00      	cmp	r3, #0
10001ca0:	d005      	beq.n	10001cae <arm_clip_f32+0x5e>
	  {
	    pIn[i] = -1.0;
10001ca2:	68fb      	ldr	r3, [r7, #12]
10001ca4:	009b      	lsls	r3, r3, #2
10001ca6:	687a      	ldr	r2, [r7, #4]
10001ca8:	18d3      	adds	r3, r2, r3
10001caa:	4a06      	ldr	r2, [pc, #24]	; (10001cc4 <arm_clip_f32+0x74>)
10001cac:	601a      	str	r2, [r3, #0]

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001cae:	68fb      	ldr	r3, [r7, #12]
10001cb0:	3301      	adds	r3, #1
10001cb2:	60fb      	str	r3, [r7, #12]
10001cb4:	68fa      	ldr	r2, [r7, #12]
10001cb6:	683b      	ldr	r3, [r7, #0]
10001cb8:	429a      	cmp	r2, r3
10001cba:	d3d1      	bcc.n	10001c60 <arm_clip_f32+0x10>
	  {
	    pIn[i] = -1.0;
	  }
	       
    }
}
10001cbc:	46bd      	mov	sp, r7
10001cbe:	b004      	add	sp, #16
10001cc0:	bd80      	pop	{r7, pc}
10001cc2:	46c0      	nop			; (mov r8, r8)
10001cc4:	bf800000 	.word	0xbf800000

10001cc8 <arm_float_to_q31>:

void arm_float_to_q31(
  float32_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize)
{
10001cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001cca:	4646      	mov	r6, r8
10001ccc:	464f      	mov	r7, r9
10001cce:	b4c0      	push	{r6, r7}
10001cd0:	1c0c      	adds	r4, r1, #0
10001cd2:	1e16      	subs	r6, r2, #0
  /* Run the below code for Cortex-M0 */

  /* Loop over blockSize number of values */
  blkCnt = blockSize;

  while(blkCnt > 0u)
10001cd4:	d063      	beq.n	10001d9e <arm_float_to_q31+0xd6>
10001cd6:	1e51      	subs	r1, r2, #1
   */
  static __INLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
10001cd8:	4b36      	ldr	r3, [pc, #216]	; (10001db4 <arm_float_to_q31+0xec>)
#ifdef ARM_MATH_ROUNDING

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
    in = (in * 2147483648.0f);
10001cda:	279e      	movs	r7, #158	; 0x9e
10001cdc:	2201      	movs	r2, #1

#ifdef ARM_MATH_ROUNDING

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
10001cde:	1c05      	adds	r5, r0, #0
10001ce0:	400a      	ands	r2, r1
10001ce2:	cd01      	ldmia	r5!, {r0}
    in = (in * 2147483648.0f);
10001ce4:	05f9      	lsls	r1, r7, #23
10001ce6:	4698      	mov	r8, r3
10001ce8:	4691      	mov	r9, r2
10001cea:	f001 fbd9 	bl	100034a0 <__aeabi_fmul>
10001cee:	2100      	movs	r1, #0
10001cf0:	1c07      	adds	r7, r0, #0
10001cf2:	f000 ff99 	bl	10002c28 <__aeabi_fcmpgt>
10001cf6:	2800      	cmp	r0, #0
10001cf8:	d155      	bne.n	10001da6 <arm_float_to_q31+0xde>
10001cfa:	20bf      	movs	r0, #191	; 0xbf
10001cfc:	0600      	lsls	r0, r0, #24
    in += in > 0 ? 0.5f : -0.5f;
10001cfe:	1c39      	adds	r1, r7, #0
10001d00:	f001 f806 	bl	10002d10 <__aeabi_fadd>
    *pDst++ = clip_q63_to_q31((q63_t) (in));
10001d04:	f000 ffc6 	bl	10002c94 <__aeabi_f2lz>
10001d08:	17ca      	asrs	r2, r1, #31
10001d0a:	1c0f      	adds	r7, r1, #0
10001d0c:	4641      	mov	r1, r8
10001d0e:	4051      	eors	r1, r2
   * @brief Clips Q63 to Q31 values.
   */
  static __INLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
10001d10:	17c3      	asrs	r3, r0, #31
10001d12:	42bb      	cmp	r3, r7
10001d14:	d000      	beq.n	10001d18 <arm_float_to_q31+0x50>
10001d16:	1c08      	adds	r0, r1, #0
    *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));

#endif /*      #ifdef ARM_MATH_ROUNDING        */

    /* Decrement the loop counter */
    blkCnt--;
10001d18:	3e01      	subs	r6, #1
    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
    in = (in * 2147483648.0f);
    in += in > 0 ? 0.5f : -0.5f;
    *pDst++ = clip_q63_to_q31((q63_t) (in));
10001d1a:	c401      	stmia	r4!, {r0}
  /* Run the below code for Cortex-M0 */

  /* Loop over blockSize number of values */
  blkCnt = blockSize;

  while(blkCnt > 0u)
10001d1c:	2e00      	cmp	r6, #0
10001d1e:	d03e      	beq.n	10001d9e <arm_float_to_q31+0xd6>
10001d20:	4648      	mov	r0, r9
10001d22:	2800      	cmp	r0, #0
10001d24:	d012      	beq.n	10001d4c <arm_float_to_q31+0x84>
10001d26:	e02c      	b.n	10001d82 <arm_float_to_q31+0xba>
10001d28:	21fc      	movs	r1, #252	; 0xfc
10001d2a:	0588      	lsls	r0, r1, #22

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
    in = (in * 2147483648.0f);
    in += in > 0 ? 0.5f : -0.5f;
10001d2c:	1c39      	adds	r1, r7, #0
10001d2e:	f000 ffef 	bl	10002d10 <__aeabi_fadd>
    *pDst++ = clip_q63_to_q31((q63_t) (in));
10001d32:	f000 ffaf 	bl	10002c94 <__aeabi_f2lz>
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
10001d36:	4647      	mov	r7, r8
10001d38:	17cb      	asrs	r3, r1, #31
10001d3a:	405f      	eors	r7, r3
   * @brief Clips Q63 to Q31 values.
   */
  static __INLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
10001d3c:	17c2      	asrs	r2, r0, #31
10001d3e:	428a      	cmp	r2, r1
10001d40:	d000      	beq.n	10001d44 <arm_float_to_q31+0x7c>
10001d42:	1c38      	adds	r0, r7, #0
    *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));

#endif /*      #ifdef ARM_MATH_ROUNDING        */

    /* Decrement the loop counter */
    blkCnt--;
10001d44:	3e01      	subs	r6, #1
    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
    in = (in * 2147483648.0f);
    in += in > 0 ? 0.5f : -0.5f;
    *pDst++ = clip_q63_to_q31((q63_t) (in));
10001d46:	c401      	stmia	r4!, {r0}
  /* Run the below code for Cortex-M0 */

  /* Loop over blockSize number of values */
  blkCnt = blockSize;

  while(blkCnt > 0u)
10001d48:	2e00      	cmp	r6, #0
10001d4a:	d028      	beq.n	10001d9e <arm_float_to_q31+0xd6>
#ifdef ARM_MATH_ROUNDING

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
    in = (in * 2147483648.0f);
10001d4c:	219e      	movs	r1, #158	; 0x9e
10001d4e:	05c9      	lsls	r1, r1, #23

#ifdef ARM_MATH_ROUNDING

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
10001d50:	cd01      	ldmia	r5!, {r0}
    in = (in * 2147483648.0f);
10001d52:	f001 fba5 	bl	100034a0 <__aeabi_fmul>
10001d56:	2100      	movs	r1, #0
10001d58:	1c07      	adds	r7, r0, #0
10001d5a:	f000 ff65 	bl	10002c28 <__aeabi_fcmpgt>
10001d5e:	2800      	cmp	r0, #0
10001d60:	d024      	beq.n	10001dac <arm_float_to_q31+0xe4>
10001d62:	23fc      	movs	r3, #252	; 0xfc
10001d64:	0598      	lsls	r0, r3, #22
    in += in > 0 ? 0.5f : -0.5f;
10001d66:	1c39      	adds	r1, r7, #0
10001d68:	f000 ffd2 	bl	10002d10 <__aeabi_fadd>
    *pDst++ = clip_q63_to_q31((q63_t) (in));
10001d6c:	f000 ff92 	bl	10002c94 <__aeabi_f2lz>
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
10001d70:	4642      	mov	r2, r8
10001d72:	17cf      	asrs	r7, r1, #31
10001d74:	407a      	eors	r2, r7
   * @brief Clips Q63 to Q31 values.
   */
  static __INLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
10001d76:	17c3      	asrs	r3, r0, #31
10001d78:	428b      	cmp	r3, r1
10001d7a:	d000      	beq.n	10001d7e <arm_float_to_q31+0xb6>
10001d7c:	1c10      	adds	r0, r2, #0
10001d7e:	c401      	stmia	r4!, {r0}
    *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));

#endif /*      #ifdef ARM_MATH_ROUNDING        */

    /* Decrement the loop counter */
    blkCnt--;
10001d80:	3e01      	subs	r6, #1
#ifdef ARM_MATH_ROUNDING

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
    in = (in * 2147483648.0f);
10001d82:	279e      	movs	r7, #158	; 0x9e
10001d84:	05f9      	lsls	r1, r7, #23

#ifdef ARM_MATH_ROUNDING

    /* C = A * 2147483648 */
    /* convert from float to Q31 and then store the results in the destination buffer */
    in = *pIn++;
10001d86:	cd01      	ldmia	r5!, {r0}
    in = (in * 2147483648.0f);
10001d88:	f001 fb8a 	bl	100034a0 <__aeabi_fmul>
10001d8c:	2100      	movs	r1, #0
10001d8e:	1c07      	adds	r7, r0, #0
10001d90:	f000 ff4a 	bl	10002c28 <__aeabi_fcmpgt>
10001d94:	2800      	cmp	r0, #0
10001d96:	d1c7      	bne.n	10001d28 <arm_float_to_q31+0x60>
10001d98:	22bf      	movs	r2, #191	; 0xbf
10001d9a:	0610      	lsls	r0, r2, #24
10001d9c:	e7c6      	b.n	10001d2c <arm_float_to_q31+0x64>
    blkCnt--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
10001d9e:	bc0c      	pop	{r2, r3}
10001da0:	4690      	mov	r8, r2
10001da2:	4699      	mov	r9, r3
10001da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001da6:	23fc      	movs	r3, #252	; 0xfc
10001da8:	0598      	lsls	r0, r3, #22
10001daa:	e7a8      	b.n	10001cfe <arm_float_to_q31+0x36>
10001dac:	20bf      	movs	r0, #191	; 0xbf
10001dae:	0600      	lsls	r0, r0, #24
10001db0:	e7d9      	b.n	10001d66 <arm_float_to_q31+0x9e>
10001db2:	46c0      	nop			; (mov r8, r8)
10001db4:	7fffffff 	.word	0x7fffffff

10001db8 <arm_q31_to_float>:

void arm_q31_to_float(
  q31_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
10001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001dba:	4646      	mov	r6, r8
10001dbc:	464f      	mov	r7, r9
10001dbe:	b4c0      	push	{r6, r7}
10001dc0:	1c0c      	adds	r4, r1, #0
10001dc2:	1e16      	subs	r6, r2, #0
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001dc4:	d038      	beq.n	10001e38 <arm_q31_to_float+0x80>
10001dc6:	1e57      	subs	r7, r2, #1
10001dc8:	2301      	movs	r3, #1
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001dca:	1c05      	adds	r5, r0, #0
10001dcc:	403b      	ands	r3, r7
10001dce:	cd01      	ldmia	r5!, {r0}
10001dd0:	4699      	mov	r9, r3
10001dd2:	f001 fe8f 	bl	10003af4 <__aeabi_i2f>
10001dd6:	21c0      	movs	r1, #192	; 0xc0
10001dd8:	0589      	lsls	r1, r1, #22
10001dda:	f001 fb61 	bl	100034a0 <__aeabi_fmul>

    /* Decrement the loop counter */
    blkCnt--;
10001dde:	46b8      	mov	r8, r7

  while(blkCnt > 0u)
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001de0:	c401      	stmia	r4!, {r0}
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001de2:	2f00      	cmp	r7, #0
10001de4:	d028      	beq.n	10001e38 <arm_q31_to_float+0x80>
10001de6:	4648      	mov	r0, r9
10001de8:	2800      	cmp	r0, #0
10001dea:	d00b      	beq.n	10001e04 <arm_q31_to_float+0x4c>
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001dec:	cd01      	ldmia	r5!, {r0}
10001dee:	f001 fe81 	bl	10003af4 <__aeabi_i2f>
10001df2:	22c0      	movs	r2, #192	; 0xc0
10001df4:	0591      	lsls	r1, r2, #22
10001df6:	f001 fb53 	bl	100034a0 <__aeabi_fmul>

    /* Decrement the loop counter */
    blkCnt--;
10001dfa:	3e02      	subs	r6, #2

  while(blkCnt > 0u)
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001dfc:	c401      	stmia	r4!, {r0}

    /* Decrement the loop counter */
    blkCnt--;
10001dfe:	46b0      	mov	r8, r6
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001e00:	2e00      	cmp	r6, #0
10001e02:	d019      	beq.n	10001e38 <arm_q31_to_float+0x80>
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001e04:	1c2f      	adds	r7, r5, #0
10001e06:	cf01      	ldmia	r7!, {r0}
10001e08:	26c0      	movs	r6, #192	; 0xc0
10001e0a:	f001 fe73 	bl	10003af4 <__aeabi_i2f>
10001e0e:	05b1      	lsls	r1, r6, #22
10001e10:	f001 fb46 	bl	100034a0 <__aeabi_fmul>
10001e14:	1c26      	adds	r6, r4, #0
10001e16:	c601      	stmia	r6!, {r0}
10001e18:	6868      	ldr	r0, [r5, #4]
10001e1a:	f001 fe6b 	bl	10003af4 <__aeabi_i2f>
10001e1e:	23c0      	movs	r3, #192	; 0xc0
10001e20:	0599      	lsls	r1, r3, #22
10001e22:	f001 fb3d 	bl	100034a0 <__aeabi_fmul>

    /* Decrement the loop counter */
    blkCnt--;
10001e26:	2102      	movs	r1, #2

  while(blkCnt > 0u)
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001e28:	6060      	str	r0, [r4, #4]

    /* Decrement the loop counter */
    blkCnt--;
10001e2a:	4248      	negs	r0, r1
10001e2c:	4480      	add	r8, r0
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001e2e:	4642      	mov	r2, r8
10001e30:	1d3d      	adds	r5, r7, #4
  {
    /* C = (float32_t) A / 2147483648 */
    /* convert from q31 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);
10001e32:	1d34      	adds	r4, r6, #4
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10001e34:	2a00      	cmp	r2, #0
10001e36:	d1e5      	bne.n	10001e04 <arm_q31_to_float+0x4c>
    *pDst++ = ((float32_t) * pIn++ / 2147483648.0f);

    /* Decrement the loop counter */
    blkCnt--;
  }
}
10001e38:	bc0c      	pop	{r2, r3}
10001e3a:	4690      	mov	r8, r2
10001e3c:	4699      	mov	r9, r3
10001e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10001e40 <arm_biquad_cas_df1_32x64_init_q31>:
  arm_biquad_cas_df1_32x64_ins_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q63_t * pState,
  uint8_t postShift)
{
10001e40:	b538      	push	{r3, r4, r5, lr}
10001e42:	1c1d      	adds	r5, r3, #0
10001e44:	ab04      	add	r3, sp, #16
10001e46:	1c04      	adds	r4, r0, #0
10001e48:	7818      	ldrb	r0, [r3, #0]
  /* Assign filter stages */
  S->numStages = numStages;
10001e4a:	7021      	strb	r1, [r4, #0]

  /* Assign postShift to be applied to the output */
  S->postShift = postShift;
10001e4c:	7320      	strb	r0, [r4, #12]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
10001e4e:	60a2      	str	r2, [r4, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4u * (uint32_t) numStages) * sizeof(q63_t));
10001e50:	1c28      	adds	r0, r5, #0
10001e52:	014a      	lsls	r2, r1, #5
10001e54:	2100      	movs	r1, #0
10001e56:	f003 fe6d 	bl	10005b34 <memset>

  /* Assign state pointer */
  S->pState = pState;
10001e5a:	6065      	str	r5, [r4, #4]
}
10001e5c:	bd38      	pop	{r3, r4, r5, pc}
10001e5e:	46c0      	nop			; (mov r8, r8)

10001e60 <arm_biquad_cas_df1_32x64_q31>:
void arm_biquad_cas_df1_32x64_q31(
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize)
{
10001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e62:	465f      	mov	r7, fp
10001e64:	4656      	mov	r6, sl
10001e66:	4644      	mov	r4, r8
10001e68:	464d      	mov	r5, r9
10001e6a:	b4f0      	push	{r4, r5, r6, r7}
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
  q31_t *pOut = pDst;                            /*  output pointer initialization */
  q63_t *pState = S->pState;                     /*  state pointer initialization  */
  q31_t *pCoeffs = S->pCoeffs;                   /*  coeff pointer initialization  */
10001e6c:	6884      	ldr	r4, [r0, #8]
void arm_biquad_cas_df1_32x64_q31(
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize)
{
10001e6e:	b0a3      	sub	sp, #140	; 0x8c
10001e70:	921f      	str	r2, [sp, #124]	; 0x7c
10001e72:	9320      	str	r3, [sp, #128]	; 0x80
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
  q31_t *pOut = pDst;                            /*  output pointer initialization */
  q63_t *pState = S->pState;                     /*  state pointer initialization  */
  q31_t *pCoeffs = S->pCoeffs;                   /*  coeff pointer initialization  */
10001e74:	941c      	str	r4, [sp, #112]	; 0x70
  q63_t acc;                                     /*  accumulator                   */
  q31_t Xn1, Xn2;                                /*  Input Filter state variables        */
  q63_t Yn1, Yn2;                                /*  Output Filter state variables        */
  q31_t b0, b1, b2, a1, a2;                      /*  Filter coefficients           */
  q31_t Xn;                                      /*  temporary input               */
  int32_t shift = (int32_t) S->postShift + 1;    /*  Shift to be applied to the output */
10001e76:	7b03      	ldrb	r3, [r0, #12]
  q31_t * pDst,
  uint32_t blockSize)
{
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
  q31_t *pOut = pDst;                            /*  output pointer initialization */
  q63_t *pState = S->pState;                     /*  state pointer initialization  */
10001e78:	6842      	ldr	r2, [r0, #4]
  q63_t acc;                                     /*  accumulator                   */
  q31_t Xn1, Xn2;                                /*  Input Filter state variables        */
  q63_t Yn1, Yn2;                                /*  Output Filter state variables        */
  q31_t b0, b1, b2, a1, a2;                      /*  Filter coefficients           */
  q31_t Xn;                                      /*  temporary input               */
  int32_t shift = (int32_t) S->postShift + 1;    /*  Shift to be applied to the output */
10001e7a:	1c5d      	adds	r5, r3, #1
10001e7c:	9509      	str	r5, [sp, #36]	; 0x24
  uint32_t sample, stage = S->numStages;         /*  loop counters                     */
10001e7e:	7800      	ldrb	r0, [r0, #0]
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize)
{
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
10001e80:	468b      	mov	fp, r1
  q31_t Xn;                                      /*  temporary input               */
  int32_t shift = (int32_t) S->postShift + 1;    /*  Shift to be applied to the output */
  uint32_t sample, stage = S->numStages;         /*  loop counters                     */
  q31_t acc_l, acc_h;                            /*  temporary output               */
  uint32_t uShift = ((uint32_t) S->postShift + 1u);
  uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
10001e82:	261f      	movs	r6, #31
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001e84:	2120      	movs	r1, #32
  q31_t * pDst,
  uint32_t blockSize)
{
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
  q31_t *pOut = pDst;                            /*  output pointer initialization */
  q63_t *pState = S->pState;                     /*  state pointer initialization  */
10001e86:	4692      	mov	sl, r2
  q31_t Xn;                                      /*  temporary input               */
  int32_t shift = (int32_t) S->postShift + 1;    /*  Shift to be applied to the output */
  uint32_t sample, stage = S->numStages;         /*  loop counters                     */
  q31_t acc_l, acc_h;                            /*  temporary output               */
  uint32_t uShift = ((uint32_t) S->postShift + 1u);
  uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
10001e88:	1af7      	subs	r7, r6, r3
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001e8a:	1b4a      	subs	r2, r1, r5
10001e8c:	3b1f      	subs	r3, #31
10001e8e:	46d8      	mov	r8, fp
  q31_t Xn1, Xn2;                                /*  Input Filter state variables        */
  q63_t Yn1, Yn2;                                /*  Output Filter state variables        */
  q31_t b0, b1, b2, a1, a2;                      /*  Filter coefficients           */
  q31_t Xn;                                      /*  temporary input               */
  int32_t shift = (int32_t) S->postShift + 1;    /*  Shift to be applied to the output */
  uint32_t sample, stage = S->numStages;         /*  loop counters                     */
10001e90:	901d      	str	r0, [sp, #116]	; 0x74
  q31_t acc_l, acc_h;                            /*  temporary output               */
  uint32_t uShift = ((uint32_t) S->postShift + 1u);
  uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
10001e92:	971b      	str	r7, [sp, #108]	; 0x6c
10001e94:	9312      	str	r3, [sp, #72]	; 0x48
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001e96:	921e      	str	r2, [sp, #120]	; 0x78
10001e98:	46d3      	mov	fp, sl
  /* Run the below code for Cortex-M0 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
10001e9a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    b1 = *pCoeffs++;
10001e9c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  /* Run the below code for Cortex-M0 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
10001e9e:	6823      	ldr	r3, [r4, #0]
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
10001ea0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    a1 = *pCoeffs++;
10001ea2:	991c      	ldr	r1, [sp, #112]	; 0x70
    a2 = *pCoeffs++;
10001ea4:	9c1c      	ldr	r4, [sp, #112]	; 0x70

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
10001ea6:	6868      	ldr	r0, [r5, #4]
 * Two related functions are provided in the CMSIS DSP library.    
 * <code>arm_biquad_cascade_df1_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q63 accumulator.    
 * <code>arm_biquad_cascade_df1_fast_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q31 accumulator.    
 */

void arm_biquad_cas_df1_32x64_q31(
10001ea8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
10001eaa:	68b7      	ldr	r7, [r6, #8]
    a1 = *pCoeffs++;
10001eac:	68ca      	ldr	r2, [r1, #12]
  /* Run the below code for Cortex-M0 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
10001eae:	9313      	str	r3, [sp, #76]	; 0x4c
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;
10001eb0:	6923      	ldr	r3, [r4, #16]
 * Two related functions are provided in the CMSIS DSP library.    
 * <code>arm_biquad_cascade_df1_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q63 accumulator.    
 * <code>arm_biquad_cascade_df1_fast_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q31 accumulator.    
 */

void arm_biquad_cas_df1_32x64_q31(
10001eb2:	3514      	adds	r5, #20

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
10001eb4:	9014      	str	r0, [sp, #80]	; 0x50
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
10001eb6:	4658      	mov	r0, fp
  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
10001eb8:	9715      	str	r7, [sp, #84]	; 0x54
    a1 = *pCoeffs++;
10001eba:	920b      	str	r2, [sp, #44]	; 0x2c
    a2 = *pCoeffs++;
10001ebc:	930c      	str	r3, [sp, #48]	; 0x30
 * Two related functions are provided in the CMSIS DSP library.    
 * <code>arm_biquad_cascade_df1_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q63 accumulator.    
 * <code>arm_biquad_cascade_df1_fast_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q31 accumulator.    
 */

void arm_biquad_cas_df1_32x64_q31(
10001ebe:	951c      	str	r5, [sp, #112]	; 0x70
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
    Xn2 = pState[1];
10001ec0:	6887      	ldr	r7, [r0, #8]
    Yn1 = pState[2];
10001ec2:	6901      	ldr	r1, [r0, #16]
10001ec4:	6942      	ldr	r2, [r0, #20]
    Yn2 = pState[3];
10001ec6:	6984      	ldr	r4, [r0, #24]
10001ec8:	69c3      	ldr	r3, [r0, #28]
     * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]            
     */

    sample = blockSize;

    while(sample > 0u)
10001eca:	9d20      	ldr	r5, [sp, #128]	; 0x80
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
10001ecc:	6806      	ldr	r6, [r0, #0]
    Xn2 = pState[1];
10001ece:	9708      	str	r7, [sp, #32]
    Yn1 = pState[2];
10001ed0:	9103      	str	r1, [sp, #12]
10001ed2:	4694      	mov	ip, r2
    Yn2 = pState[3];
10001ed4:	940a      	str	r4, [sp, #40]	; 0x28
10001ed6:	9301      	str	r3, [sp, #4]
     * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]            
     */

    sample = blockSize;

    while(sample > 0u)
10001ed8:	2d00      	cmp	r5, #0
10001eda:	d100      	bne.n	10001ede <arm_biquad_cas_df1_32x64_q31+0x7e>
10001edc:	e0b4      	b.n	10002048 <arm_biquad_cas_df1_32x64_q31+0x1e8>
10001ede:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10001ee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
10001ee2:	17d4      	asrs	r4, r2, #31
10001ee4:	9815      	ldr	r0, [sp, #84]	; 0x54
10001ee6:	17dd      	asrs	r5, r3, #31
10001ee8:	9418      	str	r4, [sp, #96]	; 0x60
10001eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
10001eec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10001eee:	17c7      	asrs	r7, r0, #31
10001ef0:	9519      	str	r5, [sp, #100]	; 0x64
10001ef2:	981f      	ldr	r0, [sp, #124]	; 0x7c
10001ef4:	9d20      	ldr	r5, [sp, #128]	; 0x80
10001ef6:	971a      	str	r7, [sp, #104]	; 0x68
10001ef8:	17ca      	asrs	r2, r1, #31
10001efa:	465f      	mov	r7, fp
10001efc:	17e3      	asrs	r3, r4, #31
10001efe:	9721      	str	r7, [sp, #132]	; 0x84
10001f00:	46c3      	mov	fp, r8
10001f02:	920e      	str	r2, [sp, #56]	; 0x38
10001f04:	46b0      	mov	r8, r6
10001f06:	930f      	str	r3, [sp, #60]	; 0x3c
10001f08:	9502      	str	r5, [sp, #8]
10001f0a:	9f08      	ldr	r7, [sp, #32]
10001f0c:	4666      	mov	r6, ip
10001f0e:	4682      	mov	sl, r0
10001f10:	e018      	b.n	10001f44 <arm_biquad_cas_df1_32x64_q31+0xe4>
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001f12:	40aa      	lsls	r2, r5
10001f14:	9d09      	ldr	r5, [sp, #36]	; 0x24

      /* Calc upper part of acc */
      acc_h = (acc >> 32) & 0xffffffff;

      /* Apply shift for lower part of acc and upper part of acc */
      acc_h = (uint32_t) acc_l >> lShift | acc_h << uShift;
10001f16:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001f18:	1c03      	adds	r3, r0, #0

      /* Calc upper part of acc */
      acc_h = (acc >> 32) & 0xffffffff;

      /* Apply shift for lower part of acc and upper part of acc */
      acc_h = (uint32_t) acc_l >> lShift | acc_h << uShift;
10001f1a:	40a9      	lsls	r1, r5
10001f1c:	40f8      	lsrs	r0, r7
10001f1e:	4301      	orrs	r1, r0

      /* Store the output in the destination buffer in 1.31 format. */
      //*pOut++ = (q31_t) (acc >> (32 - shift)); 

      /* decrement the loop counter */
      sample--;
10001f20:	9c02      	ldr	r4, [sp, #8]

      /* Apply shift for lower part of acc and upper part of acc */
      acc_h = (uint32_t) acc_l >> lShift | acc_h << uShift;

      /* Store the output in the destination buffer in 1.31 format. */
      *pOut++ = acc_h;
10001f22:	4650      	mov	r0, sl
10001f24:	3004      	adds	r0, #4
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001f26:	40ab      	lsls	r3, r5
10001f28:	9d03      	ldr	r5, [sp, #12]

      /* Apply shift for lower part of acc and upper part of acc */
      acc_h = (uint32_t) acc_l >> lShift | acc_h << uShift;

      /* Store the output in the destination buffer in 1.31 format. */
      *pOut++ = acc_h;
10001f2a:	4682      	mov	sl, r0

      /* Store the output in the destination buffer in 1.31 format. */
      //*pOut++ = (q31_t) (acc >> (32 - shift)); 

      /* decrement the loop counter */
      sample--;
10001f2c:	3c01      	subs	r4, #1

      /* Apply shift for lower part of acc and upper part of acc */
      acc_h = (uint32_t) acc_l >> lShift | acc_h << uShift;

      /* Store the output in the destination buffer in 1.31 format. */
      *pOut++ = acc_h;
10001f2e:	3804      	subs	r0, #4
10001f30:	c002      	stmia	r0!, {r1}

      /* Store the output in the destination buffer in 1.31 format. */
      //*pOut++ = (q31_t) (acc >> (32 - shift)); 

      /* decrement the loop counter */
      sample--;
10001f32:	9402      	str	r4, [sp, #8]
10001f34:	4647      	mov	r7, r8
10001f36:	950a      	str	r5, [sp, #40]	; 0x28
10001f38:	9601      	str	r6, [sp, #4]
     * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]            
     */

    sample = blockSize;

    while(sample > 0u)
10001f3a:	2c00      	cmp	r4, #0
10001f3c:	d062      	beq.n	10002004 <arm_biquad_cas_df1_32x64_q31+0x1a4>
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001f3e:	9303      	str	r3, [sp, #12]
10001f40:	1c16      	adds	r6, r2, #0
    sample = blockSize;

    while(sample > 0u)
    {
      /* Read the input */
      Xn = *pIn++;
10001f42:	46c8      	mov	r8, r9
10001f44:	465a      	mov	r2, fp
10001f46:	3204      	adds	r2, #4
10001f48:	4693      	mov	fp, r2
10001f4a:	3a04      	subs	r2, #4
10001f4c:	ca08      	ldmia	r2!, {r3}

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) Xn *b0;
10001f4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10001f50:	17d9      	asrs	r1, r3, #31
10001f52:	9316      	str	r3, [sp, #88]	; 0x58
10001f54:	1c18      	adds	r0, r3, #0
    sample = blockSize;

    while(sample > 0u)
    {
      /* Read the input */
      Xn = *pIn++;
10001f56:	4699      	mov	r9, r3

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) Xn *b0;
10001f58:	9b18      	ldr	r3, [sp, #96]	; 0x60
10001f5a:	910d      	str	r1, [sp, #52]	; 0x34
10001f5c:	f000 fe78 	bl	10002c50 <__aeabi_lmul>
10001f60:	1c04      	adds	r4, r0, #0
      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) Xn1 *b1;
10001f62:	4640      	mov	r0, r8
10001f64:	17c3      	asrs	r3, r0, #31
      /* Read the input */
      Xn = *pIn++;

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) Xn *b0;
10001f66:	1c0d      	adds	r5, r1, #0
      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) Xn1 *b1;
10001f68:	9308      	str	r3, [sp, #32]
10001f6a:	1c19      	adds	r1, r3, #0
10001f6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
10001f6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
10001f70:	9017      	str	r0, [sp, #92]	; 0x5c
10001f72:	f000 fe6d 	bl	10002c50 <__aeabi_lmul>
      /* acc +=  b[2] * x[n-2] */
      acc += (q63_t) Xn2 *b2;
10001f76:	9a15      	ldr	r2, [sp, #84]	; 0x54

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) Xn *b0;
      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) Xn1 *b1;
10001f78:	1824      	adds	r4, r4, r0
10001f7a:	414d      	adcs	r5, r1
      /* acc +=  b[2] * x[n-2] */
      acc += (q63_t) Xn2 *b2;
10001f7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10001f7e:	17f9      	asrs	r1, r7, #31
10001f80:	1c38      	adds	r0, r7, #0
10001f82:	f000 fe65 	bl	10002c50 <__aeabi_lmul>
10001f86:	1c02      	adds	r2, r0, #0
10001f88:	1c0b      	adds	r3, r1, #0
10001f8a:	1912      	adds	r2, r2, r4
10001f8c:	416b      	adcs	r3, r5
10001f8e:	9210      	str	r2, [sp, #64]	; 0x40
10001f90:	9311      	str	r3, [sp, #68]	; 0x44

  static __INLINE q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
10001f92:	9803      	ldr	r0, [sp, #12]
10001f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10001f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001f98:	2100      	movs	r1, #0
10001f9a:	f000 fe59 	bl	10002c50 <__aeabi_lmul>
            (((q63_t) (x >> 32) * y)));
10001f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

  static __INLINE q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
10001fa0:	9104      	str	r1, [sp, #16]
10001fa2:	17cf      	asrs	r7, r1, #31
            (((q63_t) (x >> 32) * y)));
10001fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001fa6:	17f1      	asrs	r1, r6, #31
10001fa8:	1c30      	adds	r0, r6, #0

  static __INLINE q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
10001faa:	9705      	str	r7, [sp, #20]
            (((q63_t) (x >> 32) * y)));
10001fac:	f000 fe50 	bl	10002c50 <__aeabi_lmul>

  static __INLINE q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
10001fb0:	9c04      	ldr	r4, [sp, #16]
10001fb2:	9d05      	ldr	r5, [sp, #20]
10001fb4:	1824      	adds	r4, r4, r0
10001fb6:	414d      	adcs	r5, r1
10001fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      /* acc +=  a1 * y[n-1] */
      acc += mult32x64(Yn1, a1);
10001fba:	9910      	ldr	r1, [sp, #64]	; 0x40
10001fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
10001fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
10001fc0:	1864      	adds	r4, r4, r1
10001fc2:	4155      	adcs	r5, r2
10001fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10001fc6:	2100      	movs	r1, #0
10001fc8:	f000 fe42 	bl	10002c50 <__aeabi_lmul>
            (((q63_t) (x >> 32) * y)));
10001fcc:	9a01      	ldr	r2, [sp, #4]

  static __INLINE q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
10001fce:	17c8      	asrs	r0, r1, #31
10001fd0:	9106      	str	r1, [sp, #24]
10001fd2:	9007      	str	r0, [sp, #28]
            (((q63_t) (x >> 32) * y)));
10001fd4:	17d1      	asrs	r1, r2, #31
10001fd6:	1c10      	adds	r0, r2, #0
10001fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10001fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10001fdc:	f000 fe38 	bl	10002c50 <__aeabi_lmul>

  static __INLINE q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
10001fe0:	9a06      	ldr	r2, [sp, #24]
10001fe2:	9b07      	ldr	r3, [sp, #28]
10001fe4:	1880      	adds	r0, r0, r2
10001fe6:	4159      	adcs	r1, r3
      /* acc +=  a2 * y[n-2] */
      acc += mult32x64(Yn2, a2);
10001fe8:	1900      	adds	r0, r0, r4
10001fea:	4169      	adcs	r1, r5
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;

      /* The result is converted to 1.63, Yn1 variable is reused  */
      Yn1 = acc << shift;
10001fec:	9d12      	ldr	r5, [sp, #72]	; 0x48
10001fee:	1c02      	adds	r2, r0, #0
10001ff0:	2d00      	cmp	r5, #0
10001ff2:	da8e      	bge.n	10001f12 <arm_biquad_cas_df1_32x64_q31+0xb2>
10001ff4:	9c09      	ldr	r4, [sp, #36]	; 0x24
10001ff6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
10001ff8:	1c0f      	adds	r7, r1, #0
10001ffa:	40da      	lsrs	r2, r3
10001ffc:	40a7      	lsls	r7, r4
10001ffe:	433a      	orrs	r2, r7
10002000:	1c25      	adds	r5, r4, #0
10002002:	e788      	b.n	10001f16 <arm_biquad_cas_df1_32x64_q31+0xb6>
10002004:	9e21      	ldr	r6, [sp, #132]	; 0x84
10002006:	9916      	ldr	r1, [sp, #88]	; 0x58
10002008:	46b3      	mov	fp, r6

    /* Reset to destination buffer working pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = (q63_t) Xn1;
1000200a:	4658      	mov	r0, fp
    *pState++ = (q63_t) Xn2;
    *pState++ = Yn1;
1000200c:	6103      	str	r3, [r0, #16]
1000200e:	6142      	str	r2, [r0, #20]

    /* Reset to destination buffer working pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = (q63_t) Xn1;
10002010:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    *pState++ = (q63_t) Xn2;
10002012:	9f17      	ldr	r7, [sp, #92]	; 0x5c
10002014:	9d08      	ldr	r5, [sp, #32]
    *pState++ = Yn1;
    *pState++ = Yn2;
10002016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10002018:	9b01      	ldr	r3, [sp, #4]

    /* Reset to destination buffer working pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = (q63_t) Xn1;
1000201a:	6001      	str	r1, [r0, #0]
    *pState++ = (q63_t) Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
1000201c:	991d      	ldr	r1, [sp, #116]	; 0x74

    /* Reset to destination buffer working pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = (q63_t) Xn1;
1000201e:	6044      	str	r4, [r0, #4]
    *pState++ = (q63_t) Xn2;
10002020:	6087      	str	r7, [r0, #8]
10002022:	60c5      	str	r5, [r0, #12]
    *pState++ = Yn1;
    *pState++ = Yn2;
10002024:	6182      	str	r2, [r0, #24]
10002026:	61c3      	str	r3, [r0, #28]
      /* decrement the loop counter */
      sample--;
    }

    /*  The first stage output is given as input to the second stage. */
    pIn = pDst;
10002028:	981f      	ldr	r0, [sp, #124]	; 0x7c
 * Two related functions are provided in the CMSIS DSP library.    
 * <code>arm_biquad_cascade_df1_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q63 accumulator.    
 * <code>arm_biquad_cascade_df1_fast_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q31 accumulator.    
 */

void arm_biquad_cas_df1_32x64_q31(
1000202a:	2620      	movs	r6, #32
    *pState++ = (q63_t) Xn1;
    *pState++ = (q63_t) Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
1000202c:	3901      	subs	r1, #1
 * Two related functions are provided in the CMSIS DSP library.    
 * <code>arm_biquad_cascade_df1_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q63 accumulator.    
 * <code>arm_biquad_cascade_df1_fast_q31()</code> implements a Biquad cascade with 32-bit coefficients and state variables with a Q31 accumulator.    
 */

void arm_biquad_cas_df1_32x64_q31(
1000202e:	44b3      	add	fp, r6
    *pState++ = (q63_t) Xn1;
    *pState++ = (q63_t) Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
10002030:	911d      	str	r1, [sp, #116]	; 0x74
      /* decrement the loop counter */
      sample--;
    }

    /*  The first stage output is given as input to the second stage. */
    pIn = pDst;
10002032:	4680      	mov	r8, r0
    *pState++ = (q63_t) Xn1;
    *pState++ = (q63_t) Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
10002034:	2900      	cmp	r1, #0
10002036:	d000      	beq.n	1000203a <arm_biquad_cas_df1_32x64_q31+0x1da>
10002038:	e72f      	b.n	10001e9a <arm_biquad_cas_df1_32x64_q31+0x3a>

#endif /*    #ifndef ARM_MATH_CM0_FAMILY     */
}
1000203a:	b023      	add	sp, #140	; 0x8c
1000203c:	bc3c      	pop	{r2, r3, r4, r5}
1000203e:	4690      	mov	r8, r2
10002040:	4699      	mov	r9, r3
10002042:	46a2      	mov	sl, r4
10002044:	46ab      	mov	fp, r5
10002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002048:	9f08      	ldr	r7, [sp, #32]
1000204a:	17f0      	asrs	r0, r6, #31
1000204c:	17f9      	asrs	r1, r7, #31
1000204e:	9108      	str	r1, [sp, #32]
10002050:	9616      	str	r6, [sp, #88]	; 0x58
10002052:	900d      	str	r0, [sp, #52]	; 0x34
10002054:	9717      	str	r7, [sp, #92]	; 0x5c
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
    Xn2 = pState[1];
    Yn1 = pState[2];
10002056:	9b03      	ldr	r3, [sp, #12]
10002058:	1c31      	adds	r1, r6, #0
1000205a:	e7d6      	b.n	1000200a <arm_biquad_cas_df1_32x64_q31+0x1aa>

1000205c <arm_biquad_cascade_df1_init_q31>:
  arm_biquad_casd_df1_inst_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q31_t * pState,
  int8_t postShift)
{
1000205c:	b538      	push	{r3, r4, r5, lr}
1000205e:	1c1d      	adds	r5, r3, #0
10002060:	ab04      	add	r3, sp, #16
10002062:	1c04      	adds	r4, r0, #0
10002064:	7818      	ldrb	r0, [r3, #0]
  /* Assign filter stages */
  S->numStages = numStages;
10002066:	6021      	str	r1, [r4, #0]
  arm_biquad_casd_df1_inst_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q31_t * pState,
  int8_t postShift)
{
10002068:	b243      	sxtb	r3, r0

  /* Assign postShift to be applied to the output */
  S->postShift = postShift;

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
1000206a:	60a2      	str	r2, [r4, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4u * (uint32_t) numStages) * sizeof(q31_t));
1000206c:	1c28      	adds	r0, r5, #0
1000206e:	010a      	lsls	r2, r1, #4
{
  /* Assign filter stages */
  S->numStages = numStages;

  /* Assign postShift to be applied to the output */
  S->postShift = postShift;
10002070:	7323      	strb	r3, [r4, #12]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4u * (uint32_t) numStages) * sizeof(q31_t));
10002072:	2100      	movs	r1, #0
10002074:	f003 fd5e 	bl	10005b34 <memset>

  /* Assign state pointer */
  S->pState = pState;
10002078:	6065      	str	r5, [r4, #4]
}
1000207a:	bd38      	pop	{r3, r4, r5, pc}

1000207c <arm_biquad_cascade_df1_q31>:
void arm_biquad_cascade_df1_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize)
{
1000207c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000207e:	465f      	mov	r7, fp
10002080:	4644      	mov	r4, r8
10002082:	4656      	mov	r6, sl
10002084:	464d      	mov	r5, r9
10002086:	b4f0      	push	{r4, r5, r6, r7}
10002088:	b095      	sub	sp, #84	; 0x54
1000208a:	9212      	str	r2, [sp, #72]	; 0x48
1000208c:	9313      	str	r3, [sp, #76]	; 0x4c
  q63_t acc;                                     /*  accumulator                   */
  uint32_t uShift = ((uint32_t) S->postShift + 1u);
1000208e:	7b03      	ldrb	r3, [r0, #12]
  uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
10002090:	221f      	movs	r2, #31
10002092:	1ad4      	subs	r4, r2, r3
10002094:	9410      	str	r4, [sp, #64]	; 0x40
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
10002096:	468b      	mov	fp, r1
      acc += (q63_t) a1 *Yn1;
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;

      /* The result is converted to 1.31  */
      acc = acc >> lShift;
10002098:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000209a:	9910      	ldr	r1, [sp, #64]	; 0x40
  q63_t acc;                                     /*  accumulator                   */
  uint32_t uShift = ((uint32_t) S->postShift + 1u);
  uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
  q31_t *pOut = pDst;                            /*  output pointer initialization */
  q31_t *pState = S->pState;                     /*  pState pointer initialization */
1000209c:	6845      	ldr	r5, [r0, #4]
  q31_t *pCoeffs = S->pCoeffs;                   /*  coeff pointer initialization  */
1000209e:	6886      	ldr	r6, [r0, #8]
      acc += (q63_t) a1 *Yn1;
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;

      /* The result is converted to 1.31  */
      acc = acc >> lShift;
100020a0:	2720      	movs	r7, #32
  q31_t *pState = S->pState;                     /*  pState pointer initialization */
  q31_t *pCoeffs = S->pCoeffs;                   /*  coeff pointer initialization  */
  q31_t Xn1, Xn2, Yn1, Yn2;                      /*  Filter state variables        */
  q31_t b0, b1, b2, a1, a2;                      /*  Filter coefficients           */
  q31_t Xn;                                      /*  temporary input               */
  uint32_t sample, stage = S->numStages;         /*  loop counters                     */
100020a2:	6800      	ldr	r0, [r0, #0]
100020a4:	3920      	subs	r1, #32
      acc += (q63_t) a1 *Yn1;
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;

      /* The result is converted to 1.31  */
      acc = acc >> lShift;
100020a6:	1afa      	subs	r2, r7, r3
  q63_t acc;                                     /*  accumulator                   */
  uint32_t uShift = ((uint32_t) S->postShift + 1u);
  uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
  q31_t *pIn = pSrc;                             /*  input pointer initialization  */
  q31_t *pOut = pDst;                            /*  output pointer initialization */
  q31_t *pState = S->pState;                     /*  pState pointer initialization */
100020a8:	950d      	str	r5, [sp, #52]	; 0x34
  q31_t *pCoeffs = S->pCoeffs;                   /*  coeff pointer initialization  */
100020aa:	960e      	str	r6, [sp, #56]	; 0x38
  q31_t Xn1, Xn2, Yn1, Yn2;                      /*  Filter state variables        */
  q31_t b0, b1, b2, a1, a2;                      /*  Filter coefficients           */
  q31_t Xn;                                      /*  temporary input               */
  uint32_t sample, stage = S->numStages;         /*  loop counters                     */
100020ac:	900f      	str	r0, [sp, #60]	; 0x3c
100020ae:	9102      	str	r1, [sp, #8]
      acc += (q63_t) a1 *Yn1;
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;

      /* The result is converted to 1.31  */
      acc = acc >> lShift;
100020b0:	9211      	str	r2, [sp, #68]	; 0x44
100020b2:	46d8      	mov	r8, fp

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
100020b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  /* Run the below code for Cortex-M0 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
100020b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    b1 = *pCoeffs++;
100020b8:	6870      	ldr	r0, [r6, #4]
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
100020ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  /* Run the below code for Cortex-M0 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
100020bc:	6825      	ldr	r5, [r4, #0]
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
100020be:	990e      	ldr	r1, [sp, #56]	; 0x38
    a1 = *pCoeffs++;
100020c0:	68da      	ldr	r2, [r3, #12]
    a2 = *pCoeffs++;
100020c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
100020c4:	9004      	str	r0, [sp, #16]
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
100020c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 *    
 * \par    
 * Refer to the function <code>arm_biquad_cascade_df1_fast_q31()</code> for a faster but less precise implementation of this filter for Cortex-M3 and Cortex-M4.    
 */

void arm_biquad_cascade_df1_q31(
100020c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
100020ca:	688f      	ldr	r7, [r1, #8]
  /* Run the below code for Cortex-M0 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
100020cc:	9503      	str	r5, [sp, #12]
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
100020ce:	9206      	str	r2, [sp, #24]
    a2 = *pCoeffs++;
100020d0:	6925      	ldr	r5, [r4, #16]

    /* Reading the state values */
    Xn1 = pState[0];
100020d2:	6801      	ldr	r1, [r0, #0]
    Xn2 = pState[1];
    Yn1 = pState[2];
100020d4:	6883      	ldr	r3, [r0, #8]
    Yn2 = pState[3];
100020d6:	68c2      	ldr	r2, [r0, #12]
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]         
     */

    sample = blockSize;

    while(sample > 0u)
100020d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 *    
 * \par    
 * Refer to the function <code>arm_biquad_cascade_df1_fast_q31()</code> for a faster but less precise implementation of this filter for Cortex-M3 and Cortex-M4.    
 */

void arm_biquad_cascade_df1_q31(
100020da:	3614      	adds	r6, #20
  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
    b1 = *pCoeffs++;
    b2 = *pCoeffs++;
100020dc:	9705      	str	r7, [sp, #20]
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;
100020de:	9507      	str	r5, [sp, #28]
 *    
 * \par    
 * Refer to the function <code>arm_biquad_cascade_df1_fast_q31()</code> for a faster but less precise implementation of this filter for Cortex-M3 and Cortex-M4.    
 */

void arm_biquad_cascade_df1_q31(
100020e0:	960e      	str	r6, [sp, #56]	; 0x38
    b2 = *pCoeffs++;
    a1 = *pCoeffs++;
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
100020e2:	468a      	mov	sl, r1
    Xn2 = pState[1];
100020e4:	6847      	ldr	r7, [r0, #4]
    Yn1 = pState[2];
100020e6:	469c      	mov	ip, r3
    Yn2 = pState[3];
100020e8:	9200      	str	r2, [sp, #0]
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]         
     */

    sample = blockSize;

    while(sample > 0u)
100020ea:	2c00      	cmp	r4, #0
100020ec:	d100      	bne.n	100020f0 <arm_biquad_cascade_df1_q31+0x74>
100020ee:	e07b      	b.n	100021e8 <arm_biquad_cascade_df1_q31+0x16c>
100020f0:	9e03      	ldr	r6, [sp, #12]
100020f2:	9904      	ldr	r1, [sp, #16]
100020f4:	17f0      	asrs	r0, r6, #31
100020f6:	9a05      	ldr	r2, [sp, #20]
100020f8:	17cb      	asrs	r3, r1, #31
100020fa:	9008      	str	r0, [sp, #32]
100020fc:	9d06      	ldr	r5, [sp, #24]
100020fe:	9807      	ldr	r0, [sp, #28]
10002100:	17d4      	asrs	r4, r2, #31
10002102:	9309      	str	r3, [sp, #36]	; 0x24
10002104:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10002108:	17ee      	asrs	r6, r5, #31
1000210a:	940a      	str	r4, [sp, #40]	; 0x28
1000210c:	17c1      	asrs	r1, r0, #31
1000210e:	1c3c      	adds	r4, r7, #0
10002110:	960b      	str	r6, [sp, #44]	; 0x2c
10002112:	910c      	str	r1, [sp, #48]	; 0x30
10002114:	4656      	mov	r6, sl
10002116:	9301      	str	r3, [sp, #4]
10002118:	4692      	mov	sl, r2
1000211a:	46c1      	mov	r9, r8
1000211c:	4667      	mov	r7, ip
1000211e:	46a3      	mov	fp, r4
10002120:	e010      	b.n	10002144 <arm_biquad_cascade_df1_q31+0xc8>
      acc += (q63_t) a1 *Yn1;
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;

      /* The result is converted to 1.31  */
      acc = acc >> lShift;
10002122:	1c2c      	adds	r4, r5, #0
10002124:	4104      	asrs	r4, r0
      Xn1 = Xn;
      Yn2 = Yn1;
      Yn1 = (q31_t) acc;

      /* Store the output in the destination buffer. */
      *pOut++ = (q31_t) acc;
10002126:	4652      	mov	r2, sl

      /* decrement the loop counter */
      sample--;
10002128:	9801      	ldr	r0, [sp, #4]
      Xn1 = Xn;
      Yn2 = Yn1;
      Yn1 = (q31_t) acc;

      /* Store the output in the destination buffer. */
      *pOut++ = (q31_t) acc;
1000212a:	3204      	adds	r2, #4
1000212c:	4692      	mov	sl, r2

      /* decrement the loop counter */
      sample--;
1000212e:	3801      	subs	r0, #1
      Xn1 = Xn;
      Yn2 = Yn1;
      Yn1 = (q31_t) acc;

      /* Store the output in the destination buffer. */
      *pOut++ = (q31_t) acc;
10002130:	3a04      	subs	r2, #4
      /* Yn2 = Yn1    */
      /* Yn1 = acc    */
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;
      Yn1 = (q31_t) acc;
10002132:	1c25      	adds	r5, r4, #0

      /* Store the output in the destination buffer. */
      *pOut++ = (q31_t) acc;
10002134:	c210      	stmia	r2!, {r4}

      /* decrement the loop counter */
      sample--;
10002136:	9001      	str	r0, [sp, #4]
10002138:	46b3      	mov	fp, r6
1000213a:	9700      	str	r7, [sp, #0]
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]         
     */

    sample = blockSize;

    while(sample > 0u)
1000213c:	2800      	cmp	r0, #0
1000213e:	d039      	beq.n	100021b4 <arm_biquad_cascade_df1_q31+0x138>
      /* Yn2 = Yn1    */
      /* Yn1 = acc    */
      Xn2 = Xn1;
      Xn1 = Xn;
      Yn2 = Yn1;
      Yn1 = (q31_t) acc;
10002140:	1c27      	adds	r7, r4, #0
    sample = blockSize;

    while(sample > 0u)
    {
      /* Read the input */
      Xn = *pIn++;
10002142:	4646      	mov	r6, r8
10002144:	464d      	mov	r5, r9
10002146:	3504      	adds	r5, #4
10002148:	46a9      	mov	r9, r5
1000214a:	3d04      	subs	r5, #4
1000214c:	cd01      	ldmia	r5!, {r0}

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) b0 *Xn;
1000214e:	9a03      	ldr	r2, [sp, #12]
10002150:	9b08      	ldr	r3, [sp, #32]
10002152:	17c1      	asrs	r1, r0, #31
    sample = blockSize;

    while(sample > 0u)
    {
      /* Read the input */
      Xn = *pIn++;
10002154:	4680      	mov	r8, r0

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) b0 *Xn;
10002156:	f000 fd7b 	bl	10002c50 <__aeabi_lmul>

      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) b1 *Xn1;
1000215a:	9a04      	ldr	r2, [sp, #16]
      /* Read the input */
      Xn = *pIn++;

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) b0 *Xn;
1000215c:	1c04      	adds	r4, r0, #0
1000215e:	1c0d      	adds	r5, r1, #0

      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) b1 *Xn1;
10002160:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002162:	17f1      	asrs	r1, r6, #31
10002164:	1c30      	adds	r0, r6, #0
10002166:	f000 fd73 	bl	10002c50 <__aeabi_lmul>
      /* acc +=  b[2] * x[n-2] */
      acc += (q63_t) b2 *Xn2;
1000216a:	465b      	mov	r3, fp
      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      /* acc =  b0 * x[n] */
      acc = (q63_t) b0 *Xn;

      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) b1 *Xn1;
1000216c:	1824      	adds	r4, r4, r0
1000216e:	414d      	adcs	r5, r1
      /* acc +=  b[2] * x[n-2] */
      acc += (q63_t) b2 *Xn2;
10002170:	9a05      	ldr	r2, [sp, #20]
10002172:	17d9      	asrs	r1, r3, #31
10002174:	4658      	mov	r0, fp
10002176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002178:	f000 fd6a 	bl	10002c50 <__aeabi_lmul>
      /* acc +=  a1 * y[n-1] */
      acc += (q63_t) a1 *Yn1;
1000217c:	9a06      	ldr	r2, [sp, #24]
      acc = (q63_t) b0 *Xn;

      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) b1 *Xn1;
      /* acc +=  b[2] * x[n-2] */
      acc += (q63_t) b2 *Xn2;
1000217e:	1824      	adds	r4, r4, r0
10002180:	414d      	adcs	r5, r1
      /* acc +=  a1 * y[n-1] */
      acc += (q63_t) a1 *Yn1;
10002182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002184:	17f9      	asrs	r1, r7, #31
10002186:	1c38      	adds	r0, r7, #0
10002188:	f000 fd62 	bl	10002c50 <__aeabi_lmul>
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;
1000218c:	9a00      	ldr	r2, [sp, #0]
      /* acc +=  b1 * x[n-1] */
      acc += (q63_t) b1 *Xn1;
      /* acc +=  b[2] * x[n-2] */
      acc += (q63_t) b2 *Xn2;
      /* acc +=  a1 * y[n-1] */
      acc += (q63_t) a1 *Yn1;
1000218e:	1824      	adds	r4, r4, r0
10002190:	414d      	adcs	r5, r1
      /* acc +=  a2 * y[n-2] */
      acc += (q63_t) a2 *Yn2;
10002192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002194:	17d1      	asrs	r1, r2, #31
10002196:	1c10      	adds	r0, r2, #0
10002198:	9a07      	ldr	r2, [sp, #28]
1000219a:	f000 fd59 	bl	10002c50 <__aeabi_lmul>
1000219e:	1824      	adds	r4, r4, r0
100021a0:	414d      	adcs	r5, r1

      /* The result is converted to 1.31  */
      acc = acc >> lShift;
100021a2:	9802      	ldr	r0, [sp, #8]
100021a4:	2800      	cmp	r0, #0
100021a6:	dabc      	bge.n	10002122 <arm_biquad_cascade_df1_q31+0xa6>
100021a8:	9911      	ldr	r1, [sp, #68]	; 0x44
100021aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
100021ac:	408d      	lsls	r5, r1
100021ae:	40dc      	lsrs	r4, r3
100021b0:	432c      	orrs	r4, r5
100021b2:	e7b8      	b.n	10002126 <arm_biquad_cascade_df1_q31+0xaa>
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]         
     */

    sample = blockSize;

    while(sample > 0u)
100021b4:	1c37      	adds	r7, r6, #0
    {
      /* Read the input */
      Xn = *pIn++;
100021b6:	46c2      	mov	sl, r8

    /* Reset to destination pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
100021b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    *pState++ = Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
100021ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
    *pState++ = Xn2;
    *pState++ = Yn1;
100021bc:	60a5      	str	r5, [r4, #8]
    *pState++ = Yn2;
100021be:	9d00      	ldr	r5, [sp, #0]

    /* Reset to destination pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
100021c0:	4656      	mov	r6, sl
      sample--;
    }

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent stages occur in-place in the output buffer */
    pIn = pDst;
100021c2:	9b12      	ldr	r3, [sp, #72]	; 0x48

    /* Reset to destination pointer */
    pOut = pDst;

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
100021c4:	6026      	str	r6, [r4, #0]
    *pState++ = Xn2;
100021c6:	6067      	str	r7, [r4, #4]
    *pState++ = Yn1;
    *pState++ = Yn2;
100021c8:	60e5      	str	r5, [r4, #12]

  } while(--stage);
100021ca:	3901      	subs	r1, #1
 *    
 * \par    
 * Refer to the function <code>arm_biquad_cascade_df1_fast_q31()</code> for a faster but less precise implementation of this filter for Cortex-M3 and Cortex-M4.    
 */

void arm_biquad_cascade_df1_q31(
100021cc:	3410      	adds	r4, #16
100021ce:	940d      	str	r4, [sp, #52]	; 0x34
    *pState++ = Xn1;
    *pState++ = Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
100021d0:	910f      	str	r1, [sp, #60]	; 0x3c
      sample--;
    }

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent stages occur in-place in the output buffer */
    pIn = pDst;
100021d2:	4698      	mov	r8, r3
    *pState++ = Xn1;
    *pState++ = Xn2;
    *pState++ = Yn1;
    *pState++ = Yn2;

  } while(--stage);
100021d4:	2900      	cmp	r1, #0
100021d6:	d000      	beq.n	100021da <arm_biquad_cascade_df1_q31+0x15e>
100021d8:	e76c      	b.n	100020b4 <arm_biquad_cascade_df1_q31+0x38>

#endif /*  #ifndef ARM_MATH_CM0_FAMILY */
}
100021da:	b015      	add	sp, #84	; 0x54
100021dc:	bc3c      	pop	{r2, r3, r4, r5}
100021de:	4690      	mov	r8, r2
100021e0:	4699      	mov	r9, r3
100021e2:	46a2      	mov	sl, r4
100021e4:	46ab      	mov	fp, r5
100021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2 = *pCoeffs++;

    /* Reading the state values */
    Xn1 = pState[0];
    Xn2 = pState[1];
    Yn1 = pState[2];
100021e8:	1c1d      	adds	r5, r3, #0
100021ea:	e7e5      	b.n	100021b8 <arm_biquad_cascade_df1_q31+0x13c>

100021ec <arm_scale_f32>:
void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize)
{
100021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100021ee:	464e      	mov	r6, r9
100021f0:	4657      	mov	r7, sl
100021f2:	4645      	mov	r5, r8
100021f4:	b4e0      	push	{r5, r6, r7}
100021f6:	4689      	mov	r9, r1
100021f8:	1c14      	adds	r4, r2, #0
100021fa:	1e1e      	subs	r6, r3, #0
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100021fc:	d02b      	beq.n	10002256 <arm_scale_f32+0x6a>
100021fe:	1e5f      	subs	r7, r3, #1
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
10002200:	1c05      	adds	r5, r0, #0
10002202:	2301      	movs	r3, #1
10002204:	403b      	ands	r3, r7
10002206:	cd01      	ldmia	r5!, {r0}
10002208:	469a      	mov	sl, r3
1000220a:	f001 f949 	bl	100034a0 <__aeabi_fmul>

    /* Decrement the loop counter */
    blkCnt--;
1000220e:	46b8      	mov	r8, r7

  while(blkCnt > 0u)
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
10002210:	c401      	stmia	r4!, {r0}
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10002212:	2f00      	cmp	r7, #0
10002214:	d01f      	beq.n	10002256 <arm_scale_f32+0x6a>
10002216:	4650      	mov	r0, sl
10002218:	2800      	cmp	r0, #0
1000221a:	d008      	beq.n	1000222e <arm_scale_f32+0x42>
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
1000221c:	cd01      	ldmia	r5!, {r0}
1000221e:	4649      	mov	r1, r9
10002220:	f001 f93e 	bl	100034a0 <__aeabi_fmul>

    /* Decrement the loop counter */
    blkCnt--;
10002224:	3e02      	subs	r6, #2

  while(blkCnt > 0u)
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
10002226:	c401      	stmia	r4!, {r0}

    /* Decrement the loop counter */
    blkCnt--;
10002228:	46b0      	mov	r8, r6
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
1000222a:	2e00      	cmp	r6, #0
1000222c:	d013      	beq.n	10002256 <arm_scale_f32+0x6a>
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
1000222e:	1c2f      	adds	r7, r5, #0
10002230:	cf01      	ldmia	r7!, {r0}
10002232:	4649      	mov	r1, r9
10002234:	f001 f934 	bl	100034a0 <__aeabi_fmul>
10002238:	1c26      	adds	r6, r4, #0
1000223a:	c601      	stmia	r6!, {r0}
1000223c:	6868      	ldr	r0, [r5, #4]
1000223e:	4649      	mov	r1, r9
10002240:	f001 f92e 	bl	100034a0 <__aeabi_fmul>

    /* Decrement the loop counter */
    blkCnt--;
10002244:	2102      	movs	r1, #2
10002246:	424a      	negs	r2, r1
10002248:	4490      	add	r8, r2
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
1000224a:	4643      	mov	r3, r8
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
1000224c:	6060      	str	r0, [r4, #4]
1000224e:	1d3d      	adds	r5, r7, #4
10002250:	1d34      	adds	r4, r6, #4
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10002252:	2b00      	cmp	r3, #0
10002254:	d1eb      	bne.n	1000222e <arm_scale_f32+0x42>
    *pDst++ = (*pSrc++) * scale;

    /* Decrement the loop counter */
    blkCnt--;
  }
}
10002256:	bc1c      	pop	{r2, r3, r4}
10002258:	4690      	mov	r8, r2
1000225a:	4699      	mov	r9, r3
1000225c:	46a2      	mov	sl, r4
1000225e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002260 <arm_scale_q31>:
  q31_t * pSrc,
  q31_t scaleFract,
  int8_t shift,
  q31_t * pDst,
  uint32_t blockSize)
{
10002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002262:	465f      	mov	r7, fp
10002264:	4656      	mov	r6, sl
10002266:	464d      	mov	r5, r9
10002268:	4644      	mov	r4, r8
1000226a:	b4f0      	push	{r4, r5, r6, r7}
  int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
1000226c:	3201      	adds	r2, #1
  q31_t * pSrc,
  q31_t scaleFract,
  int8_t shift,
  q31_t * pDst,
  uint32_t blockSize)
{
1000226e:	1c0c      	adds	r4, r1, #0
10002270:	1c1d      	adds	r5, r3, #0
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  if(sign == 0)
10002272:	b2d6      	uxtb	r6, r2
  {
	  while(blkCnt > 0u)
10002274:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  if(sign == 0)
10002276:	0613      	lsls	r3, r2, #24
10002278:	d553      	bpl.n	10002322 <arm_scale_q31+0xc2>
		blkCnt--;
	  }
  }
  else
  {
	  while(blkCnt > 0u)
1000227a:	2f00      	cmp	r7, #0
1000227c:	d04b      	beq.n	10002316 <arm_scale_q31+0xb6>
1000227e:	46bb      	mov	fp, r7
10002280:	2701      	movs	r7, #1
10002282:	17ca      	asrs	r2, r1, #31
10002284:	427b      	negs	r3, r7
10002286:	b271      	sxtb	r1, r6
10002288:	424e      	negs	r6, r1
1000228a:	449b      	add	fp, r3
1000228c:	4692      	mov	sl, r2
1000228e:	46b1      	mov	r9, r6
10002290:	2201      	movs	r2, #1
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
10002292:	1c06      	adds	r6, r0, #0
10002294:	4659      	mov	r1, fp
10002296:	4011      	ands	r1, r2
10002298:	ce04      	ldmia	r6!, {r2}
1000229a:	4688      	mov	r8, r1
		in = ((q63_t) in * scaleFract) >> 32;
1000229c:	17d3      	asrs	r3, r2, #31
1000229e:	1c20      	adds	r0, r4, #0
100022a0:	4651      	mov	r1, sl
100022a2:	f000 fcd5 	bl	10002c50 <__aeabi_lmul>

		out = in >> -kShift;
100022a6:	4648      	mov	r0, r9
100022a8:	4101      	asrs	r1, r0
		blkCnt--;
	  }
  }
  else
  {
	  while(blkCnt > 0u)
100022aa:	465f      	mov	r7, fp
		in = *pSrc++;
		in = ((q63_t) in * scaleFract) >> 32;

		out = in >> -kShift;

		*pDst++ = out;
100022ac:	c502      	stmia	r5!, {r1}
		blkCnt--;
	  }
  }
  else
  {
	  while(blkCnt > 0u)
100022ae:	2f00      	cmp	r7, #0
100022b0:	d031      	beq.n	10002316 <arm_scale_q31+0xb6>
100022b2:	4643      	mov	r3, r8
100022b4:	2b00      	cmp	r3, #0
100022b6:	d010      	beq.n	100022da <arm_scale_q31+0x7a>
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
100022b8:	ce04      	ldmia	r6!, {r2}
		in = ((q63_t) in * scaleFract) >> 32;
100022ba:	1c20      	adds	r0, r4, #0
100022bc:	17d3      	asrs	r3, r2, #31
100022be:	4651      	mov	r1, sl
100022c0:	f000 fcc6 	bl	10002c50 <__aeabi_lmul>

		out = in >> -kShift;
100022c4:	464a      	mov	r2, r9
100022c6:	4111      	asrs	r1, r2

		*pDst++ = out;
100022c8:	c502      	stmia	r5!, {r1}

		/* Decrement the loop counter */
		blkCnt--;
100022ca:	990a      	ldr	r1, [sp, #40]	; 0x28
100022cc:	2002      	movs	r0, #2
100022ce:	468b      	mov	fp, r1
100022d0:	4247      	negs	r7, r0
100022d2:	44bb      	add	fp, r7
		blkCnt--;
	  }
  }
  else
  {
	  while(blkCnt > 0u)
100022d4:	465b      	mov	r3, fp
100022d6:	2b00      	cmp	r3, #0
100022d8:	d01d      	beq.n	10002316 <arm_scale_q31+0xb6>
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
100022da:	1c31      	adds	r1, r6, #0
100022dc:	3104      	adds	r1, #4
100022de:	3904      	subs	r1, #4
100022e0:	c904      	ldmia	r1!, {r2}
		in = ((q63_t) in * scaleFract) >> 32;
100022e2:	1c20      	adds	r0, r4, #0
100022e4:	17d3      	asrs	r3, r2, #31
100022e6:	4651      	mov	r1, sl
100022e8:	f000 fcb2 	bl	10002c50 <__aeabi_lmul>

		out = in >> -kShift;
100022ec:	464a      	mov	r2, r9
100022ee:	4111      	asrs	r1, r2

		*pDst++ = out;
100022f0:	1c2f      	adds	r7, r5, #0
100022f2:	c702      	stmia	r7!, {r1}
  {
	  while(blkCnt > 0u)
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
100022f4:	6872      	ldr	r2, [r6, #4]
		in = ((q63_t) in * scaleFract) >> 32;
100022f6:	1c20      	adds	r0, r4, #0
100022f8:	17d3      	asrs	r3, r2, #31
100022fa:	4651      	mov	r1, sl
100022fc:	f000 fca8 	bl	10002c50 <__aeabi_lmul>

		out = in >> -kShift;
10002300:	4648      	mov	r0, r9
10002302:	4101      	asrs	r1, r0

		*pDst++ = out;

		/* Decrement the loop counter */
		blkCnt--;
10002304:	2302      	movs	r3, #2
		in = *pSrc++;
		in = ((q63_t) in * scaleFract) >> 32;

		out = in >> -kShift;

		*pDst++ = out;
10002306:	6069      	str	r1, [r5, #4]

		/* Decrement the loop counter */
		blkCnt--;
10002308:	4259      	negs	r1, r3
1000230a:	448b      	add	fp, r1
		blkCnt--;
	  }
  }
  else
  {
	  while(blkCnt > 0u)
1000230c:	465a      	mov	r2, fp
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
1000230e:	3608      	adds	r6, #8
		in = ((q63_t) in * scaleFract) >> 32;

		out = in >> -kShift;

		*pDst++ = out;
10002310:	1d3d      	adds	r5, r7, #4
		blkCnt--;
	  }
  }
  else
  {
	  while(blkCnt > 0u)
10002312:	2a00      	cmp	r2, #0
10002314:	d1e1      	bne.n	100022da <arm_scale_q31+0x7a>
		/* Decrement the loop counter */
		blkCnt--;
	  }
  
  }
}
10002316:	bc3c      	pop	{r2, r3, r4, r5}
10002318:	4690      	mov	r8, r2
1000231a:	4699      	mov	r9, r3
1000231c:	46a2      	mov	sl, r4
1000231e:	46ab      	mov	fp, r5
10002320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  if(sign == 0)
  {
	  while(blkCnt > 0u)
10002322:	2f00      	cmp	r7, #0
10002324:	d0f7      	beq.n	10002316 <arm_scale_q31+0xb6>
10002326:	17cb      	asrs	r3, r1, #31
10002328:	4699      	mov	r9, r3
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
1000232a:	1c03      	adds	r3, r0, #0
1000232c:	3304      	adds	r3, #4
1000232e:	4698      	mov	r8, r3
10002330:	3b04      	subs	r3, #4
10002332:	cb01      	ldmia	r3!, {r0}
		in = ((q63_t) in * scaleFract) >> 32;

		out = in << kShift;
		
		if(in != (out >> kShift))
			out = 0x7FFFFFFF ^ (in >> 31);
10002334:	4927      	ldr	r1, [pc, #156]	; (100023d4 <arm_scale_q31+0x174>)
10002336:	3f01      	subs	r7, #1
10002338:	2201      	movs	r2, #1
1000233a:	403a      	ands	r2, r7
1000233c:	468a      	mov	sl, r1
	  while(blkCnt > 0u)
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
		in = ((q63_t) in * scaleFract) >> 32;
1000233e:	464b      	mov	r3, r9
10002340:	4693      	mov	fp, r2
10002342:	17c1      	asrs	r1, r0, #31
10002344:	1c22      	adds	r2, r4, #0
10002346:	f000 fc83 	bl	10002c50 <__aeabi_lmul>
1000234a:	b276      	sxtb	r6, r6

		out = in << kShift;
1000234c:	1c0b      	adds	r3, r1, #0
1000234e:	40b3      	lsls	r3, r6
		
		if(in != (out >> kShift))
10002350:	1c1a      	adds	r2, r3, #0
			out = 0x7FFFFFFF ^ (in >> 31);
10002352:	17c8      	asrs	r0, r1, #31
10002354:	4657      	mov	r7, sl
		in = *pSrc++;
		in = ((q63_t) in * scaleFract) >> 32;

		out = in << kShift;
		
		if(in != (out >> kShift))
10002356:	4132      	asrs	r2, r6
			out = 0x7FFFFFFF ^ (in >> 31);
10002358:	4078      	eors	r0, r7

		*pDst++ = out;
1000235a:	4291      	cmp	r1, r2
1000235c:	d000      	beq.n	10002360 <arm_scale_q31+0x100>
1000235e:	1c03      	adds	r3, r0, #0

		/* Decrement the loop counter */
		blkCnt--;
10002360:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		out = in << kShift;
		
		if(in != (out >> kShift))
			out = 0x7FFFFFFF ^ (in >> 31);

		*pDst++ = out;
10002362:	c508      	stmia	r5!, {r3}

		/* Decrement the loop counter */
		blkCnt--;
10002364:	3f01      	subs	r7, #1

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  if(sign == 0)
  {
	  while(blkCnt > 0u)
10002366:	2f00      	cmp	r7, #0
10002368:	d0d5      	beq.n	10002316 <arm_scale_q31+0xb6>
1000236a:	4659      	mov	r1, fp
1000236c:	2900      	cmp	r1, #0
1000236e:	d116      	bne.n	1000239e <arm_scale_q31+0x13e>
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
10002370:	4641      	mov	r1, r8
10002372:	3104      	adds	r1, #4
10002374:	4688      	mov	r8, r1
10002376:	3904      	subs	r1, #4
10002378:	c901      	ldmia	r1!, {r0}
		in = ((q63_t) in * scaleFract) >> 32;
1000237a:	1c22      	adds	r2, r4, #0
1000237c:	464b      	mov	r3, r9
1000237e:	17c1      	asrs	r1, r0, #31
10002380:	f000 fc66 	bl	10002c50 <__aeabi_lmul>

		out = in << kShift;
10002384:	1c0b      	adds	r3, r1, #0
10002386:	40b3      	lsls	r3, r6
		
		if(in != (out >> kShift))
10002388:	1c1a      	adds	r2, r3, #0
1000238a:	4132      	asrs	r2, r6
1000238c:	4693      	mov	fp, r2
			out = 0x7FFFFFFF ^ (in >> 31);
1000238e:	4650      	mov	r0, sl
10002390:	17ca      	asrs	r2, r1, #31
10002392:	4042      	eors	r2, r0

		*pDst++ = out;
10002394:	4559      	cmp	r1, fp
10002396:	d000      	beq.n	1000239a <arm_scale_q31+0x13a>
10002398:	1c13      	adds	r3, r2, #0
1000239a:	c508      	stmia	r5!, {r3}

		/* Decrement the loop counter */
		blkCnt--;
1000239c:	3f01      	subs	r7, #1
  {
	  while(blkCnt > 0u)
	  {
		/* C = A * scale */
		/* Scale the input and then store the result in the destination buffer. */
		in = *pSrc++;
1000239e:	4642      	mov	r2, r8
100023a0:	3204      	adds	r2, #4
100023a2:	4690      	mov	r8, r2
100023a4:	3a04      	subs	r2, #4
100023a6:	ca01      	ldmia	r2!, {r0}
		in = ((q63_t) in * scaleFract) >> 32;
100023a8:	464b      	mov	r3, r9
100023aa:	1c22      	adds	r2, r4, #0
100023ac:	17c1      	asrs	r1, r0, #31
100023ae:	f000 fc4f 	bl	10002c50 <__aeabi_lmul>

		out = in << kShift;
100023b2:	1c0b      	adds	r3, r1, #0
100023b4:	40b3      	lsls	r3, r6
		
		if(in != (out >> kShift))
100023b6:	1c18      	adds	r0, r3, #0
100023b8:	4130      	asrs	r0, r6
100023ba:	4683      	mov	fp, r0
			out = 0x7FFFFFFF ^ (in >> 31);
100023bc:	17ca      	asrs	r2, r1, #31
100023be:	4650      	mov	r0, sl
100023c0:	4042      	eors	r2, r0

		*pDst++ = out;
100023c2:	4559      	cmp	r1, fp
100023c4:	d000      	beq.n	100023c8 <arm_scale_q31+0x168>
100023c6:	1c13      	adds	r3, r2, #0

		/* Decrement the loop counter */
		blkCnt--;
100023c8:	3f01      	subs	r7, #1
		out = in << kShift;
		
		if(in != (out >> kShift))
			out = 0x7FFFFFFF ^ (in >> 31);

		*pDst++ = out;
100023ca:	c508      	stmia	r5!, {r3}

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  if(sign == 0)
  {
	  while(blkCnt > 0u)
100023cc:	2f00      	cmp	r7, #0
100023ce:	d1cf      	bne.n	10002370 <arm_scale_q31+0x110>
100023d0:	e7a1      	b.n	10002316 <arm_scale_q31+0xb6>
100023d2:	46c0      	nop			; (mov r8, r8)
100023d4:	7fffffff 	.word	0x7fffffff

100023d8 <log10>:
100023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100023da:	4647      	mov	r7, r8
100023dc:	b480      	push	{r7}
100023de:	b08a      	sub	sp, #40	; 0x28
100023e0:	1c04      	adds	r4, r0, #0
100023e2:	1c0d      	adds	r5, r1, #0
100023e4:	f000 f87c 	bl	100024e0 <__ieee754_log10>
100023e8:	4a39      	ldr	r2, [pc, #228]	; (100024d0 <log10+0xf8>)
100023ea:	2300      	movs	r3, #0
100023ec:	1c06      	adds	r6, r0, #0
100023ee:	56d0      	ldrsb	r0, [r2, r3]
100023f0:	1c0f      	adds	r7, r1, #0
100023f2:	4690      	mov	r8, r2
100023f4:	1c43      	adds	r3, r0, #1
100023f6:	d00d      	beq.n	10002414 <log10+0x3c>
100023f8:	1c20      	adds	r0, r4, #0
100023fa:	1c29      	adds	r1, r5, #0
100023fc:	f000 f910 	bl	10002620 <__fpclassifyd>
10002400:	2800      	cmp	r0, #0
10002402:	d007      	beq.n	10002414 <log10+0x3c>
10002404:	1c20      	adds	r0, r4, #0
10002406:	1c29      	adds	r1, r5, #0
10002408:	4b2c      	ldr	r3, [pc, #176]	; (100024bc <log10+0xe4>)
1000240a:	4a2b      	ldr	r2, [pc, #172]	; (100024b8 <log10+0xe0>)
1000240c:	f000 fbc8 	bl	10002ba0 <__aeabi_dcmple>
10002410:	2800      	cmp	r0, #0
10002412:	d105      	bne.n	10002420 <log10+0x48>
10002414:	1c30      	adds	r0, r6, #0
10002416:	1c39      	adds	r1, r7, #0
10002418:	b00a      	add	sp, #40	; 0x28
1000241a:	bc04      	pop	{r2}
1000241c:	4690      	mov	r8, r2
1000241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002420:	2600      	movs	r6, #0
10002422:	4647      	mov	r7, r8
10002424:	492b      	ldr	r1, [pc, #172]	; (100024d4 <log10+0xfc>)
10002426:	9608      	str	r6, [sp, #32]
10002428:	783e      	ldrb	r6, [r7, #0]
1000242a:	9101      	str	r1, [sp, #4]
1000242c:	9402      	str	r4, [sp, #8]
1000242e:	9503      	str	r5, [sp, #12]
10002430:	9404      	str	r4, [sp, #16]
10002432:	9505      	str	r5, [sp, #20]
10002434:	2e00      	cmp	r6, #0
10002436:	d129      	bne.n	1000248c <log10+0xb4>
10002438:	4821      	ldr	r0, [pc, #132]	; (100024c0 <log10+0xe8>)
1000243a:	4922      	ldr	r1, [pc, #136]	; (100024c4 <log10+0xec>)
1000243c:	9006      	str	r0, [sp, #24]
1000243e:	9107      	str	r1, [sp, #28]
10002440:	1c20      	adds	r0, r4, #0
10002442:	1c29      	adds	r1, r5, #0
10002444:	4b1d      	ldr	r3, [pc, #116]	; (100024bc <log10+0xe4>)
10002446:	4a1c      	ldr	r2, [pc, #112]	; (100024b8 <log10+0xe0>)
10002448:	f000 fb9a 	bl	10002b80 <__aeabi_dcmpeq>
1000244c:	2800      	cmp	r0, #0
1000244e:	d00e      	beq.n	1000246e <log10+0x96>
10002450:	2302      	movs	r3, #2
10002452:	9300      	str	r3, [sp, #0]
10002454:	2e02      	cmp	r6, #2
10002456:	d023      	beq.n	100024a0 <log10+0xc8>
10002458:	4668      	mov	r0, sp
1000245a:	f000 f919 	bl	10002690 <matherr>
1000245e:	2800      	cmp	r0, #0
10002460:	d01e      	beq.n	100024a0 <log10+0xc8>
10002462:	9f08      	ldr	r7, [sp, #32]
10002464:	2f00      	cmp	r7, #0
10002466:	d120      	bne.n	100024aa <log10+0xd2>
10002468:	9e06      	ldr	r6, [sp, #24]
1000246a:	9f07      	ldr	r7, [sp, #28]
1000246c:	e7d2      	b.n	10002414 <log10+0x3c>
1000246e:	2401      	movs	r4, #1
10002470:	9400      	str	r4, [sp, #0]
10002472:	2e02      	cmp	r6, #2
10002474:	d00f      	beq.n	10002496 <log10+0xbe>
10002476:	4668      	mov	r0, sp
10002478:	f000 f90a 	bl	10002690 <matherr>
1000247c:	2800      	cmp	r0, #0
1000247e:	d00a      	beq.n	10002496 <log10+0xbe>
10002480:	4815      	ldr	r0, [pc, #84]	; (100024d8 <log10+0x100>)
10002482:	f000 f909 	bl	10002698 <nan>
10002486:	9006      	str	r0, [sp, #24]
10002488:	9107      	str	r1, [sp, #28]
1000248a:	e7ea      	b.n	10002462 <log10+0x8a>
1000248c:	4a0e      	ldr	r2, [pc, #56]	; (100024c8 <log10+0xf0>)
1000248e:	4b0f      	ldr	r3, [pc, #60]	; (100024cc <log10+0xf4>)
10002490:	9206      	str	r2, [sp, #24]
10002492:	9307      	str	r3, [sp, #28]
10002494:	e7d4      	b.n	10002440 <log10+0x68>
10002496:	f003 fb47 	bl	10005b28 <__errno>
1000249a:	2521      	movs	r5, #33	; 0x21
1000249c:	6005      	str	r5, [r0, #0]
1000249e:	e7ef      	b.n	10002480 <log10+0xa8>
100024a0:	f003 fb42 	bl	10005b28 <__errno>
100024a4:	2122      	movs	r1, #34	; 0x22
100024a6:	6001      	str	r1, [r0, #0]
100024a8:	e7db      	b.n	10002462 <log10+0x8a>
100024aa:	f003 fb3d 	bl	10005b28 <__errno>
100024ae:	9e08      	ldr	r6, [sp, #32]
100024b0:	6006      	str	r6, [r0, #0]
100024b2:	e7d9      	b.n	10002468 <log10+0x90>
100024b4:	46c0      	nop			; (mov r8, r8)
100024b6:	46c0      	nop			; (mov r8, r8)
	...
100024c0:	e0000000 	.word	0xe0000000
100024c4:	c7efffff 	.word	0xc7efffff
100024c8:	00000000 	.word	0x00000000
100024cc:	fff00000 	.word	0xfff00000
100024d0:	20001a54 	.word	0x20001a54
100024d4:	10006b34 	.word	0x10006b34
100024d8:	10006b3c 	.word	0x10006b3c
100024dc:	46c0      	nop			; (mov r8, r8)
100024de:	46c0      	nop			; (mov r8, r8)

100024e0 <__ieee754_log10>:
100024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100024e2:	464f      	mov	r7, r9
100024e4:	4646      	mov	r6, r8
100024e6:	b4c0      	push	{r6, r7}
100024e8:	1c04      	adds	r4, r0, #0
100024ea:	1c02      	adds	r2, r0, #0
100024ec:	4848      	ldr	r0, [pc, #288]	; (10002610 <__ieee754_log10+0x130>)
100024ee:	b083      	sub	sp, #12
100024f0:	1c0d      	adds	r5, r1, #0
100024f2:	1e0b      	subs	r3, r1, #0
100024f4:	4283      	cmp	r3, r0
100024f6:	dc1e      	bgt.n	10002536 <__ieee754_log10+0x56>
100024f8:	004b      	lsls	r3, r1, #1
100024fa:	085e      	lsrs	r6, r3, #1
100024fc:	4332      	orrs	r2, r6
100024fe:	d05b      	beq.n	100025b8 <__ieee754_log10+0xd8>
10002500:	1c20      	adds	r0, r4, #0
10002502:	2900      	cmp	r1, #0
10002504:	db5f      	blt.n	100025c6 <__ieee754_log10+0xe6>
10002506:	4b37      	ldr	r3, [pc, #220]	; (100025e4 <__ieee754_log10+0x104>)
10002508:	4a35      	ldr	r2, [pc, #212]	; (100025e0 <__ieee754_log10+0x100>)
1000250a:	1c29      	adds	r1, r5, #0
1000250c:	f002 fb44 	bl	10004b98 <__aeabi_dmul>
10002510:	4a40      	ldr	r2, [pc, #256]	; (10002614 <__ieee754_log10+0x134>)
10002512:	2736      	movs	r7, #54	; 0x36
10002514:	1c0d      	adds	r5, r1, #0
10002516:	1c0b      	adds	r3, r1, #0
10002518:	1c04      	adds	r4, r0, #0
1000251a:	4279      	negs	r1, r7
1000251c:	4293      	cmp	r3, r2
1000251e:	dd0e      	ble.n	1000253e <__ieee754_log10+0x5e>
10002520:	1c20      	adds	r0, r4, #0
10002522:	1c29      	adds	r1, r5, #0
10002524:	1c22      	adds	r2, r4, #0
10002526:	1c2b      	adds	r3, r5, #0
10002528:	f001 fb8c 	bl	10003c44 <__aeabi_dadd>
1000252c:	b003      	add	sp, #12
1000252e:	bc0c      	pop	{r2, r3}
10002530:	4690      	mov	r8, r2
10002532:	4699      	mov	r9, r3
10002534:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002536:	4a37      	ldr	r2, [pc, #220]	; (10002614 <__ieee754_log10+0x134>)
10002538:	2100      	movs	r1, #0
1000253a:	4293      	cmp	r3, r2
1000253c:	dcf0      	bgt.n	10002520 <__ieee754_log10+0x40>
1000253e:	4836      	ldr	r0, [pc, #216]	; (10002618 <__ieee754_log10+0x138>)
10002540:	151a      	asrs	r2, r3, #20
10002542:	1812      	adds	r2, r2, r0
10002544:	1851      	adds	r1, r2, r1
10002546:	0fca      	lsrs	r2, r1, #31
10002548:	031b      	lsls	r3, r3, #12
1000254a:	0b1b      	lsrs	r3, r3, #12
1000254c:	1888      	adds	r0, r1, r2
1000254e:	4690      	mov	r8, r2
10002550:	4699      	mov	r9, r3
10002552:	f003 f949 	bl	100057e8 <__aeabi_i2d>
10002556:	4b31      	ldr	r3, [pc, #196]	; (1000261c <__ieee754_log10+0x13c>)
10002558:	1c06      	adds	r6, r0, #0
1000255a:	4640      	mov	r0, r8
1000255c:	1a1b      	subs	r3, r3, r0
1000255e:	051b      	lsls	r3, r3, #20
10002560:	464d      	mov	r5, r9
10002562:	431d      	orrs	r5, r3
10002564:	1c0f      	adds	r7, r1, #0
10002566:	1c20      	adds	r0, r4, #0
10002568:	1c29      	adds	r1, r5, #0
1000256a:	f000 f89d 	bl	100026a8 <__ieee754_log>
1000256e:	4a1e      	ldr	r2, [pc, #120]	; (100025e8 <__ieee754_log10+0x108>)
10002570:	4b1e      	ldr	r3, [pc, #120]	; (100025ec <__ieee754_log10+0x10c>)
10002572:	1c04      	adds	r4, r0, #0
10002574:	1c0d      	adds	r5, r1, #0
10002576:	1c30      	adds	r0, r6, #0
10002578:	1c39      	adds	r1, r7, #0
1000257a:	f002 fb0d 	bl	10004b98 <__aeabi_dmul>
1000257e:	4a1c      	ldr	r2, [pc, #112]	; (100025f0 <__ieee754_log10+0x110>)
10002580:	4b1c      	ldr	r3, [pc, #112]	; (100025f4 <__ieee754_log10+0x114>)
10002582:	9000      	str	r0, [sp, #0]
10002584:	9101      	str	r1, [sp, #4]
10002586:	1c30      	adds	r0, r6, #0
10002588:	1c39      	adds	r1, r7, #0
1000258a:	f002 fb05 	bl	10004b98 <__aeabi_dmul>
1000258e:	4a1a      	ldr	r2, [pc, #104]	; (100025f8 <__ieee754_log10+0x118>)
10002590:	4b1a      	ldr	r3, [pc, #104]	; (100025fc <__ieee754_log10+0x11c>)
10002592:	1c06      	adds	r6, r0, #0
10002594:	1c0f      	adds	r7, r1, #0
10002596:	1c20      	adds	r0, r4, #0
10002598:	1c29      	adds	r1, r5, #0
1000259a:	f002 fafd 	bl	10004b98 <__aeabi_dmul>
1000259e:	1c02      	adds	r2, r0, #0
100025a0:	1c0b      	adds	r3, r1, #0
100025a2:	1c30      	adds	r0, r6, #0
100025a4:	1c39      	adds	r1, r7, #0
100025a6:	f001 fb4d 	bl	10003c44 <__aeabi_dadd>
100025aa:	1c02      	adds	r2, r0, #0
100025ac:	1c0b      	adds	r3, r1, #0
100025ae:	9800      	ldr	r0, [sp, #0]
100025b0:	9901      	ldr	r1, [sp, #4]
100025b2:	f001 fb47 	bl	10003c44 <__aeabi_dadd>
100025b6:	e7b9      	b.n	1000252c <__ieee754_log10+0x4c>
100025b8:	4a11      	ldr	r2, [pc, #68]	; (10002600 <__ieee754_log10+0x120>)
100025ba:	4b12      	ldr	r3, [pc, #72]	; (10002604 <__ieee754_log10+0x124>)
100025bc:	4812      	ldr	r0, [pc, #72]	; (10002608 <__ieee754_log10+0x128>)
100025be:	4913      	ldr	r1, [pc, #76]	; (1000260c <__ieee754_log10+0x12c>)
100025c0:	f001 fef0 	bl	100043a4 <__aeabi_ddiv>
100025c4:	e7b2      	b.n	1000252c <__ieee754_log10+0x4c>
100025c6:	1c22      	adds	r2, r4, #0
100025c8:	1c2b      	adds	r3, r5, #0
100025ca:	1c29      	adds	r1, r5, #0
100025cc:	f002 fd56 	bl	1000507c <__aeabi_dsub>
100025d0:	4a0b      	ldr	r2, [pc, #44]	; (10002600 <__ieee754_log10+0x120>)
100025d2:	4b0c      	ldr	r3, [pc, #48]	; (10002604 <__ieee754_log10+0x124>)
100025d4:	f001 fee6 	bl	100043a4 <__aeabi_ddiv>
100025d8:	e7a8      	b.n	1000252c <__ieee754_log10+0x4c>
100025da:	46c0      	nop			; (mov r8, r8)
100025dc:	46c0      	nop			; (mov r8, r8)
100025de:	46c0      	nop			; (mov r8, r8)
100025e0:	00000000 	.word	0x00000000
100025e4:	43500000 	.word	0x43500000
100025e8:	509f6000 	.word	0x509f6000
100025ec:	3fd34413 	.word	0x3fd34413
100025f0:	11f12b36 	.word	0x11f12b36
100025f4:	3d59fef3 	.word	0x3d59fef3
100025f8:	1526e50e 	.word	0x1526e50e
100025fc:	3fdbcb7b 	.word	0x3fdbcb7b
	...
1000260c:	c3500000 	.word	0xc3500000
10002610:	000fffff 	.word	0x000fffff
10002614:	7fefffff 	.word	0x7fefffff
10002618:	fffffc01 	.word	0xfffffc01
1000261c:	000003ff 	.word	0x000003ff

10002620 <__fpclassifyd>:
10002620:	1c0b      	adds	r3, r1, #0
10002622:	1c01      	adds	r1, r0, #0
10002624:	b530      	push	{r4, r5, lr}
10002626:	4319      	orrs	r1, r3
10002628:	2202      	movs	r2, #2
1000262a:	2900      	cmp	r1, #0
1000262c:	d101      	bne.n	10002632 <__fpclassifyd+0x12>
1000262e:	1c10      	adds	r0, r2, #0
10002630:	bd30      	pop	{r4, r5, pc}
10002632:	2480      	movs	r4, #128	; 0x80
10002634:	0625      	lsls	r5, r4, #24
10002636:	42ab      	cmp	r3, r5
10002638:	d01e      	beq.n	10002678 <__fpclassifyd+0x58>
1000263a:	4a11      	ldr	r2, [pc, #68]	; (10002680 <__fpclassifyd+0x60>)
1000263c:	4911      	ldr	r1, [pc, #68]	; (10002684 <__fpclassifyd+0x64>)
1000263e:	189c      	adds	r4, r3, r2
10002640:	2204      	movs	r2, #4
10002642:	428c      	cmp	r4, r1
10002644:	d9f3      	bls.n	1000262e <__fpclassifyd+0xe>
10002646:	4d10      	ldr	r5, [pc, #64]	; (10002688 <__fpclassifyd+0x68>)
10002648:	195c      	adds	r4, r3, r5
1000264a:	428c      	cmp	r4, r1
1000264c:	d9ef      	bls.n	1000262e <__fpclassifyd+0xe>
1000264e:	490f      	ldr	r1, [pc, #60]	; (1000268c <__fpclassifyd+0x6c>)
10002650:	2203      	movs	r2, #3
10002652:	428b      	cmp	r3, r1
10002654:	d9eb      	bls.n	1000262e <__fpclassifyd+0xe>
10002656:	2280      	movs	r2, #128	; 0x80
10002658:	0615      	lsls	r5, r2, #24
1000265a:	490c      	ldr	r1, [pc, #48]	; (1000268c <__fpclassifyd+0x6c>)
1000265c:	195c      	adds	r4, r3, r5
1000265e:	2203      	movs	r2, #3
10002660:	428c      	cmp	r4, r1
10002662:	d9e4      	bls.n	1000262e <__fpclassifyd+0xe>
10002664:	4a08      	ldr	r2, [pc, #32]	; (10002688 <__fpclassifyd+0x68>)
10002666:	4293      	cmp	r3, r2
10002668:	d003      	beq.n	10002672 <__fpclassifyd+0x52>
1000266a:	4d05      	ldr	r5, [pc, #20]	; (10002680 <__fpclassifyd+0x60>)
1000266c:	2200      	movs	r2, #0
1000266e:	42ab      	cmp	r3, r5
10002670:	d1dd      	bne.n	1000262e <__fpclassifyd+0xe>
10002672:	4242      	negs	r2, r0
10002674:	4142      	adcs	r2, r0
10002676:	e7da      	b.n	1000262e <__fpclassifyd+0xe>
10002678:	2800      	cmp	r0, #0
1000267a:	d0d8      	beq.n	1000262e <__fpclassifyd+0xe>
1000267c:	e7eb      	b.n	10002656 <__fpclassifyd+0x36>
1000267e:	46c0      	nop			; (mov r8, r8)
10002680:	fff00000 	.word	0xfff00000
10002684:	7fdfffff 	.word	0x7fdfffff
10002688:	7ff00000 	.word	0x7ff00000
1000268c:	000fffff 	.word	0x000fffff

10002690 <matherr>:
10002690:	2000      	movs	r0, #0
10002692:	4770      	bx	lr
10002694:	0000      	movs	r0, r0
	...

10002698 <nan>:
10002698:	4902      	ldr	r1, [pc, #8]	; (100026a4 <nan+0xc>)
1000269a:	4801      	ldr	r0, [pc, #4]	; (100026a0 <nan+0x8>)
1000269c:	4770      	bx	lr
1000269e:	46c0      	nop			; (mov r8, r8)
100026a0:	00000000 	.word	0x00000000
100026a4:	7ff80000 	.word	0x7ff80000

100026a8 <__ieee754_log>:
100026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100026aa:	464e      	mov	r6, r9
100026ac:	4657      	mov	r7, sl
100026ae:	4645      	mov	r5, r8
100026b0:	b4e0      	push	{r5, r6, r7}
100026b2:	4ec1      	ldr	r6, [pc, #772]	; (100029b8 <__ieee754_log+0x310>)
100026b4:	b088      	sub	sp, #32
100026b6:	1c02      	adds	r2, r0, #0
100026b8:	1c0b      	adds	r3, r1, #0
100026ba:	1c04      	adds	r4, r0, #0
100026bc:	42b3      	cmp	r3, r6
100026be:	dc58      	bgt.n	10002772 <__ieee754_log+0xca>
100026c0:	005d      	lsls	r5, r3, #1
100026c2:	0869      	lsrs	r1, r5, #1
100026c4:	430c      	orrs	r4, r1
100026c6:	d100      	bne.n	100026ca <__ieee754_log+0x22>
100026c8:	e0ed      	b.n	100028a6 <__ieee754_log+0x1fe>
100026ca:	2b00      	cmp	r3, #0
100026cc:	da00      	bge.n	100026d0 <__ieee754_log+0x28>
100026ce:	e1b2      	b.n	10002a36 <__ieee754_log+0x38e>
100026d0:	1c10      	adds	r0, r2, #0
100026d2:	1c19      	adds	r1, r3, #0
100026d4:	4b99      	ldr	r3, [pc, #612]	; (1000293c <__ieee754_log+0x294>)
100026d6:	4a98      	ldr	r2, [pc, #608]	; (10002938 <__ieee754_log+0x290>)
100026d8:	f002 fa5e 	bl	10004b98 <__aeabi_dmul>
100026dc:	1c02      	adds	r2, r0, #0
100026de:	48b7      	ldr	r0, [pc, #732]	; (100029bc <__ieee754_log+0x314>)
100026e0:	2436      	movs	r4, #54	; 0x36
100026e2:	1c0b      	adds	r3, r1, #0
100026e4:	4267      	negs	r7, r4
100026e6:	4281      	cmp	r1, r0
100026e8:	dc47      	bgt.n	1000277a <__ieee754_log+0xd2>
100026ea:	150b      	asrs	r3, r1, #20
100026ec:	4eb4      	ldr	r6, [pc, #720]	; (100029c0 <__ieee754_log+0x318>)
100026ee:	0309      	lsls	r1, r1, #12
100026f0:	48b4      	ldr	r0, [pc, #720]	; (100029c4 <__ieee754_log+0x31c>)
100026f2:	0b0c      	lsrs	r4, r1, #12
100026f4:	199d      	adds	r5, r3, r6
100026f6:	46a0      	mov	r8, r4
100026f8:	1c03      	adds	r3, r0, #0
100026fa:	2680      	movs	r6, #128	; 0x80
100026fc:	19ef      	adds	r7, r5, r7
100026fe:	4443      	add	r3, r8
10002700:	0375      	lsls	r5, r6, #13
10002702:	49b1      	ldr	r1, [pc, #708]	; (100029c8 <__ieee754_log+0x320>)
10002704:	401d      	ands	r5, r3
10002706:	4069      	eors	r1, r5
10002708:	1528      	asrs	r0, r5, #20
1000270a:	430c      	orrs	r4, r1
1000270c:	19c7      	adds	r7, r0, r7
1000270e:	1c21      	adds	r1, r4, #0
10002710:	1c10      	adds	r0, r2, #0
10002712:	4a8b      	ldr	r2, [pc, #556]	; (10002940 <__ieee754_log+0x298>)
10002714:	4b8b      	ldr	r3, [pc, #556]	; (10002944 <__ieee754_log+0x29c>)
10002716:	f002 fcb1 	bl	1000507c <__aeabi_dsub>
1000271a:	4642      	mov	r2, r8
1000271c:	3202      	adds	r2, #2
1000271e:	0313      	lsls	r3, r2, #12
10002720:	46b9      	mov	r9, r7
10002722:	1c06      	adds	r6, r0, #0
10002724:	1c0f      	adds	r7, r1, #0
10002726:	0b1d      	lsrs	r5, r3, #12
10002728:	2d02      	cmp	r5, #2
1000272a:	dc30      	bgt.n	1000278e <__ieee754_log+0xe6>
1000272c:	4a86      	ldr	r2, [pc, #536]	; (10002948 <__ieee754_log+0x2a0>)
1000272e:	4b87      	ldr	r3, [pc, #540]	; (1000294c <__ieee754_log+0x2a4>)
10002730:	f000 fa26 	bl	10002b80 <__aeabi_dcmpeq>
10002734:	2800      	cmp	r0, #0
10002736:	d100      	bne.n	1000273a <__ieee754_log+0x92>
10002738:	e0bc      	b.n	100028b4 <__ieee754_log+0x20c>
1000273a:	464e      	mov	r6, r9
1000273c:	2e00      	cmp	r6, #0
1000273e:	d100      	bne.n	10002742 <__ieee754_log+0x9a>
10002740:	e182      	b.n	10002a48 <__ieee754_log+0x3a0>
10002742:	4648      	mov	r0, r9
10002744:	f003 f850 	bl	100057e8 <__aeabi_i2d>
10002748:	4a81      	ldr	r2, [pc, #516]	; (10002950 <__ieee754_log+0x2a8>)
1000274a:	4b82      	ldr	r3, [pc, #520]	; (10002954 <__ieee754_log+0x2ac>)
1000274c:	1c04      	adds	r4, r0, #0
1000274e:	1c0d      	adds	r5, r1, #0
10002750:	f002 fa22 	bl	10004b98 <__aeabi_dmul>
10002754:	4a80      	ldr	r2, [pc, #512]	; (10002958 <__ieee754_log+0x2b0>)
10002756:	4b81      	ldr	r3, [pc, #516]	; (1000295c <__ieee754_log+0x2b4>)
10002758:	1c06      	adds	r6, r0, #0
1000275a:	1c0f      	adds	r7, r1, #0
1000275c:	1c20      	adds	r0, r4, #0
1000275e:	1c29      	adds	r1, r5, #0
10002760:	f002 fa1a 	bl	10004b98 <__aeabi_dmul>
10002764:	1c02      	adds	r2, r0, #0
10002766:	1c0b      	adds	r3, r1, #0
10002768:	1c30      	adds	r0, r6, #0
1000276a:	1c39      	adds	r1, r7, #0
1000276c:	f001 fa6a 	bl	10003c44 <__aeabi_dadd>
10002770:	e007      	b.n	10002782 <__ieee754_log+0xda>
10002772:	4892      	ldr	r0, [pc, #584]	; (100029bc <__ieee754_log+0x314>)
10002774:	2700      	movs	r7, #0
10002776:	4281      	cmp	r1, r0
10002778:	ddb7      	ble.n	100026ea <__ieee754_log+0x42>
1000277a:	1c10      	adds	r0, r2, #0
1000277c:	1c19      	adds	r1, r3, #0
1000277e:	f001 fa61 	bl	10003c44 <__aeabi_dadd>
10002782:	b008      	add	sp, #32
10002784:	bc1c      	pop	{r2, r3, r4}
10002786:	4690      	mov	r8, r2
10002788:	4699      	mov	r9, r3
1000278a:	46a2      	mov	sl, r4
1000278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000278e:	4a74      	ldr	r2, [pc, #464]	; (10002960 <__ieee754_log+0x2b8>)
10002790:	4b74      	ldr	r3, [pc, #464]	; (10002964 <__ieee754_log+0x2bc>)
10002792:	f001 fa57 	bl	10003c44 <__aeabi_dadd>
10002796:	1c02      	adds	r2, r0, #0
10002798:	1c0b      	adds	r3, r1, #0
1000279a:	1c30      	adds	r0, r6, #0
1000279c:	1c39      	adds	r1, r7, #0
1000279e:	f001 fe01 	bl	100043a4 <__aeabi_ddiv>
100027a2:	9002      	str	r0, [sp, #8]
100027a4:	9103      	str	r1, [sp, #12]
100027a6:	4648      	mov	r0, r9
100027a8:	f003 f81e 	bl	100057e8 <__aeabi_i2d>
100027ac:	9004      	str	r0, [sp, #16]
100027ae:	9105      	str	r1, [sp, #20]
100027b0:	9802      	ldr	r0, [sp, #8]
100027b2:	9903      	ldr	r1, [sp, #12]
100027b4:	1c02      	adds	r2, r0, #0
100027b6:	1c0b      	adds	r3, r1, #0
100027b8:	f002 f9ee 	bl	10004b98 <__aeabi_dmul>
100027bc:	1c02      	adds	r2, r0, #0
100027be:	1c0b      	adds	r3, r1, #0
100027c0:	9000      	str	r0, [sp, #0]
100027c2:	9101      	str	r1, [sp, #4]
100027c4:	f002 f9e8 	bl	10004b98 <__aeabi_dmul>
100027c8:	4a67      	ldr	r2, [pc, #412]	; (10002968 <__ieee754_log+0x2c0>)
100027ca:	4b68      	ldr	r3, [pc, #416]	; (1000296c <__ieee754_log+0x2c4>)
100027cc:	4c7f      	ldr	r4, [pc, #508]	; (100029cc <__ieee754_log+0x324>)
100027ce:	1c0d      	adds	r5, r1, #0
100027d0:	46a2      	mov	sl, r4
100027d2:	1c04      	adds	r4, r0, #0
100027d4:	f002 f9e0 	bl	10004b98 <__aeabi_dmul>
100027d8:	4a65      	ldr	r2, [pc, #404]	; (10002970 <__ieee754_log+0x2c8>)
100027da:	4b66      	ldr	r3, [pc, #408]	; (10002974 <__ieee754_log+0x2cc>)
100027dc:	f001 fa32 	bl	10003c44 <__aeabi_dadd>
100027e0:	1c22      	adds	r2, r4, #0
100027e2:	1c2b      	adds	r3, r5, #0
100027e4:	f002 f9d8 	bl	10004b98 <__aeabi_dmul>
100027e8:	4a63      	ldr	r2, [pc, #396]	; (10002978 <__ieee754_log+0x2d0>)
100027ea:	4b64      	ldr	r3, [pc, #400]	; (1000297c <__ieee754_log+0x2d4>)
100027ec:	f001 fa2a 	bl	10003c44 <__aeabi_dadd>
100027f0:	1c22      	adds	r2, r4, #0
100027f2:	1c2b      	adds	r3, r5, #0
100027f4:	f002 f9d0 	bl	10004b98 <__aeabi_dmul>
100027f8:	4a61      	ldr	r2, [pc, #388]	; (10002980 <__ieee754_log+0x2d8>)
100027fa:	4b62      	ldr	r3, [pc, #392]	; (10002984 <__ieee754_log+0x2dc>)
100027fc:	f001 fa22 	bl	10003c44 <__aeabi_dadd>
10002800:	9a00      	ldr	r2, [sp, #0]
10002802:	9b01      	ldr	r3, [sp, #4]
10002804:	f002 f9c8 	bl	10004b98 <__aeabi_dmul>
10002808:	4a5f      	ldr	r2, [pc, #380]	; (10002988 <__ieee754_log+0x2e0>)
1000280a:	4b60      	ldr	r3, [pc, #384]	; (1000298c <__ieee754_log+0x2e4>)
1000280c:	9000      	str	r0, [sp, #0]
1000280e:	9101      	str	r1, [sp, #4]
10002810:	1c20      	adds	r0, r4, #0
10002812:	1c29      	adds	r1, r5, #0
10002814:	f002 f9c0 	bl	10004b98 <__aeabi_dmul>
10002818:	4a5d      	ldr	r2, [pc, #372]	; (10002990 <__ieee754_log+0x2e8>)
1000281a:	4b5e      	ldr	r3, [pc, #376]	; (10002994 <__ieee754_log+0x2ec>)
1000281c:	f001 fa12 	bl	10003c44 <__aeabi_dadd>
10002820:	1c22      	adds	r2, r4, #0
10002822:	1c2b      	adds	r3, r5, #0
10002824:	f002 f9b8 	bl	10004b98 <__aeabi_dmul>
10002828:	4a5b      	ldr	r2, [pc, #364]	; (10002998 <__ieee754_log+0x2f0>)
1000282a:	4b5c      	ldr	r3, [pc, #368]	; (1000299c <__ieee754_log+0x2f4>)
1000282c:	f001 fa0a 	bl	10003c44 <__aeabi_dadd>
10002830:	1c22      	adds	r2, r4, #0
10002832:	1c2b      	adds	r3, r5, #0
10002834:	f002 f9b0 	bl	10004b98 <__aeabi_dmul>
10002838:	1c02      	adds	r2, r0, #0
1000283a:	1c0b      	adds	r3, r1, #0
1000283c:	9800      	ldr	r0, [sp, #0]
1000283e:	9901      	ldr	r1, [sp, #4]
10002840:	f001 fa00 	bl	10003c44 <__aeabi_dadd>
10002844:	1c0d      	adds	r5, r1, #0
10002846:	4962      	ldr	r1, [pc, #392]	; (100029d0 <__ieee754_log+0x328>)
10002848:	44c2      	add	sl, r8
1000284a:	1c04      	adds	r4, r0, #0
1000284c:	4640      	mov	r0, r8
1000284e:	1a0a      	subs	r2, r1, r0
10002850:	4653      	mov	r3, sl
10002852:	431a      	orrs	r2, r3
10002854:	2a00      	cmp	r2, #0
10002856:	dd54      	ble.n	10002902 <__ieee754_log+0x25a>
10002858:	4a51      	ldr	r2, [pc, #324]	; (100029a0 <__ieee754_log+0x2f8>)
1000285a:	4b52      	ldr	r3, [pc, #328]	; (100029a4 <__ieee754_log+0x2fc>)
1000285c:	1c30      	adds	r0, r6, #0
1000285e:	1c39      	adds	r1, r7, #0
10002860:	f002 f99a 	bl	10004b98 <__aeabi_dmul>
10002864:	1c32      	adds	r2, r6, #0
10002866:	1c3b      	adds	r3, r7, #0
10002868:	f002 f996 	bl	10004b98 <__aeabi_dmul>
1000286c:	9000      	str	r0, [sp, #0]
1000286e:	9101      	str	r1, [sp, #4]
10002870:	4648      	mov	r0, r9
10002872:	2800      	cmp	r0, #0
10002874:	d000      	beq.n	10002878 <__ieee754_log+0x1d0>
10002876:	e0ad      	b.n	100029d4 <__ieee754_log+0x32c>
10002878:	1c22      	adds	r2, r4, #0
1000287a:	1c2b      	adds	r3, r5, #0
1000287c:	9800      	ldr	r0, [sp, #0]
1000287e:	9901      	ldr	r1, [sp, #4]
10002880:	f001 f9e0 	bl	10003c44 <__aeabi_dadd>
10002884:	9a02      	ldr	r2, [sp, #8]
10002886:	9b03      	ldr	r3, [sp, #12]
10002888:	f002 f986 	bl	10004b98 <__aeabi_dmul>
1000288c:	1c02      	adds	r2, r0, #0
1000288e:	1c0b      	adds	r3, r1, #0
10002890:	9800      	ldr	r0, [sp, #0]
10002892:	9901      	ldr	r1, [sp, #4]
10002894:	f002 fbf2 	bl	1000507c <__aeabi_dsub>
10002898:	1c02      	adds	r2, r0, #0
1000289a:	1c0b      	adds	r3, r1, #0
1000289c:	1c30      	adds	r0, r6, #0
1000289e:	1c39      	adds	r1, r7, #0
100028a0:	f002 fbec 	bl	1000507c <__aeabi_dsub>
100028a4:	e76d      	b.n	10002782 <__ieee754_log+0xda>
100028a6:	4a28      	ldr	r2, [pc, #160]	; (10002948 <__ieee754_log+0x2a0>)
100028a8:	4b28      	ldr	r3, [pc, #160]	; (1000294c <__ieee754_log+0x2a4>)
100028aa:	483f      	ldr	r0, [pc, #252]	; (100029a8 <__ieee754_log+0x300>)
100028ac:	493f      	ldr	r1, [pc, #252]	; (100029ac <__ieee754_log+0x304>)
100028ae:	f001 fd79 	bl	100043a4 <__aeabi_ddiv>
100028b2:	e766      	b.n	10002782 <__ieee754_log+0xda>
100028b4:	1c32      	adds	r2, r6, #0
100028b6:	1c3b      	adds	r3, r7, #0
100028b8:	1c30      	adds	r0, r6, #0
100028ba:	1c39      	adds	r1, r7, #0
100028bc:	f002 f96c 	bl	10004b98 <__aeabi_dmul>
100028c0:	4a3b      	ldr	r2, [pc, #236]	; (100029b0 <__ieee754_log+0x308>)
100028c2:	4b3c      	ldr	r3, [pc, #240]	; (100029b4 <__ieee754_log+0x30c>)
100028c4:	1c04      	adds	r4, r0, #0
100028c6:	1c0d      	adds	r5, r1, #0
100028c8:	1c30      	adds	r0, r6, #0
100028ca:	1c39      	adds	r1, r7, #0
100028cc:	f002 f964 	bl	10004b98 <__aeabi_dmul>
100028d0:	1c02      	adds	r2, r0, #0
100028d2:	1c0b      	adds	r3, r1, #0
100028d4:	4832      	ldr	r0, [pc, #200]	; (100029a0 <__ieee754_log+0x2f8>)
100028d6:	4933      	ldr	r1, [pc, #204]	; (100029a4 <__ieee754_log+0x2fc>)
100028d8:	f002 fbd0 	bl	1000507c <__aeabi_dsub>
100028dc:	1c02      	adds	r2, r0, #0
100028de:	1c0b      	adds	r3, r1, #0
100028e0:	1c20      	adds	r0, r4, #0
100028e2:	1c29      	adds	r1, r5, #0
100028e4:	f002 f958 	bl	10004b98 <__aeabi_dmul>
100028e8:	464a      	mov	r2, r9
100028ea:	1c04      	adds	r4, r0, #0
100028ec:	1c0d      	adds	r5, r1, #0
100028ee:	2a00      	cmp	r2, #0
100028f0:	d000      	beq.n	100028f4 <__ieee754_log+0x24c>
100028f2:	e0ac      	b.n	10002a4e <__ieee754_log+0x3a6>
100028f4:	1c30      	adds	r0, r6, #0
100028f6:	1c39      	adds	r1, r7, #0
100028f8:	1c22      	adds	r2, r4, #0
100028fa:	1c2b      	adds	r3, r5, #0
100028fc:	f002 fbbe 	bl	1000507c <__aeabi_dsub>
10002900:	e73f      	b.n	10002782 <__ieee754_log+0xda>
10002902:	4649      	mov	r1, r9
10002904:	2900      	cmp	r1, #0
10002906:	d100      	bne.n	1000290a <__ieee754_log+0x262>
10002908:	e0c3      	b.n	10002a92 <__ieee754_log+0x3ea>
1000290a:	4a11      	ldr	r2, [pc, #68]	; (10002950 <__ieee754_log+0x2a8>)
1000290c:	4b11      	ldr	r3, [pc, #68]	; (10002954 <__ieee754_log+0x2ac>)
1000290e:	9804      	ldr	r0, [sp, #16]
10002910:	9905      	ldr	r1, [sp, #20]
10002912:	f002 f941 	bl	10004b98 <__aeabi_dmul>
10002916:	1c22      	adds	r2, r4, #0
10002918:	9000      	str	r0, [sp, #0]
1000291a:	9101      	str	r1, [sp, #4]
1000291c:	1c2b      	adds	r3, r5, #0
1000291e:	1c30      	adds	r0, r6, #0
10002920:	1c39      	adds	r1, r7, #0
10002922:	f002 fbab 	bl	1000507c <__aeabi_dsub>
10002926:	9a02      	ldr	r2, [sp, #8]
10002928:	9b03      	ldr	r3, [sp, #12]
1000292a:	f002 f935 	bl	10004b98 <__aeabi_dmul>
1000292e:	1c04      	adds	r4, r0, #0
10002930:	1c0d      	adds	r5, r1, #0
10002932:	9804      	ldr	r0, [sp, #16]
10002934:	9905      	ldr	r1, [sp, #20]
10002936:	e097      	b.n	10002a68 <__ieee754_log+0x3c0>
10002938:	00000000 	.word	0x00000000
1000293c:	43500000 	.word	0x43500000
10002940:	00000000 	.word	0x00000000
10002944:	3ff00000 	.word	0x3ff00000
	...
10002950:	fee00000 	.word	0xfee00000
10002954:	3fe62e42 	.word	0x3fe62e42
10002958:	35793c76 	.word	0x35793c76
1000295c:	3dea39ef 	.word	0x3dea39ef
10002960:	00000000 	.word	0x00000000
10002964:	40000000 	.word	0x40000000
10002968:	df3e5244 	.word	0xdf3e5244
1000296c:	3fc2f112 	.word	0x3fc2f112
10002970:	96cb03de 	.word	0x96cb03de
10002974:	3fc74664 	.word	0x3fc74664
10002978:	94229359 	.word	0x94229359
1000297c:	3fd24924 	.word	0x3fd24924
10002980:	55555593 	.word	0x55555593
10002984:	3fe55555 	.word	0x3fe55555
10002988:	d078c69f 	.word	0xd078c69f
1000298c:	3fc39a09 	.word	0x3fc39a09
10002990:	1d8e78af 	.word	0x1d8e78af
10002994:	3fcc71c5 	.word	0x3fcc71c5
10002998:	9997fa04 	.word	0x9997fa04
1000299c:	3fd99999 	.word	0x3fd99999
100029a0:	00000000 	.word	0x00000000
100029a4:	3fe00000 	.word	0x3fe00000
100029a8:	00000000 	.word	0x00000000
100029ac:	c3500000 	.word	0xc3500000
100029b0:	55555555 	.word	0x55555555
100029b4:	3fd55555 	.word	0x3fd55555
100029b8:	000fffff 	.word	0x000fffff
100029bc:	7fefffff 	.word	0x7fefffff
100029c0:	fffffc01 	.word	0xfffffc01
100029c4:	00095f64 	.word	0x00095f64
100029c8:	3ff00000 	.word	0x3ff00000
100029cc:	fff9eb86 	.word	0xfff9eb86
100029d0:	0006b851 	.word	0x0006b851
100029d4:	4b35      	ldr	r3, [pc, #212]	; (10002aac <__ieee754_log+0x404>)
100029d6:	4a34      	ldr	r2, [pc, #208]	; (10002aa8 <__ieee754_log+0x400>)
100029d8:	9804      	ldr	r0, [sp, #16]
100029da:	9905      	ldr	r1, [sp, #20]
100029dc:	f002 f8dc 	bl	10004b98 <__aeabi_dmul>
100029e0:	1c22      	adds	r2, r4, #0
100029e2:	9006      	str	r0, [sp, #24]
100029e4:	9107      	str	r1, [sp, #28]
100029e6:	9800      	ldr	r0, [sp, #0]
100029e8:	9901      	ldr	r1, [sp, #4]
100029ea:	1c2b      	adds	r3, r5, #0
100029ec:	f001 f92a 	bl	10003c44 <__aeabi_dadd>
100029f0:	9a02      	ldr	r2, [sp, #8]
100029f2:	9b03      	ldr	r3, [sp, #12]
100029f4:	f002 f8d0 	bl	10004b98 <__aeabi_dmul>
100029f8:	4a2d      	ldr	r2, [pc, #180]	; (10002ab0 <__ieee754_log+0x408>)
100029fa:	4b2e      	ldr	r3, [pc, #184]	; (10002ab4 <__ieee754_log+0x40c>)
100029fc:	1c04      	adds	r4, r0, #0
100029fe:	1c0d      	adds	r5, r1, #0
10002a00:	9804      	ldr	r0, [sp, #16]
10002a02:	9905      	ldr	r1, [sp, #20]
10002a04:	f002 f8c8 	bl	10004b98 <__aeabi_dmul>
10002a08:	1c02      	adds	r2, r0, #0
10002a0a:	1c0b      	adds	r3, r1, #0
10002a0c:	1c20      	adds	r0, r4, #0
10002a0e:	1c29      	adds	r1, r5, #0
10002a10:	f001 f918 	bl	10003c44 <__aeabi_dadd>
10002a14:	1c02      	adds	r2, r0, #0
10002a16:	1c0b      	adds	r3, r1, #0
10002a18:	9800      	ldr	r0, [sp, #0]
10002a1a:	9901      	ldr	r1, [sp, #4]
10002a1c:	f002 fb2e 	bl	1000507c <__aeabi_dsub>
10002a20:	1c32      	adds	r2, r6, #0
10002a22:	1c3b      	adds	r3, r7, #0
10002a24:	f002 fb2a 	bl	1000507c <__aeabi_dsub>
10002a28:	1c02      	adds	r2, r0, #0
10002a2a:	1c0b      	adds	r3, r1, #0
10002a2c:	9806      	ldr	r0, [sp, #24]
10002a2e:	9907      	ldr	r1, [sp, #28]
10002a30:	f002 fb24 	bl	1000507c <__aeabi_dsub>
10002a34:	e6a5      	b.n	10002782 <__ieee754_log+0xda>
10002a36:	1c10      	adds	r0, r2, #0
10002a38:	1c19      	adds	r1, r3, #0
10002a3a:	f002 fb1f 	bl	1000507c <__aeabi_dsub>
10002a3e:	4a1e      	ldr	r2, [pc, #120]	; (10002ab8 <__ieee754_log+0x410>)
10002a40:	4b1e      	ldr	r3, [pc, #120]	; (10002abc <__ieee754_log+0x414>)
10002a42:	f001 fcaf 	bl	100043a4 <__aeabi_ddiv>
10002a46:	e69c      	b.n	10002782 <__ieee754_log+0xda>
10002a48:	481b      	ldr	r0, [pc, #108]	; (10002ab8 <__ieee754_log+0x410>)
10002a4a:	491c      	ldr	r1, [pc, #112]	; (10002abc <__ieee754_log+0x414>)
10002a4c:	e699      	b.n	10002782 <__ieee754_log+0xda>
10002a4e:	4648      	mov	r0, r9
10002a50:	f002 feca 	bl	100057e8 <__aeabi_i2d>
10002a54:	4b15      	ldr	r3, [pc, #84]	; (10002aac <__ieee754_log+0x404>)
10002a56:	4a14      	ldr	r2, [pc, #80]	; (10002aa8 <__ieee754_log+0x400>)
10002a58:	9002      	str	r0, [sp, #8]
10002a5a:	9103      	str	r1, [sp, #12]
10002a5c:	f002 f89c 	bl	10004b98 <__aeabi_dmul>
10002a60:	9000      	str	r0, [sp, #0]
10002a62:	9101      	str	r1, [sp, #4]
10002a64:	9802      	ldr	r0, [sp, #8]
10002a66:	9903      	ldr	r1, [sp, #12]
10002a68:	4a11      	ldr	r2, [pc, #68]	; (10002ab0 <__ieee754_log+0x408>)
10002a6a:	4b12      	ldr	r3, [pc, #72]	; (10002ab4 <__ieee754_log+0x40c>)
10002a6c:	f002 f894 	bl	10004b98 <__aeabi_dmul>
10002a70:	1c02      	adds	r2, r0, #0
10002a72:	1c0b      	adds	r3, r1, #0
10002a74:	1c20      	adds	r0, r4, #0
10002a76:	1c29      	adds	r1, r5, #0
10002a78:	f002 fb00 	bl	1000507c <__aeabi_dsub>
10002a7c:	1c32      	adds	r2, r6, #0
10002a7e:	1c3b      	adds	r3, r7, #0
10002a80:	f002 fafc 	bl	1000507c <__aeabi_dsub>
10002a84:	1c02      	adds	r2, r0, #0
10002a86:	1c0b      	adds	r3, r1, #0
10002a88:	9800      	ldr	r0, [sp, #0]
10002a8a:	9901      	ldr	r1, [sp, #4]
10002a8c:	f002 faf6 	bl	1000507c <__aeabi_dsub>
10002a90:	e677      	b.n	10002782 <__ieee754_log+0xda>
10002a92:	1c22      	adds	r2, r4, #0
10002a94:	1c2b      	adds	r3, r5, #0
10002a96:	1c30      	adds	r0, r6, #0
10002a98:	1c39      	adds	r1, r7, #0
10002a9a:	f002 faef 	bl	1000507c <__aeabi_dsub>
10002a9e:	9a02      	ldr	r2, [sp, #8]
10002aa0:	9b03      	ldr	r3, [sp, #12]
10002aa2:	f002 f879 	bl	10004b98 <__aeabi_dmul>
10002aa6:	e6f7      	b.n	10002898 <__ieee754_log+0x1f0>
10002aa8:	fee00000 	.word	0xfee00000
10002aac:	3fe62e42 	.word	0x3fe62e42
10002ab0:	35793c76 	.word	0x35793c76
10002ab4:	3dea39ef 	.word	0x3dea39ef
	...

10002ac0 <__aeabi_uidiv>:
10002ac0:	2900      	cmp	r1, #0
10002ac2:	d034      	beq.n	10002b2e <.udivsi3_skip_div0_test+0x6a>

10002ac4 <.udivsi3_skip_div0_test>:
10002ac4:	2301      	movs	r3, #1
10002ac6:	2200      	movs	r2, #0
10002ac8:	b410      	push	{r4}
10002aca:	4288      	cmp	r0, r1
10002acc:	d32c      	bcc.n	10002b28 <.udivsi3_skip_div0_test+0x64>
10002ace:	2401      	movs	r4, #1
10002ad0:	0724      	lsls	r4, r4, #28
10002ad2:	42a1      	cmp	r1, r4
10002ad4:	d204      	bcs.n	10002ae0 <.udivsi3_skip_div0_test+0x1c>
10002ad6:	4281      	cmp	r1, r0
10002ad8:	d202      	bcs.n	10002ae0 <.udivsi3_skip_div0_test+0x1c>
10002ada:	0109      	lsls	r1, r1, #4
10002adc:	011b      	lsls	r3, r3, #4
10002ade:	e7f8      	b.n	10002ad2 <.udivsi3_skip_div0_test+0xe>
10002ae0:	00e4      	lsls	r4, r4, #3
10002ae2:	42a1      	cmp	r1, r4
10002ae4:	d204      	bcs.n	10002af0 <.udivsi3_skip_div0_test+0x2c>
10002ae6:	4281      	cmp	r1, r0
10002ae8:	d202      	bcs.n	10002af0 <.udivsi3_skip_div0_test+0x2c>
10002aea:	0049      	lsls	r1, r1, #1
10002aec:	005b      	lsls	r3, r3, #1
10002aee:	e7f8      	b.n	10002ae2 <.udivsi3_skip_div0_test+0x1e>
10002af0:	4288      	cmp	r0, r1
10002af2:	d301      	bcc.n	10002af8 <.udivsi3_skip_div0_test+0x34>
10002af4:	1a40      	subs	r0, r0, r1
10002af6:	431a      	orrs	r2, r3
10002af8:	084c      	lsrs	r4, r1, #1
10002afa:	42a0      	cmp	r0, r4
10002afc:	d302      	bcc.n	10002b04 <.udivsi3_skip_div0_test+0x40>
10002afe:	1b00      	subs	r0, r0, r4
10002b00:	085c      	lsrs	r4, r3, #1
10002b02:	4322      	orrs	r2, r4
10002b04:	088c      	lsrs	r4, r1, #2
10002b06:	42a0      	cmp	r0, r4
10002b08:	d302      	bcc.n	10002b10 <.udivsi3_skip_div0_test+0x4c>
10002b0a:	1b00      	subs	r0, r0, r4
10002b0c:	089c      	lsrs	r4, r3, #2
10002b0e:	4322      	orrs	r2, r4
10002b10:	08cc      	lsrs	r4, r1, #3
10002b12:	42a0      	cmp	r0, r4
10002b14:	d302      	bcc.n	10002b1c <.udivsi3_skip_div0_test+0x58>
10002b16:	1b00      	subs	r0, r0, r4
10002b18:	08dc      	lsrs	r4, r3, #3
10002b1a:	4322      	orrs	r2, r4
10002b1c:	2800      	cmp	r0, #0
10002b1e:	d003      	beq.n	10002b28 <.udivsi3_skip_div0_test+0x64>
10002b20:	091b      	lsrs	r3, r3, #4
10002b22:	d001      	beq.n	10002b28 <.udivsi3_skip_div0_test+0x64>
10002b24:	0909      	lsrs	r1, r1, #4
10002b26:	e7e3      	b.n	10002af0 <.udivsi3_skip_div0_test+0x2c>
10002b28:	1c10      	adds	r0, r2, #0
10002b2a:	bc10      	pop	{r4}
10002b2c:	4770      	bx	lr
10002b2e:	2800      	cmp	r0, #0
10002b30:	d001      	beq.n	10002b36 <.udivsi3_skip_div0_test+0x72>
10002b32:	2000      	movs	r0, #0
10002b34:	43c0      	mvns	r0, r0
10002b36:	b407      	push	{r0, r1, r2}
10002b38:	4802      	ldr	r0, [pc, #8]	; (10002b44 <.udivsi3_skip_div0_test+0x80>)
10002b3a:	a102      	add	r1, pc, #8	; (adr r1, 10002b44 <.udivsi3_skip_div0_test+0x80>)
10002b3c:	1840      	adds	r0, r0, r1
10002b3e:	9002      	str	r0, [sp, #8]
10002b40:	bd03      	pop	{r0, r1, pc}
10002b42:	46c0      	nop			; (mov r8, r8)
10002b44:	00000019 	.word	0x00000019

10002b48 <__aeabi_uidivmod>:
10002b48:	2900      	cmp	r1, #0
10002b4a:	d0f0      	beq.n	10002b2e <.udivsi3_skip_div0_test+0x6a>
10002b4c:	b503      	push	{r0, r1, lr}
10002b4e:	f7ff ffb9 	bl	10002ac4 <.udivsi3_skip_div0_test>
10002b52:	bc0e      	pop	{r1, r2, r3}
10002b54:	4342      	muls	r2, r0
10002b56:	1a89      	subs	r1, r1, r2
10002b58:	4718      	bx	r3
10002b5a:	46c0      	nop			; (mov r8, r8)

10002b5c <__aeabi_idiv0>:
10002b5c:	4770      	bx	lr
10002b5e:	46c0      	nop			; (mov r8, r8)

10002b60 <__aeabi_cdrcmple>:
10002b60:	4684      	mov	ip, r0
10002b62:	1c10      	adds	r0, r2, #0
10002b64:	4662      	mov	r2, ip
10002b66:	468c      	mov	ip, r1
10002b68:	1c19      	adds	r1, r3, #0
10002b6a:	4663      	mov	r3, ip
10002b6c:	e000      	b.n	10002b70 <__aeabi_cdcmpeq>
10002b6e:	46c0      	nop			; (mov r8, r8)

10002b70 <__aeabi_cdcmpeq>:
10002b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002b72:	f001 ffa5 	bl	10004ac0 <__ledf2>
10002b76:	2800      	cmp	r0, #0
10002b78:	d401      	bmi.n	10002b7e <__aeabi_cdcmpeq+0xe>
10002b7a:	2100      	movs	r1, #0
10002b7c:	42c8      	cmn	r0, r1
10002b7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002b80 <__aeabi_dcmpeq>:
10002b80:	b510      	push	{r4, lr}
10002b82:	f001 feeb 	bl	1000495c <__eqdf2>
10002b86:	4240      	negs	r0, r0
10002b88:	3001      	adds	r0, #1
10002b8a:	bd10      	pop	{r4, pc}

10002b8c <__aeabi_dcmplt>:
10002b8c:	b510      	push	{r4, lr}
10002b8e:	f001 ff97 	bl	10004ac0 <__ledf2>
10002b92:	2800      	cmp	r0, #0
10002b94:	db01      	blt.n	10002b9a <__aeabi_dcmplt+0xe>
10002b96:	2000      	movs	r0, #0
10002b98:	bd10      	pop	{r4, pc}
10002b9a:	2001      	movs	r0, #1
10002b9c:	bd10      	pop	{r4, pc}
10002b9e:	46c0      	nop			; (mov r8, r8)

10002ba0 <__aeabi_dcmple>:
10002ba0:	b510      	push	{r4, lr}
10002ba2:	f001 ff8d 	bl	10004ac0 <__ledf2>
10002ba6:	2800      	cmp	r0, #0
10002ba8:	dd01      	ble.n	10002bae <__aeabi_dcmple+0xe>
10002baa:	2000      	movs	r0, #0
10002bac:	bd10      	pop	{r4, pc}
10002bae:	2001      	movs	r0, #1
10002bb0:	bd10      	pop	{r4, pc}
10002bb2:	46c0      	nop			; (mov r8, r8)

10002bb4 <__aeabi_dcmpgt>:
10002bb4:	b510      	push	{r4, lr}
10002bb6:	f001 ff0f 	bl	100049d8 <__gedf2>
10002bba:	2800      	cmp	r0, #0
10002bbc:	dc01      	bgt.n	10002bc2 <__aeabi_dcmpgt+0xe>
10002bbe:	2000      	movs	r0, #0
10002bc0:	bd10      	pop	{r4, pc}
10002bc2:	2001      	movs	r0, #1
10002bc4:	bd10      	pop	{r4, pc}
10002bc6:	46c0      	nop			; (mov r8, r8)

10002bc8 <__aeabi_dcmpge>:
10002bc8:	b510      	push	{r4, lr}
10002bca:	f001 ff05 	bl	100049d8 <__gedf2>
10002bce:	2800      	cmp	r0, #0
10002bd0:	da01      	bge.n	10002bd6 <__aeabi_dcmpge+0xe>
10002bd2:	2000      	movs	r0, #0
10002bd4:	bd10      	pop	{r4, pc}
10002bd6:	2001      	movs	r0, #1
10002bd8:	bd10      	pop	{r4, pc}
10002bda:	46c0      	nop			; (mov r8, r8)

10002bdc <__aeabi_cfrcmple>:
10002bdc:	4684      	mov	ip, r0
10002bde:	1c08      	adds	r0, r1, #0
10002be0:	4661      	mov	r1, ip
10002be2:	e7ff      	b.n	10002be4 <__aeabi_cfcmpeq>

10002be4 <__aeabi_cfcmpeq>:
10002be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002be6:	f000 fc13 	bl	10003410 <__lesf2>
10002bea:	2800      	cmp	r0, #0
10002bec:	d401      	bmi.n	10002bf2 <__aeabi_cfcmpeq+0xe>
10002bee:	2100      	movs	r1, #0
10002bf0:	42c8      	cmn	r0, r1
10002bf2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002bf4 <__aeabi_fcmpeq>:
10002bf4:	b510      	push	{r4, lr}
10002bf6:	f000 fb9b 	bl	10003330 <__eqsf2>
10002bfa:	4240      	negs	r0, r0
10002bfc:	3001      	adds	r0, #1
10002bfe:	bd10      	pop	{r4, pc}

10002c00 <__aeabi_fcmplt>:
10002c00:	b510      	push	{r4, lr}
10002c02:	f000 fc05 	bl	10003410 <__lesf2>
10002c06:	2800      	cmp	r0, #0
10002c08:	db01      	blt.n	10002c0e <__aeabi_fcmplt+0xe>
10002c0a:	2000      	movs	r0, #0
10002c0c:	bd10      	pop	{r4, pc}
10002c0e:	2001      	movs	r0, #1
10002c10:	bd10      	pop	{r4, pc}
10002c12:	46c0      	nop			; (mov r8, r8)

10002c14 <__aeabi_fcmple>:
10002c14:	b510      	push	{r4, lr}
10002c16:	f000 fbfb 	bl	10003410 <__lesf2>
10002c1a:	2800      	cmp	r0, #0
10002c1c:	dd01      	ble.n	10002c22 <__aeabi_fcmple+0xe>
10002c1e:	2000      	movs	r0, #0
10002c20:	bd10      	pop	{r4, pc}
10002c22:	2001      	movs	r0, #1
10002c24:	bd10      	pop	{r4, pc}
10002c26:	46c0      	nop			; (mov r8, r8)

10002c28 <__aeabi_fcmpgt>:
10002c28:	b510      	push	{r4, lr}
10002c2a:	f000 fba9 	bl	10003380 <__gesf2>
10002c2e:	2800      	cmp	r0, #0
10002c30:	dc01      	bgt.n	10002c36 <__aeabi_fcmpgt+0xe>
10002c32:	2000      	movs	r0, #0
10002c34:	bd10      	pop	{r4, pc}
10002c36:	2001      	movs	r0, #1
10002c38:	bd10      	pop	{r4, pc}
10002c3a:	46c0      	nop			; (mov r8, r8)

10002c3c <__aeabi_fcmpge>:
10002c3c:	b510      	push	{r4, lr}
10002c3e:	f000 fb9f 	bl	10003380 <__gesf2>
10002c42:	2800      	cmp	r0, #0
10002c44:	da01      	bge.n	10002c4a <__aeabi_fcmpge+0xe>
10002c46:	2000      	movs	r0, #0
10002c48:	bd10      	pop	{r4, pc}
10002c4a:	2001      	movs	r0, #1
10002c4c:	bd10      	pop	{r4, pc}
10002c4e:	46c0      	nop			; (mov r8, r8)

10002c50 <__aeabi_lmul>:
10002c50:	469c      	mov	ip, r3
10002c52:	0403      	lsls	r3, r0, #16
10002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
10002c56:	0c1b      	lsrs	r3, r3, #16
10002c58:	0417      	lsls	r7, r2, #16
10002c5a:	0c3f      	lsrs	r7, r7, #16
10002c5c:	0c15      	lsrs	r5, r2, #16
10002c5e:	1c1e      	adds	r6, r3, #0
10002c60:	1c04      	adds	r4, r0, #0
10002c62:	0c00      	lsrs	r0, r0, #16
10002c64:	437e      	muls	r6, r7
10002c66:	436b      	muls	r3, r5
10002c68:	4347      	muls	r7, r0
10002c6a:	4345      	muls	r5, r0
10002c6c:	18fb      	adds	r3, r7, r3
10002c6e:	0c30      	lsrs	r0, r6, #16
10002c70:	1818      	adds	r0, r3, r0
10002c72:	4287      	cmp	r7, r0
10002c74:	d902      	bls.n	10002c7c <__aeabi_lmul+0x2c>
10002c76:	2780      	movs	r7, #128	; 0x80
10002c78:	027b      	lsls	r3, r7, #9
10002c7a:	18ed      	adds	r5, r5, r3
10002c7c:	0c07      	lsrs	r7, r0, #16
10002c7e:	19ed      	adds	r5, r5, r7
10002c80:	4667      	mov	r7, ip
10002c82:	437c      	muls	r4, r7
10002c84:	434a      	muls	r2, r1
10002c86:	0436      	lsls	r6, r6, #16
10002c88:	0c33      	lsrs	r3, r6, #16
10002c8a:	18a1      	adds	r1, r4, r2
10002c8c:	0400      	lsls	r0, r0, #16
10002c8e:	1949      	adds	r1, r1, r5
10002c90:	18c0      	adds	r0, r0, r3
10002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002c94 <__aeabi_f2lz>:
10002c94:	b510      	push	{r4, lr}
10002c96:	2100      	movs	r1, #0
10002c98:	1c04      	adds	r4, r0, #0
10002c9a:	f7ff ffb1 	bl	10002c00 <__aeabi_fcmplt>
10002c9e:	2800      	cmp	r0, #0
10002ca0:	d107      	bne.n	10002cb2 <__aeabi_f2lz+0x1e>
10002ca2:	1c20      	adds	r0, r4, #0
10002ca4:	f000 f810 	bl	10002cc8 <__aeabi_f2ulz>
10002ca8:	1c02      	adds	r2, r0, #0
10002caa:	1c0b      	adds	r3, r1, #0
10002cac:	1c10      	adds	r0, r2, #0
10002cae:	1c19      	adds	r1, r3, #0
10002cb0:	bd10      	pop	{r4, pc}
10002cb2:	2380      	movs	r3, #128	; 0x80
10002cb4:	061b      	lsls	r3, r3, #24
10002cb6:	18e0      	adds	r0, r4, r3
10002cb8:	f000 f806 	bl	10002cc8 <__aeabi_f2ulz>
10002cbc:	2300      	movs	r3, #0
10002cbe:	4242      	negs	r2, r0
10002cc0:	418b      	sbcs	r3, r1
10002cc2:	e7f3      	b.n	10002cac <__aeabi_f2lz+0x18>
10002cc4:	0000      	movs	r0, r0
	...

10002cc8 <__aeabi_f2ulz>:
10002cc8:	b570      	push	{r4, r5, r6, lr}
10002cca:	f002 fdf9 	bl	100058c0 <__aeabi_f2d>
10002cce:	4b0d      	ldr	r3, [pc, #52]	; (10002d04 <__aeabi_f2ulz+0x3c>)
10002cd0:	4a0b      	ldr	r2, [pc, #44]	; (10002d00 <__aeabi_f2ulz+0x38>)
10002cd2:	1c0d      	adds	r5, r1, #0
10002cd4:	1c04      	adds	r4, r0, #0
10002cd6:	f001 ff5f 	bl	10004b98 <__aeabi_dmul>
10002cda:	f002 ff05 	bl	10005ae8 <__aeabi_d2uiz>
10002cde:	1c06      	adds	r6, r0, #0
10002ce0:	f002 fdbc 	bl	1000585c <__aeabi_ui2d>
10002ce4:	4a08      	ldr	r2, [pc, #32]	; (10002d08 <__aeabi_f2ulz+0x40>)
10002ce6:	4b09      	ldr	r3, [pc, #36]	; (10002d0c <__aeabi_f2ulz+0x44>)
10002ce8:	f001 ff56 	bl	10004b98 <__aeabi_dmul>
10002cec:	1c02      	adds	r2, r0, #0
10002cee:	1c0b      	adds	r3, r1, #0
10002cf0:	1c20      	adds	r0, r4, #0
10002cf2:	1c29      	adds	r1, r5, #0
10002cf4:	f002 f9c2 	bl	1000507c <__aeabi_dsub>
10002cf8:	f002 fef6 	bl	10005ae8 <__aeabi_d2uiz>
10002cfc:	1c31      	adds	r1, r6, #0
10002cfe:	bd70      	pop	{r4, r5, r6, pc}
10002d00:	00000000 	.word	0x00000000
10002d04:	3df00000 	.word	0x3df00000
10002d08:	00000000 	.word	0x00000000
10002d0c:	41f00000 	.word	0x41f00000

10002d10 <__aeabi_fadd>:
10002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002d12:	0243      	lsls	r3, r0, #9
10002d14:	0042      	lsls	r2, r0, #1
10002d16:	024f      	lsls	r7, r1, #9
10002d18:	004c      	lsls	r4, r1, #1
10002d1a:	0fc0      	lsrs	r0, r0, #31
10002d1c:	099b      	lsrs	r3, r3, #6
10002d1e:	0e12      	lsrs	r2, r2, #24
10002d20:	1c06      	adds	r6, r0, #0
10002d22:	469c      	mov	ip, r3
10002d24:	0e24      	lsrs	r4, r4, #24
10002d26:	0fc9      	lsrs	r1, r1, #31
10002d28:	09bf      	lsrs	r7, r7, #6
10002d2a:	4288      	cmp	r0, r1
10002d2c:	d057      	beq.n	10002dde <__aeabi_fadd+0xce>
10002d2e:	1b15      	subs	r5, r2, r4
10002d30:	2d00      	cmp	r5, #0
10002d32:	dc00      	bgt.n	10002d36 <__aeabi_fadd+0x26>
10002d34:	e07e      	b.n	10002e34 <__aeabi_fadd+0x124>
10002d36:	2c00      	cmp	r4, #0
10002d38:	d141      	bne.n	10002dbe <__aeabi_fadd+0xae>
10002d3a:	2f00      	cmp	r7, #0
10002d3c:	d064      	beq.n	10002e08 <__aeabi_fadd+0xf8>
10002d3e:	3d01      	subs	r5, #1
10002d40:	2d00      	cmp	r5, #0
10002d42:	d000      	beq.n	10002d46 <__aeabi_fadd+0x36>
10002d44:	e0ab      	b.n	10002e9e <__aeabi_fadd+0x18e>
10002d46:	1bdb      	subs	r3, r3, r7
10002d48:	1c14      	adds	r4, r2, #0
10002d4a:	1c06      	adds	r6, r0, #0
10002d4c:	0159      	lsls	r1, r3, #5
10002d4e:	d544      	bpl.n	10002dda <__aeabi_fadd+0xca>
10002d50:	019a      	lsls	r2, r3, #6
10002d52:	0995      	lsrs	r5, r2, #6
10002d54:	1c28      	adds	r0, r5, #0
10002d56:	f002 fea9 	bl	10005aac <__clzsi2>
10002d5a:	3805      	subs	r0, #5
10002d5c:	4085      	lsls	r5, r0
10002d5e:	4284      	cmp	r4, r0
10002d60:	dd00      	ble.n	10002d64 <__aeabi_fadd+0x54>
10002d62:	e079      	b.n	10002e58 <__aeabi_fadd+0x148>
10002d64:	1b00      	subs	r0, r0, r4
10002d66:	241f      	movs	r4, #31
10002d68:	1c2b      	adds	r3, r5, #0
10002d6a:	1c41      	adds	r1, r0, #1
10002d6c:	1a22      	subs	r2, r4, r0
10002d6e:	40cb      	lsrs	r3, r1
10002d70:	4095      	lsls	r5, r2
10002d72:	1c1f      	adds	r7, r3, #0
10002d74:	1c2b      	adds	r3, r5, #0
10002d76:	1e5d      	subs	r5, r3, #1
10002d78:	41ab      	sbcs	r3, r5
10002d7a:	433b      	orrs	r3, r7
10002d7c:	2501      	movs	r5, #1
10002d7e:	2400      	movs	r4, #0
10002d80:	200f      	movs	r0, #15
10002d82:	4018      	ands	r0, r3
10002d84:	2804      	cmp	r0, #4
10002d86:	d000      	beq.n	10002d8a <__aeabi_fadd+0x7a>
10002d88:	3304      	adds	r3, #4
10002d8a:	2180      	movs	r1, #128	; 0x80
10002d8c:	04cf      	lsls	r7, r1, #19
10002d8e:	2201      	movs	r2, #1
10002d90:	401f      	ands	r7, r3
10002d92:	4016      	ands	r6, r2
10002d94:	2f00      	cmp	r7, #0
10002d96:	d005      	beq.n	10002da4 <__aeabi_fadd+0x94>
10002d98:	2dff      	cmp	r5, #255	; 0xff
10002d9a:	d05a      	beq.n	10002e52 <__aeabi_fadd+0x142>
10002d9c:	4cb3      	ldr	r4, [pc, #716]	; (1000306c <__aeabi_fadd+0x35c>)
10002d9e:	4023      	ands	r3, r4
10002da0:	1c2c      	adds	r4, r5, #0
10002da2:	3501      	adds	r5, #1
10002da4:	b2ed      	uxtb	r5, r5
10002da6:	08da      	lsrs	r2, r3, #3
10002da8:	2d01      	cmp	r5, #1
10002daa:	dd3b      	ble.n	10002e24 <__aeabi_fadd+0x114>
10002dac:	0253      	lsls	r3, r2, #9
10002dae:	0a5a      	lsrs	r2, r3, #9
10002db0:	b2e4      	uxtb	r4, r4
10002db2:	05e4      	lsls	r4, r4, #23
10002db4:	4322      	orrs	r2, r4
10002db6:	07f6      	lsls	r6, r6, #31
10002db8:	1c10      	adds	r0, r2, #0
10002dba:	4330      	orrs	r0, r6
10002dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002dbe:	2aff      	cmp	r2, #255	; 0xff
10002dc0:	d02b      	beq.n	10002e1a <__aeabi_fadd+0x10a>
10002dc2:	2180      	movs	r1, #128	; 0x80
10002dc4:	04cc      	lsls	r4, r1, #19
10002dc6:	4327      	orrs	r7, r4
10002dc8:	2301      	movs	r3, #1
10002dca:	2d1b      	cmp	r5, #27
10002dcc:	dd49      	ble.n	10002e62 <__aeabi_fadd+0x152>
10002dce:	4667      	mov	r7, ip
10002dd0:	1afb      	subs	r3, r7, r3
10002dd2:	1c14      	adds	r4, r2, #0
10002dd4:	1c06      	adds	r6, r0, #0
10002dd6:	0159      	lsls	r1, r3, #5
10002dd8:	d4ba      	bmi.n	10002d50 <__aeabi_fadd+0x40>
10002dda:	1c65      	adds	r5, r4, #1
10002ddc:	e7d0      	b.n	10002d80 <__aeabi_fadd+0x70>
10002dde:	1b15      	subs	r5, r2, r4
10002de0:	2d00      	cmp	r5, #0
10002de2:	dd4f      	ble.n	10002e84 <__aeabi_fadd+0x174>
10002de4:	2c00      	cmp	r4, #0
10002de6:	d013      	beq.n	10002e10 <__aeabi_fadd+0x100>
10002de8:	2aff      	cmp	r2, #255	; 0xff
10002dea:	d05a      	beq.n	10002ea2 <__aeabi_fadd+0x192>
10002dec:	2480      	movs	r4, #128	; 0x80
10002dee:	04e1      	lsls	r1, r4, #19
10002df0:	430f      	orrs	r7, r1
10002df2:	2301      	movs	r3, #1
10002df4:	2d1b      	cmp	r5, #27
10002df6:	dc00      	bgt.n	10002dfa <__aeabi_fadd+0xea>
10002df8:	e0b0      	b.n	10002f5c <__aeabi_fadd+0x24c>
10002dfa:	4463      	add	r3, ip
10002dfc:	1c14      	adds	r4, r2, #0
10002dfe:	0159      	lsls	r1, r3, #5
10002e00:	d455      	bmi.n	10002eae <__aeabi_fadd+0x19e>
10002e02:	1c65      	adds	r5, r4, #1
10002e04:	1c06      	adds	r6, r0, #0
10002e06:	e7bb      	b.n	10002d80 <__aeabi_fadd+0x70>
10002e08:	1c55      	adds	r5, r2, #1
10002e0a:	1c14      	adds	r4, r2, #0
10002e0c:	1c06      	adds	r6, r0, #0
10002e0e:	e7b7      	b.n	10002d80 <__aeabi_fadd+0x70>
10002e10:	2f00      	cmp	r7, #0
10002e12:	d17c      	bne.n	10002f0e <__aeabi_fadd+0x1fe>
10002e14:	1c55      	adds	r5, r2, #1
10002e16:	1c14      	adds	r4, r2, #0
10002e18:	e7b2      	b.n	10002d80 <__aeabi_fadd+0x70>
10002e1a:	2780      	movs	r7, #128	; 0x80
10002e1c:	4663      	mov	r3, ip
10002e1e:	007d      	lsls	r5, r7, #1
10002e20:	24ff      	movs	r4, #255	; 0xff
10002e22:	e7ad      	b.n	10002d80 <__aeabi_fadd+0x70>
10002e24:	2a00      	cmp	r2, #0
10002e26:	d0c3      	beq.n	10002db0 <__aeabi_fadd+0xa0>
10002e28:	2c00      	cmp	r4, #0
10002e2a:	d028      	beq.n	10002e7e <__aeabi_fadd+0x16e>
10002e2c:	2080      	movs	r0, #128	; 0x80
10002e2e:	03c1      	lsls	r1, r0, #15
10002e30:	430a      	orrs	r2, r1
10002e32:	e7bb      	b.n	10002dac <__aeabi_fadd+0x9c>
10002e34:	2d00      	cmp	r5, #0
10002e36:	d147      	bne.n	10002ec8 <__aeabi_fadd+0x1b8>
10002e38:	1c50      	adds	r0, r2, #1
10002e3a:	b2c3      	uxtb	r3, r0
10002e3c:	2b01      	cmp	r3, #1
10002e3e:	dc00      	bgt.n	10002e42 <__aeabi_fadd+0x132>
10002e40:	e096      	b.n	10002f70 <__aeabi_fadd+0x260>
10002e42:	4664      	mov	r4, ip
10002e44:	1be5      	subs	r5, r4, r7
10002e46:	0168      	lsls	r0, r5, #5
10002e48:	d558      	bpl.n	10002efc <__aeabi_fadd+0x1ec>
10002e4a:	1b3d      	subs	r5, r7, r4
10002e4c:	1c0e      	adds	r6, r1, #0
10002e4e:	1c14      	adds	r4, r2, #0
10002e50:	e780      	b.n	10002d54 <__aeabi_fadd+0x44>
10002e52:	24ff      	movs	r4, #255	; 0xff
10002e54:	2200      	movs	r2, #0
10002e56:	e7ac      	b.n	10002db2 <__aeabi_fadd+0xa2>
10002e58:	4b84      	ldr	r3, [pc, #528]	; (1000306c <__aeabi_fadd+0x35c>)
10002e5a:	1a24      	subs	r4, r4, r0
10002e5c:	402b      	ands	r3, r5
10002e5e:	1c65      	adds	r5, r4, #1
10002e60:	e78e      	b.n	10002d80 <__aeabi_fadd+0x70>
10002e62:	1c3e      	adds	r6, r7, #0
10002e64:	2120      	movs	r1, #32
10002e66:	40ee      	lsrs	r6, r5
10002e68:	1b4d      	subs	r5, r1, r5
10002e6a:	40af      	lsls	r7, r5
10002e6c:	1c3b      	adds	r3, r7, #0
10002e6e:	1e5f      	subs	r7, r3, #1
10002e70:	41bb      	sbcs	r3, r7
10002e72:	4333      	orrs	r3, r6
10002e74:	4667      	mov	r7, ip
10002e76:	1afb      	subs	r3, r7, r3
10002e78:	1c14      	adds	r4, r2, #0
10002e7a:	1c06      	adds	r6, r0, #0
10002e7c:	e7ab      	b.n	10002dd6 <__aeabi_fadd+0xc6>
10002e7e:	0257      	lsls	r7, r2, #9
10002e80:	0a7a      	lsrs	r2, r7, #9
10002e82:	e796      	b.n	10002db2 <__aeabi_fadd+0xa2>
10002e84:	2d00      	cmp	r5, #0
10002e86:	d17f      	bne.n	10002f88 <__aeabi_fadd+0x278>
10002e88:	1c54      	adds	r4, r2, #1
10002e8a:	b2e1      	uxtb	r1, r4
10002e8c:	2901      	cmp	r1, #1
10002e8e:	dd53      	ble.n	10002f38 <__aeabi_fadd+0x228>
10002e90:	2cff      	cmp	r4, #255	; 0xff
10002e92:	d100      	bne.n	10002e96 <__aeabi_fadd+0x186>
10002e94:	e09b      	b.n	10002fce <__aeabi_fadd+0x2be>
10002e96:	18fb      	adds	r3, r7, r3
10002e98:	085b      	lsrs	r3, r3, #1
10002e9a:	1c95      	adds	r5, r2, #2
10002e9c:	e770      	b.n	10002d80 <__aeabi_fadd+0x70>
10002e9e:	2aff      	cmp	r2, #255	; 0xff
10002ea0:	d192      	bne.n	10002dc8 <__aeabi_fadd+0xb8>
10002ea2:	1c06      	adds	r6, r0, #0
10002ea4:	2080      	movs	r0, #128	; 0x80
10002ea6:	4663      	mov	r3, ip
10002ea8:	0045      	lsls	r5, r0, #1
10002eaa:	24ff      	movs	r4, #255	; 0xff
10002eac:	e768      	b.n	10002d80 <__aeabi_fadd+0x70>
10002eae:	1c67      	adds	r7, r4, #1
10002eb0:	2fff      	cmp	r7, #255	; 0xff
10002eb2:	d03c      	beq.n	10002f2e <__aeabi_fadd+0x21e>
10002eb4:	4a6d      	ldr	r2, [pc, #436]	; (1000306c <__aeabi_fadd+0x35c>)
10002eb6:	2601      	movs	r6, #1
10002eb8:	401e      	ands	r6, r3
10002eba:	4013      	ands	r3, r2
10002ebc:	085b      	lsrs	r3, r3, #1
10002ebe:	4333      	orrs	r3, r6
10002ec0:	1ca5      	adds	r5, r4, #2
10002ec2:	1c06      	adds	r6, r0, #0
10002ec4:	1c3c      	adds	r4, r7, #0
10002ec6:	e75b      	b.n	10002d80 <__aeabi_fadd+0x70>
10002ec8:	4268      	negs	r0, r5
10002eca:	2a00      	cmp	r2, #0
10002ecc:	d025      	beq.n	10002f1a <__aeabi_fadd+0x20a>
10002ece:	2cff      	cmp	r4, #255	; 0xff
10002ed0:	d070      	beq.n	10002fb4 <__aeabi_fadd+0x2a4>
10002ed2:	2280      	movs	r2, #128	; 0x80
10002ed4:	04d6      	lsls	r6, r2, #19
10002ed6:	1c1d      	adds	r5, r3, #0
10002ed8:	4335      	orrs	r5, r6
10002eda:	46ac      	mov	ip, r5
10002edc:	2601      	movs	r6, #1
10002ede:	281b      	cmp	r0, #27
10002ee0:	dc09      	bgt.n	10002ef6 <__aeabi_fadd+0x1e6>
10002ee2:	4662      	mov	r2, ip
10002ee4:	2520      	movs	r5, #32
10002ee6:	40c2      	lsrs	r2, r0
10002ee8:	1a2b      	subs	r3, r5, r0
10002eea:	4660      	mov	r0, ip
10002eec:	4098      	lsls	r0, r3
10002eee:	1c06      	adds	r6, r0, #0
10002ef0:	1e70      	subs	r0, r6, #1
10002ef2:	4186      	sbcs	r6, r0
10002ef4:	4316      	orrs	r6, r2
10002ef6:	1bbb      	subs	r3, r7, r6
10002ef8:	1c0e      	adds	r6, r1, #0
10002efa:	e727      	b.n	10002d4c <__aeabi_fadd+0x3c>
10002efc:	1c14      	adds	r4, r2, #0
10002efe:	2d00      	cmp	r5, #0
10002f00:	d000      	beq.n	10002f04 <__aeabi_fadd+0x1f4>
10002f02:	e727      	b.n	10002d54 <__aeabi_fadd+0x44>
10002f04:	2600      	movs	r6, #0
10002f06:	2501      	movs	r5, #1
10002f08:	2304      	movs	r3, #4
10002f0a:	2400      	movs	r4, #0
10002f0c:	e74a      	b.n	10002da4 <__aeabi_fadd+0x94>
10002f0e:	3d01      	subs	r5, #1
10002f10:	2d00      	cmp	r5, #0
10002f12:	d108      	bne.n	10002f26 <__aeabi_fadd+0x216>
10002f14:	18fb      	adds	r3, r7, r3
10002f16:	1c14      	adds	r4, r2, #0
10002f18:	e771      	b.n	10002dfe <__aeabi_fadd+0xee>
10002f1a:	2b00      	cmp	r3, #0
10002f1c:	d150      	bne.n	10002fc0 <__aeabi_fadd+0x2b0>
10002f1e:	1c65      	adds	r5, r4, #1
10002f20:	1c3b      	adds	r3, r7, #0
10002f22:	1c0e      	adds	r6, r1, #0
10002f24:	e72c      	b.n	10002d80 <__aeabi_fadd+0x70>
10002f26:	2aff      	cmp	r2, #255	; 0xff
10002f28:	d000      	beq.n	10002f2c <__aeabi_fadd+0x21c>
10002f2a:	e762      	b.n	10002df2 <__aeabi_fadd+0xe2>
10002f2c:	e7b9      	b.n	10002ea2 <__aeabi_fadd+0x192>
10002f2e:	2380      	movs	r3, #128	; 0x80
10002f30:	005d      	lsls	r5, r3, #1
10002f32:	24ff      	movs	r4, #255	; 0xff
10002f34:	2304      	movs	r3, #4
10002f36:	e735      	b.n	10002da4 <__aeabi_fadd+0x94>
10002f38:	2a00      	cmp	r2, #0
10002f3a:	d17c      	bne.n	10003036 <__aeabi_fadd+0x326>
10002f3c:	2b00      	cmp	r3, #0
10002f3e:	d100      	bne.n	10002f42 <__aeabi_fadd+0x232>
10002f40:	e0a1      	b.n	10003086 <__aeabi_fadd+0x376>
10002f42:	2f00      	cmp	r7, #0
10002f44:	d100      	bne.n	10002f48 <__aeabi_fadd+0x238>
10002f46:	e0af      	b.n	100030a8 <__aeabi_fadd+0x398>
10002f48:	18fb      	adds	r3, r7, r3
10002f4a:	0159      	lsls	r1, r3, #5
10002f4c:	d400      	bmi.n	10002f50 <__aeabi_fadd+0x240>
10002f4e:	e0b0      	b.n	100030b2 <__aeabi_fadd+0x3a2>
10002f50:	4e46      	ldr	r6, [pc, #280]	; (1000306c <__aeabi_fadd+0x35c>)
10002f52:	2502      	movs	r5, #2
10002f54:	4033      	ands	r3, r6
10002f56:	2401      	movs	r4, #1
10002f58:	1c06      	adds	r6, r0, #0
10002f5a:	e711      	b.n	10002d80 <__aeabi_fadd+0x70>
10002f5c:	1c3c      	adds	r4, r7, #0
10002f5e:	2320      	movs	r3, #32
10002f60:	40ec      	lsrs	r4, r5
10002f62:	1b5d      	subs	r5, r3, r5
10002f64:	40af      	lsls	r7, r5
10002f66:	1c3b      	adds	r3, r7, #0
10002f68:	1e5f      	subs	r7, r3, #1
10002f6a:	41bb      	sbcs	r3, r7
10002f6c:	4323      	orrs	r3, r4
10002f6e:	e744      	b.n	10002dfa <__aeabi_fadd+0xea>
10002f70:	2a00      	cmp	r2, #0
10002f72:	d112      	bne.n	10002f9a <__aeabi_fadd+0x28a>
10002f74:	4665      	mov	r5, ip
10002f76:	2d00      	cmp	r5, #0
10002f78:	d141      	bne.n	10002ffe <__aeabi_fadd+0x2ee>
10002f7a:	2f00      	cmp	r7, #0
10002f7c:	d0c2      	beq.n	10002f04 <__aeabi_fadd+0x1f4>
10002f7e:	1c3b      	adds	r3, r7, #0
10002f80:	1c0e      	adds	r6, r1, #0
10002f82:	2501      	movs	r5, #1
10002f84:	2400      	movs	r4, #0
10002f86:	e6fb      	b.n	10002d80 <__aeabi_fadd+0x70>
10002f88:	426d      	negs	r5, r5
10002f8a:	2a00      	cmp	r2, #0
10002f8c:	d123      	bne.n	10002fd6 <__aeabi_fadd+0x2c6>
10002f8e:	2b00      	cmp	r3, #0
10002f90:	d166      	bne.n	10003060 <__aeabi_fadd+0x350>
10002f92:	1c65      	adds	r5, r4, #1
10002f94:	1c3b      	adds	r3, r7, #0
10002f96:	1c06      	adds	r6, r0, #0
10002f98:	e6f2      	b.n	10002d80 <__aeabi_fadd+0x70>
10002f9a:	4662      	mov	r2, ip
10002f9c:	2a00      	cmp	r2, #0
10002f9e:	d138      	bne.n	10003012 <__aeabi_fadd+0x302>
10002fa0:	2f00      	cmp	r7, #0
10002fa2:	d107      	bne.n	10002fb4 <__aeabi_fadd+0x2a4>
10002fa4:	2280      	movs	r2, #128	; 0x80
10002fa6:	2600      	movs	r6, #0
10002fa8:	0055      	lsls	r5, r2, #1
10002faa:	4b31      	ldr	r3, [pc, #196]	; (10003070 <__aeabi_fadd+0x360>)
10002fac:	24ff      	movs	r4, #255	; 0xff
10002fae:	e6f9      	b.n	10002da4 <__aeabi_fadd+0x94>
10002fb0:	2cff      	cmp	r4, #255	; 0xff
10002fb2:	d193      	bne.n	10002edc <__aeabi_fadd+0x1cc>
10002fb4:	1c3b      	adds	r3, r7, #0
10002fb6:	2780      	movs	r7, #128	; 0x80
10002fb8:	1c0e      	adds	r6, r1, #0
10002fba:	007d      	lsls	r5, r7, #1
10002fbc:	24ff      	movs	r4, #255	; 0xff
10002fbe:	e6df      	b.n	10002d80 <__aeabi_fadd+0x70>
10002fc0:	3801      	subs	r0, #1
10002fc2:	2800      	cmp	r0, #0
10002fc4:	d1f4      	bne.n	10002fb0 <__aeabi_fadd+0x2a0>
10002fc6:	4666      	mov	r6, ip
10002fc8:	1bbb      	subs	r3, r7, r6
10002fca:	1c0e      	adds	r6, r1, #0
10002fcc:	e6be      	b.n	10002d4c <__aeabi_fadd+0x3c>
10002fce:	2780      	movs	r7, #128	; 0x80
10002fd0:	007d      	lsls	r5, r7, #1
10002fd2:	2304      	movs	r3, #4
10002fd4:	e6e6      	b.n	10002da4 <__aeabi_fadd+0x94>
10002fd6:	2cff      	cmp	r4, #255	; 0xff
10002fd8:	d05c      	beq.n	10003094 <__aeabi_fadd+0x384>
10002fda:	2280      	movs	r2, #128	; 0x80
10002fdc:	04d1      	lsls	r1, r2, #19
10002fde:	430b      	orrs	r3, r1
10002fe0:	469c      	mov	ip, r3
10002fe2:	2301      	movs	r3, #1
10002fe4:	2d1b      	cmp	r5, #27
10002fe6:	dc08      	bgt.n	10002ffa <__aeabi_fadd+0x2ea>
10002fe8:	2120      	movs	r1, #32
10002fea:	4662      	mov	r2, ip
10002fec:	40ea      	lsrs	r2, r5
10002fee:	4663      	mov	r3, ip
10002ff0:	1b4d      	subs	r5, r1, r5
10002ff2:	40ab      	lsls	r3, r5
10002ff4:	1e59      	subs	r1, r3, #1
10002ff6:	418b      	sbcs	r3, r1
10002ff8:	4313      	orrs	r3, r2
10002ffa:	19db      	adds	r3, r3, r7
10002ffc:	e6ff      	b.n	10002dfe <__aeabi_fadd+0xee>
10002ffe:	2f00      	cmp	r7, #0
10003000:	d038      	beq.n	10003074 <__aeabi_fadd+0x364>
10003002:	1beb      	subs	r3, r5, r7
10003004:	015a      	lsls	r2, r3, #5
10003006:	d54b      	bpl.n	100030a0 <__aeabi_fadd+0x390>
10003008:	1b7b      	subs	r3, r7, r5
1000300a:	1c0e      	adds	r6, r1, #0
1000300c:	2501      	movs	r5, #1
1000300e:	2400      	movs	r4, #0
10003010:	e6b6      	b.n	10002d80 <__aeabi_fadd+0x70>
10003012:	2f00      	cmp	r7, #0
10003014:	d100      	bne.n	10003018 <__aeabi_fadd+0x308>
10003016:	e700      	b.n	10002e1a <__aeabi_fadd+0x10a>
10003018:	2080      	movs	r0, #128	; 0x80
1000301a:	08d3      	lsrs	r3, r2, #3
1000301c:	03c4      	lsls	r4, r0, #15
1000301e:	4223      	tst	r3, r4
10003020:	d004      	beq.n	1000302c <__aeabi_fadd+0x31c>
10003022:	08ff      	lsrs	r7, r7, #3
10003024:	4227      	tst	r7, r4
10003026:	d101      	bne.n	1000302c <__aeabi_fadd+0x31c>
10003028:	1c3b      	adds	r3, r7, #0
1000302a:	1c0e      	adds	r6, r1, #0
1000302c:	2180      	movs	r1, #128	; 0x80
1000302e:	00db      	lsls	r3, r3, #3
10003030:	004d      	lsls	r5, r1, #1
10003032:	24ff      	movs	r4, #255	; 0xff
10003034:	e6a4      	b.n	10002d80 <__aeabi_fadd+0x70>
10003036:	2b00      	cmp	r3, #0
10003038:	d020      	beq.n	1000307c <__aeabi_fadd+0x36c>
1000303a:	2f00      	cmp	r7, #0
1000303c:	d100      	bne.n	10003040 <__aeabi_fadd+0x330>
1000303e:	e6ec      	b.n	10002e1a <__aeabi_fadd+0x10a>
10003040:	2280      	movs	r2, #128	; 0x80
10003042:	08de      	lsrs	r6, r3, #3
10003044:	03d5      	lsls	r5, r2, #15
10003046:	1c31      	adds	r1, r6, #0
10003048:	422e      	tst	r6, r5
1000304a:	d003      	beq.n	10003054 <__aeabi_fadd+0x344>
1000304c:	08f9      	lsrs	r1, r7, #3
1000304e:	4229      	tst	r1, r5
10003050:	d000      	beq.n	10003054 <__aeabi_fadd+0x344>
10003052:	1c31      	adds	r1, r6, #0
10003054:	1c06      	adds	r6, r0, #0
10003056:	2080      	movs	r0, #128	; 0x80
10003058:	00cb      	lsls	r3, r1, #3
1000305a:	0045      	lsls	r5, r0, #1
1000305c:	24ff      	movs	r4, #255	; 0xff
1000305e:	e68f      	b.n	10002d80 <__aeabi_fadd+0x70>
10003060:	3d01      	subs	r5, #1
10003062:	2d00      	cmp	r5, #0
10003064:	d114      	bne.n	10003090 <__aeabi_fadd+0x380>
10003066:	18fb      	adds	r3, r7, r3
10003068:	e6c9      	b.n	10002dfe <__aeabi_fadd+0xee>
1000306a:	46c0      	nop			; (mov r8, r8)
1000306c:	fbffffff 	.word	0xfbffffff
10003070:	03fffffc 	.word	0x03fffffc
10003074:	4663      	mov	r3, ip
10003076:	2501      	movs	r5, #1
10003078:	2400      	movs	r4, #0
1000307a:	e681      	b.n	10002d80 <__aeabi_fadd+0x70>
1000307c:	2480      	movs	r4, #128	; 0x80
1000307e:	0065      	lsls	r5, r4, #1
10003080:	1c3b      	adds	r3, r7, #0
10003082:	24ff      	movs	r4, #255	; 0xff
10003084:	e67c      	b.n	10002d80 <__aeabi_fadd+0x70>
10003086:	1c3b      	adds	r3, r7, #0
10003088:	1c06      	adds	r6, r0, #0
1000308a:	2501      	movs	r5, #1
1000308c:	2400      	movs	r4, #0
1000308e:	e677      	b.n	10002d80 <__aeabi_fadd+0x70>
10003090:	2cff      	cmp	r4, #255	; 0xff
10003092:	d1a6      	bne.n	10002fe2 <__aeabi_fadd+0x2d2>
10003094:	1c3b      	adds	r3, r7, #0
10003096:	2780      	movs	r7, #128	; 0x80
10003098:	1c06      	adds	r6, r0, #0
1000309a:	007d      	lsls	r5, r7, #1
1000309c:	24ff      	movs	r4, #255	; 0xff
1000309e:	e66f      	b.n	10002d80 <__aeabi_fadd+0x70>
100030a0:	2b00      	cmp	r3, #0
100030a2:	d100      	bne.n	100030a6 <__aeabi_fadd+0x396>
100030a4:	e72e      	b.n	10002f04 <__aeabi_fadd+0x1f4>
100030a6:	e669      	b.n	10002d7c <__aeabi_fadd+0x6c>
100030a8:	4663      	mov	r3, ip
100030aa:	1c06      	adds	r6, r0, #0
100030ac:	2501      	movs	r5, #1
100030ae:	2400      	movs	r4, #0
100030b0:	e666      	b.n	10002d80 <__aeabi_fadd+0x70>
100030b2:	1c06      	adds	r6, r0, #0
100030b4:	2501      	movs	r5, #1
100030b6:	2400      	movs	r4, #0
100030b8:	e662      	b.n	10002d80 <__aeabi_fadd+0x70>
100030ba:	46c0      	nop			; (mov r8, r8)

100030bc <__aeabi_fdiv>:
100030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100030be:	465f      	mov	r7, fp
100030c0:	4656      	mov	r6, sl
100030c2:	464d      	mov	r5, r9
100030c4:	4644      	mov	r4, r8
100030c6:	b4f0      	push	{r4, r5, r6, r7}
100030c8:	0245      	lsls	r5, r0, #9
100030ca:	0044      	lsls	r4, r0, #1
100030cc:	b083      	sub	sp, #12
100030ce:	1c0e      	adds	r6, r1, #0
100030d0:	0a6d      	lsrs	r5, r5, #9
100030d2:	0e24      	lsrs	r4, r4, #24
100030d4:	0fc7      	lsrs	r7, r0, #31
100030d6:	2c00      	cmp	r4, #0
100030d8:	d107      	bne.n	100030ea <__aeabi_fdiv+0x2e>
100030da:	2d00      	cmp	r5, #0
100030dc:	d000      	beq.n	100030e0 <__aeabi_fdiv+0x24>
100030de:	e091      	b.n	10003204 <__aeabi_fdiv+0x148>
100030e0:	2104      	movs	r1, #4
100030e2:	2201      	movs	r2, #1
100030e4:	4688      	mov	r8, r1
100030e6:	4692      	mov	sl, r2
100030e8:	e009      	b.n	100030fe <__aeabi_fdiv+0x42>
100030ea:	2cff      	cmp	r4, #255	; 0xff
100030ec:	d055      	beq.n	1000319a <__aeabi_fdiv+0xde>
100030ee:	2380      	movs	r3, #128	; 0x80
100030f0:	0418      	lsls	r0, r3, #16
100030f2:	2100      	movs	r1, #0
100030f4:	4305      	orrs	r5, r0
100030f6:	00ed      	lsls	r5, r5, #3
100030f8:	3c7f      	subs	r4, #127	; 0x7f
100030fa:	4688      	mov	r8, r1
100030fc:	468a      	mov	sl, r1
100030fe:	1c33      	adds	r3, r6, #0
10003100:	0058      	lsls	r0, r3, #1
10003102:	0276      	lsls	r6, r6, #9
10003104:	0fd9      	lsrs	r1, r3, #31
10003106:	0a76      	lsrs	r6, r6, #9
10003108:	0e00      	lsrs	r0, r0, #24
1000310a:	468b      	mov	fp, r1
1000310c:	d14c      	bne.n	100031a8 <__aeabi_fdiv+0xec>
1000310e:	2201      	movs	r2, #1
10003110:	4694      	mov	ip, r2
10003112:	2e00      	cmp	r6, #0
10003114:	d000      	beq.n	10003118 <__aeabi_fdiv+0x5c>
10003116:	e081      	b.n	1000321c <__aeabi_fdiv+0x160>
10003118:	465b      	mov	r3, fp
1000311a:	407b      	eors	r3, r7
1000311c:	4662      	mov	r2, ip
1000311e:	4641      	mov	r1, r8
10003120:	9301      	str	r3, [sp, #4]
10003122:	430a      	orrs	r2, r1
10003124:	2a0f      	cmp	r2, #15
10003126:	d950      	bls.n	100031ca <__aeabi_fdiv+0x10e>
10003128:	1a20      	subs	r0, r4, r0
1000312a:	0169      	lsls	r1, r5, #5
1000312c:	4681      	mov	r9, r0
1000312e:	0175      	lsls	r5, r6, #5
10003130:	42a9      	cmp	r1, r5
10003132:	d300      	bcc.n	10003136 <__aeabi_fdiv+0x7a>
10003134:	e0b3      	b.n	1000329e <__aeabi_fdiv+0x1e2>
10003136:	2201      	movs	r2, #1
10003138:	4253      	negs	r3, r2
1000313a:	4499      	add	r9, r3
1000313c:	241b      	movs	r4, #27
1000313e:	2600      	movs	r6, #0
10003140:	2701      	movs	r7, #1
10003142:	1e62      	subs	r2, r4, #1
10003144:	1c38      	adds	r0, r7, #0
10003146:	4010      	ands	r0, r2
10003148:	004b      	lsls	r3, r1, #1
1000314a:	0076      	lsls	r6, r6, #1
1000314c:	2900      	cmp	r1, #0
1000314e:	da00      	bge.n	10003152 <__aeabi_fdiv+0x96>
10003150:	e0a9      	b.n	100032a6 <__aeabi_fdiv+0x1ea>
10003152:	429d      	cmp	r5, r3
10003154:	d800      	bhi.n	10003158 <__aeabi_fdiv+0x9c>
10003156:	e0a6      	b.n	100032a6 <__aeabi_fdiv+0x1ea>
10003158:	3c01      	subs	r4, #1
1000315a:	2c00      	cmp	r4, #0
1000315c:	dc00      	bgt.n	10003160 <__aeabi_fdiv+0xa4>
1000315e:	e0ab      	b.n	100032b8 <__aeabi_fdiv+0x1fc>
10003160:	2800      	cmp	r0, #0
10003162:	d00c      	beq.n	1000317e <__aeabi_fdiv+0xc2>
10003164:	1c19      	adds	r1, r3, #0
10003166:	0076      	lsls	r6, r6, #1
10003168:	005b      	lsls	r3, r3, #1
1000316a:	2900      	cmp	r1, #0
1000316c:	db01      	blt.n	10003172 <__aeabi_fdiv+0xb6>
1000316e:	429d      	cmp	r5, r3
10003170:	d801      	bhi.n	10003176 <__aeabi_fdiv+0xba>
10003172:	1b5b      	subs	r3, r3, r5
10003174:	433e      	orrs	r6, r7
10003176:	3c01      	subs	r4, #1
10003178:	2c00      	cmp	r4, #0
1000317a:	dc00      	bgt.n	1000317e <__aeabi_fdiv+0xc2>
1000317c:	e09c      	b.n	100032b8 <__aeabi_fdiv+0x1fc>
1000317e:	0059      	lsls	r1, r3, #1
10003180:	0072      	lsls	r2, r6, #1
10003182:	2b00      	cmp	r3, #0
10003184:	db01      	blt.n	1000318a <__aeabi_fdiv+0xce>
10003186:	428d      	cmp	r5, r1
10003188:	d801      	bhi.n	1000318e <__aeabi_fdiv+0xd2>
1000318a:	1b49      	subs	r1, r1, r5
1000318c:	433a      	orrs	r2, r7
1000318e:	3c01      	subs	r4, #1
10003190:	004b      	lsls	r3, r1, #1
10003192:	0056      	lsls	r6, r2, #1
10003194:	2900      	cmp	r1, #0
10003196:	daea      	bge.n	1000316e <__aeabi_fdiv+0xb2>
10003198:	e7eb      	b.n	10003172 <__aeabi_fdiv+0xb6>
1000319a:	2d00      	cmp	r5, #0
1000319c:	d12d      	bne.n	100031fa <__aeabi_fdiv+0x13e>
1000319e:	2008      	movs	r0, #8
100031a0:	2102      	movs	r1, #2
100031a2:	4680      	mov	r8, r0
100031a4:	468a      	mov	sl, r1
100031a6:	e7aa      	b.n	100030fe <__aeabi_fdiv+0x42>
100031a8:	28ff      	cmp	r0, #255	; 0xff
100031aa:	d020      	beq.n	100031ee <__aeabi_fdiv+0x132>
100031ac:	2280      	movs	r2, #128	; 0x80
100031ae:	0413      	lsls	r3, r2, #16
100031b0:	2100      	movs	r1, #0
100031b2:	431e      	orrs	r6, r3
100031b4:	468c      	mov	ip, r1
100031b6:	465b      	mov	r3, fp
100031b8:	407b      	eors	r3, r7
100031ba:	4662      	mov	r2, ip
100031bc:	4641      	mov	r1, r8
100031be:	00f6      	lsls	r6, r6, #3
100031c0:	387f      	subs	r0, #127	; 0x7f
100031c2:	9301      	str	r3, [sp, #4]
100031c4:	430a      	orrs	r2, r1
100031c6:	2a0f      	cmp	r2, #15
100031c8:	d8ae      	bhi.n	10003128 <__aeabi_fdiv+0x6c>
100031ca:	4956      	ldr	r1, [pc, #344]	; (10003324 <__aeabi_fdiv+0x268>)
100031cc:	0092      	lsls	r2, r2, #2
100031ce:	588a      	ldr	r2, [r1, r2]
100031d0:	4697      	mov	pc, r2
100031d2:	9b01      	ldr	r3, [sp, #4]
100031d4:	26ff      	movs	r6, #255	; 0xff
100031d6:	2500      	movs	r5, #0
100031d8:	05f0      	lsls	r0, r6, #23
100031da:	4328      	orrs	r0, r5
100031dc:	07de      	lsls	r6, r3, #31
100031de:	4330      	orrs	r0, r6
100031e0:	b003      	add	sp, #12
100031e2:	bc3c      	pop	{r2, r3, r4, r5}
100031e4:	4690      	mov	r8, r2
100031e6:	4699      	mov	r9, r3
100031e8:	46a2      	mov	sl, r4
100031ea:	46ab      	mov	fp, r5
100031ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031ee:	1c33      	adds	r3, r6, #0
100031f0:	1e5a      	subs	r2, r3, #1
100031f2:	4193      	sbcs	r3, r2
100031f4:	3302      	adds	r3, #2
100031f6:	469c      	mov	ip, r3
100031f8:	e78e      	b.n	10003118 <__aeabi_fdiv+0x5c>
100031fa:	220c      	movs	r2, #12
100031fc:	2303      	movs	r3, #3
100031fe:	4690      	mov	r8, r2
10003200:	469a      	mov	sl, r3
10003202:	e77c      	b.n	100030fe <__aeabi_fdiv+0x42>
10003204:	1c28      	adds	r0, r5, #0
10003206:	f002 fc51 	bl	10005aac <__clzsi2>
1000320a:	2276      	movs	r2, #118	; 0x76
1000320c:	1f44      	subs	r4, r0, #5
1000320e:	4253      	negs	r3, r2
10003210:	40a5      	lsls	r5, r4
10003212:	1a1c      	subs	r4, r3, r0
10003214:	2000      	movs	r0, #0
10003216:	4680      	mov	r8, r0
10003218:	4682      	mov	sl, r0
1000321a:	e770      	b.n	100030fe <__aeabi_fdiv+0x42>
1000321c:	1c30      	adds	r0, r6, #0
1000321e:	f002 fc45 	bl	10005aac <__clzsi2>
10003222:	2376      	movs	r3, #118	; 0x76
10003224:	1f41      	subs	r1, r0, #5
10003226:	408e      	lsls	r6, r1
10003228:	425a      	negs	r2, r3
1000322a:	2100      	movs	r1, #0
1000322c:	1a10      	subs	r0, r2, r0
1000322e:	468c      	mov	ip, r1
10003230:	e772      	b.n	10003118 <__aeabi_fdiv+0x5c>
10003232:	2300      	movs	r3, #0
10003234:	4d3c      	ldr	r5, [pc, #240]	; (10003328 <__aeabi_fdiv+0x26c>)
10003236:	26ff      	movs	r6, #255	; 0xff
10003238:	e7ce      	b.n	100031d8 <__aeabi_fdiv+0x11c>
1000323a:	465f      	mov	r7, fp
1000323c:	1c35      	adds	r5, r6, #0
1000323e:	9701      	str	r7, [sp, #4]
10003240:	4663      	mov	r3, ip
10003242:	2b02      	cmp	r3, #2
10003244:	d0c5      	beq.n	100031d2 <__aeabi_fdiv+0x116>
10003246:	2b03      	cmp	r3, #3
10003248:	d063      	beq.n	10003312 <__aeabi_fdiv+0x256>
1000324a:	2b01      	cmp	r3, #1
1000324c:	d043      	beq.n	100032d6 <__aeabi_fdiv+0x21a>
1000324e:	4649      	mov	r1, r9
10003250:	317f      	adds	r1, #127	; 0x7f
10003252:	2900      	cmp	r1, #0
10003254:	dd35      	ble.n	100032c2 <__aeabi_fdiv+0x206>
10003256:	270f      	movs	r7, #15
10003258:	402f      	ands	r7, r5
1000325a:	2f04      	cmp	r7, #4
1000325c:	d000      	beq.n	10003260 <__aeabi_fdiv+0x1a4>
1000325e:	3504      	adds	r5, #4
10003260:	012b      	lsls	r3, r5, #4
10003262:	d503      	bpl.n	1000326c <__aeabi_fdiv+0x1b0>
10003264:	4a31      	ldr	r2, [pc, #196]	; (1000332c <__aeabi_fdiv+0x270>)
10003266:	4649      	mov	r1, r9
10003268:	4015      	ands	r5, r2
1000326a:	3180      	adds	r1, #128	; 0x80
1000326c:	29fe      	cmp	r1, #254	; 0xfe
1000326e:	dcb0      	bgt.n	100031d2 <__aeabi_fdiv+0x116>
10003270:	01a8      	lsls	r0, r5, #6
10003272:	0a45      	lsrs	r5, r0, #9
10003274:	b2ce      	uxtb	r6, r1
10003276:	9b01      	ldr	r3, [sp, #4]
10003278:	e7ae      	b.n	100031d8 <__aeabi_fdiv+0x11c>
1000327a:	2600      	movs	r6, #0
1000327c:	2500      	movs	r5, #0
1000327e:	e7ab      	b.n	100031d8 <__aeabi_fdiv+0x11c>
10003280:	2080      	movs	r0, #128	; 0x80
10003282:	03c1      	lsls	r1, r0, #15
10003284:	420d      	tst	r5, r1
10003286:	d011      	beq.n	100032ac <__aeabi_fdiv+0x1f0>
10003288:	420e      	tst	r6, r1
1000328a:	d10f      	bne.n	100032ac <__aeabi_fdiv+0x1f0>
1000328c:	430e      	orrs	r6, r1
1000328e:	0273      	lsls	r3, r6, #9
10003290:	0a5d      	lsrs	r5, r3, #9
10003292:	26ff      	movs	r6, #255	; 0xff
10003294:	465b      	mov	r3, fp
10003296:	e79f      	b.n	100031d8 <__aeabi_fdiv+0x11c>
10003298:	9701      	str	r7, [sp, #4]
1000329a:	4653      	mov	r3, sl
1000329c:	e7d1      	b.n	10003242 <__aeabi_fdiv+0x186>
1000329e:	1b49      	subs	r1, r1, r5
100032a0:	241a      	movs	r4, #26
100032a2:	2601      	movs	r6, #1
100032a4:	e74c      	b.n	10003140 <__aeabi_fdiv+0x84>
100032a6:	1b5b      	subs	r3, r3, r5
100032a8:	433e      	orrs	r6, r7
100032aa:	e755      	b.n	10003158 <__aeabi_fdiv+0x9c>
100032ac:	430d      	orrs	r5, r1
100032ae:	026a      	lsls	r2, r5, #9
100032b0:	0a55      	lsrs	r5, r2, #9
100032b2:	1c3b      	adds	r3, r7, #0
100032b4:	26ff      	movs	r6, #255	; 0xff
100032b6:	e78f      	b.n	100031d8 <__aeabi_fdiv+0x11c>
100032b8:	1c1d      	adds	r5, r3, #0
100032ba:	1e6b      	subs	r3, r5, #1
100032bc:	419d      	sbcs	r5, r3
100032be:	4335      	orrs	r5, r6
100032c0:	e7c5      	b.n	1000324e <__aeabi_fdiv+0x192>
100032c2:	247e      	movs	r4, #126	; 0x7e
100032c4:	4267      	negs	r7, r4
100032c6:	464a      	mov	r2, r9
100032c8:	1ab9      	subs	r1, r7, r2
100032ca:	291b      	cmp	r1, #27
100032cc:	dd08      	ble.n	100032e0 <__aeabi_fdiv+0x224>
100032ce:	9b01      	ldr	r3, [sp, #4]
100032d0:	2600      	movs	r6, #0
100032d2:	2500      	movs	r5, #0
100032d4:	e780      	b.n	100031d8 <__aeabi_fdiv+0x11c>
100032d6:	9d01      	ldr	r5, [sp, #4]
100032d8:	2600      	movs	r6, #0
100032da:	402b      	ands	r3, r5
100032dc:	2500      	movs	r5, #0
100032de:	e77b      	b.n	100031d8 <__aeabi_fdiv+0x11c>
100032e0:	464e      	mov	r6, r9
100032e2:	369e      	adds	r6, #158	; 0x9e
100032e4:	1c28      	adds	r0, r5, #0
100032e6:	40b5      	lsls	r5, r6
100032e8:	1c2b      	adds	r3, r5, #0
100032ea:	1e5d      	subs	r5, r3, #1
100032ec:	41ab      	sbcs	r3, r5
100032ee:	40c8      	lsrs	r0, r1
100032f0:	4303      	orrs	r3, r0
100032f2:	250f      	movs	r5, #15
100032f4:	401d      	ands	r5, r3
100032f6:	2d04      	cmp	r5, #4
100032f8:	d000      	beq.n	100032fc <__aeabi_fdiv+0x240>
100032fa:	3304      	adds	r3, #4
100032fc:	015a      	lsls	r2, r3, #5
100032fe:	d503      	bpl.n	10003308 <__aeabi_fdiv+0x24c>
10003300:	9b01      	ldr	r3, [sp, #4]
10003302:	2601      	movs	r6, #1
10003304:	2500      	movs	r5, #0
10003306:	e767      	b.n	100031d8 <__aeabi_fdiv+0x11c>
10003308:	019c      	lsls	r4, r3, #6
1000330a:	0a65      	lsrs	r5, r4, #9
1000330c:	9b01      	ldr	r3, [sp, #4]
1000330e:	2600      	movs	r6, #0
10003310:	e762      	b.n	100031d8 <__aeabi_fdiv+0x11c>
10003312:	2780      	movs	r7, #128	; 0x80
10003314:	03fc      	lsls	r4, r7, #15
10003316:	4325      	orrs	r5, r4
10003318:	026e      	lsls	r6, r5, #9
1000331a:	0a75      	lsrs	r5, r6, #9
1000331c:	9b01      	ldr	r3, [sp, #4]
1000331e:	26ff      	movs	r6, #255	; 0xff
10003320:	e75a      	b.n	100031d8 <__aeabi_fdiv+0x11c>
10003322:	46c0      	nop			; (mov r8, r8)
10003324:	10006b40 	.word	0x10006b40
10003328:	007fffff 	.word	0x007fffff
1000332c:	f7ffffff 	.word	0xf7ffffff

10003330 <__eqsf2>:
10003330:	0243      	lsls	r3, r0, #9
10003332:	0042      	lsls	r2, r0, #1
10003334:	b570      	push	{r4, r5, r6, lr}
10003336:	0a5c      	lsrs	r4, r3, #9
10003338:	0fc6      	lsrs	r6, r0, #31
1000333a:	0e13      	lsrs	r3, r2, #24
1000333c:	0248      	lsls	r0, r1, #9
1000333e:	004a      	lsls	r2, r1, #1
10003340:	0a45      	lsrs	r5, r0, #9
10003342:	0e12      	lsrs	r2, r2, #24
10003344:	0fc9      	lsrs	r1, r1, #31
10003346:	2bff      	cmp	r3, #255	; 0xff
10003348:	d005      	beq.n	10003356 <__eqsf2+0x26>
1000334a:	2aff      	cmp	r2, #255	; 0xff
1000334c:	d008      	beq.n	10003360 <__eqsf2+0x30>
1000334e:	2001      	movs	r0, #1
10003350:	4293      	cmp	r3, r2
10003352:	d00b      	beq.n	1000336c <__eqsf2+0x3c>
10003354:	bd70      	pop	{r4, r5, r6, pc}
10003356:	2001      	movs	r0, #1
10003358:	2c00      	cmp	r4, #0
1000335a:	d1fb      	bne.n	10003354 <__eqsf2+0x24>
1000335c:	2aff      	cmp	r2, #255	; 0xff
1000335e:	d1f6      	bne.n	1000334e <__eqsf2+0x1e>
10003360:	2001      	movs	r0, #1
10003362:	2d00      	cmp	r5, #0
10003364:	d1f6      	bne.n	10003354 <__eqsf2+0x24>
10003366:	2001      	movs	r0, #1
10003368:	4293      	cmp	r3, r2
1000336a:	d1f3      	bne.n	10003354 <__eqsf2+0x24>
1000336c:	42ac      	cmp	r4, r5
1000336e:	d1f1      	bne.n	10003354 <__eqsf2+0x24>
10003370:	428e      	cmp	r6, r1
10003372:	d003      	beq.n	1000337c <__eqsf2+0x4c>
10003374:	2b00      	cmp	r3, #0
10003376:	d1ed      	bne.n	10003354 <__eqsf2+0x24>
10003378:	2c00      	cmp	r4, #0
1000337a:	d1eb      	bne.n	10003354 <__eqsf2+0x24>
1000337c:	2000      	movs	r0, #0
1000337e:	e7e9      	b.n	10003354 <__eqsf2+0x24>

10003380 <__gesf2>:
10003380:	b5f0      	push	{r4, r5, r6, r7, lr}
10003382:	0243      	lsls	r3, r0, #9
10003384:	0042      	lsls	r2, r0, #1
10003386:	004f      	lsls	r7, r1, #1
10003388:	0fc6      	lsrs	r6, r0, #31
1000338a:	0248      	lsls	r0, r1, #9
1000338c:	0a5c      	lsrs	r4, r3, #9
1000338e:	0a45      	lsrs	r5, r0, #9
10003390:	0e13      	lsrs	r3, r2, #24
10003392:	0fc9      	lsrs	r1, r1, #31
10003394:	0e3a      	lsrs	r2, r7, #24
10003396:	2bff      	cmp	r3, #255	; 0xff
10003398:	d026      	beq.n	100033e8 <__gesf2+0x68>
1000339a:	2aff      	cmp	r2, #255	; 0xff
1000339c:	d029      	beq.n	100033f2 <__gesf2+0x72>
1000339e:	2b00      	cmp	r3, #0
100033a0:	d10c      	bne.n	100033bc <__gesf2+0x3c>
100033a2:	4260      	negs	r0, r4
100033a4:	4160      	adcs	r0, r4
100033a6:	4684      	mov	ip, r0
100033a8:	2a00      	cmp	r2, #0
100033aa:	d00a      	beq.n	100033c2 <__gesf2+0x42>
100033ac:	2800      	cmp	r0, #0
100033ae:	d116      	bne.n	100033de <__gesf2+0x5e>
100033b0:	428e      	cmp	r6, r1
100033b2:	d021      	beq.n	100033f8 <__gesf2+0x78>
100033b4:	2e00      	cmp	r6, #0
100033b6:	d114      	bne.n	100033e2 <__gesf2+0x62>
100033b8:	2001      	movs	r0, #1
100033ba:	e014      	b.n	100033e6 <__gesf2+0x66>
100033bc:	2a00      	cmp	r2, #0
100033be:	d1f7      	bne.n	100033b0 <__gesf2+0x30>
100033c0:	4694      	mov	ip, r2
100033c2:	426f      	negs	r7, r5
100033c4:	416f      	adcs	r7, r5
100033c6:	4660      	mov	r0, ip
100033c8:	2800      	cmp	r0, #0
100033ca:	d105      	bne.n	100033d8 <__gesf2+0x58>
100033cc:	2f00      	cmp	r7, #0
100033ce:	d0ef      	beq.n	100033b0 <__gesf2+0x30>
100033d0:	2001      	movs	r0, #1
100033d2:	2e00      	cmp	r6, #0
100033d4:	d007      	beq.n	100033e6 <__gesf2+0x66>
100033d6:	e004      	b.n	100033e2 <__gesf2+0x62>
100033d8:	2000      	movs	r0, #0
100033da:	2f00      	cmp	r7, #0
100033dc:	d103      	bne.n	100033e6 <__gesf2+0x66>
100033de:	2900      	cmp	r1, #0
100033e0:	d1ea      	bne.n	100033b8 <__gesf2+0x38>
100033e2:	2101      	movs	r1, #1
100033e4:	4248      	negs	r0, r1
100033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100033e8:	2c00      	cmp	r4, #0
100033ea:	d0d6      	beq.n	1000339a <__gesf2+0x1a>
100033ec:	2202      	movs	r2, #2
100033ee:	4250      	negs	r0, r2
100033f0:	e7f9      	b.n	100033e6 <__gesf2+0x66>
100033f2:	2d00      	cmp	r5, #0
100033f4:	d0d3      	beq.n	1000339e <__gesf2+0x1e>
100033f6:	e7f9      	b.n	100033ec <__gesf2+0x6c>
100033f8:	4293      	cmp	r3, r2
100033fa:	dcdb      	bgt.n	100033b4 <__gesf2+0x34>
100033fc:	db04      	blt.n	10003408 <__gesf2+0x88>
100033fe:	42ac      	cmp	r4, r5
10003400:	d8d8      	bhi.n	100033b4 <__gesf2+0x34>
10003402:	2000      	movs	r0, #0
10003404:	42ac      	cmp	r4, r5
10003406:	d2ee      	bcs.n	100033e6 <__gesf2+0x66>
10003408:	2e00      	cmp	r6, #0
1000340a:	d0ea      	beq.n	100033e2 <__gesf2+0x62>
1000340c:	2001      	movs	r0, #1
1000340e:	e7ea      	b.n	100033e6 <__gesf2+0x66>

10003410 <__lesf2>:
10003410:	b5f0      	push	{r4, r5, r6, r7, lr}
10003412:	0243      	lsls	r3, r0, #9
10003414:	0042      	lsls	r2, r0, #1
10003416:	004f      	lsls	r7, r1, #1
10003418:	0fc6      	lsrs	r6, r0, #31
1000341a:	0248      	lsls	r0, r1, #9
1000341c:	0a5c      	lsrs	r4, r3, #9
1000341e:	0a45      	lsrs	r5, r0, #9
10003420:	0e13      	lsrs	r3, r2, #24
10003422:	0fc9      	lsrs	r1, r1, #31
10003424:	0e3a      	lsrs	r2, r7, #24
10003426:	2bff      	cmp	r3, #255	; 0xff
10003428:	d026      	beq.n	10003478 <__lesf2+0x68>
1000342a:	2aff      	cmp	r2, #255	; 0xff
1000342c:	d028      	beq.n	10003480 <__lesf2+0x70>
1000342e:	2b00      	cmp	r3, #0
10003430:	d00f      	beq.n	10003452 <__lesf2+0x42>
10003432:	2a00      	cmp	r2, #0
10003434:	d114      	bne.n	10003460 <__lesf2+0x50>
10003436:	4694      	mov	ip, r2
10003438:	426f      	negs	r7, r5
1000343a:	416f      	adcs	r7, r5
1000343c:	4660      	mov	r0, ip
1000343e:	2800      	cmp	r0, #0
10003440:	d014      	beq.n	1000346c <__lesf2+0x5c>
10003442:	2000      	movs	r0, #0
10003444:	2f00      	cmp	r7, #0
10003446:	d103      	bne.n	10003450 <__lesf2+0x40>
10003448:	2900      	cmp	r1, #0
1000344a:	d10d      	bne.n	10003468 <__lesf2+0x58>
1000344c:	2101      	movs	r1, #1
1000344e:	4248      	negs	r0, r1
10003450:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003452:	4260      	negs	r0, r4
10003454:	4160      	adcs	r0, r4
10003456:	4684      	mov	ip, r0
10003458:	2a00      	cmp	r2, #0
1000345a:	d0ed      	beq.n	10003438 <__lesf2+0x28>
1000345c:	2800      	cmp	r0, #0
1000345e:	d1f3      	bne.n	10003448 <__lesf2+0x38>
10003460:	428e      	cmp	r6, r1
10003462:	d011      	beq.n	10003488 <__lesf2+0x78>
10003464:	2e00      	cmp	r6, #0
10003466:	d1f1      	bne.n	1000344c <__lesf2+0x3c>
10003468:	2001      	movs	r0, #1
1000346a:	e7f1      	b.n	10003450 <__lesf2+0x40>
1000346c:	2f00      	cmp	r7, #0
1000346e:	d0f7      	beq.n	10003460 <__lesf2+0x50>
10003470:	2001      	movs	r0, #1
10003472:	2e00      	cmp	r6, #0
10003474:	d0ec      	beq.n	10003450 <__lesf2+0x40>
10003476:	e7e9      	b.n	1000344c <__lesf2+0x3c>
10003478:	2002      	movs	r0, #2
1000347a:	2c00      	cmp	r4, #0
1000347c:	d1e8      	bne.n	10003450 <__lesf2+0x40>
1000347e:	e7d4      	b.n	1000342a <__lesf2+0x1a>
10003480:	2002      	movs	r0, #2
10003482:	2d00      	cmp	r5, #0
10003484:	d1e4      	bne.n	10003450 <__lesf2+0x40>
10003486:	e7d2      	b.n	1000342e <__lesf2+0x1e>
10003488:	4293      	cmp	r3, r2
1000348a:	dceb      	bgt.n	10003464 <__lesf2+0x54>
1000348c:	db04      	blt.n	10003498 <__lesf2+0x88>
1000348e:	42ac      	cmp	r4, r5
10003490:	d8e8      	bhi.n	10003464 <__lesf2+0x54>
10003492:	2000      	movs	r0, #0
10003494:	42ac      	cmp	r4, r5
10003496:	d2db      	bcs.n	10003450 <__lesf2+0x40>
10003498:	2e00      	cmp	r6, #0
1000349a:	d0d7      	beq.n	1000344c <__lesf2+0x3c>
1000349c:	2001      	movs	r0, #1
1000349e:	e7d7      	b.n	10003450 <__lesf2+0x40>

100034a0 <__aeabi_fmul>:
100034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100034a2:	465f      	mov	r7, fp
100034a4:	4656      	mov	r6, sl
100034a6:	464d      	mov	r5, r9
100034a8:	4644      	mov	r4, r8
100034aa:	b4f0      	push	{r4, r5, r6, r7}
100034ac:	0245      	lsls	r5, r0, #9
100034ae:	0046      	lsls	r6, r0, #1
100034b0:	b083      	sub	sp, #12
100034b2:	1c0f      	adds	r7, r1, #0
100034b4:	0a6d      	lsrs	r5, r5, #9
100034b6:	0e36      	lsrs	r6, r6, #24
100034b8:	0fc4      	lsrs	r4, r0, #31
100034ba:	2e00      	cmp	r6, #0
100034bc:	d106      	bne.n	100034cc <__aeabi_fmul+0x2c>
100034be:	2d00      	cmp	r5, #0
100034c0:	d170      	bne.n	100035a4 <__aeabi_fmul+0x104>
100034c2:	2104      	movs	r1, #4
100034c4:	2201      	movs	r2, #1
100034c6:	4688      	mov	r8, r1
100034c8:	4692      	mov	sl, r2
100034ca:	e009      	b.n	100034e0 <__aeabi_fmul+0x40>
100034cc:	2eff      	cmp	r6, #255	; 0xff
100034ce:	d043      	beq.n	10003558 <__aeabi_fmul+0xb8>
100034d0:	2380      	movs	r3, #128	; 0x80
100034d2:	0418      	lsls	r0, r3, #16
100034d4:	2100      	movs	r1, #0
100034d6:	4305      	orrs	r5, r0
100034d8:	00ed      	lsls	r5, r5, #3
100034da:	3e7f      	subs	r6, #127	; 0x7f
100034dc:	4688      	mov	r8, r1
100034de:	468a      	mov	sl, r1
100034e0:	1c38      	adds	r0, r7, #0
100034e2:	0043      	lsls	r3, r0, #1
100034e4:	027f      	lsls	r7, r7, #9
100034e6:	0fc1      	lsrs	r1, r0, #31
100034e8:	0a7f      	lsrs	r7, r7, #9
100034ea:	0e1b      	lsrs	r3, r3, #24
100034ec:	468b      	mov	fp, r1
100034ee:	d13a      	bne.n	10003566 <__aeabi_fmul+0xc6>
100034f0:	2101      	movs	r1, #1
100034f2:	2f00      	cmp	r7, #0
100034f4:	d162      	bne.n	100035bc <__aeabi_fmul+0x11c>
100034f6:	4658      	mov	r0, fp
100034f8:	4060      	eors	r0, r4
100034fa:	4642      	mov	r2, r8
100034fc:	9001      	str	r0, [sp, #4]
100034fe:	430a      	orrs	r2, r1
10003500:	2a0f      	cmp	r2, #15
10003502:	d93f      	bls.n	10003584 <__aeabi_fmul+0xe4>
10003504:	042c      	lsls	r4, r5, #16
10003506:	18f0      	adds	r0, r6, r3
10003508:	0c26      	lsrs	r6, r4, #16
1000350a:	043b      	lsls	r3, r7, #16
1000350c:	0c1a      	lsrs	r2, r3, #16
1000350e:	1c31      	adds	r1, r6, #0
10003510:	4351      	muls	r1, r2
10003512:	0c3f      	lsrs	r7, r7, #16
10003514:	0c2d      	lsrs	r5, r5, #16
10003516:	437e      	muls	r6, r7
10003518:	436a      	muls	r2, r5
1000351a:	4681      	mov	r9, r0
1000351c:	0c08      	lsrs	r0, r1, #16
1000351e:	1836      	adds	r6, r6, r0
10003520:	1c2c      	adds	r4, r5, #0
10003522:	18b3      	adds	r3, r6, r2
10003524:	437c      	muls	r4, r7
10003526:	429a      	cmp	r2, r3
10003528:	d900      	bls.n	1000352c <__aeabi_fmul+0x8c>
1000352a:	e09a      	b.n	10003662 <__aeabi_fmul+0x1c2>
1000352c:	0409      	lsls	r1, r1, #16
1000352e:	041d      	lsls	r5, r3, #16
10003530:	0c08      	lsrs	r0, r1, #16
10003532:	182e      	adds	r6, r5, r0
10003534:	01b5      	lsls	r5, r6, #6
10003536:	0c1b      	lsrs	r3, r3, #16
10003538:	1e69      	subs	r1, r5, #1
1000353a:	418d      	sbcs	r5, r1
1000353c:	0eb2      	lsrs	r2, r6, #26
1000353e:	18e7      	adds	r7, r4, r3
10003540:	4315      	orrs	r5, r2
10003542:	01bc      	lsls	r4, r7, #6
10003544:	4325      	orrs	r5, r4
10003546:	012b      	lsls	r3, r5, #4
10003548:	d54b      	bpl.n	100035e2 <__aeabi_fmul+0x142>
1000354a:	2001      	movs	r0, #1
1000354c:	4028      	ands	r0, r5
1000354e:	2101      	movs	r1, #1
10003550:	086d      	lsrs	r5, r5, #1
10003552:	4489      	add	r9, r1
10003554:	4305      	orrs	r5, r0
10003556:	e044      	b.n	100035e2 <__aeabi_fmul+0x142>
10003558:	2d00      	cmp	r5, #0
1000355a:	d11e      	bne.n	1000359a <__aeabi_fmul+0xfa>
1000355c:	2008      	movs	r0, #8
1000355e:	2102      	movs	r1, #2
10003560:	4680      	mov	r8, r0
10003562:	468a      	mov	sl, r1
10003564:	e7bc      	b.n	100034e0 <__aeabi_fmul+0x40>
10003566:	2bff      	cmp	r3, #255	; 0xff
10003568:	d012      	beq.n	10003590 <__aeabi_fmul+0xf0>
1000356a:	2280      	movs	r2, #128	; 0x80
1000356c:	0410      	lsls	r0, r2, #16
1000356e:	4307      	orrs	r7, r0
10003570:	4658      	mov	r0, fp
10003572:	2100      	movs	r1, #0
10003574:	4060      	eors	r0, r4
10003576:	4642      	mov	r2, r8
10003578:	00ff      	lsls	r7, r7, #3
1000357a:	3b7f      	subs	r3, #127	; 0x7f
1000357c:	9001      	str	r0, [sp, #4]
1000357e:	430a      	orrs	r2, r1
10003580:	2a0f      	cmp	r2, #15
10003582:	d8bf      	bhi.n	10003504 <__aeabi_fmul+0x64>
10003584:	0090      	lsls	r0, r2, #2
10003586:	4a5b      	ldr	r2, [pc, #364]	; (100036f4 <__aeabi_fmul+0x254>)
10003588:	4684      	mov	ip, r0
1000358a:	4462      	add	r2, ip
1000358c:	6810      	ldr	r0, [r2, #0]
1000358e:	4687      	mov	pc, r0
10003590:	1c39      	adds	r1, r7, #0
10003592:	1e4a      	subs	r2, r1, #1
10003594:	4191      	sbcs	r1, r2
10003596:	3102      	adds	r1, #2
10003598:	e7ad      	b.n	100034f6 <__aeabi_fmul+0x56>
1000359a:	220c      	movs	r2, #12
1000359c:	2303      	movs	r3, #3
1000359e:	4690      	mov	r8, r2
100035a0:	469a      	mov	sl, r3
100035a2:	e79d      	b.n	100034e0 <__aeabi_fmul+0x40>
100035a4:	1c28      	adds	r0, r5, #0
100035a6:	f002 fa81 	bl	10005aac <__clzsi2>
100035aa:	2276      	movs	r2, #118	; 0x76
100035ac:	1f46      	subs	r6, r0, #5
100035ae:	4253      	negs	r3, r2
100035b0:	40b5      	lsls	r5, r6
100035b2:	1a1e      	subs	r6, r3, r0
100035b4:	2000      	movs	r0, #0
100035b6:	4680      	mov	r8, r0
100035b8:	4682      	mov	sl, r0
100035ba:	e791      	b.n	100034e0 <__aeabi_fmul+0x40>
100035bc:	1c38      	adds	r0, r7, #0
100035be:	f002 fa75 	bl	10005aac <__clzsi2>
100035c2:	2176      	movs	r1, #118	; 0x76
100035c4:	1f43      	subs	r3, r0, #5
100035c6:	424a      	negs	r2, r1
100035c8:	409f      	lsls	r7, r3
100035ca:	2100      	movs	r1, #0
100035cc:	1a13      	subs	r3, r2, r0
100035ce:	e792      	b.n	100034f6 <__aeabi_fmul+0x56>
100035d0:	9401      	str	r4, [sp, #4]
100035d2:	4651      	mov	r1, sl
100035d4:	2902      	cmp	r1, #2
100035d6:	d02c      	beq.n	10003632 <__aeabi_fmul+0x192>
100035d8:	2903      	cmp	r1, #3
100035da:	d100      	bne.n	100035de <__aeabi_fmul+0x13e>
100035dc:	e080      	b.n	100036e0 <__aeabi_fmul+0x240>
100035de:	2901      	cmp	r1, #1
100035e0:	d048      	beq.n	10003674 <__aeabi_fmul+0x1d4>
100035e2:	464e      	mov	r6, r9
100035e4:	367f      	adds	r6, #127	; 0x7f
100035e6:	2e00      	cmp	r6, #0
100035e8:	dd51      	ble.n	1000368e <__aeabi_fmul+0x1ee>
100035ea:	240f      	movs	r4, #15
100035ec:	402c      	ands	r4, r5
100035ee:	2c04      	cmp	r4, #4
100035f0:	d000      	beq.n	100035f4 <__aeabi_fmul+0x154>
100035f2:	3504      	adds	r5, #4
100035f4:	012a      	lsls	r2, r5, #4
100035f6:	d503      	bpl.n	10003600 <__aeabi_fmul+0x160>
100035f8:	493f      	ldr	r1, [pc, #252]	; (100036f8 <__aeabi_fmul+0x258>)
100035fa:	464e      	mov	r6, r9
100035fc:	400d      	ands	r5, r1
100035fe:	3680      	adds	r6, #128	; 0x80
10003600:	2efe      	cmp	r6, #254	; 0xfe
10003602:	dd3d      	ble.n	10003680 <__aeabi_fmul+0x1e0>
10003604:	9b01      	ldr	r3, [sp, #4]
10003606:	2401      	movs	r4, #1
10003608:	401c      	ands	r4, r3
1000360a:	21ff      	movs	r1, #255	; 0xff
1000360c:	2500      	movs	r5, #0
1000360e:	05c8      	lsls	r0, r1, #23
10003610:	07e2      	lsls	r2, r4, #31
10003612:	4328      	orrs	r0, r5
10003614:	4310      	orrs	r0, r2
10003616:	b003      	add	sp, #12
10003618:	bc3c      	pop	{r2, r3, r4, r5}
1000361a:	4690      	mov	r8, r2
1000361c:	4699      	mov	r9, r3
1000361e:	46a2      	mov	sl, r4
10003620:	46ab      	mov	fp, r5
10003622:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003624:	2400      	movs	r4, #0
10003626:	4d35      	ldr	r5, [pc, #212]	; (100036fc <__aeabi_fmul+0x25c>)
10003628:	21ff      	movs	r1, #255	; 0xff
1000362a:	e7f0      	b.n	1000360e <__aeabi_fmul+0x16e>
1000362c:	4651      	mov	r1, sl
1000362e:	2902      	cmp	r1, #2
10003630:	d1d2      	bne.n	100035d8 <__aeabi_fmul+0x138>
10003632:	9d01      	ldr	r5, [sp, #4]
10003634:	2401      	movs	r4, #1
10003636:	402c      	ands	r4, r5
10003638:	21ff      	movs	r1, #255	; 0xff
1000363a:	2500      	movs	r5, #0
1000363c:	e7e7      	b.n	1000360e <__aeabi_fmul+0x16e>
1000363e:	465e      	mov	r6, fp
10003640:	1c3d      	adds	r5, r7, #0
10003642:	9601      	str	r6, [sp, #4]
10003644:	e7c6      	b.n	100035d4 <__aeabi_fmul+0x134>
10003646:	1c3d      	adds	r5, r7, #0
10003648:	e7c4      	b.n	100035d4 <__aeabi_fmul+0x134>
1000364a:	2680      	movs	r6, #128	; 0x80
1000364c:	03f3      	lsls	r3, r6, #15
1000364e:	421d      	tst	r5, r3
10003650:	d00b      	beq.n	1000366a <__aeabi_fmul+0x1ca>
10003652:	421f      	tst	r7, r3
10003654:	d109      	bne.n	1000366a <__aeabi_fmul+0x1ca>
10003656:	431f      	orrs	r7, r3
10003658:	027a      	lsls	r2, r7, #9
1000365a:	0a55      	lsrs	r5, r2, #9
1000365c:	465c      	mov	r4, fp
1000365e:	21ff      	movs	r1, #255	; 0xff
10003660:	e7d5      	b.n	1000360e <__aeabi_fmul+0x16e>
10003662:	2280      	movs	r2, #128	; 0x80
10003664:	0257      	lsls	r7, r2, #9
10003666:	19e4      	adds	r4, r4, r7
10003668:	e760      	b.n	1000352c <__aeabi_fmul+0x8c>
1000366a:	431d      	orrs	r5, r3
1000366c:	026f      	lsls	r7, r5, #9
1000366e:	0a7d      	lsrs	r5, r7, #9
10003670:	21ff      	movs	r1, #255	; 0xff
10003672:	e7cc      	b.n	1000360e <__aeabi_fmul+0x16e>
10003674:	9b01      	ldr	r3, [sp, #4]
10003676:	2500      	movs	r5, #0
10003678:	4019      	ands	r1, r3
1000367a:	b2cc      	uxtb	r4, r1
1000367c:	2100      	movs	r1, #0
1000367e:	e7c6      	b.n	1000360e <__aeabi_fmul+0x16e>
10003680:	9801      	ldr	r0, [sp, #4]
10003682:	01ad      	lsls	r5, r5, #6
10003684:	2401      	movs	r4, #1
10003686:	0a6d      	lsrs	r5, r5, #9
10003688:	b2f1      	uxtb	r1, r6
1000368a:	4004      	ands	r4, r0
1000368c:	e7bf      	b.n	1000360e <__aeabi_fmul+0x16e>
1000368e:	267e      	movs	r6, #126	; 0x7e
10003690:	4273      	negs	r3, r6
10003692:	464a      	mov	r2, r9
10003694:	1a9f      	subs	r7, r3, r2
10003696:	2f1b      	cmp	r7, #27
10003698:	dd05      	ble.n	100036a6 <__aeabi_fmul+0x206>
1000369a:	9d01      	ldr	r5, [sp, #4]
1000369c:	2401      	movs	r4, #1
1000369e:	402c      	ands	r4, r5
100036a0:	2100      	movs	r1, #0
100036a2:	2500      	movs	r5, #0
100036a4:	e7b3      	b.n	1000360e <__aeabi_fmul+0x16e>
100036a6:	4649      	mov	r1, r9
100036a8:	319e      	adds	r1, #158	; 0x9e
100036aa:	1c2c      	adds	r4, r5, #0
100036ac:	408d      	lsls	r5, r1
100036ae:	1c2e      	adds	r6, r5, #0
100036b0:	40fc      	lsrs	r4, r7
100036b2:	1e75      	subs	r5, r6, #1
100036b4:	41ae      	sbcs	r6, r5
100036b6:	4326      	orrs	r6, r4
100036b8:	200f      	movs	r0, #15
100036ba:	4030      	ands	r0, r6
100036bc:	2804      	cmp	r0, #4
100036be:	d000      	beq.n	100036c2 <__aeabi_fmul+0x222>
100036c0:	3604      	adds	r6, #4
100036c2:	0170      	lsls	r0, r6, #5
100036c4:	d505      	bpl.n	100036d2 <__aeabi_fmul+0x232>
100036c6:	9f01      	ldr	r7, [sp, #4]
100036c8:	2401      	movs	r4, #1
100036ca:	403c      	ands	r4, r7
100036cc:	2101      	movs	r1, #1
100036ce:	2500      	movs	r5, #0
100036d0:	e79d      	b.n	1000360e <__aeabi_fmul+0x16e>
100036d2:	9a01      	ldr	r2, [sp, #4]
100036d4:	01b3      	lsls	r3, r6, #6
100036d6:	2401      	movs	r4, #1
100036d8:	0a5d      	lsrs	r5, r3, #9
100036da:	4014      	ands	r4, r2
100036dc:	2100      	movs	r1, #0
100036de:	e796      	b.n	1000360e <__aeabi_fmul+0x16e>
100036e0:	2280      	movs	r2, #128	; 0x80
100036e2:	03d0      	lsls	r0, r2, #15
100036e4:	4305      	orrs	r5, r0
100036e6:	026c      	lsls	r4, r5, #9
100036e8:	9901      	ldr	r1, [sp, #4]
100036ea:	0a65      	lsrs	r5, r4, #9
100036ec:	2401      	movs	r4, #1
100036ee:	400c      	ands	r4, r1
100036f0:	21ff      	movs	r1, #255	; 0xff
100036f2:	e78c      	b.n	1000360e <__aeabi_fmul+0x16e>
100036f4:	10006b80 	.word	0x10006b80
100036f8:	f7ffffff 	.word	0xf7ffffff
100036fc:	007fffff 	.word	0x007fffff

10003700 <__aeabi_fsub>:
10003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003702:	0243      	lsls	r3, r0, #9
10003704:	0045      	lsls	r5, r0, #1
10003706:	024f      	lsls	r7, r1, #9
10003708:	004c      	lsls	r4, r1, #1
1000370a:	0fc2      	lsrs	r2, r0, #31
1000370c:	0998      	lsrs	r0, r3, #6
1000370e:	4684      	mov	ip, r0
10003710:	0e2d      	lsrs	r5, r5, #24
10003712:	0e20      	lsrs	r0, r4, #24
10003714:	0fc9      	lsrs	r1, r1, #31
10003716:	09bf      	lsrs	r7, r7, #6
10003718:	28ff      	cmp	r0, #255	; 0xff
1000371a:	d054      	beq.n	100037c6 <__aeabi_fsub+0xc6>
1000371c:	2601      	movs	r6, #1
1000371e:	4071      	eors	r1, r6
10003720:	428a      	cmp	r2, r1
10003722:	d03b      	beq.n	1000379c <__aeabi_fsub+0x9c>
10003724:	1a2c      	subs	r4, r5, r0
10003726:	2c00      	cmp	r4, #0
10003728:	dc00      	bgt.n	1000372c <__aeabi_fsub+0x2c>
1000372a:	e089      	b.n	10003840 <__aeabi_fsub+0x140>
1000372c:	2800      	cmp	r0, #0
1000372e:	d125      	bne.n	1000377c <__aeabi_fsub+0x7c>
10003730:	2f00      	cmp	r7, #0
10003732:	d14b      	bne.n	100037cc <__aeabi_fsub+0xcc>
10003734:	1c6e      	adds	r6, r5, #1
10003736:	1c2c      	adds	r4, r5, #0
10003738:	4663      	mov	r3, ip
1000373a:	1c15      	adds	r5, r2, #0
1000373c:	220f      	movs	r2, #15
1000373e:	401a      	ands	r2, r3
10003740:	2a04      	cmp	r2, #4
10003742:	d000      	beq.n	10003746 <__aeabi_fsub+0x46>
10003744:	3304      	adds	r3, #4
10003746:	2780      	movs	r7, #128	; 0x80
10003748:	04f9      	lsls	r1, r7, #19
1000374a:	2201      	movs	r2, #1
1000374c:	4019      	ands	r1, r3
1000374e:	402a      	ands	r2, r5
10003750:	2900      	cmp	r1, #0
10003752:	d006      	beq.n	10003762 <__aeabi_fsub+0x62>
10003754:	2eff      	cmp	r6, #255	; 0xff
10003756:	d100      	bne.n	1000375a <__aeabi_fsub+0x5a>
10003758:	e081      	b.n	1000385e <__aeabi_fsub+0x15e>
1000375a:	4db1      	ldr	r5, [pc, #708]	; (10003a20 <__aeabi_fsub+0x320>)
1000375c:	1c34      	adds	r4, r6, #0
1000375e:	402b      	ands	r3, r5
10003760:	3601      	adds	r6, #1
10003762:	b2f6      	uxtb	r6, r6
10003764:	08dd      	lsrs	r5, r3, #3
10003766:	2e01      	cmp	r6, #1
10003768:	dd62      	ble.n	10003830 <__aeabi_fsub+0x130>
1000376a:	026b      	lsls	r3, r5, #9
1000376c:	0a5d      	lsrs	r5, r3, #9
1000376e:	b2e4      	uxtb	r4, r4
10003770:	05e4      	lsls	r4, r4, #23
10003772:	4325      	orrs	r5, r4
10003774:	1c28      	adds	r0, r5, #0
10003776:	07d2      	lsls	r2, r2, #31
10003778:	4310      	orrs	r0, r2
1000377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000377c:	2dff      	cmp	r5, #255	; 0xff
1000377e:	d051      	beq.n	10003824 <__aeabi_fsub+0x124>
10003780:	2180      	movs	r1, #128	; 0x80
10003782:	04cb      	lsls	r3, r1, #19
10003784:	431f      	orrs	r7, r3
10003786:	2601      	movs	r6, #1
10003788:	2c1b      	cmp	r4, #27
1000378a:	dd70      	ble.n	1000386e <__aeabi_fsub+0x16e>
1000378c:	4667      	mov	r7, ip
1000378e:	1c2c      	adds	r4, r5, #0
10003790:	1bbb      	subs	r3, r7, r6
10003792:	1c15      	adds	r5, r2, #0
10003794:	0158      	lsls	r0, r3, #5
10003796:	d422      	bmi.n	100037de <__aeabi_fsub+0xde>
10003798:	1c66      	adds	r6, r4, #1
1000379a:	e7cf      	b.n	1000373c <__aeabi_fsub+0x3c>
1000379c:	1a2e      	subs	r6, r5, r0
1000379e:	2e00      	cmp	r6, #0
100037a0:	dd76      	ble.n	10003890 <__aeabi_fsub+0x190>
100037a2:	2800      	cmp	r0, #0
100037a4:	d032      	beq.n	1000380c <__aeabi_fsub+0x10c>
100037a6:	2dff      	cmp	r5, #255	; 0xff
100037a8:	d03c      	beq.n	10003824 <__aeabi_fsub+0x124>
100037aa:	2480      	movs	r4, #128	; 0x80
100037ac:	04e1      	lsls	r1, r4, #19
100037ae:	430f      	orrs	r7, r1
100037b0:	2301      	movs	r3, #1
100037b2:	2e1b      	cmp	r6, #27
100037b4:	dc00      	bgt.n	100037b8 <__aeabi_fsub+0xb8>
100037b6:	e0d1      	b.n	1000395c <__aeabi_fsub+0x25c>
100037b8:	4463      	add	r3, ip
100037ba:	1c2c      	adds	r4, r5, #0
100037bc:	0158      	lsls	r0, r3, #5
100037be:	d47a      	bmi.n	100038b6 <__aeabi_fsub+0x1b6>
100037c0:	1c66      	adds	r6, r4, #1
100037c2:	1c15      	adds	r5, r2, #0
100037c4:	e7ba      	b.n	1000373c <__aeabi_fsub+0x3c>
100037c6:	2f00      	cmp	r7, #0
100037c8:	d1aa      	bne.n	10003720 <__aeabi_fsub+0x20>
100037ca:	e7a7      	b.n	1000371c <__aeabi_fsub+0x1c>
100037cc:	3c01      	subs	r4, #1
100037ce:	2c00      	cmp	r4, #0
100037d0:	d16d      	bne.n	100038ae <__aeabi_fsub+0x1ae>
100037d2:	4663      	mov	r3, ip
100037d4:	1c2c      	adds	r4, r5, #0
100037d6:	1bdb      	subs	r3, r3, r7
100037d8:	1c15      	adds	r5, r2, #0
100037da:	0158      	lsls	r0, r3, #5
100037dc:	d5dc      	bpl.n	10003798 <__aeabi_fsub+0x98>
100037de:	019a      	lsls	r2, r3, #6
100037e0:	0996      	lsrs	r6, r2, #6
100037e2:	1c30      	adds	r0, r6, #0
100037e4:	f002 f962 	bl	10005aac <__clzsi2>
100037e8:	3805      	subs	r0, #5
100037ea:	4086      	lsls	r6, r0
100037ec:	4284      	cmp	r4, r0
100037ee:	dc39      	bgt.n	10003864 <__aeabi_fsub+0x164>
100037f0:	1b00      	subs	r0, r0, r4
100037f2:	231f      	movs	r3, #31
100037f4:	1a1a      	subs	r2, r3, r0
100037f6:	1c33      	adds	r3, r6, #0
100037f8:	1c31      	adds	r1, r6, #0
100037fa:	1c44      	adds	r4, r0, #1
100037fc:	4093      	lsls	r3, r2
100037fe:	40e1      	lsrs	r1, r4
10003800:	1e5e      	subs	r6, r3, #1
10003802:	41b3      	sbcs	r3, r6
10003804:	430b      	orrs	r3, r1
10003806:	2601      	movs	r6, #1
10003808:	2400      	movs	r4, #0
1000380a:	e797      	b.n	1000373c <__aeabi_fsub+0x3c>
1000380c:	2f00      	cmp	r7, #0
1000380e:	d100      	bne.n	10003812 <__aeabi_fsub+0x112>
10003810:	e790      	b.n	10003734 <__aeabi_fsub+0x34>
10003812:	3e01      	subs	r6, #1
10003814:	2e00      	cmp	r6, #0
10003816:	d103      	bne.n	10003820 <__aeabi_fsub+0x120>
10003818:	4664      	mov	r4, ip
1000381a:	193b      	adds	r3, r7, r4
1000381c:	1c2c      	adds	r4, r5, #0
1000381e:	e7cd      	b.n	100037bc <__aeabi_fsub+0xbc>
10003820:	2dff      	cmp	r5, #255	; 0xff
10003822:	d1c5      	bne.n	100037b0 <__aeabi_fsub+0xb0>
10003824:	1c15      	adds	r5, r2, #0
10003826:	2280      	movs	r2, #128	; 0x80
10003828:	4663      	mov	r3, ip
1000382a:	0056      	lsls	r6, r2, #1
1000382c:	24ff      	movs	r4, #255	; 0xff
1000382e:	e785      	b.n	1000373c <__aeabi_fsub+0x3c>
10003830:	2d00      	cmp	r5, #0
10003832:	d09c      	beq.n	1000376e <__aeabi_fsub+0x6e>
10003834:	2c00      	cmp	r4, #0
10003836:	d028      	beq.n	1000388a <__aeabi_fsub+0x18a>
10003838:	2080      	movs	r0, #128	; 0x80
1000383a:	03c7      	lsls	r7, r0, #15
1000383c:	433d      	orrs	r5, r7
1000383e:	e794      	b.n	1000376a <__aeabi_fsub+0x6a>
10003840:	2c00      	cmp	r4, #0
10003842:	d145      	bne.n	100038d0 <__aeabi_fsub+0x1d0>
10003844:	1c6b      	adds	r3, r5, #1
10003846:	b2d8      	uxtb	r0, r3
10003848:	2801      	cmp	r0, #1
1000384a:	dc00      	bgt.n	1000384e <__aeabi_fsub+0x14e>
1000384c:	e090      	b.n	10003970 <__aeabi_fsub+0x270>
1000384e:	4664      	mov	r4, ip
10003850:	1be6      	subs	r6, r4, r7
10003852:	0173      	lsls	r3, r6, #5
10003854:	d557      	bpl.n	10003906 <__aeabi_fsub+0x206>
10003856:	1b3e      	subs	r6, r7, r4
10003858:	1c2c      	adds	r4, r5, #0
1000385a:	1c0d      	adds	r5, r1, #0
1000385c:	e7c1      	b.n	100037e2 <__aeabi_fsub+0xe2>
1000385e:	24ff      	movs	r4, #255	; 0xff
10003860:	2500      	movs	r5, #0
10003862:	e785      	b.n	10003770 <__aeabi_fsub+0x70>
10003864:	4b6e      	ldr	r3, [pc, #440]	; (10003a20 <__aeabi_fsub+0x320>)
10003866:	1a24      	subs	r4, r4, r0
10003868:	4033      	ands	r3, r6
1000386a:	1c66      	adds	r6, r4, #1
1000386c:	e766      	b.n	1000373c <__aeabi_fsub+0x3c>
1000386e:	1c38      	adds	r0, r7, #0
10003870:	2120      	movs	r1, #32
10003872:	40e0      	lsrs	r0, r4
10003874:	1b0c      	subs	r4, r1, r4
10003876:	40a7      	lsls	r7, r4
10003878:	1c3e      	adds	r6, r7, #0
1000387a:	1e77      	subs	r7, r6, #1
1000387c:	41be      	sbcs	r6, r7
1000387e:	4306      	orrs	r6, r0
10003880:	4667      	mov	r7, ip
10003882:	1c2c      	adds	r4, r5, #0
10003884:	1bbb      	subs	r3, r7, r6
10003886:	1c15      	adds	r5, r2, #0
10003888:	e784      	b.n	10003794 <__aeabi_fsub+0x94>
1000388a:	0269      	lsls	r1, r5, #9
1000388c:	0a4d      	lsrs	r5, r1, #9
1000388e:	e76f      	b.n	10003770 <__aeabi_fsub+0x70>
10003890:	2e00      	cmp	r6, #0
10003892:	d179      	bne.n	10003988 <__aeabi_fsub+0x288>
10003894:	1c6c      	adds	r4, r5, #1
10003896:	b2e0      	uxtb	r0, r4
10003898:	2801      	cmp	r0, #1
1000389a:	dd4b      	ble.n	10003934 <__aeabi_fsub+0x234>
1000389c:	2cff      	cmp	r4, #255	; 0xff
1000389e:	d100      	bne.n	100038a2 <__aeabi_fsub+0x1a2>
100038a0:	e098      	b.n	100039d4 <__aeabi_fsub+0x2d4>
100038a2:	4661      	mov	r1, ip
100038a4:	187f      	adds	r7, r7, r1
100038a6:	1cae      	adds	r6, r5, #2
100038a8:	087b      	lsrs	r3, r7, #1
100038aa:	1c15      	adds	r5, r2, #0
100038ac:	e746      	b.n	1000373c <__aeabi_fsub+0x3c>
100038ae:	2dff      	cmp	r5, #255	; 0xff
100038b0:	d000      	beq.n	100038b4 <__aeabi_fsub+0x1b4>
100038b2:	e768      	b.n	10003786 <__aeabi_fsub+0x86>
100038b4:	e7b6      	b.n	10003824 <__aeabi_fsub+0x124>
100038b6:	1c67      	adds	r7, r4, #1
100038b8:	2fff      	cmp	r7, #255	; 0xff
100038ba:	d036      	beq.n	1000392a <__aeabi_fsub+0x22a>
100038bc:	4858      	ldr	r0, [pc, #352]	; (10003a20 <__aeabi_fsub+0x320>)
100038be:	2101      	movs	r1, #1
100038c0:	4019      	ands	r1, r3
100038c2:	4003      	ands	r3, r0
100038c4:	085b      	lsrs	r3, r3, #1
100038c6:	1ca6      	adds	r6, r4, #2
100038c8:	430b      	orrs	r3, r1
100038ca:	1c3c      	adds	r4, r7, #0
100038cc:	1c15      	adds	r5, r2, #0
100038ce:	e735      	b.n	1000373c <__aeabi_fsub+0x3c>
100038d0:	4266      	negs	r6, r4
100038d2:	2d00      	cmp	r5, #0
100038d4:	d01e      	beq.n	10003914 <__aeabi_fsub+0x214>
100038d6:	28ff      	cmp	r0, #255	; 0xff
100038d8:	d06f      	beq.n	100039ba <__aeabi_fsub+0x2ba>
100038da:	2580      	movs	r5, #128	; 0x80
100038dc:	4662      	mov	r2, ip
100038de:	04eb      	lsls	r3, r5, #19
100038e0:	431a      	orrs	r2, r3
100038e2:	4694      	mov	ip, r2
100038e4:	2501      	movs	r5, #1
100038e6:	2e1b      	cmp	r6, #27
100038e8:	dc09      	bgt.n	100038fe <__aeabi_fsub+0x1fe>
100038ea:	4662      	mov	r2, ip
100038ec:	2320      	movs	r3, #32
100038ee:	40f2      	lsrs	r2, r6
100038f0:	4664      	mov	r4, ip
100038f2:	1b9e      	subs	r6, r3, r6
100038f4:	40b4      	lsls	r4, r6
100038f6:	1c25      	adds	r5, r4, #0
100038f8:	1e6c      	subs	r4, r5, #1
100038fa:	41a5      	sbcs	r5, r4
100038fc:	4315      	orrs	r5, r2
100038fe:	1b7b      	subs	r3, r7, r5
10003900:	1c04      	adds	r4, r0, #0
10003902:	1c0d      	adds	r5, r1, #0
10003904:	e769      	b.n	100037da <__aeabi_fsub+0xda>
10003906:	2e00      	cmp	r6, #0
10003908:	d10c      	bne.n	10003924 <__aeabi_fsub+0x224>
1000390a:	2200      	movs	r2, #0
1000390c:	2601      	movs	r6, #1
1000390e:	2304      	movs	r3, #4
10003910:	2400      	movs	r4, #0
10003912:	e726      	b.n	10003762 <__aeabi_fsub+0x62>
10003914:	4664      	mov	r4, ip
10003916:	2c00      	cmp	r4, #0
10003918:	d155      	bne.n	100039c6 <__aeabi_fsub+0x2c6>
1000391a:	1c46      	adds	r6, r0, #1
1000391c:	1c3b      	adds	r3, r7, #0
1000391e:	1c04      	adds	r4, r0, #0
10003920:	1c0d      	adds	r5, r1, #0
10003922:	e70b      	b.n	1000373c <__aeabi_fsub+0x3c>
10003924:	1c2c      	adds	r4, r5, #0
10003926:	1c15      	adds	r5, r2, #0
10003928:	e75b      	b.n	100037e2 <__aeabi_fsub+0xe2>
1000392a:	2380      	movs	r3, #128	; 0x80
1000392c:	005e      	lsls	r6, r3, #1
1000392e:	24ff      	movs	r4, #255	; 0xff
10003930:	2304      	movs	r3, #4
10003932:	e716      	b.n	10003762 <__aeabi_fsub+0x62>
10003934:	2d00      	cmp	r5, #0
10003936:	d000      	beq.n	1000393a <__aeabi_fsub+0x23a>
10003938:	e08d      	b.n	10003a56 <__aeabi_fsub+0x356>
1000393a:	4665      	mov	r5, ip
1000393c:	2d00      	cmp	r5, #0
1000393e:	d100      	bne.n	10003942 <__aeabi_fsub+0x242>
10003940:	e0ad      	b.n	10003a9e <__aeabi_fsub+0x39e>
10003942:	2f00      	cmp	r7, #0
10003944:	d100      	bne.n	10003948 <__aeabi_fsub+0x248>
10003946:	e081      	b.n	10003a4c <__aeabi_fsub+0x34c>
10003948:	197b      	adds	r3, r7, r5
1000394a:	015c      	lsls	r4, r3, #5
1000394c:	d400      	bmi.n	10003950 <__aeabi_fsub+0x250>
1000394e:	e07e      	b.n	10003a4e <__aeabi_fsub+0x34e>
10003950:	4f33      	ldr	r7, [pc, #204]	; (10003a20 <__aeabi_fsub+0x320>)
10003952:	1c15      	adds	r5, r2, #0
10003954:	403b      	ands	r3, r7
10003956:	2602      	movs	r6, #2
10003958:	2401      	movs	r4, #1
1000395a:	e6ef      	b.n	1000373c <__aeabi_fsub+0x3c>
1000395c:	1c38      	adds	r0, r7, #0
1000395e:	2320      	movs	r3, #32
10003960:	40f0      	lsrs	r0, r6
10003962:	1b9e      	subs	r6, r3, r6
10003964:	40b7      	lsls	r7, r6
10003966:	1c3b      	adds	r3, r7, #0
10003968:	1e5f      	subs	r7, r3, #1
1000396a:	41bb      	sbcs	r3, r7
1000396c:	4303      	orrs	r3, r0
1000396e:	e723      	b.n	100037b8 <__aeabi_fsub+0xb8>
10003970:	2d00      	cmp	r5, #0
10003972:	d115      	bne.n	100039a0 <__aeabi_fsub+0x2a0>
10003974:	4665      	mov	r5, ip
10003976:	2d00      	cmp	r5, #0
10003978:	d147      	bne.n	10003a0a <__aeabi_fsub+0x30a>
1000397a:	2f00      	cmp	r7, #0
1000397c:	d0c5      	beq.n	1000390a <__aeabi_fsub+0x20a>
1000397e:	1c3b      	adds	r3, r7, #0
10003980:	1c0d      	adds	r5, r1, #0
10003982:	2601      	movs	r6, #1
10003984:	2400      	movs	r4, #0
10003986:	e6d9      	b.n	1000373c <__aeabi_fsub+0x3c>
10003988:	4276      	negs	r6, r6
1000398a:	2d00      	cmp	r5, #0
1000398c:	d126      	bne.n	100039dc <__aeabi_fsub+0x2dc>
1000398e:	4665      	mov	r5, ip
10003990:	2d00      	cmp	r5, #0
10003992:	d000      	beq.n	10003996 <__aeabi_fsub+0x296>
10003994:	e07d      	b.n	10003a92 <__aeabi_fsub+0x392>
10003996:	1c46      	adds	r6, r0, #1
10003998:	1c3b      	adds	r3, r7, #0
1000399a:	1c04      	adds	r4, r0, #0
1000399c:	1c15      	adds	r5, r2, #0
1000399e:	e6cd      	b.n	1000373c <__aeabi_fsub+0x3c>
100039a0:	4665      	mov	r5, ip
100039a2:	2d00      	cmp	r5, #0
100039a4:	d140      	bne.n	10003a28 <__aeabi_fsub+0x328>
100039a6:	2f00      	cmp	r7, #0
100039a8:	d107      	bne.n	100039ba <__aeabi_fsub+0x2ba>
100039aa:	2180      	movs	r1, #128	; 0x80
100039ac:	2200      	movs	r2, #0
100039ae:	004e      	lsls	r6, r1, #1
100039b0:	4b1c      	ldr	r3, [pc, #112]	; (10003a24 <__aeabi_fsub+0x324>)
100039b2:	24ff      	movs	r4, #255	; 0xff
100039b4:	e6d5      	b.n	10003762 <__aeabi_fsub+0x62>
100039b6:	28ff      	cmp	r0, #255	; 0xff
100039b8:	d194      	bne.n	100038e4 <__aeabi_fsub+0x1e4>
100039ba:	2080      	movs	r0, #128	; 0x80
100039bc:	1c3b      	adds	r3, r7, #0
100039be:	1c0d      	adds	r5, r1, #0
100039c0:	0046      	lsls	r6, r0, #1
100039c2:	24ff      	movs	r4, #255	; 0xff
100039c4:	e6ba      	b.n	1000373c <__aeabi_fsub+0x3c>
100039c6:	3e01      	subs	r6, #1
100039c8:	2e00      	cmp	r6, #0
100039ca:	d1f4      	bne.n	100039b6 <__aeabi_fsub+0x2b6>
100039cc:	1b3b      	subs	r3, r7, r4
100039ce:	1c0d      	adds	r5, r1, #0
100039d0:	1c04      	adds	r4, r0, #0
100039d2:	e702      	b.n	100037da <__aeabi_fsub+0xda>
100039d4:	2580      	movs	r5, #128	; 0x80
100039d6:	006e      	lsls	r6, r5, #1
100039d8:	2304      	movs	r3, #4
100039da:	e6c2      	b.n	10003762 <__aeabi_fsub+0x62>
100039dc:	28ff      	cmp	r0, #255	; 0xff
100039de:	d052      	beq.n	10003a86 <__aeabi_fsub+0x386>
100039e0:	2480      	movs	r4, #128	; 0x80
100039e2:	4661      	mov	r1, ip
100039e4:	04e3      	lsls	r3, r4, #19
100039e6:	4319      	orrs	r1, r3
100039e8:	468c      	mov	ip, r1
100039ea:	2301      	movs	r3, #1
100039ec:	2e1b      	cmp	r6, #27
100039ee:	dc09      	bgt.n	10003a04 <__aeabi_fsub+0x304>
100039f0:	2120      	movs	r1, #32
100039f2:	4664      	mov	r4, ip
100039f4:	40f4      	lsrs	r4, r6
100039f6:	4665      	mov	r5, ip
100039f8:	1b8e      	subs	r6, r1, r6
100039fa:	40b5      	lsls	r5, r6
100039fc:	1c2b      	adds	r3, r5, #0
100039fe:	1e59      	subs	r1, r3, #1
10003a00:	418b      	sbcs	r3, r1
10003a02:	4323      	orrs	r3, r4
10003a04:	19db      	adds	r3, r3, r7
10003a06:	1c04      	adds	r4, r0, #0
10003a08:	e6d8      	b.n	100037bc <__aeabi_fsub+0xbc>
10003a0a:	2f00      	cmp	r7, #0
10003a0c:	d01e      	beq.n	10003a4c <__aeabi_fsub+0x34c>
10003a0e:	1beb      	subs	r3, r5, r7
10003a10:	0158      	lsls	r0, r3, #5
10003a12:	d54b      	bpl.n	10003aac <__aeabi_fsub+0x3ac>
10003a14:	1b7b      	subs	r3, r7, r5
10003a16:	2601      	movs	r6, #1
10003a18:	1c0d      	adds	r5, r1, #0
10003a1a:	2400      	movs	r4, #0
10003a1c:	e68e      	b.n	1000373c <__aeabi_fsub+0x3c>
10003a1e:	46c0      	nop			; (mov r8, r8)
10003a20:	fbffffff 	.word	0xfbffffff
10003a24:	03fffffc 	.word	0x03fffffc
10003a28:	2f00      	cmp	r7, #0
10003a2a:	d100      	bne.n	10003a2e <__aeabi_fsub+0x32e>
10003a2c:	e6fa      	b.n	10003824 <__aeabi_fsub+0x124>
10003a2e:	2080      	movs	r0, #128	; 0x80
10003a30:	08eb      	lsrs	r3, r5, #3
10003a32:	03c4      	lsls	r4, r0, #15
10003a34:	4223      	tst	r3, r4
10003a36:	d037      	beq.n	10003aa8 <__aeabi_fsub+0x3a8>
10003a38:	08ff      	lsrs	r7, r7, #3
10003a3a:	4227      	tst	r7, r4
10003a3c:	d134      	bne.n	10003aa8 <__aeabi_fsub+0x3a8>
10003a3e:	1c3b      	adds	r3, r7, #0
10003a40:	1c0d      	adds	r5, r1, #0
10003a42:	2280      	movs	r2, #128	; 0x80
10003a44:	00db      	lsls	r3, r3, #3
10003a46:	0056      	lsls	r6, r2, #1
10003a48:	24ff      	movs	r4, #255	; 0xff
10003a4a:	e677      	b.n	1000373c <__aeabi_fsub+0x3c>
10003a4c:	4663      	mov	r3, ip
10003a4e:	1c15      	adds	r5, r2, #0
10003a50:	2601      	movs	r6, #1
10003a52:	2400      	movs	r4, #0
10003a54:	e672      	b.n	1000373c <__aeabi_fsub+0x3c>
10003a56:	4664      	mov	r4, ip
10003a58:	2c00      	cmp	r4, #0
10003a5a:	d014      	beq.n	10003a86 <__aeabi_fsub+0x386>
10003a5c:	2f00      	cmp	r7, #0
10003a5e:	d100      	bne.n	10003a62 <__aeabi_fsub+0x362>
10003a60:	e6e0      	b.n	10003824 <__aeabi_fsub+0x124>
10003a62:	2380      	movs	r3, #128	; 0x80
10003a64:	08e6      	lsrs	r6, r4, #3
10003a66:	03d8      	lsls	r0, r3, #15
10003a68:	1c31      	adds	r1, r6, #0
10003a6a:	4206      	tst	r6, r0
10003a6c:	d003      	beq.n	10003a76 <__aeabi_fsub+0x376>
10003a6e:	08f9      	lsrs	r1, r7, #3
10003a70:	4201      	tst	r1, r0
10003a72:	d000      	beq.n	10003a76 <__aeabi_fsub+0x376>
10003a74:	1c31      	adds	r1, r6, #0
10003a76:	1c15      	adds	r5, r2, #0
10003a78:	2280      	movs	r2, #128	; 0x80
10003a7a:	00cb      	lsls	r3, r1, #3
10003a7c:	0056      	lsls	r6, r2, #1
10003a7e:	24ff      	movs	r4, #255	; 0xff
10003a80:	e65c      	b.n	1000373c <__aeabi_fsub+0x3c>
10003a82:	28ff      	cmp	r0, #255	; 0xff
10003a84:	d1b1      	bne.n	100039ea <__aeabi_fsub+0x2ea>
10003a86:	2080      	movs	r0, #128	; 0x80
10003a88:	1c3b      	adds	r3, r7, #0
10003a8a:	1c15      	adds	r5, r2, #0
10003a8c:	0046      	lsls	r6, r0, #1
10003a8e:	24ff      	movs	r4, #255	; 0xff
10003a90:	e654      	b.n	1000373c <__aeabi_fsub+0x3c>
10003a92:	3e01      	subs	r6, #1
10003a94:	2e00      	cmp	r6, #0
10003a96:	d1f4      	bne.n	10003a82 <__aeabi_fsub+0x382>
10003a98:	197b      	adds	r3, r7, r5
10003a9a:	1c04      	adds	r4, r0, #0
10003a9c:	e68e      	b.n	100037bc <__aeabi_fsub+0xbc>
10003a9e:	1c3b      	adds	r3, r7, #0
10003aa0:	1c15      	adds	r5, r2, #0
10003aa2:	2601      	movs	r6, #1
10003aa4:	2400      	movs	r4, #0
10003aa6:	e649      	b.n	1000373c <__aeabi_fsub+0x3c>
10003aa8:	1c15      	adds	r5, r2, #0
10003aaa:	e7ca      	b.n	10003a42 <__aeabi_fsub+0x342>
10003aac:	2b00      	cmp	r3, #0
10003aae:	d100      	bne.n	10003ab2 <__aeabi_fsub+0x3b2>
10003ab0:	e72b      	b.n	1000390a <__aeabi_fsub+0x20a>
10003ab2:	e7cc      	b.n	10003a4e <__aeabi_fsub+0x34e>

10003ab4 <__aeabi_f2iz>:
10003ab4:	0243      	lsls	r3, r0, #9
10003ab6:	0042      	lsls	r2, r0, #1
10003ab8:	0a59      	lsrs	r1, r3, #9
10003aba:	0e13      	lsrs	r3, r2, #24
10003abc:	0fc2      	lsrs	r2, r0, #31
10003abe:	2000      	movs	r0, #0
10003ac0:	2b7e      	cmp	r3, #126	; 0x7e
10003ac2:	dd0d      	ble.n	10003ae0 <__aeabi_f2iz+0x2c>
10003ac4:	2b9d      	cmp	r3, #157	; 0x9d
10003ac6:	dc0c      	bgt.n	10003ae2 <__aeabi_f2iz+0x2e>
10003ac8:	2080      	movs	r0, #128	; 0x80
10003aca:	0400      	lsls	r0, r0, #16
10003acc:	4301      	orrs	r1, r0
10003ace:	2b95      	cmp	r3, #149	; 0x95
10003ad0:	dc0a      	bgt.n	10003ae8 <__aeabi_f2iz+0x34>
10003ad2:	2096      	movs	r0, #150	; 0x96
10003ad4:	1ac3      	subs	r3, r0, r3
10003ad6:	40d9      	lsrs	r1, r3
10003ad8:	4248      	negs	r0, r1
10003ada:	2a00      	cmp	r2, #0
10003adc:	d100      	bne.n	10003ae0 <__aeabi_f2iz+0x2c>
10003ade:	1c08      	adds	r0, r1, #0
10003ae0:	4770      	bx	lr
10003ae2:	4903      	ldr	r1, [pc, #12]	; (10003af0 <__aeabi_f2iz+0x3c>)
10003ae4:	1850      	adds	r0, r2, r1
10003ae6:	e7fb      	b.n	10003ae0 <__aeabi_f2iz+0x2c>
10003ae8:	3b96      	subs	r3, #150	; 0x96
10003aea:	4099      	lsls	r1, r3
10003aec:	e7f4      	b.n	10003ad8 <__aeabi_f2iz+0x24>
10003aee:	46c0      	nop			; (mov r8, r8)
10003af0:	7fffffff 	.word	0x7fffffff

10003af4 <__aeabi_i2f>:
10003af4:	b570      	push	{r4, r5, r6, lr}
10003af6:	1e04      	subs	r4, r0, #0
10003af8:	d03c      	beq.n	10003b74 <__aeabi_i2f+0x80>
10003afa:	0fc5      	lsrs	r5, r0, #31
10003afc:	d000      	beq.n	10003b00 <__aeabi_i2f+0xc>
10003afe:	4244      	negs	r4, r0
10003b00:	1c20      	adds	r0, r4, #0
10003b02:	f001 ffd3 	bl	10005aac <__clzsi2>
10003b06:	219e      	movs	r1, #158	; 0x9e
10003b08:	1c26      	adds	r6, r4, #0
10003b0a:	1a0b      	subs	r3, r1, r0
10003b0c:	2b96      	cmp	r3, #150	; 0x96
10003b0e:	dc0a      	bgt.n	10003b26 <__aeabi_i2f+0x32>
10003b10:	3808      	subs	r0, #8
10003b12:	4084      	lsls	r4, r0
10003b14:	0261      	lsls	r1, r4, #9
10003b16:	0a4c      	lsrs	r4, r1, #9
10003b18:	b2db      	uxtb	r3, r3
10003b1a:	05db      	lsls	r3, r3, #23
10003b1c:	431c      	orrs	r4, r3
10003b1e:	07ed      	lsls	r5, r5, #31
10003b20:	1c20      	adds	r0, r4, #0
10003b22:	4328      	orrs	r0, r5
10003b24:	bd70      	pop	{r4, r5, r6, pc}
10003b26:	2b99      	cmp	r3, #153	; 0x99
10003b28:	dd0a      	ble.n	10003b40 <__aeabi_i2f+0x4c>
10003b2a:	2205      	movs	r2, #5
10003b2c:	1a14      	subs	r4, r2, r0
10003b2e:	1c31      	adds	r1, r6, #0
10003b30:	40e1      	lsrs	r1, r4
10003b32:	1c04      	adds	r4, r0, #0
10003b34:	341b      	adds	r4, #27
10003b36:	40a6      	lsls	r6, r4
10003b38:	1c0a      	adds	r2, r1, #0
10003b3a:	1e71      	subs	r1, r6, #1
10003b3c:	418e      	sbcs	r6, r1
10003b3e:	4316      	orrs	r6, r2
10003b40:	2805      	cmp	r0, #5
10003b42:	dc1b      	bgt.n	10003b7c <__aeabi_i2f+0x88>
10003b44:	4c14      	ldr	r4, [pc, #80]	; (10003b98 <__aeabi_i2f+0xa4>)
10003b46:	220f      	movs	r2, #15
10003b48:	4034      	ands	r4, r6
10003b4a:	4016      	ands	r6, r2
10003b4c:	2e04      	cmp	r6, #4
10003b4e:	d000      	beq.n	10003b52 <__aeabi_i2f+0x5e>
10003b50:	3404      	adds	r4, #4
10003b52:	0162      	lsls	r2, r4, #5
10003b54:	d505      	bpl.n	10003b62 <__aeabi_i2f+0x6e>
10003b56:	239f      	movs	r3, #159	; 0x9f
10003b58:	1a1b      	subs	r3, r3, r0
10003b5a:	2bff      	cmp	r3, #255	; 0xff
10003b5c:	d00c      	beq.n	10003b78 <__aeabi_i2f+0x84>
10003b5e:	480e      	ldr	r0, [pc, #56]	; (10003b98 <__aeabi_i2f+0xa4>)
10003b60:	4004      	ands	r4, r0
10003b62:	1c5e      	adds	r6, r3, #1
10003b64:	b2f1      	uxtb	r1, r6
10003b66:	08e4      	lsrs	r4, r4, #3
10003b68:	2901      	cmp	r1, #1
10003b6a:	dd0a      	ble.n	10003b82 <__aeabi_i2f+0x8e>
10003b6c:	0264      	lsls	r4, r4, #9
10003b6e:	0a64      	lsrs	r4, r4, #9
10003b70:	b2db      	uxtb	r3, r3
10003b72:	e7d2      	b.n	10003b1a <__aeabi_i2f+0x26>
10003b74:	2500      	movs	r5, #0
10003b76:	2300      	movs	r3, #0
10003b78:	2400      	movs	r4, #0
10003b7a:	e7ce      	b.n	10003b1a <__aeabi_i2f+0x26>
10003b7c:	1f41      	subs	r1, r0, #5
10003b7e:	408e      	lsls	r6, r1
10003b80:	e7e0      	b.n	10003b44 <__aeabi_i2f+0x50>
10003b82:	2c00      	cmp	r4, #0
10003b84:	d0f4      	beq.n	10003b70 <__aeabi_i2f+0x7c>
10003b86:	2b00      	cmp	r3, #0
10003b88:	d003      	beq.n	10003b92 <__aeabi_i2f+0x9e>
10003b8a:	2280      	movs	r2, #128	; 0x80
10003b8c:	03d0      	lsls	r0, r2, #15
10003b8e:	4304      	orrs	r4, r0
10003b90:	e7ec      	b.n	10003b6c <__aeabi_i2f+0x78>
10003b92:	0266      	lsls	r6, r4, #9
10003b94:	0a74      	lsrs	r4, r6, #9
10003b96:	e7c0      	b.n	10003b1a <__aeabi_i2f+0x26>
10003b98:	fbffffff 	.word	0xfbffffff

10003b9c <__aeabi_ui2f>:
10003b9c:	b510      	push	{r4, lr}
10003b9e:	1e04      	subs	r4, r0, #0
10003ba0:	d034      	beq.n	10003c0c <__aeabi_ui2f+0x70>
10003ba2:	f001 ff83 	bl	10005aac <__clzsi2>
10003ba6:	239e      	movs	r3, #158	; 0x9e
10003ba8:	1a1b      	subs	r3, r3, r0
10003baa:	2b96      	cmp	r3, #150	; 0x96
10003bac:	dc07      	bgt.n	10003bbe <__aeabi_ui2f+0x22>
10003bae:	3808      	subs	r0, #8
10003bb0:	4084      	lsls	r4, r0
10003bb2:	0264      	lsls	r4, r4, #9
10003bb4:	0a61      	lsrs	r1, r4, #9
10003bb6:	b2db      	uxtb	r3, r3
10003bb8:	05d8      	lsls	r0, r3, #23
10003bba:	4308      	orrs	r0, r1
10003bbc:	bd10      	pop	{r4, pc}
10003bbe:	2b99      	cmp	r3, #153	; 0x99
10003bc0:	dd0a      	ble.n	10003bd8 <__aeabi_ui2f+0x3c>
10003bc2:	1c02      	adds	r2, r0, #0
10003bc4:	321b      	adds	r2, #27
10003bc6:	1c21      	adds	r1, r4, #0
10003bc8:	4091      	lsls	r1, r2
10003bca:	1c0a      	adds	r2, r1, #0
10003bcc:	1e51      	subs	r1, r2, #1
10003bce:	418a      	sbcs	r2, r1
10003bd0:	2105      	movs	r1, #5
10003bd2:	1a09      	subs	r1, r1, r0
10003bd4:	40cc      	lsrs	r4, r1
10003bd6:	4314      	orrs	r4, r2
10003bd8:	2805      	cmp	r0, #5
10003bda:	dc1a      	bgt.n	10003c12 <__aeabi_ui2f+0x76>
10003bdc:	4a18      	ldr	r2, [pc, #96]	; (10003c40 <__aeabi_ui2f+0xa4>)
10003bde:	210f      	movs	r1, #15
10003be0:	4022      	ands	r2, r4
10003be2:	400c      	ands	r4, r1
10003be4:	2c04      	cmp	r4, #4
10003be6:	d000      	beq.n	10003bea <__aeabi_ui2f+0x4e>
10003be8:	3204      	adds	r2, #4
10003bea:	0151      	lsls	r1, r2, #5
10003bec:	d505      	bpl.n	10003bfa <__aeabi_ui2f+0x5e>
10003bee:	249f      	movs	r4, #159	; 0x9f
10003bf0:	1a23      	subs	r3, r4, r0
10003bf2:	2bff      	cmp	r3, #255	; 0xff
10003bf4:	d021      	beq.n	10003c3a <__aeabi_ui2f+0x9e>
10003bf6:	4812      	ldr	r0, [pc, #72]	; (10003c40 <__aeabi_ui2f+0xa4>)
10003bf8:	4002      	ands	r2, r0
10003bfa:	1c59      	adds	r1, r3, #1
10003bfc:	b2cc      	uxtb	r4, r1
10003bfe:	08d2      	lsrs	r2, r2, #3
10003c00:	2c01      	cmp	r4, #1
10003c02:	dd09      	ble.n	10003c18 <__aeabi_ui2f+0x7c>
10003c04:	0250      	lsls	r0, r2, #9
10003c06:	0a41      	lsrs	r1, r0, #9
10003c08:	b2db      	uxtb	r3, r3
10003c0a:	e7d5      	b.n	10003bb8 <__aeabi_ui2f+0x1c>
10003c0c:	2300      	movs	r3, #0
10003c0e:	2100      	movs	r1, #0
10003c10:	e7d2      	b.n	10003bb8 <__aeabi_ui2f+0x1c>
10003c12:	1f42      	subs	r2, r0, #5
10003c14:	4094      	lsls	r4, r2
10003c16:	e7e1      	b.n	10003bdc <__aeabi_ui2f+0x40>
10003c18:	2a00      	cmp	r2, #0
10003c1a:	d00b      	beq.n	10003c34 <__aeabi_ui2f+0x98>
10003c1c:	2b00      	cmp	r3, #0
10003c1e:	d006      	beq.n	10003c2e <__aeabi_ui2f+0x92>
10003c20:	2180      	movs	r1, #128	; 0x80
10003c22:	03cc      	lsls	r4, r1, #15
10003c24:	4322      	orrs	r2, r4
10003c26:	0252      	lsls	r2, r2, #9
10003c28:	0a51      	lsrs	r1, r2, #9
10003c2a:	b2db      	uxtb	r3, r3
10003c2c:	e7c4      	b.n	10003bb8 <__aeabi_ui2f+0x1c>
10003c2e:	0250      	lsls	r0, r2, #9
10003c30:	0a41      	lsrs	r1, r0, #9
10003c32:	e7c1      	b.n	10003bb8 <__aeabi_ui2f+0x1c>
10003c34:	b2db      	uxtb	r3, r3
10003c36:	2100      	movs	r1, #0
10003c38:	e7be      	b.n	10003bb8 <__aeabi_ui2f+0x1c>
10003c3a:	23ff      	movs	r3, #255	; 0xff
10003c3c:	2100      	movs	r1, #0
10003c3e:	e7bb      	b.n	10003bb8 <__aeabi_ui2f+0x1c>
10003c40:	fbffffff 	.word	0xfbffffff

10003c44 <__aeabi_dadd>:
10003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003c46:	465f      	mov	r7, fp
10003c48:	4656      	mov	r6, sl
10003c4a:	464d      	mov	r5, r9
10003c4c:	4644      	mov	r4, r8
10003c4e:	b4f0      	push	{r4, r5, r6, r7}
10003c50:	030c      	lsls	r4, r1, #12
10003c52:	0f46      	lsrs	r6, r0, #29
10003c54:	0a64      	lsrs	r4, r4, #9
10003c56:	4334      	orrs	r4, r6
10003c58:	46a3      	mov	fp, r4
10003c5a:	005e      	lsls	r6, r3, #1
10003c5c:	031c      	lsls	r4, r3, #12
10003c5e:	0fdb      	lsrs	r3, r3, #31
10003c60:	469c      	mov	ip, r3
10003c62:	0a63      	lsrs	r3, r4, #9
10003c64:	4698      	mov	r8, r3
10003c66:	004d      	lsls	r5, r1, #1
10003c68:	0f53      	lsrs	r3, r2, #29
10003c6a:	4644      	mov	r4, r8
10003c6c:	431c      	orrs	r4, r3
10003c6e:	0d6d      	lsrs	r5, r5, #21
10003c70:	0fc9      	lsrs	r1, r1, #31
10003c72:	0d76      	lsrs	r6, r6, #21
10003c74:	00d2      	lsls	r2, r2, #3
10003c76:	1c0f      	adds	r7, r1, #0
10003c78:	00c0      	lsls	r0, r0, #3
10003c7a:	46a1      	mov	r9, r4
10003c7c:	4692      	mov	sl, r2
10003c7e:	1bab      	subs	r3, r5, r6
10003c80:	4561      	cmp	r1, ip
10003c82:	d100      	bne.n	10003c86 <__aeabi_dadd+0x42>
10003c84:	e0a4      	b.n	10003dd0 <__aeabi_dadd+0x18c>
10003c86:	2b00      	cmp	r3, #0
10003c88:	dc00      	bgt.n	10003c8c <__aeabi_dadd+0x48>
10003c8a:	e0f5      	b.n	10003e78 <__aeabi_dadd+0x234>
10003c8c:	2e00      	cmp	r6, #0
10003c8e:	d10c      	bne.n	10003caa <__aeabi_dadd+0x66>
10003c90:	1c26      	adds	r6, r4, #0
10003c92:	4316      	orrs	r6, r2
10003c94:	d100      	bne.n	10003c98 <__aeabi_dadd+0x54>
10003c96:	e0c2      	b.n	10003e1e <__aeabi_dadd+0x1da>
10003c98:	3b01      	subs	r3, #1
10003c9a:	2b00      	cmp	r3, #0
10003c9c:	d000      	beq.n	10003ca0 <__aeabi_dadd+0x5c>
10003c9e:	e146      	b.n	10003f2e <__aeabi_dadd+0x2ea>
10003ca0:	465c      	mov	r4, fp
10003ca2:	464b      	mov	r3, r9
10003ca4:	1a82      	subs	r2, r0, r2
10003ca6:	1ae7      	subs	r7, r4, r3
10003ca8:	e021      	b.n	10003cee <__aeabi_dadd+0xaa>
10003caa:	4ed2      	ldr	r6, [pc, #840]	; (10003ff4 <__aeabi_dadd+0x3b0>)
10003cac:	42b5      	cmp	r5, r6
10003cae:	d100      	bne.n	10003cb2 <__aeabi_dadd+0x6e>
10003cb0:	e0cd      	b.n	10003e4e <__aeabi_dadd+0x20a>
10003cb2:	2480      	movs	r4, #128	; 0x80
10003cb4:	464a      	mov	r2, r9
10003cb6:	0427      	lsls	r7, r4, #16
10003cb8:	433a      	orrs	r2, r7
10003cba:	4691      	mov	r9, r2
10003cbc:	2b38      	cmp	r3, #56	; 0x38
10003cbe:	dd00      	ble.n	10003cc2 <__aeabi_dadd+0x7e>
10003cc0:	e10f      	b.n	10003ee2 <__aeabi_dadd+0x29e>
10003cc2:	2b1f      	cmp	r3, #31
10003cc4:	dd00      	ble.n	10003cc8 <__aeabi_dadd+0x84>
10003cc6:	e150      	b.n	10003f6a <__aeabi_dadd+0x326>
10003cc8:	2620      	movs	r6, #32
10003cca:	1af6      	subs	r6, r6, r3
10003ccc:	464c      	mov	r4, r9
10003cce:	4652      	mov	r2, sl
10003cd0:	4657      	mov	r7, sl
10003cd2:	40b4      	lsls	r4, r6
10003cd4:	40b7      	lsls	r7, r6
10003cd6:	40da      	lsrs	r2, r3
10003cd8:	4322      	orrs	r2, r4
10003cda:	1c3e      	adds	r6, r7, #0
10003cdc:	464c      	mov	r4, r9
10003cde:	1e77      	subs	r7, r6, #1
10003ce0:	41be      	sbcs	r6, r7
10003ce2:	40dc      	lsrs	r4, r3
10003ce4:	4332      	orrs	r2, r6
10003ce6:	1c26      	adds	r6, r4, #0
10003ce8:	465b      	mov	r3, fp
10003cea:	1a82      	subs	r2, r0, r2
10003cec:	1b9f      	subs	r7, r3, r6
10003cee:	4290      	cmp	r0, r2
10003cf0:	4180      	sbcs	r0, r0
10003cf2:	4246      	negs	r6, r0
10003cf4:	1bbb      	subs	r3, r7, r6
10003cf6:	1c14      	adds	r4, r2, #0
10003cf8:	1c2e      	adds	r6, r5, #0
10003cfa:	1c0f      	adds	r7, r1, #0
10003cfc:	0218      	lsls	r0, r3, #8
10003cfe:	d400      	bmi.n	10003d02 <__aeabi_dadd+0xbe>
10003d00:	e0ae      	b.n	10003e60 <__aeabi_dadd+0x21c>
10003d02:	025d      	lsls	r5, r3, #9
10003d04:	0a69      	lsrs	r1, r5, #9
10003d06:	4688      	mov	r8, r1
10003d08:	4642      	mov	r2, r8
10003d0a:	2a00      	cmp	r2, #0
10003d0c:	d100      	bne.n	10003d10 <__aeabi_dadd+0xcc>
10003d0e:	e0d9      	b.n	10003ec4 <__aeabi_dadd+0x280>
10003d10:	4640      	mov	r0, r8
10003d12:	f001 fecb 	bl	10005aac <__clzsi2>
10003d16:	1c05      	adds	r5, r0, #0
10003d18:	3d08      	subs	r5, #8
10003d1a:	2d1f      	cmp	r5, #31
10003d1c:	dd00      	ble.n	10003d20 <__aeabi_dadd+0xdc>
10003d1e:	e0da      	b.n	10003ed6 <__aeabi_dadd+0x292>
10003d20:	2228      	movs	r2, #40	; 0x28
10003d22:	1a13      	subs	r3, r2, r0
10003d24:	1c20      	adds	r0, r4, #0
10003d26:	4641      	mov	r1, r8
10003d28:	40d8      	lsrs	r0, r3
10003d2a:	40a9      	lsls	r1, r5
10003d2c:	1c03      	adds	r3, r0, #0
10003d2e:	430b      	orrs	r3, r1
10003d30:	40ac      	lsls	r4, r5
10003d32:	42ae      	cmp	r6, r5
10003d34:	dd00      	ble.n	10003d38 <__aeabi_dadd+0xf4>
10003d36:	e090      	b.n	10003e5a <__aeabi_dadd+0x216>
10003d38:	1bae      	subs	r6, r5, r6
10003d3a:	1c71      	adds	r1, r6, #1
10003d3c:	291f      	cmp	r1, #31
10003d3e:	dd00      	ble.n	10003d42 <__aeabi_dadd+0xfe>
10003d40:	e100      	b.n	10003f44 <__aeabi_dadd+0x300>
10003d42:	201f      	movs	r0, #31
10003d44:	1b85      	subs	r5, r0, r6
10003d46:	1c1a      	adds	r2, r3, #0
10003d48:	1c20      	adds	r0, r4, #0
10003d4a:	40aa      	lsls	r2, r5
10003d4c:	40c8      	lsrs	r0, r1
10003d4e:	40ac      	lsls	r4, r5
10003d50:	4310      	orrs	r0, r2
10003d52:	1e66      	subs	r6, r4, #1
10003d54:	41b4      	sbcs	r4, r6
10003d56:	4304      	orrs	r4, r0
10003d58:	40cb      	lsrs	r3, r1
10003d5a:	2201      	movs	r2, #1
10003d5c:	2600      	movs	r6, #0
10003d5e:	200f      	movs	r0, #15
10003d60:	4020      	ands	r0, r4
10003d62:	2804      	cmp	r0, #4
10003d64:	d064      	beq.n	10003e30 <__aeabi_dadd+0x1ec>
10003d66:	1d20      	adds	r0, r4, #4
10003d68:	42a0      	cmp	r0, r4
10003d6a:	41a4      	sbcs	r4, r4
10003d6c:	4265      	negs	r5, r4
10003d6e:	2180      	movs	r1, #128	; 0x80
10003d70:	195b      	adds	r3, r3, r5
10003d72:	2401      	movs	r4, #1
10003d74:	040d      	lsls	r5, r1, #16
10003d76:	401d      	ands	r5, r3
10003d78:	4027      	ands	r7, r4
10003d7a:	2d00      	cmp	r5, #0
10003d7c:	d007      	beq.n	10003d8e <__aeabi_dadd+0x14a>
10003d7e:	4e9d      	ldr	r6, [pc, #628]	; (10003ff4 <__aeabi_dadd+0x3b0>)
10003d80:	42b2      	cmp	r2, r6
10003d82:	d100      	bne.n	10003d86 <__aeabi_dadd+0x142>
10003d84:	e09a      	b.n	10003ebc <__aeabi_dadd+0x278>
10003d86:	499c      	ldr	r1, [pc, #624]	; (10003ff8 <__aeabi_dadd+0x3b4>)
10003d88:	1c16      	adds	r6, r2, #0
10003d8a:	400b      	ands	r3, r1
10003d8c:	3201      	adds	r2, #1
10003d8e:	075c      	lsls	r4, r3, #29
10003d90:	08c0      	lsrs	r0, r0, #3
10003d92:	0552      	lsls	r2, r2, #21
10003d94:	4304      	orrs	r4, r0
10003d96:	08db      	lsrs	r3, r3, #3
10003d98:	0d55      	lsrs	r5, r2, #21
10003d9a:	2d01      	cmp	r5, #1
10003d9c:	dd62      	ble.n	10003e64 <__aeabi_dadd+0x220>
10003d9e:	031b      	lsls	r3, r3, #12
10003da0:	0576      	lsls	r6, r6, #21
10003da2:	0b1b      	lsrs	r3, r3, #12
10003da4:	0d76      	lsrs	r6, r6, #21
10003da6:	2000      	movs	r0, #0
10003da8:	2100      	movs	r1, #0
10003daa:	0d09      	lsrs	r1, r1, #20
10003dac:	1c20      	adds	r0, r4, #0
10003dae:	050a      	lsls	r2, r1, #20
10003db0:	4c92      	ldr	r4, [pc, #584]	; (10003ffc <__aeabi_dadd+0x3b8>)
10003db2:	4313      	orrs	r3, r2
10003db4:	0576      	lsls	r6, r6, #21
10003db6:	0875      	lsrs	r5, r6, #1
10003db8:	401c      	ands	r4, r3
10003dba:	432c      	orrs	r4, r5
10003dbc:	0063      	lsls	r3, r4, #1
10003dbe:	07ff      	lsls	r7, r7, #31
10003dc0:	0859      	lsrs	r1, r3, #1
10003dc2:	4339      	orrs	r1, r7
10003dc4:	bc3c      	pop	{r2, r3, r4, r5}
10003dc6:	4690      	mov	r8, r2
10003dc8:	4699      	mov	r9, r3
10003dca:	46a2      	mov	sl, r4
10003dcc:	46ab      	mov	fp, r5
10003dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003dd0:	2b00      	cmp	r3, #0
10003dd2:	dc00      	bgt.n	10003dd6 <__aeabi_dadd+0x192>
10003dd4:	e091      	b.n	10003efa <__aeabi_dadd+0x2b6>
10003dd6:	2e00      	cmp	r6, #0
10003dd8:	d031      	beq.n	10003e3e <__aeabi_dadd+0x1fa>
10003dda:	4e86      	ldr	r6, [pc, #536]	; (10003ff4 <__aeabi_dadd+0x3b0>)
10003ddc:	42b5      	cmp	r5, r6
10003dde:	d100      	bne.n	10003de2 <__aeabi_dadd+0x19e>
10003de0:	e0a9      	b.n	10003f36 <__aeabi_dadd+0x2f2>
10003de2:	2480      	movs	r4, #128	; 0x80
10003de4:	464e      	mov	r6, r9
10003de6:	0422      	lsls	r2, r4, #16
10003de8:	4316      	orrs	r6, r2
10003dea:	46b1      	mov	r9, r6
10003dec:	2b38      	cmp	r3, #56	; 0x38
10003dee:	dd00      	ble.n	10003df2 <__aeabi_dadd+0x1ae>
10003df0:	e118      	b.n	10004024 <__aeabi_dadd+0x3e0>
10003df2:	2b1f      	cmp	r3, #31
10003df4:	dd00      	ble.n	10003df8 <__aeabi_dadd+0x1b4>
10003df6:	e173      	b.n	100040e0 <__aeabi_dadd+0x49c>
10003df8:	2620      	movs	r6, #32
10003dfa:	1af6      	subs	r6, r6, r3
10003dfc:	464a      	mov	r2, r9
10003dfe:	40b2      	lsls	r2, r6
10003e00:	4690      	mov	r8, r2
10003e02:	4652      	mov	r2, sl
10003e04:	4644      	mov	r4, r8
10003e06:	40da      	lsrs	r2, r3
10003e08:	4322      	orrs	r2, r4
10003e0a:	4654      	mov	r4, sl
10003e0c:	40b4      	lsls	r4, r6
10003e0e:	1c26      	adds	r6, r4, #0
10003e10:	1e74      	subs	r4, r6, #1
10003e12:	41a6      	sbcs	r6, r4
10003e14:	464c      	mov	r4, r9
10003e16:	4332      	orrs	r2, r6
10003e18:	40dc      	lsrs	r4, r3
10003e1a:	1812      	adds	r2, r2, r0
10003e1c:	e0f6      	b.n	1000400c <__aeabi_dadd+0x3c8>
10003e1e:	1c04      	adds	r4, r0, #0
10003e20:	200f      	movs	r0, #15
10003e22:	1c6a      	adds	r2, r5, #1
10003e24:	465b      	mov	r3, fp
10003e26:	1c2e      	adds	r6, r5, #0
10003e28:	1c0f      	adds	r7, r1, #0
10003e2a:	4020      	ands	r0, r4
10003e2c:	2804      	cmp	r0, #4
10003e2e:	d19a      	bne.n	10003d66 <__aeabi_dadd+0x122>
10003e30:	2580      	movs	r5, #128	; 0x80
10003e32:	042d      	lsls	r5, r5, #16
10003e34:	2101      	movs	r1, #1
10003e36:	401d      	ands	r5, r3
10003e38:	400f      	ands	r7, r1
10003e3a:	1c20      	adds	r0, r4, #0
10003e3c:	e79d      	b.n	10003d7a <__aeabi_dadd+0x136>
10003e3e:	4314      	orrs	r4, r2
10003e40:	d000      	beq.n	10003e44 <__aeabi_dadd+0x200>
10003e42:	e0dd      	b.n	10004000 <__aeabi_dadd+0x3bc>
10003e44:	1c6a      	adds	r2, r5, #1
10003e46:	465b      	mov	r3, fp
10003e48:	1c04      	adds	r4, r0, #0
10003e4a:	1c2e      	adds	r6, r5, #0
10003e4c:	e787      	b.n	10003d5e <__aeabi_dadd+0x11a>
10003e4e:	2180      	movs	r1, #128	; 0x80
10003e50:	465b      	mov	r3, fp
10003e52:	1c04      	adds	r4, r0, #0
10003e54:	010a      	lsls	r2, r1, #4
10003e56:	1c2e      	adds	r6, r5, #0
10003e58:	e781      	b.n	10003d5e <__aeabi_dadd+0x11a>
10003e5a:	1b76      	subs	r6, r6, r5
10003e5c:	4d66      	ldr	r5, [pc, #408]	; (10003ff8 <__aeabi_dadd+0x3b4>)
10003e5e:	402b      	ands	r3, r5
10003e60:	1c72      	adds	r2, r6, #1
10003e62:	e77c      	b.n	10003d5e <__aeabi_dadd+0x11a>
10003e64:	1c21      	adds	r1, r4, #0
10003e66:	4319      	orrs	r1, r3
10003e68:	d100      	bne.n	10003e6c <__aeabi_dadd+0x228>
10003e6a:	e267      	b.n	1000433c <__aeabi_dadd+0x6f8>
10003e6c:	2e00      	cmp	r6, #0
10003e6e:	d041      	beq.n	10003ef4 <__aeabi_dadd+0x2b0>
10003e70:	2080      	movs	r0, #128	; 0x80
10003e72:	0302      	lsls	r2, r0, #12
10003e74:	4313      	orrs	r3, r2
10003e76:	e792      	b.n	10003d9e <__aeabi_dadd+0x15a>
10003e78:	2b00      	cmp	r3, #0
10003e7a:	d000      	beq.n	10003e7e <__aeabi_dadd+0x23a>
10003e7c:	e088      	b.n	10003f90 <__aeabi_dadd+0x34c>
10003e7e:	1c69      	adds	r1, r5, #1
10003e80:	054e      	lsls	r6, r1, #21
10003e82:	0d74      	lsrs	r4, r6, #21
10003e84:	2c01      	cmp	r4, #1
10003e86:	dc00      	bgt.n	10003e8a <__aeabi_dadd+0x246>
10003e88:	e11a      	b.n	100040c0 <__aeabi_dadd+0x47c>
10003e8a:	465b      	mov	r3, fp
10003e8c:	1c16      	adds	r6, r2, #0
10003e8e:	464c      	mov	r4, r9
10003e90:	1a82      	subs	r2, r0, r2
10003e92:	1b19      	subs	r1, r3, r4
10003e94:	4290      	cmp	r0, r2
10003e96:	419b      	sbcs	r3, r3
10003e98:	425b      	negs	r3, r3
10003e9a:	1ac9      	subs	r1, r1, r3
10003e9c:	4688      	mov	r8, r1
10003e9e:	020b      	lsls	r3, r1, #8
10003ea0:	d400      	bmi.n	10003ea4 <__aeabi_dadd+0x260>
10003ea2:	e09e      	b.n	10003fe2 <__aeabi_dadd+0x39e>
10003ea4:	1a37      	subs	r7, r6, r0
10003ea6:	45ba      	cmp	sl, r7
10003ea8:	4192      	sbcs	r2, r2
10003eaa:	465e      	mov	r6, fp
10003eac:	1ba4      	subs	r4, r4, r6
10003eae:	4253      	negs	r3, r2
10003eb0:	1ae1      	subs	r1, r4, r3
10003eb2:	4688      	mov	r8, r1
10003eb4:	1c3c      	adds	r4, r7, #0
10003eb6:	1c2e      	adds	r6, r5, #0
10003eb8:	4667      	mov	r7, ip
10003eba:	e725      	b.n	10003d08 <__aeabi_dadd+0xc4>
10003ebc:	1c16      	adds	r6, r2, #0
10003ebe:	2300      	movs	r3, #0
10003ec0:	2400      	movs	r4, #0
10003ec2:	e770      	b.n	10003da6 <__aeabi_dadd+0x162>
10003ec4:	1c20      	adds	r0, r4, #0
10003ec6:	f001 fdf1 	bl	10005aac <__clzsi2>
10003eca:	3020      	adds	r0, #32
10003ecc:	1c05      	adds	r5, r0, #0
10003ece:	3d08      	subs	r5, #8
10003ed0:	2d1f      	cmp	r5, #31
10003ed2:	dc00      	bgt.n	10003ed6 <__aeabi_dadd+0x292>
10003ed4:	e724      	b.n	10003d20 <__aeabi_dadd+0xdc>
10003ed6:	1c03      	adds	r3, r0, #0
10003ed8:	3b28      	subs	r3, #40	; 0x28
10003eda:	409c      	lsls	r4, r3
10003edc:	1c23      	adds	r3, r4, #0
10003ede:	2400      	movs	r4, #0
10003ee0:	e727      	b.n	10003d32 <__aeabi_dadd+0xee>
10003ee2:	464a      	mov	r2, r9
10003ee4:	4653      	mov	r3, sl
10003ee6:	431a      	orrs	r2, r3
10003ee8:	2600      	movs	r6, #0
10003eea:	2a00      	cmp	r2, #0
10003eec:	d100      	bne.n	10003ef0 <__aeabi_dadd+0x2ac>
10003eee:	e6fb      	b.n	10003ce8 <__aeabi_dadd+0xa4>
10003ef0:	2201      	movs	r2, #1
10003ef2:	e6f9      	b.n	10003ce8 <__aeabi_dadd+0xa4>
10003ef4:	031d      	lsls	r5, r3, #12
10003ef6:	0b2b      	lsrs	r3, r5, #12
10003ef8:	e755      	b.n	10003da6 <__aeabi_dadd+0x162>
10003efa:	2b00      	cmp	r3, #0
10003efc:	d000      	beq.n	10003f00 <__aeabi_dadd+0x2bc>
10003efe:	e104      	b.n	1000410a <__aeabi_dadd+0x4c6>
10003f00:	1c6e      	adds	r6, r5, #1
10003f02:	0574      	lsls	r4, r6, #21
10003f04:	0d63      	lsrs	r3, r4, #21
10003f06:	2b01      	cmp	r3, #1
10003f08:	dc00      	bgt.n	10003f0c <__aeabi_dadd+0x2c8>
10003f0a:	e0aa      	b.n	10004062 <__aeabi_dadd+0x41e>
10003f0c:	4939      	ldr	r1, [pc, #228]	; (10003ff4 <__aeabi_dadd+0x3b0>)
10003f0e:	428e      	cmp	r6, r1
10003f10:	d100      	bne.n	10003f14 <__aeabi_dadd+0x2d0>
10003f12:	e130      	b.n	10004176 <__aeabi_dadd+0x532>
10003f14:	1811      	adds	r1, r2, r0
10003f16:	4281      	cmp	r1, r0
10003f18:	4180      	sbcs	r0, r0
10003f1a:	464b      	mov	r3, r9
10003f1c:	4242      	negs	r2, r0
10003f1e:	445b      	add	r3, fp
10003f20:	189b      	adds	r3, r3, r2
10003f22:	07dc      	lsls	r4, r3, #31
10003f24:	0849      	lsrs	r1, r1, #1
10003f26:	430c      	orrs	r4, r1
10003f28:	085b      	lsrs	r3, r3, #1
10003f2a:	1caa      	adds	r2, r5, #2
10003f2c:	e717      	b.n	10003d5e <__aeabi_dadd+0x11a>
10003f2e:	4f31      	ldr	r7, [pc, #196]	; (10003ff4 <__aeabi_dadd+0x3b0>)
10003f30:	42bd      	cmp	r5, r7
10003f32:	d000      	beq.n	10003f36 <__aeabi_dadd+0x2f2>
10003f34:	e6c2      	b.n	10003cbc <__aeabi_dadd+0x78>
10003f36:	1c04      	adds	r4, r0, #0
10003f38:	2080      	movs	r0, #128	; 0x80
10003f3a:	465b      	mov	r3, fp
10003f3c:	1c0f      	adds	r7, r1, #0
10003f3e:	0102      	lsls	r2, r0, #4
10003f40:	1c2e      	adds	r6, r5, #0
10003f42:	e70c      	b.n	10003d5e <__aeabi_dadd+0x11a>
10003f44:	1c30      	adds	r0, r6, #0
10003f46:	381f      	subs	r0, #31
10003f48:	1c1a      	adds	r2, r3, #0
10003f4a:	40c2      	lsrs	r2, r0
10003f4c:	1c15      	adds	r5, r2, #0
10003f4e:	2920      	cmp	r1, #32
10003f50:	d100      	bne.n	10003f54 <__aeabi_dadd+0x310>
10003f52:	e082      	b.n	1000405a <__aeabi_dadd+0x416>
10003f54:	213f      	movs	r1, #63	; 0x3f
10003f56:	1b8e      	subs	r6, r1, r6
10003f58:	40b3      	lsls	r3, r6
10003f5a:	431c      	orrs	r4, r3
10003f5c:	1e63      	subs	r3, r4, #1
10003f5e:	419c      	sbcs	r4, r3
10003f60:	432c      	orrs	r4, r5
10003f62:	2201      	movs	r2, #1
10003f64:	2300      	movs	r3, #0
10003f66:	2600      	movs	r6, #0
10003f68:	e6f9      	b.n	10003d5e <__aeabi_dadd+0x11a>
10003f6a:	1c1c      	adds	r4, r3, #0
10003f6c:	3c20      	subs	r4, #32
10003f6e:	464f      	mov	r7, r9
10003f70:	40e7      	lsrs	r7, r4
10003f72:	1c3e      	adds	r6, r7, #0
10003f74:	2b20      	cmp	r3, #32
10003f76:	d072      	beq.n	1000405e <__aeabi_dadd+0x41a>
10003f78:	2240      	movs	r2, #64	; 0x40
10003f7a:	1ad4      	subs	r4, r2, r3
10003f7c:	464b      	mov	r3, r9
10003f7e:	40a3      	lsls	r3, r4
10003f80:	1c1a      	adds	r2, r3, #0
10003f82:	4657      	mov	r7, sl
10003f84:	433a      	orrs	r2, r7
10003f86:	1e53      	subs	r3, r2, #1
10003f88:	419a      	sbcs	r2, r3
10003f8a:	4332      	orrs	r2, r6
10003f8c:	2600      	movs	r6, #0
10003f8e:	e6ab      	b.n	10003ce8 <__aeabi_dadd+0xa4>
10003f90:	425f      	negs	r7, r3
10003f92:	2d00      	cmp	r5, #0
10003f94:	d050      	beq.n	10004038 <__aeabi_dadd+0x3f4>
10003f96:	4d17      	ldr	r5, [pc, #92]	; (10003ff4 <__aeabi_dadd+0x3b0>)
10003f98:	42ae      	cmp	r6, r5
10003f9a:	d100      	bne.n	10003f9e <__aeabi_dadd+0x35a>
10003f9c:	e155      	b.n	1000424a <__aeabi_dadd+0x606>
10003f9e:	2480      	movs	r4, #128	; 0x80
10003fa0:	465a      	mov	r2, fp
10003fa2:	0421      	lsls	r1, r4, #16
10003fa4:	430a      	orrs	r2, r1
10003fa6:	4693      	mov	fp, r2
10003fa8:	2f38      	cmp	r7, #56	; 0x38
10003faa:	dd00      	ble.n	10003fae <__aeabi_dadd+0x36a>
10003fac:	e0da      	b.n	10004164 <__aeabi_dadd+0x520>
10003fae:	2f1f      	cmp	r7, #31
10003fb0:	dd00      	ble.n	10003fb4 <__aeabi_dadd+0x370>
10003fb2:	e178      	b.n	100042a6 <__aeabi_dadd+0x662>
10003fb4:	2120      	movs	r1, #32
10003fb6:	1bcc      	subs	r4, r1, r7
10003fb8:	1c05      	adds	r5, r0, #0
10003fba:	465a      	mov	r2, fp
10003fbc:	40a2      	lsls	r2, r4
10003fbe:	40fd      	lsrs	r5, r7
10003fc0:	40a0      	lsls	r0, r4
10003fc2:	4315      	orrs	r5, r2
10003fc4:	465b      	mov	r3, fp
10003fc6:	1e42      	subs	r2, r0, #1
10003fc8:	4190      	sbcs	r0, r2
10003fca:	4328      	orrs	r0, r5
10003fcc:	40fb      	lsrs	r3, r7
10003fce:	4657      	mov	r7, sl
10003fd0:	1a3c      	subs	r4, r7, r0
10003fd2:	45a2      	cmp	sl, r4
10003fd4:	4192      	sbcs	r2, r2
10003fd6:	4648      	mov	r0, r9
10003fd8:	1ac1      	subs	r1, r0, r3
10003fda:	4255      	negs	r5, r2
10003fdc:	1b4b      	subs	r3, r1, r5
10003fde:	4667      	mov	r7, ip
10003fe0:	e68c      	b.n	10003cfc <__aeabi_dadd+0xb8>
10003fe2:	1c08      	adds	r0, r1, #0
10003fe4:	4310      	orrs	r0, r2
10003fe6:	d130      	bne.n	1000404a <__aeabi_dadd+0x406>
10003fe8:	2700      	movs	r7, #0
10003fea:	2201      	movs	r2, #1
10003fec:	2300      	movs	r3, #0
10003fee:	2004      	movs	r0, #4
10003ff0:	2600      	movs	r6, #0
10003ff2:	e6cc      	b.n	10003d8e <__aeabi_dadd+0x14a>
10003ff4:	000007ff 	.word	0x000007ff
10003ff8:	ff7fffff 	.word	0xff7fffff
10003ffc:	800fffff 	.word	0x800fffff
10004000:	3b01      	subs	r3, #1
10004002:	2b00      	cmp	r3, #0
10004004:	d124      	bne.n	10004050 <__aeabi_dadd+0x40c>
10004006:	4653      	mov	r3, sl
10004008:	181a      	adds	r2, r3, r0
1000400a:	464c      	mov	r4, r9
1000400c:	4282      	cmp	r2, r0
1000400e:	4180      	sbcs	r0, r0
10004010:	445c      	add	r4, fp
10004012:	4243      	negs	r3, r0
10004014:	18e3      	adds	r3, r4, r3
10004016:	1c2e      	adds	r6, r5, #0
10004018:	1c14      	adds	r4, r2, #0
1000401a:	0218      	lsls	r0, r3, #8
1000401c:	d43e      	bmi.n	1000409c <__aeabi_dadd+0x458>
1000401e:	1c72      	adds	r2, r6, #1
10004020:	1c0f      	adds	r7, r1, #0
10004022:	e69c      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004024:	464a      	mov	r2, r9
10004026:	4653      	mov	r3, sl
10004028:	431a      	orrs	r2, r3
1000402a:	2400      	movs	r4, #0
1000402c:	2a00      	cmp	r2, #0
1000402e:	d100      	bne.n	10004032 <__aeabi_dadd+0x3ee>
10004030:	e6f3      	b.n	10003e1a <__aeabi_dadd+0x1d6>
10004032:	2201      	movs	r2, #1
10004034:	1812      	adds	r2, r2, r0
10004036:	e7e9      	b.n	1000400c <__aeabi_dadd+0x3c8>
10004038:	465b      	mov	r3, fp
1000403a:	4303      	orrs	r3, r0
1000403c:	d000      	beq.n	10004040 <__aeabi_dadd+0x3fc>
1000403e:	e083      	b.n	10004148 <__aeabi_dadd+0x504>
10004040:	1c23      	adds	r3, r4, #0
10004042:	1c72      	adds	r2, r6, #1
10004044:	4654      	mov	r4, sl
10004046:	4667      	mov	r7, ip
10004048:	e689      	b.n	10003d5e <__aeabi_dadd+0x11a>
1000404a:	1c14      	adds	r4, r2, #0
1000404c:	1c2e      	adds	r6, r5, #0
1000404e:	e65b      	b.n	10003d08 <__aeabi_dadd+0xc4>
10004050:	4ecd      	ldr	r6, [pc, #820]	; (10004388 <__aeabi_dadd+0x744>)
10004052:	42b5      	cmp	r5, r6
10004054:	d000      	beq.n	10004058 <__aeabi_dadd+0x414>
10004056:	e6c9      	b.n	10003dec <__aeabi_dadd+0x1a8>
10004058:	e76d      	b.n	10003f36 <__aeabi_dadd+0x2f2>
1000405a:	2300      	movs	r3, #0
1000405c:	e77d      	b.n	10003f5a <__aeabi_dadd+0x316>
1000405e:	2200      	movs	r2, #0
10004060:	e78f      	b.n	10003f82 <__aeabi_dadd+0x33e>
10004062:	465e      	mov	r6, fp
10004064:	4306      	orrs	r6, r0
10004066:	2d00      	cmp	r5, #0
10004068:	d000      	beq.n	1000406c <__aeabi_dadd+0x428>
1000406a:	e0f4      	b.n	10004256 <__aeabi_dadd+0x612>
1000406c:	2e00      	cmp	r6, #0
1000406e:	d100      	bne.n	10004072 <__aeabi_dadd+0x42e>
10004070:	e14c      	b.n	1000430c <__aeabi_dadd+0x6c8>
10004072:	464b      	mov	r3, r9
10004074:	4313      	orrs	r3, r2
10004076:	d100      	bne.n	1000407a <__aeabi_dadd+0x436>
10004078:	e17e      	b.n	10004378 <__aeabi_dadd+0x734>
1000407a:	1815      	adds	r5, r2, r0
1000407c:	464e      	mov	r6, r9
1000407e:	4285      	cmp	r5, r0
10004080:	4180      	sbcs	r0, r0
10004082:	445e      	add	r6, fp
10004084:	4242      	negs	r2, r0
10004086:	18b3      	adds	r3, r6, r2
10004088:	021e      	lsls	r6, r3, #8
1000408a:	d400      	bmi.n	1000408e <__aeabi_dadd+0x44a>
1000408c:	e182      	b.n	10004394 <__aeabi_dadd+0x750>
1000408e:	4fbf      	ldr	r7, [pc, #764]	; (1000438c <__aeabi_dadd+0x748>)
10004090:	1c2c      	adds	r4, r5, #0
10004092:	403b      	ands	r3, r7
10004094:	2202      	movs	r2, #2
10004096:	1c0f      	adds	r7, r1, #0
10004098:	2601      	movs	r6, #1
1000409a:	e660      	b.n	10003d5e <__aeabi_dadd+0x11a>
1000409c:	4dba      	ldr	r5, [pc, #744]	; (10004388 <__aeabi_dadd+0x744>)
1000409e:	1c70      	adds	r0, r6, #1
100040a0:	42a8      	cmp	r0, r5
100040a2:	d04b      	beq.n	1000413c <__aeabi_dadd+0x4f8>
100040a4:	4fb9      	ldr	r7, [pc, #740]	; (1000438c <__aeabi_dadd+0x748>)
100040a6:	2501      	movs	r5, #1
100040a8:	4025      	ands	r5, r4
100040aa:	0862      	lsrs	r2, r4, #1
100040ac:	403b      	ands	r3, r7
100040ae:	1c2c      	adds	r4, r5, #0
100040b0:	07df      	lsls	r7, r3, #31
100040b2:	4314      	orrs	r4, r2
100040b4:	433c      	orrs	r4, r7
100040b6:	1cb2      	adds	r2, r6, #2
100040b8:	085b      	lsrs	r3, r3, #1
100040ba:	1c06      	adds	r6, r0, #0
100040bc:	1c0f      	adds	r7, r1, #0
100040be:	e64e      	b.n	10003d5e <__aeabi_dadd+0x11a>
100040c0:	465e      	mov	r6, fp
100040c2:	4306      	orrs	r6, r0
100040c4:	2d00      	cmp	r5, #0
100040c6:	d12c      	bne.n	10004122 <__aeabi_dadd+0x4de>
100040c8:	2e00      	cmp	r6, #0
100040ca:	d000      	beq.n	100040ce <__aeabi_dadd+0x48a>
100040cc:	e07d      	b.n	100041ca <__aeabi_dadd+0x586>
100040ce:	464e      	mov	r6, r9
100040d0:	1c14      	adds	r4, r2, #0
100040d2:	4316      	orrs	r6, r2
100040d4:	d088      	beq.n	10003fe8 <__aeabi_dadd+0x3a4>
100040d6:	464b      	mov	r3, r9
100040d8:	4667      	mov	r7, ip
100040da:	2201      	movs	r2, #1
100040dc:	2600      	movs	r6, #0
100040de:	e63e      	b.n	10003d5e <__aeabi_dadd+0x11a>
100040e0:	1c1e      	adds	r6, r3, #0
100040e2:	3e20      	subs	r6, #32
100040e4:	464c      	mov	r4, r9
100040e6:	40f4      	lsrs	r4, r6
100040e8:	1c26      	adds	r6, r4, #0
100040ea:	2b20      	cmp	r3, #32
100040ec:	d100      	bne.n	100040f0 <__aeabi_dadd+0x4ac>
100040ee:	e0d8      	b.n	100042a2 <__aeabi_dadd+0x65e>
100040f0:	2240      	movs	r2, #64	; 0x40
100040f2:	1ad4      	subs	r4, r2, r3
100040f4:	464b      	mov	r3, r9
100040f6:	40a3      	lsls	r3, r4
100040f8:	1c1a      	adds	r2, r3, #0
100040fa:	4654      	mov	r4, sl
100040fc:	4322      	orrs	r2, r4
100040fe:	1e53      	subs	r3, r2, #1
10004100:	419a      	sbcs	r2, r3
10004102:	4332      	orrs	r2, r6
10004104:	2400      	movs	r4, #0
10004106:	1812      	adds	r2, r2, r0
10004108:	e780      	b.n	1000400c <__aeabi_dadd+0x3c8>
1000410a:	425b      	negs	r3, r3
1000410c:	2d00      	cmp	r5, #0
1000410e:	d137      	bne.n	10004180 <__aeabi_dadd+0x53c>
10004110:	465c      	mov	r4, fp
10004112:	4304      	orrs	r4, r0
10004114:	d000      	beq.n	10004118 <__aeabi_dadd+0x4d4>
10004116:	e0d7      	b.n	100042c8 <__aeabi_dadd+0x684>
10004118:	1c72      	adds	r2, r6, #1
1000411a:	464b      	mov	r3, r9
1000411c:	4654      	mov	r4, sl
1000411e:	1c0f      	adds	r7, r1, #0
10004120:	e61d      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004122:	2e00      	cmp	r6, #0
10004124:	d16e      	bne.n	10004204 <__aeabi_dadd+0x5c0>
10004126:	464b      	mov	r3, r9
10004128:	1c14      	adds	r4, r2, #0
1000412a:	4313      	orrs	r3, r2
1000412c:	d100      	bne.n	10004130 <__aeabi_dadd+0x4ec>
1000412e:	e0dc      	b.n	100042ea <__aeabi_dadd+0x6a6>
10004130:	2580      	movs	r5, #128	; 0x80
10004132:	464b      	mov	r3, r9
10004134:	4667      	mov	r7, ip
10004136:	012a      	lsls	r2, r5, #4
10004138:	4e93      	ldr	r6, [pc, #588]	; (10004388 <__aeabi_dadd+0x744>)
1000413a:	e610      	b.n	10003d5e <__aeabi_dadd+0x11a>
1000413c:	2180      	movs	r1, #128	; 0x80
1000413e:	1c06      	adds	r6, r0, #0
10004140:	010a      	lsls	r2, r1, #4
10004142:	2300      	movs	r3, #0
10004144:	2004      	movs	r0, #4
10004146:	e622      	b.n	10003d8e <__aeabi_dadd+0x14a>
10004148:	3f01      	subs	r7, #1
1000414a:	2f00      	cmp	r7, #0
1000414c:	d179      	bne.n	10004242 <__aeabi_dadd+0x5fe>
1000414e:	1a17      	subs	r7, r2, r0
10004150:	465b      	mov	r3, fp
10004152:	45ba      	cmp	sl, r7
10004154:	41ad      	sbcs	r5, r5
10004156:	4649      	mov	r1, r9
10004158:	1aca      	subs	r2, r1, r3
1000415a:	4268      	negs	r0, r5
1000415c:	1c3c      	adds	r4, r7, #0
1000415e:	1a13      	subs	r3, r2, r0
10004160:	4667      	mov	r7, ip
10004162:	e5cb      	b.n	10003cfc <__aeabi_dadd+0xb8>
10004164:	465f      	mov	r7, fp
10004166:	4307      	orrs	r7, r0
10004168:	2300      	movs	r3, #0
1000416a:	2000      	movs	r0, #0
1000416c:	2f00      	cmp	r7, #0
1000416e:	d100      	bne.n	10004172 <__aeabi_dadd+0x52e>
10004170:	e72d      	b.n	10003fce <__aeabi_dadd+0x38a>
10004172:	2001      	movs	r0, #1
10004174:	e72b      	b.n	10003fce <__aeabi_dadd+0x38a>
10004176:	2580      	movs	r5, #128	; 0x80
10004178:	012a      	lsls	r2, r5, #4
1000417a:	2300      	movs	r3, #0
1000417c:	2004      	movs	r0, #4
1000417e:	e606      	b.n	10003d8e <__aeabi_dadd+0x14a>
10004180:	4d81      	ldr	r5, [pc, #516]	; (10004388 <__aeabi_dadd+0x744>)
10004182:	42ae      	cmp	r6, r5
10004184:	d100      	bne.n	10004188 <__aeabi_dadd+0x544>
10004186:	e0d3      	b.n	10004330 <__aeabi_dadd+0x6ec>
10004188:	2480      	movs	r4, #128	; 0x80
1000418a:	465d      	mov	r5, fp
1000418c:	0422      	lsls	r2, r4, #16
1000418e:	4315      	orrs	r5, r2
10004190:	46ab      	mov	fp, r5
10004192:	2b38      	cmp	r3, #56	; 0x38
10004194:	dd00      	ble.n	10004198 <__aeabi_dadd+0x554>
10004196:	e0b0      	b.n	100042fa <__aeabi_dadd+0x6b6>
10004198:	2b1f      	cmp	r3, #31
1000419a:	dd00      	ble.n	1000419e <__aeabi_dadd+0x55a>
1000419c:	e0db      	b.n	10004356 <__aeabi_dadd+0x712>
1000419e:	2520      	movs	r5, #32
100041a0:	1aed      	subs	r5, r5, r3
100041a2:	1c02      	adds	r2, r0, #0
100041a4:	465c      	mov	r4, fp
100041a6:	40ac      	lsls	r4, r5
100041a8:	40da      	lsrs	r2, r3
100041aa:	40a8      	lsls	r0, r5
100041ac:	1e45      	subs	r5, r0, #1
100041ae:	41a8      	sbcs	r0, r5
100041b0:	4322      	orrs	r2, r4
100041b2:	4302      	orrs	r2, r0
100041b4:	4658      	mov	r0, fp
100041b6:	40d8      	lsrs	r0, r3
100041b8:	1c03      	adds	r3, r0, #0
100041ba:	4655      	mov	r5, sl
100041bc:	1954      	adds	r4, r2, r5
100041be:	4554      	cmp	r4, sl
100041c0:	4192      	sbcs	r2, r2
100041c2:	444b      	add	r3, r9
100041c4:	4250      	negs	r0, r2
100041c6:	181b      	adds	r3, r3, r0
100041c8:	e727      	b.n	1000401a <__aeabi_dadd+0x3d6>
100041ca:	464a      	mov	r2, r9
100041cc:	4656      	mov	r6, sl
100041ce:	4332      	orrs	r2, r6
100041d0:	d100      	bne.n	100041d4 <__aeabi_dadd+0x590>
100041d2:	e085      	b.n	100042e0 <__aeabi_dadd+0x69c>
100041d4:	1b85      	subs	r5, r0, r6
100041d6:	465b      	mov	r3, fp
100041d8:	464c      	mov	r4, r9
100041da:	42a8      	cmp	r0, r5
100041dc:	4192      	sbcs	r2, r2
100041de:	1b19      	subs	r1, r3, r4
100041e0:	4256      	negs	r6, r2
100041e2:	1b8b      	subs	r3, r1, r6
100041e4:	021e      	lsls	r6, r3, #8
100041e6:	d400      	bmi.n	100041ea <__aeabi_dadd+0x5a6>
100041e8:	e0ad      	b.n	10004346 <__aeabi_dadd+0x702>
100041ea:	4657      	mov	r7, sl
100041ec:	1a3d      	subs	r5, r7, r0
100041ee:	465b      	mov	r3, fp
100041f0:	45aa      	cmp	sl, r5
100041f2:	4189      	sbcs	r1, r1
100041f4:	1ae4      	subs	r4, r4, r3
100041f6:	424a      	negs	r2, r1
100041f8:	1aa3      	subs	r3, r4, r2
100041fa:	4667      	mov	r7, ip
100041fc:	1c2c      	adds	r4, r5, #0
100041fe:	2201      	movs	r2, #1
10004200:	2600      	movs	r6, #0
10004202:	e5ac      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004204:	464d      	mov	r5, r9
10004206:	1c16      	adds	r6, r2, #0
10004208:	4315      	orrs	r5, r2
1000420a:	d044      	beq.n	10004296 <__aeabi_dadd+0x652>
1000420c:	465c      	mov	r4, fp
1000420e:	2180      	movs	r1, #128	; 0x80
10004210:	08c0      	lsrs	r0, r0, #3
10004212:	0762      	lsls	r2, r4, #29
10004214:	08e3      	lsrs	r3, r4, #3
10004216:	030d      	lsls	r5, r1, #12
10004218:	4310      	orrs	r0, r2
1000421a:	422b      	tst	r3, r5
1000421c:	d100      	bne.n	10004220 <__aeabi_dadd+0x5dc>
1000421e:	e081      	b.n	10004324 <__aeabi_dadd+0x6e0>
10004220:	464c      	mov	r4, r9
10004222:	08e1      	lsrs	r1, r4, #3
10004224:	4229      	tst	r1, r5
10004226:	d17d      	bne.n	10004324 <__aeabi_dadd+0x6e0>
10004228:	08f7      	lsrs	r7, r6, #3
1000422a:	0766      	lsls	r6, r4, #29
1000422c:	433e      	orrs	r6, r7
1000422e:	1c0b      	adds	r3, r1, #0
10004230:	4667      	mov	r7, ip
10004232:	0f70      	lsrs	r0, r6, #29
10004234:	00db      	lsls	r3, r3, #3
10004236:	2280      	movs	r2, #128	; 0x80
10004238:	00f4      	lsls	r4, r6, #3
1000423a:	4303      	orrs	r3, r0
1000423c:	0112      	lsls	r2, r2, #4
1000423e:	4e52      	ldr	r6, [pc, #328]	; (10004388 <__aeabi_dadd+0x744>)
10004240:	e58d      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004242:	4d51      	ldr	r5, [pc, #324]	; (10004388 <__aeabi_dadd+0x744>)
10004244:	42ae      	cmp	r6, r5
10004246:	d000      	beq.n	1000424a <__aeabi_dadd+0x606>
10004248:	e6ae      	b.n	10003fa8 <__aeabi_dadd+0x364>
1000424a:	2080      	movs	r0, #128	; 0x80
1000424c:	464b      	mov	r3, r9
1000424e:	4654      	mov	r4, sl
10004250:	4667      	mov	r7, ip
10004252:	0102      	lsls	r2, r0, #4
10004254:	e583      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004256:	2e00      	cmp	r6, #0
10004258:	d05e      	beq.n	10004318 <__aeabi_dadd+0x6d4>
1000425a:	464c      	mov	r4, r9
1000425c:	4314      	orrs	r4, r2
1000425e:	d01a      	beq.n	10004296 <__aeabi_dadd+0x652>
10004260:	08c7      	lsrs	r7, r0, #3
10004262:	2580      	movs	r5, #128	; 0x80
10004264:	4658      	mov	r0, fp
10004266:	0743      	lsls	r3, r0, #29
10004268:	032c      	lsls	r4, r5, #12
1000426a:	08c0      	lsrs	r0, r0, #3
1000426c:	431f      	orrs	r7, r3
1000426e:	4220      	tst	r0, r4
10004270:	d008      	beq.n	10004284 <__aeabi_dadd+0x640>
10004272:	464e      	mov	r6, r9
10004274:	08f3      	lsrs	r3, r6, #3
10004276:	4223      	tst	r3, r4
10004278:	d104      	bne.n	10004284 <__aeabi_dadd+0x640>
1000427a:	4652      	mov	r2, sl
1000427c:	08d5      	lsrs	r5, r2, #3
1000427e:	0777      	lsls	r7, r6, #29
10004280:	1c18      	adds	r0, r3, #0
10004282:	432f      	orrs	r7, r5
10004284:	00c3      	lsls	r3, r0, #3
10004286:	00fc      	lsls	r4, r7, #3
10004288:	0f78      	lsrs	r0, r7, #29
1000428a:	1c0f      	adds	r7, r1, #0
1000428c:	2180      	movs	r1, #128	; 0x80
1000428e:	4303      	orrs	r3, r0
10004290:	010a      	lsls	r2, r1, #4
10004292:	4e3d      	ldr	r6, [pc, #244]	; (10004388 <__aeabi_dadd+0x744>)
10004294:	e563      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004296:	2680      	movs	r6, #128	; 0x80
10004298:	0132      	lsls	r2, r6, #4
1000429a:	465b      	mov	r3, fp
1000429c:	1c04      	adds	r4, r0, #0
1000429e:	4e3a      	ldr	r6, [pc, #232]	; (10004388 <__aeabi_dadd+0x744>)
100042a0:	e55d      	b.n	10003d5e <__aeabi_dadd+0x11a>
100042a2:	2200      	movs	r2, #0
100042a4:	e729      	b.n	100040fa <__aeabi_dadd+0x4b6>
100042a6:	1c39      	adds	r1, r7, #0
100042a8:	3920      	subs	r1, #32
100042aa:	465c      	mov	r4, fp
100042ac:	40cc      	lsrs	r4, r1
100042ae:	1c22      	adds	r2, r4, #0
100042b0:	2f20      	cmp	r7, #32
100042b2:	d067      	beq.n	10004384 <__aeabi_dadd+0x740>
100042b4:	2340      	movs	r3, #64	; 0x40
100042b6:	1bdf      	subs	r7, r3, r7
100042b8:	465d      	mov	r5, fp
100042ba:	40bd      	lsls	r5, r7
100042bc:	4328      	orrs	r0, r5
100042be:	1e43      	subs	r3, r0, #1
100042c0:	4198      	sbcs	r0, r3
100042c2:	4310      	orrs	r0, r2
100042c4:	2300      	movs	r3, #0
100042c6:	e682      	b.n	10003fce <__aeabi_dadd+0x38a>
100042c8:	3b01      	subs	r3, #1
100042ca:	2b00      	cmp	r3, #0
100042cc:	d12c      	bne.n	10004328 <__aeabi_dadd+0x6e4>
100042ce:	4450      	add	r0, sl
100042d0:	465c      	mov	r4, fp
100042d2:	4290      	cmp	r0, r2
100042d4:	41ad      	sbcs	r5, r5
100042d6:	444c      	add	r4, r9
100042d8:	426a      	negs	r2, r5
100042da:	18a3      	adds	r3, r4, r2
100042dc:	1c04      	adds	r4, r0, #0
100042de:	e69c      	b.n	1000401a <__aeabi_dadd+0x3d6>
100042e0:	465b      	mov	r3, fp
100042e2:	1c04      	adds	r4, r0, #0
100042e4:	2201      	movs	r2, #1
100042e6:	2600      	movs	r6, #0
100042e8:	e539      	b.n	10003d5e <__aeabi_dadd+0x11a>
100042ea:	2480      	movs	r4, #128	; 0x80
100042ec:	2104      	movs	r1, #4
100042ee:	2700      	movs	r7, #0
100042f0:	0122      	lsls	r2, r4, #4
100042f2:	4b27      	ldr	r3, [pc, #156]	; (10004390 <__aeabi_dadd+0x74c>)
100042f4:	4248      	negs	r0, r1
100042f6:	4e24      	ldr	r6, [pc, #144]	; (10004388 <__aeabi_dadd+0x744>)
100042f8:	e549      	b.n	10003d8e <__aeabi_dadd+0x14a>
100042fa:	465d      	mov	r5, fp
100042fc:	4305      	orrs	r5, r0
100042fe:	2300      	movs	r3, #0
10004300:	2200      	movs	r2, #0
10004302:	2d00      	cmp	r5, #0
10004304:	d100      	bne.n	10004308 <__aeabi_dadd+0x6c4>
10004306:	e758      	b.n	100041ba <__aeabi_dadd+0x576>
10004308:	2201      	movs	r2, #1
1000430a:	e756      	b.n	100041ba <__aeabi_dadd+0x576>
1000430c:	1c14      	adds	r4, r2, #0
1000430e:	464b      	mov	r3, r9
10004310:	1c0f      	adds	r7, r1, #0
10004312:	2201      	movs	r2, #1
10004314:	2600      	movs	r6, #0
10004316:	e522      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004318:	1c14      	adds	r4, r2, #0
1000431a:	2280      	movs	r2, #128	; 0x80
1000431c:	464b      	mov	r3, r9
1000431e:	0112      	lsls	r2, r2, #4
10004320:	4e19      	ldr	r6, [pc, #100]	; (10004388 <__aeabi_dadd+0x744>)
10004322:	e51c      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004324:	1c06      	adds	r6, r0, #0
10004326:	e784      	b.n	10004232 <__aeabi_dadd+0x5ee>
10004328:	4a17      	ldr	r2, [pc, #92]	; (10004388 <__aeabi_dadd+0x744>)
1000432a:	4296      	cmp	r6, r2
1000432c:	d000      	beq.n	10004330 <__aeabi_dadd+0x6ec>
1000432e:	e730      	b.n	10004192 <__aeabi_dadd+0x54e>
10004330:	1c0f      	adds	r7, r1, #0
10004332:	2180      	movs	r1, #128	; 0x80
10004334:	464b      	mov	r3, r9
10004336:	4654      	mov	r4, sl
10004338:	010a      	lsls	r2, r1, #4
1000433a:	e510      	b.n	10003d5e <__aeabi_dadd+0x11a>
1000433c:	0574      	lsls	r4, r6, #21
1000433e:	0d66      	lsrs	r6, r4, #21
10004340:	2300      	movs	r3, #0
10004342:	2400      	movs	r4, #0
10004344:	e52f      	b.n	10003da6 <__aeabi_dadd+0x162>
10004346:	1c18      	adds	r0, r3, #0
10004348:	4328      	orrs	r0, r5
1000434a:	d100      	bne.n	1000434e <__aeabi_dadd+0x70a>
1000434c:	e64c      	b.n	10003fe8 <__aeabi_dadd+0x3a4>
1000434e:	1c2c      	adds	r4, r5, #0
10004350:	2201      	movs	r2, #1
10004352:	2600      	movs	r6, #0
10004354:	e503      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004356:	1c1c      	adds	r4, r3, #0
10004358:	3c20      	subs	r4, #32
1000435a:	465d      	mov	r5, fp
1000435c:	40e5      	lsrs	r5, r4
1000435e:	1c2c      	adds	r4, r5, #0
10004360:	2b20      	cmp	r3, #32
10004362:	d01c      	beq.n	1000439e <__aeabi_dadd+0x75a>
10004364:	2240      	movs	r2, #64	; 0x40
10004366:	1ad3      	subs	r3, r2, r3
10004368:	465a      	mov	r2, fp
1000436a:	409a      	lsls	r2, r3
1000436c:	4302      	orrs	r2, r0
1000436e:	1e50      	subs	r0, r2, #1
10004370:	4182      	sbcs	r2, r0
10004372:	4322      	orrs	r2, r4
10004374:	2300      	movs	r3, #0
10004376:	e720      	b.n	100041ba <__aeabi_dadd+0x576>
10004378:	465b      	mov	r3, fp
1000437a:	1c04      	adds	r4, r0, #0
1000437c:	1c0f      	adds	r7, r1, #0
1000437e:	2201      	movs	r2, #1
10004380:	2600      	movs	r6, #0
10004382:	e4ec      	b.n	10003d5e <__aeabi_dadd+0x11a>
10004384:	2500      	movs	r5, #0
10004386:	e799      	b.n	100042bc <__aeabi_dadd+0x678>
10004388:	000007ff 	.word	0x000007ff
1000438c:	ff7fffff 	.word	0xff7fffff
10004390:	007fffff 	.word	0x007fffff
10004394:	1c2c      	adds	r4, r5, #0
10004396:	1c0f      	adds	r7, r1, #0
10004398:	2201      	movs	r2, #1
1000439a:	2600      	movs	r6, #0
1000439c:	e4df      	b.n	10003d5e <__aeabi_dadd+0x11a>
1000439e:	2200      	movs	r2, #0
100043a0:	e7e4      	b.n	1000436c <__aeabi_dadd+0x728>
100043a2:	46c0      	nop			; (mov r8, r8)

100043a4 <__aeabi_ddiv>:
100043a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100043a6:	464d      	mov	r5, r9
100043a8:	4644      	mov	r4, r8
100043aa:	465f      	mov	r7, fp
100043ac:	4656      	mov	r6, sl
100043ae:	b4f0      	push	{r4, r5, r6, r7}
100043b0:	1c1d      	adds	r5, r3, #0
100043b2:	004b      	lsls	r3, r1, #1
100043b4:	1c14      	adds	r4, r2, #0
100043b6:	030e      	lsls	r6, r1, #12
100043b8:	0d5b      	lsrs	r3, r3, #21
100043ba:	0fca      	lsrs	r2, r1, #31
100043bc:	b087      	sub	sp, #28
100043be:	1c07      	adds	r7, r0, #0
100043c0:	0b36      	lsrs	r6, r6, #12
100043c2:	4698      	mov	r8, r3
100043c4:	4691      	mov	r9, r2
100043c6:	2b00      	cmp	r3, #0
100043c8:	d11d      	bne.n	10004406 <__aeabi_ddiv+0x62>
100043ca:	1c32      	adds	r2, r6, #0
100043cc:	4302      	orrs	r2, r0
100043ce:	d100      	bne.n	100043d2 <__aeabi_ddiv+0x2e>
100043d0:	e181      	b.n	100046d6 <__aeabi_ddiv+0x332>
100043d2:	2e00      	cmp	r6, #0
100043d4:	d100      	bne.n	100043d8 <__aeabi_ddiv+0x34>
100043d6:	e204      	b.n	100047e2 <__aeabi_ddiv+0x43e>
100043d8:	1c30      	adds	r0, r6, #0
100043da:	f001 fb67 	bl	10005aac <__clzsi2>
100043de:	2827      	cmp	r0, #39	; 0x27
100043e0:	dd00      	ble.n	100043e4 <__aeabi_ddiv+0x40>
100043e2:	e1f8      	b.n	100047d6 <__aeabi_ddiv+0x432>
100043e4:	2128      	movs	r1, #40	; 0x28
100043e6:	1c03      	adds	r3, r0, #0
100043e8:	3b08      	subs	r3, #8
100043ea:	1a0a      	subs	r2, r1, r0
100043ec:	1c39      	adds	r1, r7, #0
100043ee:	409e      	lsls	r6, r3
100043f0:	40d1      	lsrs	r1, r2
100043f2:	430e      	orrs	r6, r1
100043f4:	409f      	lsls	r7, r3
100043f6:	4bc1      	ldr	r3, [pc, #772]	; (100046fc <__aeabi_ddiv+0x358>)
100043f8:	2100      	movs	r1, #0
100043fa:	1a18      	subs	r0, r3, r0
100043fc:	2200      	movs	r2, #0
100043fe:	4680      	mov	r8, r0
10004400:	468a      	mov	sl, r1
10004402:	9200      	str	r2, [sp, #0]
10004404:	e00f      	b.n	10004426 <__aeabi_ddiv+0x82>
10004406:	48be      	ldr	r0, [pc, #760]	; (10004700 <__aeabi_ddiv+0x35c>)
10004408:	4283      	cmp	r3, r0
1000440a:	d031      	beq.n	10004470 <__aeabi_ddiv+0xcc>
1000440c:	2180      	movs	r1, #128	; 0x80
1000440e:	034b      	lsls	r3, r1, #13
10004410:	431e      	orrs	r6, r3
10004412:	48bc      	ldr	r0, [pc, #752]	; (10004704 <__aeabi_ddiv+0x360>)
10004414:	0f7a      	lsrs	r2, r7, #29
10004416:	00f6      	lsls	r6, r6, #3
10004418:	2100      	movs	r1, #0
1000441a:	2300      	movs	r3, #0
1000441c:	4316      	orrs	r6, r2
1000441e:	00ff      	lsls	r7, r7, #3
10004420:	4480      	add	r8, r0
10004422:	468a      	mov	sl, r1
10004424:	9300      	str	r3, [sp, #0]
10004426:	1c29      	adds	r1, r5, #0
10004428:	1c20      	adds	r0, r4, #0
1000442a:	1c25      	adds	r5, r4, #0
1000442c:	004a      	lsls	r2, r1, #1
1000442e:	030c      	lsls	r4, r1, #12
10004430:	0fcb      	lsrs	r3, r1, #31
10004432:	0b24      	lsrs	r4, r4, #12
10004434:	0d52      	lsrs	r2, r2, #21
10004436:	469b      	mov	fp, r3
10004438:	d125      	bne.n	10004486 <__aeabi_ddiv+0xe2>
1000443a:	1c21      	adds	r1, r4, #0
1000443c:	4301      	orrs	r1, r0
1000443e:	d100      	bne.n	10004442 <__aeabi_ddiv+0x9e>
10004440:	e150      	b.n	100046e4 <__aeabi_ddiv+0x340>
10004442:	2c00      	cmp	r4, #0
10004444:	d100      	bne.n	10004448 <__aeabi_ddiv+0xa4>
10004446:	e1c2      	b.n	100047ce <__aeabi_ddiv+0x42a>
10004448:	1c20      	adds	r0, r4, #0
1000444a:	f001 fb2f 	bl	10005aac <__clzsi2>
1000444e:	2827      	cmp	r0, #39	; 0x27
10004450:	dd00      	ble.n	10004454 <__aeabi_ddiv+0xb0>
10004452:	e1b6      	b.n	100047c2 <__aeabi_ddiv+0x41e>
10004454:	1c03      	adds	r3, r0, #0
10004456:	2228      	movs	r2, #40	; 0x28
10004458:	3b08      	subs	r3, #8
1000445a:	1c29      	adds	r1, r5, #0
1000445c:	1a12      	subs	r2, r2, r0
1000445e:	409c      	lsls	r4, r3
10004460:	40d1      	lsrs	r1, r2
10004462:	430c      	orrs	r4, r1
10004464:	409d      	lsls	r5, r3
10004466:	4ba5      	ldr	r3, [pc, #660]	; (100046fc <__aeabi_ddiv+0x358>)
10004468:	1a1a      	subs	r2, r3, r0
1000446a:	2000      	movs	r0, #0
1000446c:	9002      	str	r0, [sp, #8]
1000446e:	e019      	b.n	100044a4 <__aeabi_ddiv+0x100>
10004470:	1c32      	adds	r2, r6, #0
10004472:	433a      	orrs	r2, r7
10004474:	d000      	beq.n	10004478 <__aeabi_ddiv+0xd4>
10004476:	e129      	b.n	100046cc <__aeabi_ddiv+0x328>
10004478:	2708      	movs	r7, #8
1000447a:	2302      	movs	r3, #2
1000447c:	46ba      	mov	sl, r7
1000447e:	2600      	movs	r6, #0
10004480:	2700      	movs	r7, #0
10004482:	9300      	str	r3, [sp, #0]
10004484:	e7cf      	b.n	10004426 <__aeabi_ddiv+0x82>
10004486:	489e      	ldr	r0, [pc, #632]	; (10004700 <__aeabi_ddiv+0x35c>)
10004488:	4282      	cmp	r2, r0
1000448a:	d100      	bne.n	1000448e <__aeabi_ddiv+0xea>
1000448c:	e113      	b.n	100046b6 <__aeabi_ddiv+0x312>
1000448e:	2180      	movs	r1, #128	; 0x80
10004490:	034b      	lsls	r3, r1, #13
10004492:	431c      	orrs	r4, r3
10004494:	499b      	ldr	r1, [pc, #620]	; (10004704 <__aeabi_ddiv+0x360>)
10004496:	0f68      	lsrs	r0, r5, #29
10004498:	00e4      	lsls	r4, r4, #3
1000449a:	2300      	movs	r3, #0
1000449c:	4304      	orrs	r4, r0
1000449e:	00ed      	lsls	r5, r5, #3
100044a0:	1852      	adds	r2, r2, r1
100044a2:	9302      	str	r3, [sp, #8]
100044a4:	4648      	mov	r0, r9
100044a6:	465b      	mov	r3, fp
100044a8:	4043      	eors	r3, r0
100044aa:	9802      	ldr	r0, [sp, #8]
100044ac:	4651      	mov	r1, sl
100044ae:	9301      	str	r3, [sp, #4]
100044b0:	4301      	orrs	r1, r0
100044b2:	290f      	cmp	r1, #15
100044b4:	d800      	bhi.n	100044b8 <__aeabi_ddiv+0x114>
100044b6:	e0df      	b.n	10004678 <__aeabi_ddiv+0x2d4>
100044b8:	4643      	mov	r3, r8
100044ba:	1a9a      	subs	r2, r3, r2
100044bc:	9204      	str	r2, [sp, #16]
100044be:	42a6      	cmp	r6, r4
100044c0:	d800      	bhi.n	100044c4 <__aeabi_ddiv+0x120>
100044c2:	e16e      	b.n	100047a2 <__aeabi_ddiv+0x3fe>
100044c4:	0871      	lsrs	r1, r6, #1
100044c6:	087b      	lsrs	r3, r7, #1
100044c8:	07f6      	lsls	r6, r6, #31
100044ca:	4333      	orrs	r3, r6
100044cc:	07fa      	lsls	r2, r7, #31
100044ce:	4689      	mov	r9, r1
100044d0:	4698      	mov	r8, r3
100044d2:	9202      	str	r2, [sp, #8]
100044d4:	0e28      	lsrs	r0, r5, #24
100044d6:	0224      	lsls	r4, r4, #8
100044d8:	4304      	orrs	r4, r0
100044da:	022d      	lsls	r5, r5, #8
100044dc:	0427      	lsls	r7, r4, #16
100044de:	0c39      	lsrs	r1, r7, #16
100044e0:	46ab      	mov	fp, r5
100044e2:	0c25      	lsrs	r5, r4, #16
100044e4:	9100      	str	r1, [sp, #0]
100044e6:	4648      	mov	r0, r9
100044e8:	1c29      	adds	r1, r5, #0
100044ea:	f7fe fae9 	bl	10002ac0 <__aeabi_uidiv>
100044ee:	9f00      	ldr	r7, [sp, #0]
100044f0:	1c06      	adds	r6, r0, #0
100044f2:	4347      	muls	r7, r0
100044f4:	1c29      	adds	r1, r5, #0
100044f6:	4648      	mov	r0, r9
100044f8:	f7fe fb26 	bl	10002b48 <__aeabi_uidivmod>
100044fc:	4643      	mov	r3, r8
100044fe:	0408      	lsls	r0, r1, #16
10004500:	0c1a      	lsrs	r2, r3, #16
10004502:	4310      	orrs	r0, r2
10004504:	4287      	cmp	r7, r0
10004506:	d907      	bls.n	10004518 <__aeabi_ddiv+0x174>
10004508:	1900      	adds	r0, r0, r4
1000450a:	3e01      	subs	r6, #1
1000450c:	4284      	cmp	r4, r0
1000450e:	d803      	bhi.n	10004518 <__aeabi_ddiv+0x174>
10004510:	4287      	cmp	r7, r0
10004512:	d901      	bls.n	10004518 <__aeabi_ddiv+0x174>
10004514:	3e01      	subs	r6, #1
10004516:	1900      	adds	r0, r0, r4
10004518:	1bc1      	subs	r1, r0, r7
1000451a:	468a      	mov	sl, r1
1000451c:	1c08      	adds	r0, r1, #0
1000451e:	1c29      	adds	r1, r5, #0
10004520:	f7fe face 	bl	10002ac0 <__aeabi_uidiv>
10004524:	9b00      	ldr	r3, [sp, #0]
10004526:	1c07      	adds	r7, r0, #0
10004528:	4343      	muls	r3, r0
1000452a:	1c29      	adds	r1, r5, #0
1000452c:	4650      	mov	r0, sl
1000452e:	4699      	mov	r9, r3
10004530:	f7fe fb0a 	bl	10002b48 <__aeabi_uidivmod>
10004534:	4642      	mov	r2, r8
10004536:	0410      	lsls	r0, r2, #16
10004538:	040b      	lsls	r3, r1, #16
1000453a:	0c01      	lsrs	r1, r0, #16
1000453c:	430b      	orrs	r3, r1
1000453e:	4599      	cmp	r9, r3
10004540:	d904      	bls.n	1000454c <__aeabi_ddiv+0x1a8>
10004542:	191b      	adds	r3, r3, r4
10004544:	3f01      	subs	r7, #1
10004546:	429c      	cmp	r4, r3
10004548:	d800      	bhi.n	1000454c <__aeabi_ddiv+0x1a8>
1000454a:	e164      	b.n	10004816 <__aeabi_ddiv+0x472>
1000454c:	0436      	lsls	r6, r6, #16
1000454e:	433e      	orrs	r6, r7
10004550:	465f      	mov	r7, fp
10004552:	464a      	mov	r2, r9
10004554:	0c39      	lsrs	r1, r7, #16
10004556:	4689      	mov	r9, r1
10004558:	1a9b      	subs	r3, r3, r2
1000455a:	4659      	mov	r1, fp
1000455c:	0432      	lsls	r2, r6, #16
1000455e:	0c17      	lsrs	r7, r2, #16
10004560:	040a      	lsls	r2, r1, #16
10004562:	4649      	mov	r1, r9
10004564:	4379      	muls	r1, r7
10004566:	0c12      	lsrs	r2, r2, #16
10004568:	9203      	str	r2, [sp, #12]
1000456a:	468c      	mov	ip, r1
1000456c:	9903      	ldr	r1, [sp, #12]
1000456e:	0c30      	lsrs	r0, r6, #16
10004570:	437a      	muls	r2, r7
10004572:	4341      	muls	r1, r0
10004574:	464f      	mov	r7, r9
10004576:	4378      	muls	r0, r7
10004578:	448c      	add	ip, r1
1000457a:	0c17      	lsrs	r7, r2, #16
1000457c:	4467      	add	r7, ip
1000457e:	42b9      	cmp	r1, r7
10004580:	d902      	bls.n	10004588 <__aeabi_ddiv+0x1e4>
10004582:	2180      	movs	r1, #128	; 0x80
10004584:	0249      	lsls	r1, r1, #9
10004586:	1840      	adds	r0, r0, r1
10004588:	0c39      	lsrs	r1, r7, #16
1000458a:	0412      	lsls	r2, r2, #16
1000458c:	1840      	adds	r0, r0, r1
1000458e:	043f      	lsls	r7, r7, #16
10004590:	0c11      	lsrs	r1, r2, #16
10004592:	187f      	adds	r7, r7, r1
10004594:	4283      	cmp	r3, r0
10004596:	d200      	bcs.n	1000459a <__aeabi_ddiv+0x1f6>
10004598:	e127      	b.n	100047ea <__aeabi_ddiv+0x446>
1000459a:	d100      	bne.n	1000459e <__aeabi_ddiv+0x1fa>
1000459c:	e141      	b.n	10004822 <__aeabi_ddiv+0x47e>
1000459e:	9902      	ldr	r1, [sp, #8]
100045a0:	1a1b      	subs	r3, r3, r0
100045a2:	1bcf      	subs	r7, r1, r7
100045a4:	42b9      	cmp	r1, r7
100045a6:	4180      	sbcs	r0, r0
100045a8:	4241      	negs	r1, r0
100045aa:	1a5a      	subs	r2, r3, r1
100045ac:	4690      	mov	r8, r2
100045ae:	42a2      	cmp	r2, r4
100045b0:	d100      	bne.n	100045b4 <__aeabi_ddiv+0x210>
100045b2:	e15f      	b.n	10004874 <__aeabi_ddiv+0x4d0>
100045b4:	1c10      	adds	r0, r2, #0
100045b6:	1c29      	adds	r1, r5, #0
100045b8:	f7fe fa82 	bl	10002ac0 <__aeabi_uidiv>
100045bc:	9b00      	ldr	r3, [sp, #0]
100045be:	9002      	str	r0, [sp, #8]
100045c0:	4343      	muls	r3, r0
100045c2:	1c29      	adds	r1, r5, #0
100045c4:	4640      	mov	r0, r8
100045c6:	469a      	mov	sl, r3
100045c8:	f7fe fabe 	bl	10002b48 <__aeabi_uidivmod>
100045cc:	0c38      	lsrs	r0, r7, #16
100045ce:	0409      	lsls	r1, r1, #16
100045d0:	4301      	orrs	r1, r0
100045d2:	458a      	cmp	sl, r1
100045d4:	d90a      	bls.n	100045ec <__aeabi_ddiv+0x248>
100045d6:	9a02      	ldr	r2, [sp, #8]
100045d8:	1909      	adds	r1, r1, r4
100045da:	3a01      	subs	r2, #1
100045dc:	9202      	str	r2, [sp, #8]
100045de:	428c      	cmp	r4, r1
100045e0:	d804      	bhi.n	100045ec <__aeabi_ddiv+0x248>
100045e2:	458a      	cmp	sl, r1
100045e4:	d902      	bls.n	100045ec <__aeabi_ddiv+0x248>
100045e6:	3a01      	subs	r2, #1
100045e8:	9202      	str	r2, [sp, #8]
100045ea:	1909      	adds	r1, r1, r4
100045ec:	4653      	mov	r3, sl
100045ee:	1ac8      	subs	r0, r1, r3
100045f0:	1c29      	adds	r1, r5, #0
100045f2:	9005      	str	r0, [sp, #20]
100045f4:	f7fe fa64 	bl	10002ac0 <__aeabi_uidiv>
100045f8:	9a00      	ldr	r2, [sp, #0]
100045fa:	1c29      	adds	r1, r5, #0
100045fc:	4342      	muls	r2, r0
100045fe:	4680      	mov	r8, r0
10004600:	9805      	ldr	r0, [sp, #20]
10004602:	4692      	mov	sl, r2
10004604:	f7fe faa0 	bl	10002b48 <__aeabi_uidivmod>
10004608:	043f      	lsls	r7, r7, #16
1000460a:	040d      	lsls	r5, r1, #16
1000460c:	0c3a      	lsrs	r2, r7, #16
1000460e:	432a      	orrs	r2, r5
10004610:	4592      	cmp	sl, r2
10004612:	d909      	bls.n	10004628 <__aeabi_ddiv+0x284>
10004614:	2101      	movs	r1, #1
10004616:	424b      	negs	r3, r1
10004618:	1912      	adds	r2, r2, r4
1000461a:	4498      	add	r8, r3
1000461c:	4294      	cmp	r4, r2
1000461e:	d803      	bhi.n	10004628 <__aeabi_ddiv+0x284>
10004620:	4592      	cmp	sl, r2
10004622:	d901      	bls.n	10004628 <__aeabi_ddiv+0x284>
10004624:	4498      	add	r8, r3
10004626:	1912      	adds	r2, r2, r4
10004628:	9d02      	ldr	r5, [sp, #8]
1000462a:	4643      	mov	r3, r8
1000462c:	042f      	lsls	r7, r5, #16
1000462e:	431f      	orrs	r7, r3
10004630:	4650      	mov	r0, sl
10004632:	1a11      	subs	r1, r2, r0
10004634:	0438      	lsls	r0, r7, #16
10004636:	0c03      	lsrs	r3, r0, #16
10004638:	464d      	mov	r5, r9
1000463a:	435d      	muls	r5, r3
1000463c:	9803      	ldr	r0, [sp, #12]
1000463e:	46ac      	mov	ip, r5
10004640:	9d03      	ldr	r5, [sp, #12]
10004642:	0c3a      	lsrs	r2, r7, #16
10004644:	4358      	muls	r0, r3
10004646:	4355      	muls	r5, r2
10004648:	464b      	mov	r3, r9
1000464a:	435a      	muls	r2, r3
1000464c:	44ac      	add	ip, r5
1000464e:	0c03      	lsrs	r3, r0, #16
10004650:	4463      	add	r3, ip
10004652:	429d      	cmp	r5, r3
10004654:	d902      	bls.n	1000465c <__aeabi_ddiv+0x2b8>
10004656:	2580      	movs	r5, #128	; 0x80
10004658:	026d      	lsls	r5, r5, #9
1000465a:	1952      	adds	r2, r2, r5
1000465c:	0c1d      	lsrs	r5, r3, #16
1000465e:	0400      	lsls	r0, r0, #16
10004660:	1952      	adds	r2, r2, r5
10004662:	041b      	lsls	r3, r3, #16
10004664:	0c05      	lsrs	r5, r0, #16
10004666:	195b      	adds	r3, r3, r5
10004668:	4291      	cmp	r1, r2
1000466a:	d200      	bcs.n	1000466e <__aeabi_ddiv+0x2ca>
1000466c:	e0e6      	b.n	1000483c <__aeabi_ddiv+0x498>
1000466e:	d100      	bne.n	10004672 <__aeabi_ddiv+0x2ce>
10004670:	e13d      	b.n	100048ee <__aeabi_ddiv+0x54a>
10004672:	2201      	movs	r2, #1
10004674:	4317      	orrs	r7, r2
10004676:	e05a      	b.n	1000472e <__aeabi_ddiv+0x38a>
10004678:	0089      	lsls	r1, r1, #2
1000467a:	4823      	ldr	r0, [pc, #140]	; (10004708 <__aeabi_ddiv+0x364>)
1000467c:	468c      	mov	ip, r1
1000467e:	4460      	add	r0, ip
10004680:	6801      	ldr	r1, [r0, #0]
10004682:	468f      	mov	pc, r1
10004684:	9b01      	ldr	r3, [sp, #4]
10004686:	4a1e      	ldr	r2, [pc, #120]	; (10004700 <__aeabi_ddiv+0x35c>)
10004688:	2600      	movs	r6, #0
1000468a:	2700      	movs	r7, #0
1000468c:	2000      	movs	r0, #0
1000468e:	2100      	movs	r1, #0
10004690:	1c38      	adds	r0, r7, #0
10004692:	0d0f      	lsrs	r7, r1, #20
10004694:	053c      	lsls	r4, r7, #20
10004696:	4d1d      	ldr	r5, [pc, #116]	; (1000470c <__aeabi_ddiv+0x368>)
10004698:	4334      	orrs	r4, r6
1000469a:	0512      	lsls	r2, r2, #20
1000469c:	4025      	ands	r5, r4
1000469e:	4315      	orrs	r5, r2
100046a0:	006e      	lsls	r6, r5, #1
100046a2:	07db      	lsls	r3, r3, #31
100046a4:	0871      	lsrs	r1, r6, #1
100046a6:	4319      	orrs	r1, r3
100046a8:	b007      	add	sp, #28
100046aa:	bc3c      	pop	{r2, r3, r4, r5}
100046ac:	4690      	mov	r8, r2
100046ae:	4699      	mov	r9, r3
100046b0:	46a2      	mov	sl, r4
100046b2:	46ab      	mov	fp, r5
100046b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100046b6:	1c21      	adds	r1, r4, #0
100046b8:	2003      	movs	r0, #3
100046ba:	4329      	orrs	r1, r5
100046bc:	9002      	str	r0, [sp, #8]
100046be:	d000      	beq.n	100046c2 <__aeabi_ddiv+0x31e>
100046c0:	e6f0      	b.n	100044a4 <__aeabi_ddiv+0x100>
100046c2:	2302      	movs	r3, #2
100046c4:	2400      	movs	r4, #0
100046c6:	2500      	movs	r5, #0
100046c8:	9302      	str	r3, [sp, #8]
100046ca:	e6eb      	b.n	100044a4 <__aeabi_ddiv+0x100>
100046cc:	200c      	movs	r0, #12
100046ce:	2103      	movs	r1, #3
100046d0:	4682      	mov	sl, r0
100046d2:	9100      	str	r1, [sp, #0]
100046d4:	e6a7      	b.n	10004426 <__aeabi_ddiv+0x82>
100046d6:	2704      	movs	r7, #4
100046d8:	2301      	movs	r3, #1
100046da:	46ba      	mov	sl, r7
100046dc:	2600      	movs	r6, #0
100046de:	2700      	movs	r7, #0
100046e0:	9300      	str	r3, [sp, #0]
100046e2:	e6a0      	b.n	10004426 <__aeabi_ddiv+0x82>
100046e4:	2101      	movs	r1, #1
100046e6:	2400      	movs	r4, #0
100046e8:	2500      	movs	r5, #0
100046ea:	9102      	str	r1, [sp, #8]
100046ec:	e6da      	b.n	100044a4 <__aeabi_ddiv+0x100>
100046ee:	2701      	movs	r7, #1
100046f0:	2300      	movs	r3, #0
100046f2:	4e07      	ldr	r6, [pc, #28]	; (10004710 <__aeabi_ddiv+0x36c>)
100046f4:	427f      	negs	r7, r7
100046f6:	4a02      	ldr	r2, [pc, #8]	; (10004700 <__aeabi_ddiv+0x35c>)
100046f8:	e7c8      	b.n	1000468c <__aeabi_ddiv+0x2e8>
100046fa:	46c0      	nop			; (mov r8, r8)
100046fc:	fffffc0d 	.word	0xfffffc0d
10004700:	000007ff 	.word	0x000007ff
10004704:	fffffc01 	.word	0xfffffc01
10004708:	10006bc0 	.word	0x10006bc0
1000470c:	800fffff 	.word	0x800fffff
10004710:	000fffff 	.word	0x000fffff
10004714:	1c2f      	adds	r7, r5, #0
10004716:	465a      	mov	r2, fp
10004718:	9d02      	ldr	r5, [sp, #8]
1000471a:	1c26      	adds	r6, r4, #0
1000471c:	9201      	str	r2, [sp, #4]
1000471e:	2d02      	cmp	r5, #2
10004720:	d0b0      	beq.n	10004684 <__aeabi_ddiv+0x2e0>
10004722:	2d03      	cmp	r5, #3
10004724:	d100      	bne.n	10004728 <__aeabi_ddiv+0x384>
10004726:	e101      	b.n	1000492c <__aeabi_ddiv+0x588>
10004728:	2d01      	cmp	r5, #1
1000472a:	d100      	bne.n	1000472e <__aeabi_ddiv+0x38a>
1000472c:	e09c      	b.n	10004868 <__aeabi_ddiv+0x4c4>
1000472e:	9b04      	ldr	r3, [sp, #16]
10004730:	4882      	ldr	r0, [pc, #520]	; (1000493c <__aeabi_ddiv+0x598>)
10004732:	181a      	adds	r2, r3, r0
10004734:	2a00      	cmp	r2, #0
10004736:	dc00      	bgt.n	1000473a <__aeabi_ddiv+0x396>
10004738:	e08c      	b.n	10004854 <__aeabi_ddiv+0x4b0>
1000473a:	240f      	movs	r4, #15
1000473c:	403c      	ands	r4, r7
1000473e:	2c04      	cmp	r4, #4
10004740:	d005      	beq.n	1000474e <__aeabi_ddiv+0x3aa>
10004742:	1d3b      	adds	r3, r7, #4
10004744:	42bb      	cmp	r3, r7
10004746:	41bf      	sbcs	r7, r7
10004748:	427d      	negs	r5, r7
1000474a:	1976      	adds	r6, r6, r5
1000474c:	1c1f      	adds	r7, r3, #0
1000474e:	01f1      	lsls	r1, r6, #7
10004750:	d505      	bpl.n	1000475e <__aeabi_ddiv+0x3ba>
10004752:	4a7b      	ldr	r2, [pc, #492]	; (10004940 <__aeabi_ddiv+0x59c>)
10004754:	9904      	ldr	r1, [sp, #16]
10004756:	2080      	movs	r0, #128	; 0x80
10004758:	00c4      	lsls	r4, r0, #3
1000475a:	4016      	ands	r6, r2
1000475c:	190a      	adds	r2, r1, r4
1000475e:	4b79      	ldr	r3, [pc, #484]	; (10004944 <__aeabi_ddiv+0x5a0>)
10004760:	429a      	cmp	r2, r3
10004762:	dd00      	ble.n	10004766 <__aeabi_ddiv+0x3c2>
10004764:	e78e      	b.n	10004684 <__aeabi_ddiv+0x2e0>
10004766:	0775      	lsls	r5, r6, #29
10004768:	08ff      	lsrs	r7, r7, #3
1000476a:	0276      	lsls	r6, r6, #9
1000476c:	0551      	lsls	r1, r2, #21
1000476e:	432f      	orrs	r7, r5
10004770:	0b36      	lsrs	r6, r6, #12
10004772:	0d4a      	lsrs	r2, r1, #21
10004774:	9b01      	ldr	r3, [sp, #4]
10004776:	e789      	b.n	1000468c <__aeabi_ddiv+0x2e8>
10004778:	2200      	movs	r2, #0
1000477a:	2600      	movs	r6, #0
1000477c:	2700      	movs	r7, #0
1000477e:	e785      	b.n	1000468c <__aeabi_ddiv+0x2e8>
10004780:	2080      	movs	r0, #128	; 0x80
10004782:	0301      	lsls	r1, r0, #12
10004784:	420e      	tst	r6, r1
10004786:	d016      	beq.n	100047b6 <__aeabi_ddiv+0x412>
10004788:	420c      	tst	r4, r1
1000478a:	d114      	bne.n	100047b6 <__aeabi_ddiv+0x412>
1000478c:	430c      	orrs	r4, r1
1000478e:	0326      	lsls	r6, r4, #12
10004790:	0b36      	lsrs	r6, r6, #12
10004792:	465b      	mov	r3, fp
10004794:	1c2f      	adds	r7, r5, #0
10004796:	4a6c      	ldr	r2, [pc, #432]	; (10004948 <__aeabi_ddiv+0x5a4>)
10004798:	e778      	b.n	1000468c <__aeabi_ddiv+0x2e8>
1000479a:	464c      	mov	r4, r9
1000479c:	9401      	str	r4, [sp, #4]
1000479e:	9d00      	ldr	r5, [sp, #0]
100047a0:	e7bd      	b.n	1000471e <__aeabi_ddiv+0x37a>
100047a2:	42a6      	cmp	r6, r4
100047a4:	d043      	beq.n	1000482e <__aeabi_ddiv+0x48a>
100047a6:	9804      	ldr	r0, [sp, #16]
100047a8:	46b8      	mov	r8, r7
100047aa:	3801      	subs	r0, #1
100047ac:	2700      	movs	r7, #0
100047ae:	9004      	str	r0, [sp, #16]
100047b0:	46b1      	mov	r9, r6
100047b2:	9702      	str	r7, [sp, #8]
100047b4:	e68e      	b.n	100044d4 <__aeabi_ddiv+0x130>
100047b6:	430e      	orrs	r6, r1
100047b8:	0333      	lsls	r3, r6, #12
100047ba:	0b1e      	lsrs	r6, r3, #12
100047bc:	4a62      	ldr	r2, [pc, #392]	; (10004948 <__aeabi_ddiv+0x5a4>)
100047be:	464b      	mov	r3, r9
100047c0:	e764      	b.n	1000468c <__aeabi_ddiv+0x2e8>
100047c2:	1c04      	adds	r4, r0, #0
100047c4:	3c28      	subs	r4, #40	; 0x28
100047c6:	40a5      	lsls	r5, r4
100047c8:	1c2c      	adds	r4, r5, #0
100047ca:	2500      	movs	r5, #0
100047cc:	e64b      	b.n	10004466 <__aeabi_ddiv+0xc2>
100047ce:	f001 f96d 	bl	10005aac <__clzsi2>
100047d2:	3020      	adds	r0, #32
100047d4:	e63b      	b.n	1000444e <__aeabi_ddiv+0xaa>
100047d6:	1c06      	adds	r6, r0, #0
100047d8:	3e28      	subs	r6, #40	; 0x28
100047da:	40b7      	lsls	r7, r6
100047dc:	1c3e      	adds	r6, r7, #0
100047de:	2700      	movs	r7, #0
100047e0:	e609      	b.n	100043f6 <__aeabi_ddiv+0x52>
100047e2:	f001 f963 	bl	10005aac <__clzsi2>
100047e6:	3020      	adds	r0, #32
100047e8:	e5f9      	b.n	100043de <__aeabi_ddiv+0x3a>
100047ea:	9a02      	ldr	r2, [sp, #8]
100047ec:	3e01      	subs	r6, #1
100047ee:	1c11      	adds	r1, r2, #0
100047f0:	4459      	add	r1, fp
100047f2:	4559      	cmp	r1, fp
100047f4:	4192      	sbcs	r2, r2
100047f6:	4252      	negs	r2, r2
100047f8:	1912      	adds	r2, r2, r4
100047fa:	18d3      	adds	r3, r2, r3
100047fc:	429c      	cmp	r4, r3
100047fe:	d204      	bcs.n	1000480a <__aeabi_ddiv+0x466>
10004800:	4298      	cmp	r0, r3
10004802:	d86b      	bhi.n	100048dc <__aeabi_ddiv+0x538>
10004804:	d016      	beq.n	10004834 <__aeabi_ddiv+0x490>
10004806:	1a1b      	subs	r3, r3, r0
10004808:	e6cb      	b.n	100045a2 <__aeabi_ddiv+0x1fe>
1000480a:	42a3      	cmp	r3, r4
1000480c:	d1fb      	bne.n	10004806 <__aeabi_ddiv+0x462>
1000480e:	458b      	cmp	fp, r1
10004810:	d9f6      	bls.n	10004800 <__aeabi_ddiv+0x45c>
10004812:	1a23      	subs	r3, r4, r0
10004814:	e6c5      	b.n	100045a2 <__aeabi_ddiv+0x1fe>
10004816:	4599      	cmp	r9, r3
10004818:	d800      	bhi.n	1000481c <__aeabi_ddiv+0x478>
1000481a:	e697      	b.n	1000454c <__aeabi_ddiv+0x1a8>
1000481c:	3f01      	subs	r7, #1
1000481e:	191b      	adds	r3, r3, r4
10004820:	e694      	b.n	1000454c <__aeabi_ddiv+0x1a8>
10004822:	9a02      	ldr	r2, [sp, #8]
10004824:	42ba      	cmp	r2, r7
10004826:	d3e0      	bcc.n	100047ea <__aeabi_ddiv+0x446>
10004828:	9902      	ldr	r1, [sp, #8]
1000482a:	2300      	movs	r3, #0
1000482c:	e6b9      	b.n	100045a2 <__aeabi_ddiv+0x1fe>
1000482e:	42af      	cmp	r7, r5
10004830:	d9b9      	bls.n	100047a6 <__aeabi_ddiv+0x402>
10004832:	e647      	b.n	100044c4 <__aeabi_ddiv+0x120>
10004834:	428f      	cmp	r7, r1
10004836:	d851      	bhi.n	100048dc <__aeabi_ddiv+0x538>
10004838:	2300      	movs	r3, #0
1000483a:	e6b2      	b.n	100045a2 <__aeabi_ddiv+0x1fe>
1000483c:	1909      	adds	r1, r1, r4
1000483e:	3f01      	subs	r7, #1
10004840:	4658      	mov	r0, fp
10004842:	428c      	cmp	r4, r1
10004844:	d919      	bls.n	1000487a <__aeabi_ddiv+0x4d6>
10004846:	4291      	cmp	r1, r2
10004848:	d000      	beq.n	1000484c <__aeabi_ddiv+0x4a8>
1000484a:	e712      	b.n	10004672 <__aeabi_ddiv+0x2ce>
1000484c:	4298      	cmp	r0, r3
1000484e:	d000      	beq.n	10004852 <__aeabi_ddiv+0x4ae>
10004850:	e70f      	b.n	10004672 <__aeabi_ddiv+0x2ce>
10004852:	e76c      	b.n	1000472e <__aeabi_ddiv+0x38a>
10004854:	4c3d      	ldr	r4, [pc, #244]	; (1000494c <__aeabi_ddiv+0x5a8>)
10004856:	9d04      	ldr	r5, [sp, #16]
10004858:	1b63      	subs	r3, r4, r5
1000485a:	2b38      	cmp	r3, #56	; 0x38
1000485c:	dd1c      	ble.n	10004898 <__aeabi_ddiv+0x4f4>
1000485e:	9b01      	ldr	r3, [sp, #4]
10004860:	2200      	movs	r2, #0
10004862:	2600      	movs	r6, #0
10004864:	2700      	movs	r7, #0
10004866:	e711      	b.n	1000468c <__aeabi_ddiv+0x2e8>
10004868:	9b01      	ldr	r3, [sp, #4]
1000486a:	2200      	movs	r2, #0
1000486c:	402b      	ands	r3, r5
1000486e:	2600      	movs	r6, #0
10004870:	2700      	movs	r7, #0
10004872:	e70b      	b.n	1000468c <__aeabi_ddiv+0x2e8>
10004874:	2701      	movs	r7, #1
10004876:	427f      	negs	r7, r7
10004878:	e759      	b.n	1000472e <__aeabi_ddiv+0x38a>
1000487a:	428a      	cmp	r2, r1
1000487c:	d803      	bhi.n	10004886 <__aeabi_ddiv+0x4e2>
1000487e:	d000      	beq.n	10004882 <__aeabi_ddiv+0x4de>
10004880:	e6f7      	b.n	10004672 <__aeabi_ddiv+0x2ce>
10004882:	4298      	cmp	r0, r3
10004884:	d2e2      	bcs.n	1000484c <__aeabi_ddiv+0x4a8>
10004886:	465d      	mov	r5, fp
10004888:	0068      	lsls	r0, r5, #1
1000488a:	4558      	cmp	r0, fp
1000488c:	41ad      	sbcs	r5, r5
1000488e:	426d      	negs	r5, r5
10004890:	192c      	adds	r4, r5, r4
10004892:	3f01      	subs	r7, #1
10004894:	1909      	adds	r1, r1, r4
10004896:	e7d6      	b.n	10004846 <__aeabi_ddiv+0x4a2>
10004898:	2b1f      	cmp	r3, #31
1000489a:	dc34      	bgt.n	10004906 <__aeabi_ddiv+0x562>
1000489c:	9c04      	ldr	r4, [sp, #16]
1000489e:	4a2c      	ldr	r2, [pc, #176]	; (10004950 <__aeabi_ddiv+0x5ac>)
100048a0:	1c38      	adds	r0, r7, #0
100048a2:	18a5      	adds	r5, r4, r2
100048a4:	1c31      	adds	r1, r6, #0
100048a6:	40af      	lsls	r7, r5
100048a8:	40d8      	lsrs	r0, r3
100048aa:	40a9      	lsls	r1, r5
100048ac:	1c3c      	adds	r4, r7, #0
100048ae:	4301      	orrs	r1, r0
100048b0:	1e67      	subs	r7, r4, #1
100048b2:	41bc      	sbcs	r4, r7
100048b4:	1c0f      	adds	r7, r1, #0
100048b6:	4327      	orrs	r7, r4
100048b8:	40de      	lsrs	r6, r3
100048ba:	230f      	movs	r3, #15
100048bc:	403b      	ands	r3, r7
100048be:	2b04      	cmp	r3, #4
100048c0:	d005      	beq.n	100048ce <__aeabi_ddiv+0x52a>
100048c2:	1d3a      	adds	r2, r7, #4
100048c4:	42ba      	cmp	r2, r7
100048c6:	41bf      	sbcs	r7, r7
100048c8:	427d      	negs	r5, r7
100048ca:	1976      	adds	r6, r6, r5
100048cc:	1c17      	adds	r7, r2, #0
100048ce:	0232      	lsls	r2, r6, #8
100048d0:	d511      	bpl.n	100048f6 <__aeabi_ddiv+0x552>
100048d2:	9b01      	ldr	r3, [sp, #4]
100048d4:	2201      	movs	r2, #1
100048d6:	2600      	movs	r6, #0
100048d8:	2700      	movs	r7, #0
100048da:	e6d7      	b.n	1000468c <__aeabi_ddiv+0x2e8>
100048dc:	4459      	add	r1, fp
100048de:	4559      	cmp	r1, fp
100048e0:	4192      	sbcs	r2, r2
100048e2:	4252      	negs	r2, r2
100048e4:	1912      	adds	r2, r2, r4
100048e6:	18d3      	adds	r3, r2, r3
100048e8:	3e01      	subs	r6, #1
100048ea:	1a1b      	subs	r3, r3, r0
100048ec:	e659      	b.n	100045a2 <__aeabi_ddiv+0x1fe>
100048ee:	2b00      	cmp	r3, #0
100048f0:	d1a4      	bne.n	1000483c <__aeabi_ddiv+0x498>
100048f2:	2000      	movs	r0, #0
100048f4:	e7aa      	b.n	1000484c <__aeabi_ddiv+0x4a8>
100048f6:	0770      	lsls	r0, r6, #29
100048f8:	08ff      	lsrs	r7, r7, #3
100048fa:	0271      	lsls	r1, r6, #9
100048fc:	4307      	orrs	r7, r0
100048fe:	0b0e      	lsrs	r6, r1, #12
10004900:	9b01      	ldr	r3, [sp, #4]
10004902:	2200      	movs	r2, #0
10004904:	e6c2      	b.n	1000468c <__aeabi_ddiv+0x2e8>
10004906:	4913      	ldr	r1, [pc, #76]	; (10004954 <__aeabi_ddiv+0x5b0>)
10004908:	9c04      	ldr	r4, [sp, #16]
1000490a:	1c30      	adds	r0, r6, #0
1000490c:	1b0a      	subs	r2, r1, r4
1000490e:	40d0      	lsrs	r0, r2
10004910:	1c05      	adds	r5, r0, #0
10004912:	2b20      	cmp	r3, #32
10004914:	d008      	beq.n	10004928 <__aeabi_ddiv+0x584>
10004916:	4b10      	ldr	r3, [pc, #64]	; (10004958 <__aeabi_ddiv+0x5b4>)
10004918:	18e1      	adds	r1, r4, r3
1000491a:	408e      	lsls	r6, r1
1000491c:	4337      	orrs	r7, r6
1000491e:	1e7b      	subs	r3, r7, #1
10004920:	419f      	sbcs	r7, r3
10004922:	432f      	orrs	r7, r5
10004924:	2600      	movs	r6, #0
10004926:	e7c8      	b.n	100048ba <__aeabi_ddiv+0x516>
10004928:	2600      	movs	r6, #0
1000492a:	e7f7      	b.n	1000491c <__aeabi_ddiv+0x578>
1000492c:	2280      	movs	r2, #128	; 0x80
1000492e:	0310      	lsls	r0, r2, #12
10004930:	4306      	orrs	r6, r0
10004932:	0331      	lsls	r1, r6, #12
10004934:	0b0e      	lsrs	r6, r1, #12
10004936:	9b01      	ldr	r3, [sp, #4]
10004938:	4a03      	ldr	r2, [pc, #12]	; (10004948 <__aeabi_ddiv+0x5a4>)
1000493a:	e6a7      	b.n	1000468c <__aeabi_ddiv+0x2e8>
1000493c:	000003ff 	.word	0x000003ff
10004940:	feffffff 	.word	0xfeffffff
10004944:	000007fe 	.word	0x000007fe
10004948:	000007ff 	.word	0x000007ff
1000494c:	fffffc02 	.word	0xfffffc02
10004950:	0000041e 	.word	0x0000041e
10004954:	fffffbe2 	.word	0xfffffbe2
10004958:	0000043e 	.word	0x0000043e

1000495c <__eqdf2>:
1000495c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000495e:	4694      	mov	ip, r2
10004960:	4647      	mov	r7, r8
10004962:	031a      	lsls	r2, r3, #12
10004964:	1c06      	adds	r6, r0, #0
10004966:	0058      	lsls	r0, r3, #1
10004968:	b480      	push	{r7}
1000496a:	0b17      	lsrs	r7, r2, #12
1000496c:	0d42      	lsrs	r2, r0, #21
1000496e:	4819      	ldr	r0, [pc, #100]	; (100049d4 <__eqdf2+0x78>)
10004970:	030d      	lsls	r5, r1, #12
10004972:	004c      	lsls	r4, r1, #1
10004974:	0fdb      	lsrs	r3, r3, #31
10004976:	0b2d      	lsrs	r5, r5, #12
10004978:	0d64      	lsrs	r4, r4, #21
1000497a:	0fc9      	lsrs	r1, r1, #31
1000497c:	4698      	mov	r8, r3
1000497e:	4284      	cmp	r4, r0
10004980:	d008      	beq.n	10004994 <__eqdf2+0x38>
10004982:	4814      	ldr	r0, [pc, #80]	; (100049d4 <__eqdf2+0x78>)
10004984:	4282      	cmp	r2, r0
10004986:	d00d      	beq.n	100049a4 <__eqdf2+0x48>
10004988:	2001      	movs	r0, #1
1000498a:	4294      	cmp	r4, r2
1000498c:	d012      	beq.n	100049b4 <__eqdf2+0x58>
1000498e:	bc04      	pop	{r2}
10004990:	4690      	mov	r8, r2
10004992:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004994:	1c2b      	adds	r3, r5, #0
10004996:	4333      	orrs	r3, r6
10004998:	2001      	movs	r0, #1
1000499a:	2b00      	cmp	r3, #0
1000499c:	d1f7      	bne.n	1000498e <__eqdf2+0x32>
1000499e:	480d      	ldr	r0, [pc, #52]	; (100049d4 <__eqdf2+0x78>)
100049a0:	4282      	cmp	r2, r0
100049a2:	d1f1      	bne.n	10004988 <__eqdf2+0x2c>
100049a4:	4663      	mov	r3, ip
100049a6:	433b      	orrs	r3, r7
100049a8:	2001      	movs	r0, #1
100049aa:	2b00      	cmp	r3, #0
100049ac:	d1ef      	bne.n	1000498e <__eqdf2+0x32>
100049ae:	2001      	movs	r0, #1
100049b0:	4294      	cmp	r4, r2
100049b2:	d1ec      	bne.n	1000498e <__eqdf2+0x32>
100049b4:	42bd      	cmp	r5, r7
100049b6:	d1ea      	bne.n	1000498e <__eqdf2+0x32>
100049b8:	4566      	cmp	r6, ip
100049ba:	d1e8      	bne.n	1000498e <__eqdf2+0x32>
100049bc:	4541      	cmp	r1, r8
100049be:	d006      	beq.n	100049ce <__eqdf2+0x72>
100049c0:	2c00      	cmp	r4, #0
100049c2:	d1e4      	bne.n	1000498e <__eqdf2+0x32>
100049c4:	1c28      	adds	r0, r5, #0
100049c6:	4330      	orrs	r0, r6
100049c8:	1e45      	subs	r5, r0, #1
100049ca:	41a8      	sbcs	r0, r5
100049cc:	e7df      	b.n	1000498e <__eqdf2+0x32>
100049ce:	2000      	movs	r0, #0
100049d0:	e7dd      	b.n	1000498e <__eqdf2+0x32>
100049d2:	46c0      	nop			; (mov r8, r8)
100049d4:	000007ff 	.word	0x000007ff

100049d8 <__gedf2>:
100049d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100049da:	4657      	mov	r7, sl
100049dc:	464e      	mov	r6, r9
100049de:	4645      	mov	r5, r8
100049e0:	b4e0      	push	{r5, r6, r7}
100049e2:	1c04      	adds	r4, r0, #0
100049e4:	004e      	lsls	r6, r1, #1
100049e6:	0308      	lsls	r0, r1, #12
100049e8:	0fc9      	lsrs	r1, r1, #31
100049ea:	468a      	mov	sl, r1
100049ec:	1c17      	adds	r7, r2, #0
100049ee:	0059      	lsls	r1, r3, #1
100049f0:	031a      	lsls	r2, r3, #12
100049f2:	0b05      	lsrs	r5, r0, #12
100049f4:	0d70      	lsrs	r0, r6, #21
100049f6:	0b16      	lsrs	r6, r2, #12
100049f8:	0d4a      	lsrs	r2, r1, #21
100049fa:	4930      	ldr	r1, [pc, #192]	; (10004abc <__gedf2+0xe4>)
100049fc:	0fdb      	lsrs	r3, r3, #31
100049fe:	469c      	mov	ip, r3
10004a00:	4288      	cmp	r0, r1
10004a02:	d032      	beq.n	10004a6a <__gedf2+0x92>
10004a04:	492d      	ldr	r1, [pc, #180]	; (10004abc <__gedf2+0xe4>)
10004a06:	428a      	cmp	r2, r1
10004a08:	d035      	beq.n	10004a76 <__gedf2+0x9e>
10004a0a:	2800      	cmp	r0, #0
10004a0c:	d10f      	bne.n	10004a2e <__gedf2+0x56>
10004a0e:	1c29      	adds	r1, r5, #0
10004a10:	4321      	orrs	r1, r4
10004a12:	424b      	negs	r3, r1
10004a14:	414b      	adcs	r3, r1
10004a16:	4698      	mov	r8, r3
10004a18:	2a00      	cmp	r2, #0
10004a1a:	d00b      	beq.n	10004a34 <__gedf2+0x5c>
10004a1c:	2b00      	cmp	r3, #0
10004a1e:	d11a      	bne.n	10004a56 <__gedf2+0x7e>
10004a20:	45e2      	cmp	sl, ip
10004a22:	d02c      	beq.n	10004a7e <__gedf2+0xa6>
10004a24:	4655      	mov	r5, sl
10004a26:	2d00      	cmp	r5, #0
10004a28:	d118      	bne.n	10004a5c <__gedf2+0x84>
10004a2a:	2001      	movs	r0, #1
10004a2c:	e018      	b.n	10004a60 <__gedf2+0x88>
10004a2e:	2a00      	cmp	r2, #0
10004a30:	d1f6      	bne.n	10004a20 <__gedf2+0x48>
10004a32:	4690      	mov	r8, r2
10004a34:	1c31      	adds	r1, r6, #0
10004a36:	4339      	orrs	r1, r7
10004a38:	424b      	negs	r3, r1
10004a3a:	414b      	adcs	r3, r1
10004a3c:	4641      	mov	r1, r8
10004a3e:	2900      	cmp	r1, #0
10004a40:	d106      	bne.n	10004a50 <__gedf2+0x78>
10004a42:	2b00      	cmp	r3, #0
10004a44:	d0ec      	beq.n	10004a20 <__gedf2+0x48>
10004a46:	4656      	mov	r6, sl
10004a48:	2001      	movs	r0, #1
10004a4a:	2e00      	cmp	r6, #0
10004a4c:	d008      	beq.n	10004a60 <__gedf2+0x88>
10004a4e:	e005      	b.n	10004a5c <__gedf2+0x84>
10004a50:	2000      	movs	r0, #0
10004a52:	2b00      	cmp	r3, #0
10004a54:	d104      	bne.n	10004a60 <__gedf2+0x88>
10004a56:	4667      	mov	r7, ip
10004a58:	2f00      	cmp	r7, #0
10004a5a:	d1e6      	bne.n	10004a2a <__gedf2+0x52>
10004a5c:	2301      	movs	r3, #1
10004a5e:	4258      	negs	r0, r3
10004a60:	bc1c      	pop	{r2, r3, r4}
10004a62:	4690      	mov	r8, r2
10004a64:	4699      	mov	r9, r3
10004a66:	46a2      	mov	sl, r4
10004a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004a6a:	1c2b      	adds	r3, r5, #0
10004a6c:	4323      	orrs	r3, r4
10004a6e:	d0c9      	beq.n	10004a04 <__gedf2+0x2c>
10004a70:	2102      	movs	r1, #2
10004a72:	4248      	negs	r0, r1
10004a74:	e7f4      	b.n	10004a60 <__gedf2+0x88>
10004a76:	1c33      	adds	r3, r6, #0
10004a78:	433b      	orrs	r3, r7
10004a7a:	d0c6      	beq.n	10004a0a <__gedf2+0x32>
10004a7c:	e7f8      	b.n	10004a70 <__gedf2+0x98>
10004a7e:	4290      	cmp	r0, r2
10004a80:	dc05      	bgt.n	10004a8e <__gedf2+0xb6>
10004a82:	da09      	bge.n	10004a98 <__gedf2+0xc0>
10004a84:	4652      	mov	r2, sl
10004a86:	2a00      	cmp	r2, #0
10004a88:	d0e8      	beq.n	10004a5c <__gedf2+0x84>
10004a8a:	2001      	movs	r0, #1
10004a8c:	e7e8      	b.n	10004a60 <__gedf2+0x88>
10004a8e:	4654      	mov	r4, sl
10004a90:	2c00      	cmp	r4, #0
10004a92:	d1e3      	bne.n	10004a5c <__gedf2+0x84>
10004a94:	2001      	movs	r0, #1
10004a96:	e7e3      	b.n	10004a60 <__gedf2+0x88>
10004a98:	42b5      	cmp	r5, r6
10004a9a:	d8c3      	bhi.n	10004a24 <__gedf2+0x4c>
10004a9c:	d007      	beq.n	10004aae <__gedf2+0xd6>
10004a9e:	2000      	movs	r0, #0
10004aa0:	42b5      	cmp	r5, r6
10004aa2:	d2dd      	bcs.n	10004a60 <__gedf2+0x88>
10004aa4:	4650      	mov	r0, sl
10004aa6:	2800      	cmp	r0, #0
10004aa8:	d0d8      	beq.n	10004a5c <__gedf2+0x84>
10004aaa:	2001      	movs	r0, #1
10004aac:	e7d8      	b.n	10004a60 <__gedf2+0x88>
10004aae:	42bc      	cmp	r4, r7
10004ab0:	d8b8      	bhi.n	10004a24 <__gedf2+0x4c>
10004ab2:	2000      	movs	r0, #0
10004ab4:	42bc      	cmp	r4, r7
10004ab6:	d3f5      	bcc.n	10004aa4 <__gedf2+0xcc>
10004ab8:	e7d2      	b.n	10004a60 <__gedf2+0x88>
10004aba:	46c0      	nop			; (mov r8, r8)
10004abc:	000007ff 	.word	0x000007ff

10004ac0 <__ledf2>:
10004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
10004ac2:	4644      	mov	r4, r8
10004ac4:	465f      	mov	r7, fp
10004ac6:	4656      	mov	r6, sl
10004ac8:	464d      	mov	r5, r9
10004aca:	b4f0      	push	{r4, r5, r6, r7}
10004acc:	4694      	mov	ip, r2
10004ace:	1c06      	adds	r6, r0, #0
10004ad0:	031a      	lsls	r2, r3, #12
10004ad2:	0058      	lsls	r0, r3, #1
10004ad4:	0b17      	lsrs	r7, r2, #12
10004ad6:	0d42      	lsrs	r2, r0, #21
10004ad8:	482e      	ldr	r0, [pc, #184]	; (10004b94 <__ledf2+0xd4>)
10004ada:	030d      	lsls	r5, r1, #12
10004adc:	004c      	lsls	r4, r1, #1
10004ade:	0fdb      	lsrs	r3, r3, #31
10004ae0:	0b2d      	lsrs	r5, r5, #12
10004ae2:	0d64      	lsrs	r4, r4, #21
10004ae4:	0fc9      	lsrs	r1, r1, #31
10004ae6:	4698      	mov	r8, r3
10004ae8:	4284      	cmp	r4, r0
10004aea:	d033      	beq.n	10004b54 <__ledf2+0x94>
10004aec:	4829      	ldr	r0, [pc, #164]	; (10004b94 <__ledf2+0xd4>)
10004aee:	4282      	cmp	r2, r0
10004af0:	d036      	beq.n	10004b60 <__ledf2+0xa0>
10004af2:	2c00      	cmp	r4, #0
10004af4:	d019      	beq.n	10004b2a <__ledf2+0x6a>
10004af6:	2a00      	cmp	r2, #0
10004af8:	d120      	bne.n	10004b3c <__ledf2+0x7c>
10004afa:	4693      	mov	fp, r2
10004afc:	4663      	mov	r3, ip
10004afe:	433b      	orrs	r3, r7
10004b00:	4258      	negs	r0, r3
10004b02:	4158      	adcs	r0, r3
10004b04:	465b      	mov	r3, fp
10004b06:	4682      	mov	sl, r0
10004b08:	2b00      	cmp	r3, #0
10004b0a:	d01d      	beq.n	10004b48 <__ledf2+0x88>
10004b0c:	4651      	mov	r1, sl
10004b0e:	2000      	movs	r0, #0
10004b10:	2900      	cmp	r1, #0
10004b12:	d104      	bne.n	10004b1e <__ledf2+0x5e>
10004b14:	4642      	mov	r2, r8
10004b16:	2a00      	cmp	r2, #0
10004b18:	d114      	bne.n	10004b44 <__ledf2+0x84>
10004b1a:	2401      	movs	r4, #1
10004b1c:	4260      	negs	r0, r4
10004b1e:	bc3c      	pop	{r2, r3, r4, r5}
10004b20:	4690      	mov	r8, r2
10004b22:	4699      	mov	r9, r3
10004b24:	46a2      	mov	sl, r4
10004b26:	46ab      	mov	fp, r5
10004b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004b2a:	1c2b      	adds	r3, r5, #0
10004b2c:	4333      	orrs	r3, r6
10004b2e:	4258      	negs	r0, r3
10004b30:	4143      	adcs	r3, r0
10004b32:	469b      	mov	fp, r3
10004b34:	2a00      	cmp	r2, #0
10004b36:	d0e1      	beq.n	10004afc <__ledf2+0x3c>
10004b38:	2b00      	cmp	r3, #0
10004b3a:	d1eb      	bne.n	10004b14 <__ledf2+0x54>
10004b3c:	4541      	cmp	r1, r8
10004b3e:	d015      	beq.n	10004b6c <__ledf2+0xac>
10004b40:	2900      	cmp	r1, #0
10004b42:	d1ea      	bne.n	10004b1a <__ledf2+0x5a>
10004b44:	2001      	movs	r0, #1
10004b46:	e7ea      	b.n	10004b1e <__ledf2+0x5e>
10004b48:	2800      	cmp	r0, #0
10004b4a:	d0f7      	beq.n	10004b3c <__ledf2+0x7c>
10004b4c:	2001      	movs	r0, #1
10004b4e:	2900      	cmp	r1, #0
10004b50:	d0e5      	beq.n	10004b1e <__ledf2+0x5e>
10004b52:	e7e2      	b.n	10004b1a <__ledf2+0x5a>
10004b54:	1c2b      	adds	r3, r5, #0
10004b56:	4333      	orrs	r3, r6
10004b58:	2002      	movs	r0, #2
10004b5a:	2b00      	cmp	r3, #0
10004b5c:	d1df      	bne.n	10004b1e <__ledf2+0x5e>
10004b5e:	e7c5      	b.n	10004aec <__ledf2+0x2c>
10004b60:	4663      	mov	r3, ip
10004b62:	433b      	orrs	r3, r7
10004b64:	2002      	movs	r0, #2
10004b66:	2b00      	cmp	r3, #0
10004b68:	d1d9      	bne.n	10004b1e <__ledf2+0x5e>
10004b6a:	e7c2      	b.n	10004af2 <__ledf2+0x32>
10004b6c:	4294      	cmp	r4, r2
10004b6e:	dce7      	bgt.n	10004b40 <__ledf2+0x80>
10004b70:	db05      	blt.n	10004b7e <__ledf2+0xbe>
10004b72:	42bd      	cmp	r5, r7
10004b74:	d8e4      	bhi.n	10004b40 <__ledf2+0x80>
10004b76:	d006      	beq.n	10004b86 <__ledf2+0xc6>
10004b78:	2000      	movs	r0, #0
10004b7a:	42bd      	cmp	r5, r7
10004b7c:	d2cf      	bcs.n	10004b1e <__ledf2+0x5e>
10004b7e:	2900      	cmp	r1, #0
10004b80:	d0cb      	beq.n	10004b1a <__ledf2+0x5a>
10004b82:	2001      	movs	r0, #1
10004b84:	e7cb      	b.n	10004b1e <__ledf2+0x5e>
10004b86:	4566      	cmp	r6, ip
10004b88:	d8da      	bhi.n	10004b40 <__ledf2+0x80>
10004b8a:	2000      	movs	r0, #0
10004b8c:	4566      	cmp	r6, ip
10004b8e:	d3f6      	bcc.n	10004b7e <__ledf2+0xbe>
10004b90:	e7c5      	b.n	10004b1e <__ledf2+0x5e>
10004b92:	46c0      	nop			; (mov r8, r8)
10004b94:	000007ff 	.word	0x000007ff

10004b98 <__aeabi_dmul>:
10004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
10004b9a:	4656      	mov	r6, sl
10004b9c:	4644      	mov	r4, r8
10004b9e:	465f      	mov	r7, fp
10004ba0:	464d      	mov	r5, r9
10004ba2:	b4f0      	push	{r4, r5, r6, r7}
10004ba4:	004f      	lsls	r7, r1, #1
10004ba6:	1c1d      	adds	r5, r3, #0
10004ba8:	030b      	lsls	r3, r1, #12
10004baa:	1c14      	adds	r4, r2, #0
10004bac:	0b1a      	lsrs	r2, r3, #12
10004bae:	0d7b      	lsrs	r3, r7, #21
10004bb0:	b087      	sub	sp, #28
10004bb2:	1c06      	adds	r6, r0, #0
10004bb4:	4692      	mov	sl, r2
10004bb6:	4698      	mov	r8, r3
10004bb8:	0fcf      	lsrs	r7, r1, #31
10004bba:	2b00      	cmp	r3, #0
10004bbc:	d121      	bne.n	10004c02 <__aeabi_dmul+0x6a>
10004bbe:	4302      	orrs	r2, r0
10004bc0:	d100      	bne.n	10004bc4 <__aeabi_dmul+0x2c>
10004bc2:	e149      	b.n	10004e58 <__aeabi_dmul+0x2c0>
10004bc4:	4653      	mov	r3, sl
10004bc6:	2b00      	cmp	r3, #0
10004bc8:	d100      	bne.n	10004bcc <__aeabi_dmul+0x34>
10004bca:	e1e4      	b.n	10004f96 <__aeabi_dmul+0x3fe>
10004bcc:	4650      	mov	r0, sl
10004bce:	f000 ff6d 	bl	10005aac <__clzsi2>
10004bd2:	1e03      	subs	r3, r0, #0
10004bd4:	2b27      	cmp	r3, #39	; 0x27
10004bd6:	dd00      	ble.n	10004bda <__aeabi_dmul+0x42>
10004bd8:	e1d8      	b.n	10004f8c <__aeabi_dmul+0x3f4>
10004bda:	3b08      	subs	r3, #8
10004bdc:	4651      	mov	r1, sl
10004bde:	4099      	lsls	r1, r3
10004be0:	2228      	movs	r2, #40	; 0x28
10004be2:	4688      	mov	r8, r1
10004be4:	1a11      	subs	r1, r2, r0
10004be6:	1c32      	adds	r2, r6, #0
10004be8:	40ca      	lsrs	r2, r1
10004bea:	4641      	mov	r1, r8
10004bec:	430a      	orrs	r2, r1
10004bee:	4692      	mov	sl, r2
10004bf0:	409e      	lsls	r6, r3
10004bf2:	4bd8      	ldr	r3, [pc, #864]	; (10004f54 <__aeabi_dmul+0x3bc>)
10004bf4:	2200      	movs	r2, #0
10004bf6:	1a18      	subs	r0, r3, r0
10004bf8:	2100      	movs	r1, #0
10004bfa:	4680      	mov	r8, r0
10004bfc:	4691      	mov	r9, r2
10004bfe:	9103      	str	r1, [sp, #12]
10004c00:	e011      	b.n	10004c26 <__aeabi_dmul+0x8e>
10004c02:	48d5      	ldr	r0, [pc, #852]	; (10004f58 <__aeabi_dmul+0x3c0>)
10004c04:	4283      	cmp	r3, r0
10004c06:	d03e      	beq.n	10004c86 <__aeabi_dmul+0xee>
10004c08:	2180      	movs	r1, #128	; 0x80
10004c0a:	4653      	mov	r3, sl
10004c0c:	034a      	lsls	r2, r1, #13
10004c0e:	431a      	orrs	r2, r3
10004c10:	00d0      	lsls	r0, r2, #3
10004c12:	0f71      	lsrs	r1, r6, #29
10004c14:	4308      	orrs	r0, r1
10004c16:	4ad1      	ldr	r2, [pc, #836]	; (10004f5c <__aeabi_dmul+0x3c4>)
10004c18:	4682      	mov	sl, r0
10004c1a:	2300      	movs	r3, #0
10004c1c:	2000      	movs	r0, #0
10004c1e:	00f6      	lsls	r6, r6, #3
10004c20:	4490      	add	r8, r2
10004c22:	4699      	mov	r9, r3
10004c24:	9003      	str	r0, [sp, #12]
10004c26:	1c29      	adds	r1, r5, #0
10004c28:	1c20      	adds	r0, r4, #0
10004c2a:	1c25      	adds	r5, r4, #0
10004c2c:	004a      	lsls	r2, r1, #1
10004c2e:	030c      	lsls	r4, r1, #12
10004c30:	0fcb      	lsrs	r3, r1, #31
10004c32:	0b24      	lsrs	r4, r4, #12
10004c34:	0d52      	lsrs	r2, r2, #21
10004c36:	469b      	mov	fp, r3
10004c38:	d131      	bne.n	10004c9e <__aeabi_dmul+0x106>
10004c3a:	1c21      	adds	r1, r4, #0
10004c3c:	4301      	orrs	r1, r0
10004c3e:	d100      	bne.n	10004c42 <__aeabi_dmul+0xaa>
10004c40:	e112      	b.n	10004e68 <__aeabi_dmul+0x2d0>
10004c42:	2c00      	cmp	r4, #0
10004c44:	d100      	bne.n	10004c48 <__aeabi_dmul+0xb0>
10004c46:	e19d      	b.n	10004f84 <__aeabi_dmul+0x3ec>
10004c48:	1c20      	adds	r0, r4, #0
10004c4a:	f000 ff2f 	bl	10005aac <__clzsi2>
10004c4e:	2827      	cmp	r0, #39	; 0x27
10004c50:	dd00      	ble.n	10004c54 <__aeabi_dmul+0xbc>
10004c52:	e191      	b.n	10004f78 <__aeabi_dmul+0x3e0>
10004c54:	1c03      	adds	r3, r0, #0
10004c56:	2228      	movs	r2, #40	; 0x28
10004c58:	3b08      	subs	r3, #8
10004c5a:	1c29      	adds	r1, r5, #0
10004c5c:	1a12      	subs	r2, r2, r0
10004c5e:	409c      	lsls	r4, r3
10004c60:	40d1      	lsrs	r1, r2
10004c62:	430c      	orrs	r4, r1
10004c64:	409d      	lsls	r5, r3
10004c66:	4bbb      	ldr	r3, [pc, #748]	; (10004f54 <__aeabi_dmul+0x3bc>)
10004c68:	4659      	mov	r1, fp
10004c6a:	1a1a      	subs	r2, r3, r0
10004c6c:	4079      	eors	r1, r7
10004c6e:	2000      	movs	r0, #0
10004c70:	464b      	mov	r3, r9
10004c72:	9101      	str	r1, [sp, #4]
10004c74:	4303      	orrs	r3, r0
10004c76:	2b0f      	cmp	r3, #15
10004c78:	d826      	bhi.n	10004cc8 <__aeabi_dmul+0x130>
10004c7a:	0099      	lsls	r1, r3, #2
10004c7c:	4bb8      	ldr	r3, [pc, #736]	; (10004f60 <__aeabi_dmul+0x3c8>)
10004c7e:	468c      	mov	ip, r1
10004c80:	4463      	add	r3, ip
10004c82:	6819      	ldr	r1, [r3, #0]
10004c84:	468f      	mov	pc, r1
10004c86:	1c11      	adds	r1, r2, #0
10004c88:	4331      	orrs	r1, r6
10004c8a:	d000      	beq.n	10004c8e <__aeabi_dmul+0xf6>
10004c8c:	e0df      	b.n	10004e4e <__aeabi_dmul+0x2b6>
10004c8e:	2608      	movs	r6, #8
10004c90:	2000      	movs	r0, #0
10004c92:	2102      	movs	r1, #2
10004c94:	46b1      	mov	r9, r6
10004c96:	4682      	mov	sl, r0
10004c98:	2600      	movs	r6, #0
10004c9a:	9103      	str	r1, [sp, #12]
10004c9c:	e7c3      	b.n	10004c26 <__aeabi_dmul+0x8e>
10004c9e:	48ae      	ldr	r0, [pc, #696]	; (10004f58 <__aeabi_dmul+0x3c0>)
10004ca0:	4282      	cmp	r2, r0
10004ca2:	d100      	bne.n	10004ca6 <__aeabi_dmul+0x10e>
10004ca4:	e0c9      	b.n	10004e3a <__aeabi_dmul+0x2a2>
10004ca6:	2180      	movs	r1, #128	; 0x80
10004ca8:	034b      	lsls	r3, r1, #13
10004caa:	431c      	orrs	r4, r3
10004cac:	49ab      	ldr	r1, [pc, #684]	; (10004f5c <__aeabi_dmul+0x3c4>)
10004cae:	0f68      	lsrs	r0, r5, #29
10004cb0:	00e4      	lsls	r4, r4, #3
10004cb2:	4304      	orrs	r4, r0
10004cb4:	00ed      	lsls	r5, r5, #3
10004cb6:	1852      	adds	r2, r2, r1
10004cb8:	2000      	movs	r0, #0
10004cba:	4659      	mov	r1, fp
10004cbc:	4079      	eors	r1, r7
10004cbe:	464b      	mov	r3, r9
10004cc0:	9101      	str	r1, [sp, #4]
10004cc2:	4303      	orrs	r3, r0
10004cc4:	2b0f      	cmp	r3, #15
10004cc6:	d9d8      	bls.n	10004c7a <__aeabi_dmul+0xe2>
10004cc8:	4442      	add	r2, r8
10004cca:	0433      	lsls	r3, r6, #16
10004ccc:	0429      	lsls	r1, r5, #16
10004cce:	9204      	str	r2, [sp, #16]
10004cd0:	0c1a      	lsrs	r2, r3, #16
10004cd2:	0c0f      	lsrs	r7, r1, #16
10004cd4:	1c10      	adds	r0, r2, #0
10004cd6:	4378      	muls	r0, r7
10004cd8:	0c36      	lsrs	r6, r6, #16
10004cda:	1c33      	adds	r3, r6, #0
10004cdc:	4680      	mov	r8, r0
10004cde:	0c2d      	lsrs	r5, r5, #16
10004ce0:	437b      	muls	r3, r7
10004ce2:	1c30      	adds	r0, r6, #0
10004ce4:	4368      	muls	r0, r5
10004ce6:	1c11      	adds	r1, r2, #0
10004ce8:	4369      	muls	r1, r5
10004cea:	469c      	mov	ip, r3
10004cec:	4643      	mov	r3, r8
10004cee:	4683      	mov	fp, r0
10004cf0:	0c18      	lsrs	r0, r3, #16
10004cf2:	1808      	adds	r0, r1, r0
10004cf4:	4460      	add	r0, ip
10004cf6:	4584      	cmp	ip, r0
10004cf8:	d900      	bls.n	10004cfc <__aeabi_dmul+0x164>
10004cfa:	e11f      	b.n	10004f3c <__aeabi_dmul+0x3a4>
10004cfc:	0c01      	lsrs	r1, r0, #16
10004cfe:	4643      	mov	r3, r8
10004d00:	9103      	str	r1, [sp, #12]
10004d02:	0419      	lsls	r1, r3, #16
10004d04:	0c0b      	lsrs	r3, r1, #16
10004d06:	0400      	lsls	r0, r0, #16
10004d08:	18c0      	adds	r0, r0, r3
10004d0a:	0421      	lsls	r1, r4, #16
10004d0c:	0c24      	lsrs	r4, r4, #16
10004d0e:	9005      	str	r0, [sp, #20]
10004d10:	1c10      	adds	r0, r2, #0
10004d12:	4362      	muls	r2, r4
10004d14:	0c09      	lsrs	r1, r1, #16
10004d16:	9202      	str	r2, [sp, #8]
10004d18:	4348      	muls	r0, r1
10004d1a:	1c32      	adds	r2, r6, #0
10004d1c:	4366      	muls	r6, r4
10004d1e:	434a      	muls	r2, r1
10004d20:	9b02      	ldr	r3, [sp, #8]
10004d22:	46b1      	mov	r9, r6
10004d24:	0c06      	lsrs	r6, r0, #16
10004d26:	4690      	mov	r8, r2
10004d28:	46b4      	mov	ip, r6
10004d2a:	1c1a      	adds	r2, r3, #0
10004d2c:	4462      	add	r2, ip
10004d2e:	4442      	add	r2, r8
10004d30:	4590      	cmp	r8, r2
10004d32:	d902      	bls.n	10004d3a <__aeabi_dmul+0x1a2>
10004d34:	2680      	movs	r6, #128	; 0x80
10004d36:	0273      	lsls	r3, r6, #9
10004d38:	4499      	add	r9, r3
10004d3a:	0c16      	lsrs	r6, r2, #16
10004d3c:	46b0      	mov	r8, r6
10004d3e:	44c1      	add	r9, r8
10004d40:	0400      	lsls	r0, r0, #16
10004d42:	464b      	mov	r3, r9
10004d44:	0c06      	lsrs	r6, r0, #16
10004d46:	0412      	lsls	r2, r2, #16
10004d48:	9302      	str	r3, [sp, #8]
10004d4a:	1993      	adds	r3, r2, r6
10004d4c:	4656      	mov	r6, sl
10004d4e:	0432      	lsls	r2, r6, #16
10004d50:	0c10      	lsrs	r0, r2, #16
10004d52:	1c02      	adds	r2, r0, #0
10004d54:	436a      	muls	r2, r5
10004d56:	469c      	mov	ip, r3
10004d58:	1c03      	adds	r3, r0, #0
10004d5a:	437b      	muls	r3, r7
10004d5c:	4691      	mov	r9, r2
10004d5e:	0c32      	lsrs	r2, r6, #16
10004d60:	4357      	muls	r7, r2
10004d62:	4698      	mov	r8, r3
10004d64:	0c1b      	lsrs	r3, r3, #16
10004d66:	469a      	mov	sl, r3
10004d68:	44d1      	add	r9, sl
10004d6a:	44b9      	add	r9, r7
10004d6c:	4355      	muls	r5, r2
10004d6e:	454f      	cmp	r7, r9
10004d70:	d902      	bls.n	10004d78 <__aeabi_dmul+0x1e0>
10004d72:	2780      	movs	r7, #128	; 0x80
10004d74:	027e      	lsls	r6, r7, #9
10004d76:	19ad      	adds	r5, r5, r6
10004d78:	464b      	mov	r3, r9
10004d7a:	0c1f      	lsrs	r7, r3, #16
10004d7c:	4646      	mov	r6, r8
10004d7e:	19ed      	adds	r5, r5, r7
10004d80:	041f      	lsls	r7, r3, #16
10004d82:	0433      	lsls	r3, r6, #16
10004d84:	0c1e      	lsrs	r6, r3, #16
10004d86:	1c03      	adds	r3, r0, #0
10004d88:	434b      	muls	r3, r1
10004d8a:	4360      	muls	r0, r4
10004d8c:	4351      	muls	r1, r2
10004d8e:	4354      	muls	r4, r2
10004d90:	0c1a      	lsrs	r2, r3, #16
10004d92:	1880      	adds	r0, r0, r2
10004d94:	46b0      	mov	r8, r6
10004d96:	1840      	adds	r0, r0, r1
10004d98:	4447      	add	r7, r8
10004d9a:	469a      	mov	sl, r3
10004d9c:	4281      	cmp	r1, r0
10004d9e:	d902      	bls.n	10004da6 <__aeabi_dmul+0x20e>
10004da0:	2180      	movs	r1, #128	; 0x80
10004da2:	024e      	lsls	r6, r1, #9
10004da4:	19a4      	adds	r4, r4, r6
10004da6:	9b03      	ldr	r3, [sp, #12]
10004da8:	1c1a      	adds	r2, r3, #0
10004daa:	4462      	add	r2, ip
10004dac:	445a      	add	r2, fp
10004dae:	4562      	cmp	r2, ip
10004db0:	4189      	sbcs	r1, r1
10004db2:	424e      	negs	r6, r1
10004db4:	4651      	mov	r1, sl
10004db6:	46b3      	mov	fp, r6
10004db8:	0403      	lsls	r3, r0, #16
10004dba:	040e      	lsls	r6, r1, #16
10004dbc:	469c      	mov	ip, r3
10004dbe:	9902      	ldr	r1, [sp, #8]
10004dc0:	0c33      	lsrs	r3, r6, #16
10004dc2:	4463      	add	r3, ip
10004dc4:	18ce      	adds	r6, r1, r3
10004dc6:	46b0      	mov	r8, r6
10004dc8:	46c2      	mov	sl, r8
10004dca:	44da      	add	sl, fp
10004dcc:	19d2      	adds	r2, r2, r7
10004dce:	42ba      	cmp	r2, r7
10004dd0:	41bf      	sbcs	r7, r7
10004dd2:	4651      	mov	r1, sl
10004dd4:	427b      	negs	r3, r7
10004dd6:	186f      	adds	r7, r5, r1
10004dd8:	18f9      	adds	r1, r7, r3
10004dda:	4699      	mov	r9, r3
10004ddc:	45da      	cmp	sl, fp
10004dde:	419b      	sbcs	r3, r3
10004de0:	425e      	negs	r6, r3
10004de2:	9b02      	ldr	r3, [sp, #8]
10004de4:	46b3      	mov	fp, r6
10004de6:	4598      	cmp	r8, r3
10004de8:	41b6      	sbcs	r6, r6
10004dea:	4276      	negs	r6, r6
10004dec:	465b      	mov	r3, fp
10004dee:	431e      	orrs	r6, r3
10004df0:	0c00      	lsrs	r0, r0, #16
10004df2:	4549      	cmp	r1, r9
10004df4:	419b      	sbcs	r3, r3
10004df6:	42af      	cmp	r7, r5
10004df8:	41ad      	sbcs	r5, r5
10004dfa:	1836      	adds	r6, r6, r0
10004dfc:	426f      	negs	r7, r5
10004dfe:	4258      	negs	r0, r3
10004e00:	4338      	orrs	r0, r7
10004e02:	1836      	adds	r6, r6, r0
10004e04:	9805      	ldr	r0, [sp, #20]
10004e06:	1934      	adds	r4, r6, r4
10004e08:	0256      	lsls	r6, r2, #9
10004e0a:	4306      	orrs	r6, r0
10004e0c:	0dcb      	lsrs	r3, r1, #23
10004e0e:	0264      	lsls	r4, r4, #9
10004e10:	1e70      	subs	r0, r6, #1
10004e12:	4186      	sbcs	r6, r0
10004e14:	0dd2      	lsrs	r2, r2, #23
10004e16:	4316      	orrs	r6, r2
10004e18:	0249      	lsls	r1, r1, #9
10004e1a:	431c      	orrs	r4, r3
10004e1c:	430e      	orrs	r6, r1
10004e1e:	01e0      	lsls	r0, r4, #7
10004e20:	d52f      	bpl.n	10004e82 <__aeabi_dmul+0x2ea>
10004e22:	2701      	movs	r7, #1
10004e24:	9d04      	ldr	r5, [sp, #16]
10004e26:	4037      	ands	r7, r6
10004e28:	0873      	lsrs	r3, r6, #1
10004e2a:	1c3e      	adds	r6, r7, #0
10004e2c:	07e0      	lsls	r0, r4, #31
10004e2e:	3501      	adds	r5, #1
10004e30:	431e      	orrs	r6, r3
10004e32:	9504      	str	r5, [sp, #16]
10004e34:	4306      	orrs	r6, r0
10004e36:	0864      	lsrs	r4, r4, #1
10004e38:	e023      	b.n	10004e82 <__aeabi_dmul+0x2ea>
10004e3a:	1c23      	adds	r3, r4, #0
10004e3c:	432b      	orrs	r3, r5
10004e3e:	2003      	movs	r0, #3
10004e40:	2b00      	cmp	r3, #0
10004e42:	d000      	beq.n	10004e46 <__aeabi_dmul+0x2ae>
10004e44:	e739      	b.n	10004cba <__aeabi_dmul+0x122>
10004e46:	2400      	movs	r4, #0
10004e48:	2500      	movs	r5, #0
10004e4a:	2002      	movs	r0, #2
10004e4c:	e735      	b.n	10004cba <__aeabi_dmul+0x122>
10004e4e:	220c      	movs	r2, #12
10004e50:	2303      	movs	r3, #3
10004e52:	4691      	mov	r9, r2
10004e54:	9303      	str	r3, [sp, #12]
10004e56:	e6e6      	b.n	10004c26 <__aeabi_dmul+0x8e>
10004e58:	2604      	movs	r6, #4
10004e5a:	2300      	movs	r3, #0
10004e5c:	2001      	movs	r0, #1
10004e5e:	46b1      	mov	r9, r6
10004e60:	469a      	mov	sl, r3
10004e62:	2600      	movs	r6, #0
10004e64:	9003      	str	r0, [sp, #12]
10004e66:	e6de      	b.n	10004c26 <__aeabi_dmul+0x8e>
10004e68:	2400      	movs	r4, #0
10004e6a:	2500      	movs	r5, #0
10004e6c:	2001      	movs	r0, #1
10004e6e:	e724      	b.n	10004cba <__aeabi_dmul+0x122>
10004e70:	9803      	ldr	r0, [sp, #12]
10004e72:	4654      	mov	r4, sl
10004e74:	2802      	cmp	r0, #2
10004e76:	d044      	beq.n	10004f02 <__aeabi_dmul+0x36a>
10004e78:	2803      	cmp	r0, #3
10004e7a:	d100      	bne.n	10004e7e <__aeabi_dmul+0x2e6>
10004e7c:	e0ea      	b.n	10005054 <__aeabi_dmul+0x4bc>
10004e7e:	2801      	cmp	r0, #1
10004e80:	d060      	beq.n	10004f44 <__aeabi_dmul+0x3ac>
10004e82:	9a04      	ldr	r2, [sp, #16]
10004e84:	4937      	ldr	r1, [pc, #220]	; (10004f64 <__aeabi_dmul+0x3cc>)
10004e86:	1850      	adds	r0, r2, r1
10004e88:	2800      	cmp	r0, #0
10004e8a:	dc00      	bgt.n	10004e8e <__aeabi_dmul+0x2f6>
10004e8c:	e095      	b.n	10004fba <__aeabi_dmul+0x422>
10004e8e:	270f      	movs	r7, #15
10004e90:	4037      	ands	r7, r6
10004e92:	2f04      	cmp	r7, #4
10004e94:	d005      	beq.n	10004ea2 <__aeabi_dmul+0x30a>
10004e96:	1d31      	adds	r1, r6, #4
10004e98:	42b1      	cmp	r1, r6
10004e9a:	41b6      	sbcs	r6, r6
10004e9c:	4275      	negs	r5, r6
10004e9e:	1964      	adds	r4, r4, r5
10004ea0:	1c0e      	adds	r6, r1, #0
10004ea2:	01e1      	lsls	r1, r4, #7
10004ea4:	d505      	bpl.n	10004eb2 <__aeabi_dmul+0x31a>
10004ea6:	4830      	ldr	r0, [pc, #192]	; (10004f68 <__aeabi_dmul+0x3d0>)
10004ea8:	9a04      	ldr	r2, [sp, #16]
10004eaa:	2380      	movs	r3, #128	; 0x80
10004eac:	00df      	lsls	r7, r3, #3
10004eae:	4004      	ands	r4, r0
10004eb0:	19d0      	adds	r0, r2, r7
10004eb2:	492e      	ldr	r1, [pc, #184]	; (10004f6c <__aeabi_dmul+0x3d4>)
10004eb4:	4288      	cmp	r0, r1
10004eb6:	dc24      	bgt.n	10004f02 <__aeabi_dmul+0x36a>
10004eb8:	9b01      	ldr	r3, [sp, #4]
10004eba:	0765      	lsls	r5, r4, #29
10004ebc:	08f6      	lsrs	r6, r6, #3
10004ebe:	0264      	lsls	r4, r4, #9
10004ec0:	0542      	lsls	r2, r0, #21
10004ec2:	2701      	movs	r7, #1
10004ec4:	432e      	orrs	r6, r5
10004ec6:	0b24      	lsrs	r4, r4, #12
10004ec8:	0d52      	lsrs	r2, r2, #21
10004eca:	401f      	ands	r7, r3
10004ecc:	2000      	movs	r0, #0
10004ece:	2100      	movs	r1, #0
10004ed0:	0d09      	lsrs	r1, r1, #20
10004ed2:	050d      	lsls	r5, r1, #20
10004ed4:	4325      	orrs	r5, r4
10004ed6:	4c26      	ldr	r4, [pc, #152]	; (10004f70 <__aeabi_dmul+0x3d8>)
10004ed8:	0512      	lsls	r2, r2, #20
10004eda:	402c      	ands	r4, r5
10004edc:	4314      	orrs	r4, r2
10004ede:	0063      	lsls	r3, r4, #1
10004ee0:	1c30      	adds	r0, r6, #0
10004ee2:	085e      	lsrs	r6, r3, #1
10004ee4:	07ff      	lsls	r7, r7, #31
10004ee6:	1c31      	adds	r1, r6, #0
10004ee8:	4339      	orrs	r1, r7
10004eea:	b007      	add	sp, #28
10004eec:	bc3c      	pop	{r2, r3, r4, r5}
10004eee:	4690      	mov	r8, r2
10004ef0:	4699      	mov	r9, r3
10004ef2:	46a2      	mov	sl, r4
10004ef4:	46ab      	mov	fp, r5
10004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004ef8:	465a      	mov	r2, fp
10004efa:	1c2e      	adds	r6, r5, #0
10004efc:	9201      	str	r2, [sp, #4]
10004efe:	2802      	cmp	r0, #2
10004f00:	d1ba      	bne.n	10004e78 <__aeabi_dmul+0x2e0>
10004f02:	9e01      	ldr	r6, [sp, #4]
10004f04:	2701      	movs	r7, #1
10004f06:	4037      	ands	r7, r6
10004f08:	4a13      	ldr	r2, [pc, #76]	; (10004f58 <__aeabi_dmul+0x3c0>)
10004f0a:	2400      	movs	r4, #0
10004f0c:	2600      	movs	r6, #0
10004f0e:	e7dd      	b.n	10004ecc <__aeabi_dmul+0x334>
10004f10:	4654      	mov	r4, sl
10004f12:	9701      	str	r7, [sp, #4]
10004f14:	9803      	ldr	r0, [sp, #12]
10004f16:	e7ad      	b.n	10004e74 <__aeabi_dmul+0x2dc>
10004f18:	2601      	movs	r6, #1
10004f1a:	2700      	movs	r7, #0
10004f1c:	4c15      	ldr	r4, [pc, #84]	; (10004f74 <__aeabi_dmul+0x3dc>)
10004f1e:	4276      	negs	r6, r6
10004f20:	4a0d      	ldr	r2, [pc, #52]	; (10004f58 <__aeabi_dmul+0x3c0>)
10004f22:	e7d3      	b.n	10004ecc <__aeabi_dmul+0x334>
10004f24:	1c2e      	adds	r6, r5, #0
10004f26:	e7a5      	b.n	10004e74 <__aeabi_dmul+0x2dc>
10004f28:	2280      	movs	r2, #128	; 0x80
10004f2a:	0313      	lsls	r3, r2, #12
10004f2c:	4651      	mov	r1, sl
10004f2e:	4219      	tst	r1, r3
10004f30:	d135      	bne.n	10004f9e <__aeabi_dmul+0x406>
10004f32:	430b      	orrs	r3, r1
10004f34:	031d      	lsls	r5, r3, #12
10004f36:	0b2c      	lsrs	r4, r5, #12
10004f38:	4a07      	ldr	r2, [pc, #28]	; (10004f58 <__aeabi_dmul+0x3c0>)
10004f3a:	e7c7      	b.n	10004ecc <__aeabi_dmul+0x334>
10004f3c:	2180      	movs	r1, #128	; 0x80
10004f3e:	024b      	lsls	r3, r1, #9
10004f40:	449b      	add	fp, r3
10004f42:	e6db      	b.n	10004cfc <__aeabi_dmul+0x164>
10004f44:	9b01      	ldr	r3, [sp, #4]
10004f46:	2200      	movs	r2, #0
10004f48:	4018      	ands	r0, r3
10004f4a:	b2c7      	uxtb	r7, r0
10004f4c:	2400      	movs	r4, #0
10004f4e:	2600      	movs	r6, #0
10004f50:	e7bc      	b.n	10004ecc <__aeabi_dmul+0x334>
10004f52:	46c0      	nop			; (mov r8, r8)
10004f54:	fffffc0d 	.word	0xfffffc0d
10004f58:	000007ff 	.word	0x000007ff
10004f5c:	fffffc01 	.word	0xfffffc01
10004f60:	10006c00 	.word	0x10006c00
10004f64:	000003ff 	.word	0x000003ff
10004f68:	feffffff 	.word	0xfeffffff
10004f6c:	000007fe 	.word	0x000007fe
10004f70:	800fffff 	.word	0x800fffff
10004f74:	000fffff 	.word	0x000fffff
10004f78:	1c04      	adds	r4, r0, #0
10004f7a:	3c28      	subs	r4, #40	; 0x28
10004f7c:	40a5      	lsls	r5, r4
10004f7e:	1c2c      	adds	r4, r5, #0
10004f80:	2500      	movs	r5, #0
10004f82:	e670      	b.n	10004c66 <__aeabi_dmul+0xce>
10004f84:	f000 fd92 	bl	10005aac <__clzsi2>
10004f88:	3020      	adds	r0, #32
10004f8a:	e660      	b.n	10004c4e <__aeabi_dmul+0xb6>
10004f8c:	3b28      	subs	r3, #40	; 0x28
10004f8e:	409e      	lsls	r6, r3
10004f90:	46b2      	mov	sl, r6
10004f92:	2600      	movs	r6, #0
10004f94:	e62d      	b.n	10004bf2 <__aeabi_dmul+0x5a>
10004f96:	f000 fd89 	bl	10005aac <__clzsi2>
10004f9a:	3020      	adds	r0, #32
10004f9c:	e619      	b.n	10004bd2 <__aeabi_dmul+0x3a>
10004f9e:	421c      	tst	r4, r3
10004fa0:	d106      	bne.n	10004fb0 <__aeabi_dmul+0x418>
10004fa2:	431c      	orrs	r4, r3
10004fa4:	0326      	lsls	r6, r4, #12
10004fa6:	0b34      	lsrs	r4, r6, #12
10004fa8:	465f      	mov	r7, fp
10004faa:	1c2e      	adds	r6, r5, #0
10004fac:	4a2e      	ldr	r2, [pc, #184]	; (10005068 <__aeabi_dmul+0x4d0>)
10004fae:	e78d      	b.n	10004ecc <__aeabi_dmul+0x334>
10004fb0:	430b      	orrs	r3, r1
10004fb2:	0318      	lsls	r0, r3, #12
10004fb4:	0b04      	lsrs	r4, r0, #12
10004fb6:	4a2c      	ldr	r2, [pc, #176]	; (10005068 <__aeabi_dmul+0x4d0>)
10004fb8:	e788      	b.n	10004ecc <__aeabi_dmul+0x334>
10004fba:	4f2c      	ldr	r7, [pc, #176]	; (1000506c <__aeabi_dmul+0x4d4>)
10004fbc:	9d04      	ldr	r5, [sp, #16]
10004fbe:	1b7b      	subs	r3, r7, r5
10004fc0:	2b38      	cmp	r3, #56	; 0x38
10004fc2:	dd06      	ble.n	10004fd2 <__aeabi_dmul+0x43a>
10004fc4:	9e01      	ldr	r6, [sp, #4]
10004fc6:	2701      	movs	r7, #1
10004fc8:	4037      	ands	r7, r6
10004fca:	2200      	movs	r2, #0
10004fcc:	2400      	movs	r4, #0
10004fce:	2600      	movs	r6, #0
10004fd0:	e77c      	b.n	10004ecc <__aeabi_dmul+0x334>
10004fd2:	2b1f      	cmp	r3, #31
10004fd4:	dc21      	bgt.n	1000501a <__aeabi_dmul+0x482>
10004fd6:	9a04      	ldr	r2, [sp, #16]
10004fd8:	4f25      	ldr	r7, [pc, #148]	; (10005070 <__aeabi_dmul+0x4d8>)
10004fda:	1c35      	adds	r5, r6, #0
10004fdc:	19d1      	adds	r1, r2, r7
10004fde:	1c20      	adds	r0, r4, #0
10004fe0:	408e      	lsls	r6, r1
10004fe2:	40dd      	lsrs	r5, r3
10004fe4:	4088      	lsls	r0, r1
10004fe6:	1c32      	adds	r2, r6, #0
10004fe8:	4328      	orrs	r0, r5
10004fea:	1e56      	subs	r6, r2, #1
10004fec:	41b2      	sbcs	r2, r6
10004fee:	1c06      	adds	r6, r0, #0
10004ff0:	4316      	orrs	r6, r2
10004ff2:	40dc      	lsrs	r4, r3
10004ff4:	230f      	movs	r3, #15
10004ff6:	4033      	ands	r3, r6
10004ff8:	2b04      	cmp	r3, #4
10004ffa:	d005      	beq.n	10005008 <__aeabi_dmul+0x470>
10004ffc:	1d37      	adds	r7, r6, #4
10004ffe:	42b7      	cmp	r7, r6
10005000:	41b6      	sbcs	r6, r6
10005002:	4271      	negs	r1, r6
10005004:	1864      	adds	r4, r4, r1
10005006:	1c3e      	adds	r6, r7, #0
10005008:	0225      	lsls	r5, r4, #8
1000500a:	d517      	bpl.n	1000503c <__aeabi_dmul+0x4a4>
1000500c:	9b01      	ldr	r3, [sp, #4]
1000500e:	2701      	movs	r7, #1
10005010:	401f      	ands	r7, r3
10005012:	2201      	movs	r2, #1
10005014:	2400      	movs	r4, #0
10005016:	2600      	movs	r6, #0
10005018:	e758      	b.n	10004ecc <__aeabi_dmul+0x334>
1000501a:	4816      	ldr	r0, [pc, #88]	; (10005074 <__aeabi_dmul+0x4dc>)
1000501c:	9a04      	ldr	r2, [sp, #16]
1000501e:	1c21      	adds	r1, r4, #0
10005020:	1a87      	subs	r7, r0, r2
10005022:	40f9      	lsrs	r1, r7
10005024:	1c0d      	adds	r5, r1, #0
10005026:	2b20      	cmp	r3, #32
10005028:	d012      	beq.n	10005050 <__aeabi_dmul+0x4b8>
1000502a:	4b13      	ldr	r3, [pc, #76]	; (10005078 <__aeabi_dmul+0x4e0>)
1000502c:	18d0      	adds	r0, r2, r3
1000502e:	4084      	lsls	r4, r0
10005030:	4326      	orrs	r6, r4
10005032:	1e72      	subs	r2, r6, #1
10005034:	4196      	sbcs	r6, r2
10005036:	432e      	orrs	r6, r5
10005038:	2400      	movs	r4, #0
1000503a:	e7db      	b.n	10004ff4 <__aeabi_dmul+0x45c>
1000503c:	9a01      	ldr	r2, [sp, #4]
1000503e:	0765      	lsls	r5, r4, #29
10005040:	08f6      	lsrs	r6, r6, #3
10005042:	0260      	lsls	r0, r4, #9
10005044:	2701      	movs	r7, #1
10005046:	4017      	ands	r7, r2
10005048:	432e      	orrs	r6, r5
1000504a:	0b04      	lsrs	r4, r0, #12
1000504c:	2200      	movs	r2, #0
1000504e:	e73d      	b.n	10004ecc <__aeabi_dmul+0x334>
10005050:	2400      	movs	r4, #0
10005052:	e7ed      	b.n	10005030 <__aeabi_dmul+0x498>
10005054:	2180      	movs	r1, #128	; 0x80
10005056:	030f      	lsls	r7, r1, #12
10005058:	433c      	orrs	r4, r7
1000505a:	9801      	ldr	r0, [sp, #4]
1000505c:	0324      	lsls	r4, r4, #12
1000505e:	2701      	movs	r7, #1
10005060:	0b24      	lsrs	r4, r4, #12
10005062:	4007      	ands	r7, r0
10005064:	4a00      	ldr	r2, [pc, #0]	; (10005068 <__aeabi_dmul+0x4d0>)
10005066:	e731      	b.n	10004ecc <__aeabi_dmul+0x334>
10005068:	000007ff 	.word	0x000007ff
1000506c:	fffffc02 	.word	0xfffffc02
10005070:	0000041e 	.word	0x0000041e
10005074:	fffffbe2 	.word	0xfffffbe2
10005078:	0000043e 	.word	0x0000043e

1000507c <__aeabi_dsub>:
1000507c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000507e:	4657      	mov	r7, sl
10005080:	464e      	mov	r6, r9
10005082:	4645      	mov	r5, r8
10005084:	b4e0      	push	{r5, r6, r7}
10005086:	1c07      	adds	r7, r0, #0
10005088:	030d      	lsls	r5, r1, #12
1000508a:	004e      	lsls	r6, r1, #1
1000508c:	0a68      	lsrs	r0, r5, #9
1000508e:	0fcc      	lsrs	r4, r1, #31
10005090:	0f79      	lsrs	r1, r7, #29
10005092:	4308      	orrs	r0, r1
10005094:	4684      	mov	ip, r0
10005096:	1c11      	adds	r1, r2, #0
10005098:	0318      	lsls	r0, r3, #12
1000509a:	005a      	lsls	r2, r3, #1
1000509c:	00fd      	lsls	r5, r7, #3
1000509e:	0a40      	lsrs	r0, r0, #9
100050a0:	0fdf      	lsrs	r7, r3, #31
100050a2:	0f4b      	lsrs	r3, r1, #29
100050a4:	4318      	orrs	r0, r3
100050a6:	4bca      	ldr	r3, [pc, #808]	; (100053d0 <__aeabi_dsub+0x354>)
100050a8:	00c9      	lsls	r1, r1, #3
100050aa:	0d76      	lsrs	r6, r6, #21
100050ac:	0d52      	lsrs	r2, r2, #21
100050ae:	468a      	mov	sl, r1
100050b0:	429a      	cmp	r2, r3
100050b2:	d100      	bne.n	100050b6 <__aeabi_dsub+0x3a>
100050b4:	e0e0      	b.n	10005278 <__aeabi_dsub+0x1fc>
100050b6:	2301      	movs	r3, #1
100050b8:	405f      	eors	r7, r3
100050ba:	46b9      	mov	r9, r7
100050bc:	42bc      	cmp	r4, r7
100050be:	d100      	bne.n	100050c2 <__aeabi_dsub+0x46>
100050c0:	e0a8      	b.n	10005214 <__aeabi_dsub+0x198>
100050c2:	1ab7      	subs	r7, r6, r2
100050c4:	2f00      	cmp	r7, #0
100050c6:	dc00      	bgt.n	100050ca <__aeabi_dsub+0x4e>
100050c8:	e110      	b.n	100052ec <__aeabi_dsub+0x270>
100050ca:	2a00      	cmp	r2, #0
100050cc:	d112      	bne.n	100050f4 <__aeabi_dsub+0x78>
100050ce:	4652      	mov	r2, sl
100050d0:	4302      	orrs	r2, r0
100050d2:	d100      	bne.n	100050d6 <__aeabi_dsub+0x5a>
100050d4:	e0d4      	b.n	10005280 <__aeabi_dsub+0x204>
100050d6:	3f01      	subs	r7, #1
100050d8:	2f00      	cmp	r7, #0
100050da:	d000      	beq.n	100050de <__aeabi_dsub+0x62>
100050dc:	e160      	b.n	100053a0 <__aeabi_dsub+0x324>
100050de:	4651      	mov	r1, sl
100050e0:	1a6f      	subs	r7, r5, r1
100050e2:	42bd      	cmp	r5, r7
100050e4:	41ad      	sbcs	r5, r5
100050e6:	4662      	mov	r2, ip
100050e8:	426b      	negs	r3, r5
100050ea:	1a10      	subs	r0, r2, r0
100050ec:	1c3d      	adds	r5, r7, #0
100050ee:	1ac3      	subs	r3, r0, r3
100050f0:	1c37      	adds	r7, r6, #0
100050f2:	e024      	b.n	1000513e <__aeabi_dsub+0xc2>
100050f4:	4ab6      	ldr	r2, [pc, #728]	; (100053d0 <__aeabi_dsub+0x354>)
100050f6:	4296      	cmp	r6, r2
100050f8:	d100      	bne.n	100050fc <__aeabi_dsub+0x80>
100050fa:	e0e3      	b.n	100052c4 <__aeabi_dsub+0x248>
100050fc:	2180      	movs	r1, #128	; 0x80
100050fe:	040b      	lsls	r3, r1, #16
10005100:	4318      	orrs	r0, r3
10005102:	2f38      	cmp	r7, #56	; 0x38
10005104:	dd00      	ble.n	10005108 <__aeabi_dsub+0x8c>
10005106:	e123      	b.n	10005350 <__aeabi_dsub+0x2d4>
10005108:	2f1f      	cmp	r7, #31
1000510a:	dd00      	ble.n	1000510e <__aeabi_dsub+0x92>
1000510c:	e166      	b.n	100053dc <__aeabi_dsub+0x360>
1000510e:	2120      	movs	r1, #32
10005110:	1bc9      	subs	r1, r1, r7
10005112:	1c02      	adds	r2, r0, #0
10005114:	4653      	mov	r3, sl
10005116:	408a      	lsls	r2, r1
10005118:	40fb      	lsrs	r3, r7
1000511a:	431a      	orrs	r2, r3
1000511c:	4653      	mov	r3, sl
1000511e:	408b      	lsls	r3, r1
10005120:	1c19      	adds	r1, r3, #0
10005122:	1e4b      	subs	r3, r1, #1
10005124:	4199      	sbcs	r1, r3
10005126:	1c03      	adds	r3, r0, #0
10005128:	430a      	orrs	r2, r1
1000512a:	40fb      	lsrs	r3, r7
1000512c:	1aaa      	subs	r2, r5, r2
1000512e:	4667      	mov	r7, ip
10005130:	4295      	cmp	r5, r2
10005132:	41ad      	sbcs	r5, r5
10005134:	1af8      	subs	r0, r7, r3
10005136:	426b      	negs	r3, r5
10005138:	1ac3      	subs	r3, r0, r3
1000513a:	1c15      	adds	r5, r2, #0
1000513c:	1c37      	adds	r7, r6, #0
1000513e:	021a      	lsls	r2, r3, #8
10005140:	d400      	bmi.n	10005144 <__aeabi_dsub+0xc8>
10005142:	e0c7      	b.n	100052d4 <__aeabi_dsub+0x258>
10005144:	025e      	lsls	r6, r3, #9
10005146:	0a71      	lsrs	r1, r6, #9
10005148:	4688      	mov	r8, r1
1000514a:	4642      	mov	r2, r8
1000514c:	2a00      	cmp	r2, #0
1000514e:	d100      	bne.n	10005152 <__aeabi_dsub+0xd6>
10005150:	e0f0      	b.n	10005334 <__aeabi_dsub+0x2b8>
10005152:	4640      	mov	r0, r8
10005154:	f000 fcaa 	bl	10005aac <__clzsi2>
10005158:	1c02      	adds	r2, r0, #0
1000515a:	3a08      	subs	r2, #8
1000515c:	2a1f      	cmp	r2, #31
1000515e:	dd00      	ble.n	10005162 <__aeabi_dsub+0xe6>
10005160:	e0f1      	b.n	10005346 <__aeabi_dsub+0x2ca>
10005162:	2328      	movs	r3, #40	; 0x28
10005164:	1a18      	subs	r0, r3, r0
10005166:	1c2e      	adds	r6, r5, #0
10005168:	4641      	mov	r1, r8
1000516a:	40c6      	lsrs	r6, r0
1000516c:	4091      	lsls	r1, r2
1000516e:	1c33      	adds	r3, r6, #0
10005170:	430b      	orrs	r3, r1
10005172:	4095      	lsls	r5, r2
10005174:	4297      	cmp	r7, r2
10005176:	dd00      	ble.n	1000517a <__aeabi_dsub+0xfe>
10005178:	e0a9      	b.n	100052ce <__aeabi_dsub+0x252>
1000517a:	1bd0      	subs	r0, r2, r7
1000517c:	1c41      	adds	r1, r0, #1
1000517e:	291f      	cmp	r1, #31
10005180:	dd00      	ble.n	10005184 <__aeabi_dsub+0x108>
10005182:	e112      	b.n	100053aa <__aeabi_dsub+0x32e>
10005184:	271f      	movs	r7, #31
10005186:	1a3a      	subs	r2, r7, r0
10005188:	1c2e      	adds	r6, r5, #0
1000518a:	1c18      	adds	r0, r3, #0
1000518c:	40ce      	lsrs	r6, r1
1000518e:	4090      	lsls	r0, r2
10005190:	4095      	lsls	r5, r2
10005192:	4330      	orrs	r0, r6
10005194:	1e6a      	subs	r2, r5, #1
10005196:	4195      	sbcs	r5, r2
10005198:	40cb      	lsrs	r3, r1
1000519a:	4305      	orrs	r5, r0
1000519c:	2101      	movs	r1, #1
1000519e:	2700      	movs	r7, #0
100051a0:	260f      	movs	r6, #15
100051a2:	402e      	ands	r6, r5
100051a4:	2e04      	cmp	r6, #4
100051a6:	d100      	bne.n	100051aa <__aeabi_dsub+0x12e>
100051a8:	e072      	b.n	10005290 <__aeabi_dsub+0x214>
100051aa:	1d2e      	adds	r6, r5, #4
100051ac:	42ae      	cmp	r6, r5
100051ae:	41ad      	sbcs	r5, r5
100051b0:	4268      	negs	r0, r5
100051b2:	2280      	movs	r2, #128	; 0x80
100051b4:	181b      	adds	r3, r3, r0
100051b6:	2501      	movs	r5, #1
100051b8:	0410      	lsls	r0, r2, #16
100051ba:	4018      	ands	r0, r3
100051bc:	402c      	ands	r4, r5
100051be:	2800      	cmp	r0, #0
100051c0:	d007      	beq.n	100051d2 <__aeabi_dsub+0x156>
100051c2:	4f83      	ldr	r7, [pc, #524]	; (100053d0 <__aeabi_dsub+0x354>)
100051c4:	42b9      	cmp	r1, r7
100051c6:	d100      	bne.n	100051ca <__aeabi_dsub+0x14e>
100051c8:	e0b0      	b.n	1000532c <__aeabi_dsub+0x2b0>
100051ca:	4a82      	ldr	r2, [pc, #520]	; (100053d4 <__aeabi_dsub+0x358>)
100051cc:	1c0f      	adds	r7, r1, #0
100051ce:	4013      	ands	r3, r2
100051d0:	3101      	adds	r1, #1
100051d2:	08f2      	lsrs	r2, r6, #3
100051d4:	0549      	lsls	r1, r1, #21
100051d6:	075e      	lsls	r6, r3, #29
100051d8:	4332      	orrs	r2, r6
100051da:	08db      	lsrs	r3, r3, #3
100051dc:	0d48      	lsrs	r0, r1, #21
100051de:	2801      	cmp	r0, #1
100051e0:	dc00      	bgt.n	100051e4 <__aeabi_dsub+0x168>
100051e2:	e079      	b.n	100052d8 <__aeabi_dsub+0x25c>
100051e4:	031b      	lsls	r3, r3, #12
100051e6:	0578      	lsls	r0, r7, #21
100051e8:	0b1e      	lsrs	r6, r3, #12
100051ea:	0d47      	lsrs	r7, r0, #21
100051ec:	2000      	movs	r0, #0
100051ee:	2100      	movs	r1, #0
100051f0:	0d09      	lsrs	r1, r1, #20
100051f2:	057d      	lsls	r5, r7, #21
100051f4:	050b      	lsls	r3, r1, #20
100051f6:	4f78      	ldr	r7, [pc, #480]	; (100053d8 <__aeabi_dsub+0x35c>)
100051f8:	431e      	orrs	r6, r3
100051fa:	1c10      	adds	r0, r2, #0
100051fc:	4037      	ands	r7, r6
100051fe:	086a      	lsrs	r2, r5, #1
10005200:	4317      	orrs	r7, r2
10005202:	007e      	lsls	r6, r7, #1
10005204:	0871      	lsrs	r1, r6, #1
10005206:	07e4      	lsls	r4, r4, #31
10005208:	4321      	orrs	r1, r4
1000520a:	bc1c      	pop	{r2, r3, r4}
1000520c:	4690      	mov	r8, r2
1000520e:	4699      	mov	r9, r3
10005210:	46a2      	mov	sl, r4
10005212:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005214:	1ab3      	subs	r3, r6, r2
10005216:	2b00      	cmp	r3, #0
10005218:	dc00      	bgt.n	1000521c <__aeabi_dsub+0x1a0>
1000521a:	e0a6      	b.n	1000536a <__aeabi_dsub+0x2ee>
1000521c:	2a00      	cmp	r2, #0
1000521e:	d03e      	beq.n	1000529e <__aeabi_dsub+0x222>
10005220:	4a6b      	ldr	r2, [pc, #428]	; (100053d0 <__aeabi_dsub+0x354>)
10005222:	4296      	cmp	r6, r2
10005224:	d04e      	beq.n	100052c4 <__aeabi_dsub+0x248>
10005226:	2180      	movs	r1, #128	; 0x80
10005228:	040f      	lsls	r7, r1, #16
1000522a:	4338      	orrs	r0, r7
1000522c:	2b38      	cmp	r3, #56	; 0x38
1000522e:	dc00      	bgt.n	10005232 <__aeabi_dsub+0x1b6>
10005230:	e118      	b.n	10005464 <__aeabi_dsub+0x3e8>
10005232:	4653      	mov	r3, sl
10005234:	4318      	orrs	r0, r3
10005236:	2700      	movs	r7, #0
10005238:	2200      	movs	r2, #0
1000523a:	2800      	cmp	r0, #0
1000523c:	d000      	beq.n	10005240 <__aeabi_dsub+0x1c4>
1000523e:	2201      	movs	r2, #1
10005240:	1952      	adds	r2, r2, r5
10005242:	42aa      	cmp	r2, r5
10005244:	41ad      	sbcs	r5, r5
10005246:	4467      	add	r7, ip
10005248:	426b      	negs	r3, r5
1000524a:	18fb      	adds	r3, r7, r3
1000524c:	1c15      	adds	r5, r2, #0
1000524e:	1c37      	adds	r7, r6, #0
10005250:	021e      	lsls	r6, r3, #8
10005252:	d53f      	bpl.n	100052d4 <__aeabi_dsub+0x258>
10005254:	485e      	ldr	r0, [pc, #376]	; (100053d0 <__aeabi_dsub+0x354>)
10005256:	1c7e      	adds	r6, r7, #1
10005258:	4286      	cmp	r6, r0
1000525a:	d100      	bne.n	1000525e <__aeabi_dsub+0x1e2>
1000525c:	e17b      	b.n	10005556 <__aeabi_dsub+0x4da>
1000525e:	495d      	ldr	r1, [pc, #372]	; (100053d4 <__aeabi_dsub+0x358>)
10005260:	2201      	movs	r2, #1
10005262:	402a      	ands	r2, r5
10005264:	400b      	ands	r3, r1
10005266:	0868      	lsrs	r0, r5, #1
10005268:	1c15      	adds	r5, r2, #0
1000526a:	07d9      	lsls	r1, r3, #31
1000526c:	4305      	orrs	r5, r0
1000526e:	430d      	orrs	r5, r1
10005270:	085b      	lsrs	r3, r3, #1
10005272:	1cb9      	adds	r1, r7, #2
10005274:	1c37      	adds	r7, r6, #0
10005276:	e793      	b.n	100051a0 <__aeabi_dsub+0x124>
10005278:	4301      	orrs	r1, r0
1000527a:	d100      	bne.n	1000527e <__aeabi_dsub+0x202>
1000527c:	e71b      	b.n	100050b6 <__aeabi_dsub+0x3a>
1000527e:	e71c      	b.n	100050ba <__aeabi_dsub+0x3e>
10005280:	1c71      	adds	r1, r6, #1
10005282:	1c37      	adds	r7, r6, #0
10005284:	260f      	movs	r6, #15
10005286:	4663      	mov	r3, ip
10005288:	402e      	ands	r6, r5
1000528a:	2e04      	cmp	r6, #4
1000528c:	d000      	beq.n	10005290 <__aeabi_dsub+0x214>
1000528e:	e78c      	b.n	100051aa <__aeabi_dsub+0x12e>
10005290:	2280      	movs	r2, #128	; 0x80
10005292:	2601      	movs	r6, #1
10005294:	0410      	lsls	r0, r2, #16
10005296:	4034      	ands	r4, r6
10005298:	4018      	ands	r0, r3
1000529a:	1c2e      	adds	r6, r5, #0
1000529c:	e78f      	b.n	100051be <__aeabi_dsub+0x142>
1000529e:	4652      	mov	r2, sl
100052a0:	4302      	orrs	r2, r0
100052a2:	d0ed      	beq.n	10005280 <__aeabi_dsub+0x204>
100052a4:	3b01      	subs	r3, #1
100052a6:	2b00      	cmp	r3, #0
100052a8:	d109      	bne.n	100052be <__aeabi_dsub+0x242>
100052aa:	4657      	mov	r7, sl
100052ac:	1979      	adds	r1, r7, r5
100052ae:	42a9      	cmp	r1, r5
100052b0:	4192      	sbcs	r2, r2
100052b2:	4255      	negs	r5, r2
100052b4:	4460      	add	r0, ip
100052b6:	1943      	adds	r3, r0, r5
100052b8:	1c37      	adds	r7, r6, #0
100052ba:	1c0d      	adds	r5, r1, #0
100052bc:	e7c8      	b.n	10005250 <__aeabi_dsub+0x1d4>
100052be:	4944      	ldr	r1, [pc, #272]	; (100053d0 <__aeabi_dsub+0x354>)
100052c0:	428e      	cmp	r6, r1
100052c2:	d1b3      	bne.n	1000522c <__aeabi_dsub+0x1b0>
100052c4:	2080      	movs	r0, #128	; 0x80
100052c6:	4663      	mov	r3, ip
100052c8:	0101      	lsls	r1, r0, #4
100052ca:	1c37      	adds	r7, r6, #0
100052cc:	e768      	b.n	100051a0 <__aeabi_dsub+0x124>
100052ce:	1abf      	subs	r7, r7, r2
100052d0:	4a40      	ldr	r2, [pc, #256]	; (100053d4 <__aeabi_dsub+0x358>)
100052d2:	4013      	ands	r3, r2
100052d4:	1c79      	adds	r1, r7, #1
100052d6:	e763      	b.n	100051a0 <__aeabi_dsub+0x124>
100052d8:	1c15      	adds	r5, r2, #0
100052da:	431d      	orrs	r5, r3
100052dc:	d100      	bne.n	100052e0 <__aeabi_dsub+0x264>
100052de:	e221      	b.n	10005724 <__aeabi_dsub+0x6a8>
100052e0:	2f00      	cmp	r7, #0
100052e2:	d03e      	beq.n	10005362 <__aeabi_dsub+0x2e6>
100052e4:	2680      	movs	r6, #128	; 0x80
100052e6:	0331      	lsls	r1, r6, #12
100052e8:	430b      	orrs	r3, r1
100052ea:	e77b      	b.n	100051e4 <__aeabi_dsub+0x168>
100052ec:	2f00      	cmp	r7, #0
100052ee:	d000      	beq.n	100052f2 <__aeabi_dsub+0x276>
100052f0:	e086      	b.n	10005400 <__aeabi_dsub+0x384>
100052f2:	1c72      	adds	r2, r6, #1
100052f4:	0551      	lsls	r1, r2, #21
100052f6:	0d4b      	lsrs	r3, r1, #21
100052f8:	2b01      	cmp	r3, #1
100052fa:	dc00      	bgt.n	100052fe <__aeabi_dsub+0x282>
100052fc:	e0f0      	b.n	100054e0 <__aeabi_dsub+0x464>
100052fe:	4657      	mov	r7, sl
10005300:	1bea      	subs	r2, r5, r7
10005302:	4295      	cmp	r5, r2
10005304:	419b      	sbcs	r3, r3
10005306:	4667      	mov	r7, ip
10005308:	1a39      	subs	r1, r7, r0
1000530a:	425b      	negs	r3, r3
1000530c:	1ac9      	subs	r1, r1, r3
1000530e:	4688      	mov	r8, r1
10005310:	020b      	lsls	r3, r1, #8
10005312:	d400      	bmi.n	10005316 <__aeabi_dsub+0x29a>
10005314:	e09d      	b.n	10005452 <__aeabi_dsub+0x3d6>
10005316:	4654      	mov	r4, sl
10005318:	1b65      	subs	r5, r4, r5
1000531a:	45aa      	cmp	sl, r5
1000531c:	4192      	sbcs	r2, r2
1000531e:	1bc0      	subs	r0, r0, r7
10005320:	4257      	negs	r7, r2
10005322:	1bc3      	subs	r3, r0, r7
10005324:	4698      	mov	r8, r3
10005326:	1c37      	adds	r7, r6, #0
10005328:	464c      	mov	r4, r9
1000532a:	e70e      	b.n	1000514a <__aeabi_dsub+0xce>
1000532c:	1c0f      	adds	r7, r1, #0
1000532e:	2600      	movs	r6, #0
10005330:	2200      	movs	r2, #0
10005332:	e75b      	b.n	100051ec <__aeabi_dsub+0x170>
10005334:	1c28      	adds	r0, r5, #0
10005336:	f000 fbb9 	bl	10005aac <__clzsi2>
1000533a:	3020      	adds	r0, #32
1000533c:	1c02      	adds	r2, r0, #0
1000533e:	3a08      	subs	r2, #8
10005340:	2a1f      	cmp	r2, #31
10005342:	dc00      	bgt.n	10005346 <__aeabi_dsub+0x2ca>
10005344:	e70d      	b.n	10005162 <__aeabi_dsub+0xe6>
10005346:	3828      	subs	r0, #40	; 0x28
10005348:	4085      	lsls	r5, r0
1000534a:	1c2b      	adds	r3, r5, #0
1000534c:	2500      	movs	r5, #0
1000534e:	e711      	b.n	10005174 <__aeabi_dsub+0xf8>
10005350:	4657      	mov	r7, sl
10005352:	4338      	orrs	r0, r7
10005354:	2300      	movs	r3, #0
10005356:	2200      	movs	r2, #0
10005358:	2800      	cmp	r0, #0
1000535a:	d100      	bne.n	1000535e <__aeabi_dsub+0x2e2>
1000535c:	e6e6      	b.n	1000512c <__aeabi_dsub+0xb0>
1000535e:	2201      	movs	r2, #1
10005360:	e6e4      	b.n	1000512c <__aeabi_dsub+0xb0>
10005362:	031d      	lsls	r5, r3, #12
10005364:	0b2e      	lsrs	r6, r5, #12
10005366:	2700      	movs	r7, #0
10005368:	e740      	b.n	100051ec <__aeabi_dsub+0x170>
1000536a:	2b00      	cmp	r3, #0
1000536c:	d000      	beq.n	10005370 <__aeabi_dsub+0x2f4>
1000536e:	e0d9      	b.n	10005524 <__aeabi_dsub+0x4a8>
10005370:	1c77      	adds	r7, r6, #1
10005372:	0579      	lsls	r1, r7, #21
10005374:	0d4a      	lsrs	r2, r1, #21
10005376:	2a01      	cmp	r2, #1
10005378:	dc00      	bgt.n	1000537c <__aeabi_dsub+0x300>
1000537a:	e095      	b.n	100054a8 <__aeabi_dsub+0x42c>
1000537c:	4b14      	ldr	r3, [pc, #80]	; (100053d0 <__aeabi_dsub+0x354>)
1000537e:	429f      	cmp	r7, r3
10005380:	d100      	bne.n	10005384 <__aeabi_dsub+0x308>
10005382:	e0fe      	b.n	10005582 <__aeabi_dsub+0x506>
10005384:	4651      	mov	r1, sl
10005386:	1949      	adds	r1, r1, r5
10005388:	42a9      	cmp	r1, r5
1000538a:	41ad      	sbcs	r5, r5
1000538c:	4662      	mov	r2, ip
1000538e:	426b      	negs	r3, r5
10005390:	1880      	adds	r0, r0, r2
10005392:	18c2      	adds	r2, r0, r3
10005394:	0849      	lsrs	r1, r1, #1
10005396:	07d5      	lsls	r5, r2, #31
10005398:	430d      	orrs	r5, r1
1000539a:	0853      	lsrs	r3, r2, #1
1000539c:	1cb1      	adds	r1, r6, #2
1000539e:	e6ff      	b.n	100051a0 <__aeabi_dsub+0x124>
100053a0:	490b      	ldr	r1, [pc, #44]	; (100053d0 <__aeabi_dsub+0x354>)
100053a2:	428e      	cmp	r6, r1
100053a4:	d000      	beq.n	100053a8 <__aeabi_dsub+0x32c>
100053a6:	e6ac      	b.n	10005102 <__aeabi_dsub+0x86>
100053a8:	e78c      	b.n	100052c4 <__aeabi_dsub+0x248>
100053aa:	1c06      	adds	r6, r0, #0
100053ac:	3e1f      	subs	r6, #31
100053ae:	1c1f      	adds	r7, r3, #0
100053b0:	40f7      	lsrs	r7, r6
100053b2:	1c3e      	adds	r6, r7, #0
100053b4:	2920      	cmp	r1, #32
100053b6:	d073      	beq.n	100054a0 <__aeabi_dsub+0x424>
100053b8:	223f      	movs	r2, #63	; 0x3f
100053ba:	1a10      	subs	r0, r2, r0
100053bc:	4083      	lsls	r3, r0
100053be:	431d      	orrs	r5, r3
100053c0:	1e6b      	subs	r3, r5, #1
100053c2:	419d      	sbcs	r5, r3
100053c4:	4335      	orrs	r5, r6
100053c6:	2101      	movs	r1, #1
100053c8:	2300      	movs	r3, #0
100053ca:	2700      	movs	r7, #0
100053cc:	e6e8      	b.n	100051a0 <__aeabi_dsub+0x124>
100053ce:	46c0      	nop			; (mov r8, r8)
100053d0:	000007ff 	.word	0x000007ff
100053d4:	ff7fffff 	.word	0xff7fffff
100053d8:	800fffff 	.word	0x800fffff
100053dc:	1c3b      	adds	r3, r7, #0
100053de:	3b20      	subs	r3, #32
100053e0:	1c01      	adds	r1, r0, #0
100053e2:	40d9      	lsrs	r1, r3
100053e4:	1c0b      	adds	r3, r1, #0
100053e6:	2f20      	cmp	r7, #32
100053e8:	d05c      	beq.n	100054a4 <__aeabi_dsub+0x428>
100053ea:	2240      	movs	r2, #64	; 0x40
100053ec:	1bd7      	subs	r7, r2, r7
100053ee:	40b8      	lsls	r0, r7
100053f0:	1c02      	adds	r2, r0, #0
100053f2:	4650      	mov	r0, sl
100053f4:	4302      	orrs	r2, r0
100053f6:	1e51      	subs	r1, r2, #1
100053f8:	418a      	sbcs	r2, r1
100053fa:	431a      	orrs	r2, r3
100053fc:	2300      	movs	r3, #0
100053fe:	e695      	b.n	1000512c <__aeabi_dsub+0xb0>
10005400:	427f      	negs	r7, r7
10005402:	2e00      	cmp	r6, #0
10005404:	d040      	beq.n	10005488 <__aeabi_dsub+0x40c>
10005406:	4cca      	ldr	r4, [pc, #808]	; (10005730 <__aeabi_dsub+0x6b4>)
10005408:	42a2      	cmp	r2, r4
1000540a:	d100      	bne.n	1000540e <__aeabi_dsub+0x392>
1000540c:	e11f      	b.n	1000564e <__aeabi_dsub+0x5d2>
1000540e:	2180      	movs	r1, #128	; 0x80
10005410:	4666      	mov	r6, ip
10005412:	040b      	lsls	r3, r1, #16
10005414:	431e      	orrs	r6, r3
10005416:	46b4      	mov	ip, r6
10005418:	2f38      	cmp	r7, #56	; 0x38
1000541a:	dd00      	ble.n	1000541e <__aeabi_dsub+0x3a2>
1000541c:	e0a9      	b.n	10005572 <__aeabi_dsub+0x4f6>
1000541e:	2f1f      	cmp	r7, #31
10005420:	dd00      	ble.n	10005424 <__aeabi_dsub+0x3a8>
10005422:	e13d      	b.n	100056a0 <__aeabi_dsub+0x624>
10005424:	2320      	movs	r3, #32
10005426:	1bde      	subs	r6, r3, r7
10005428:	1c29      	adds	r1, r5, #0
1000542a:	4664      	mov	r4, ip
1000542c:	40b4      	lsls	r4, r6
1000542e:	40f9      	lsrs	r1, r7
10005430:	40b5      	lsls	r5, r6
10005432:	1e6b      	subs	r3, r5, #1
10005434:	419d      	sbcs	r5, r3
10005436:	4321      	orrs	r1, r4
10005438:	4663      	mov	r3, ip
1000543a:	430d      	orrs	r5, r1
1000543c:	40fb      	lsrs	r3, r7
1000543e:	4657      	mov	r7, sl
10005440:	1b7d      	subs	r5, r7, r5
10005442:	1ac0      	subs	r0, r0, r3
10005444:	45aa      	cmp	sl, r5
10005446:	419b      	sbcs	r3, r3
10005448:	425f      	negs	r7, r3
1000544a:	1bc3      	subs	r3, r0, r7
1000544c:	464c      	mov	r4, r9
1000544e:	1c17      	adds	r7, r2, #0
10005450:	e675      	b.n	1000513e <__aeabi_dsub+0xc2>
10005452:	1c0d      	adds	r5, r1, #0
10005454:	4315      	orrs	r5, r2
10005456:	d120      	bne.n	1000549a <__aeabi_dsub+0x41e>
10005458:	2400      	movs	r4, #0
1000545a:	2101      	movs	r1, #1
1000545c:	2300      	movs	r3, #0
1000545e:	2604      	movs	r6, #4
10005460:	2700      	movs	r7, #0
10005462:	e6b6      	b.n	100051d2 <__aeabi_dsub+0x156>
10005464:	2b1f      	cmp	r3, #31
10005466:	dc4a      	bgt.n	100054fe <__aeabi_dsub+0x482>
10005468:	2120      	movs	r1, #32
1000546a:	1ac9      	subs	r1, r1, r3
1000546c:	1c07      	adds	r7, r0, #0
1000546e:	4652      	mov	r2, sl
10005470:	408f      	lsls	r7, r1
10005472:	40da      	lsrs	r2, r3
10005474:	433a      	orrs	r2, r7
10005476:	4657      	mov	r7, sl
10005478:	408f      	lsls	r7, r1
1000547a:	1c39      	adds	r1, r7, #0
1000547c:	1e4f      	subs	r7, r1, #1
1000547e:	41b9      	sbcs	r1, r7
10005480:	40d8      	lsrs	r0, r3
10005482:	430a      	orrs	r2, r1
10005484:	1c07      	adds	r7, r0, #0
10005486:	e6db      	b.n	10005240 <__aeabi_dsub+0x1c4>
10005488:	4664      	mov	r4, ip
1000548a:	432c      	orrs	r4, r5
1000548c:	d169      	bne.n	10005562 <__aeabi_dsub+0x4e6>
1000548e:	1c51      	adds	r1, r2, #1
10005490:	1c03      	adds	r3, r0, #0
10005492:	4655      	mov	r5, sl
10005494:	1c17      	adds	r7, r2, #0
10005496:	464c      	mov	r4, r9
10005498:	e682      	b.n	100051a0 <__aeabi_dsub+0x124>
1000549a:	1c15      	adds	r5, r2, #0
1000549c:	1c37      	adds	r7, r6, #0
1000549e:	e654      	b.n	1000514a <__aeabi_dsub+0xce>
100054a0:	2300      	movs	r3, #0
100054a2:	e78c      	b.n	100053be <__aeabi_dsub+0x342>
100054a4:	2200      	movs	r2, #0
100054a6:	e7a4      	b.n	100053f2 <__aeabi_dsub+0x376>
100054a8:	4667      	mov	r7, ip
100054aa:	432f      	orrs	r7, r5
100054ac:	2e00      	cmp	r6, #0
100054ae:	d000      	beq.n	100054b2 <__aeabi_dsub+0x436>
100054b0:	e0d4      	b.n	1000565c <__aeabi_dsub+0x5e0>
100054b2:	2f00      	cmp	r7, #0
100054b4:	d100      	bne.n	100054b8 <__aeabi_dsub+0x43c>
100054b6:	e126      	b.n	10005706 <__aeabi_dsub+0x68a>
100054b8:	4653      	mov	r3, sl
100054ba:	4303      	orrs	r3, r0
100054bc:	d100      	bne.n	100054c0 <__aeabi_dsub+0x444>
100054be:	e0e4      	b.n	1000568a <__aeabi_dsub+0x60e>
100054c0:	4651      	mov	r1, sl
100054c2:	194f      	adds	r7, r1, r5
100054c4:	42af      	cmp	r7, r5
100054c6:	41ad      	sbcs	r5, r5
100054c8:	4460      	add	r0, ip
100054ca:	426e      	negs	r6, r5
100054cc:	1983      	adds	r3, r0, r6
100054ce:	021e      	lsls	r6, r3, #8
100054d0:	d400      	bmi.n	100054d4 <__aeabi_dsub+0x458>
100054d2:	e14e      	b.n	10005772 <__aeabi_dsub+0x6f6>
100054d4:	4897      	ldr	r0, [pc, #604]	; (10005734 <__aeabi_dsub+0x6b8>)
100054d6:	1c3d      	adds	r5, r7, #0
100054d8:	4003      	ands	r3, r0
100054da:	2102      	movs	r1, #2
100054dc:	2701      	movs	r7, #1
100054de:	e65f      	b.n	100051a0 <__aeabi_dsub+0x124>
100054e0:	4661      	mov	r1, ip
100054e2:	4329      	orrs	r1, r5
100054e4:	2e00      	cmp	r6, #0
100054e6:	d129      	bne.n	1000553c <__aeabi_dsub+0x4c0>
100054e8:	2900      	cmp	r1, #0
100054ea:	d176      	bne.n	100055da <__aeabi_dsub+0x55e>
100054ec:	4651      	mov	r1, sl
100054ee:	4301      	orrs	r1, r0
100054f0:	d0b2      	beq.n	10005458 <__aeabi_dsub+0x3dc>
100054f2:	1c03      	adds	r3, r0, #0
100054f4:	4655      	mov	r5, sl
100054f6:	464c      	mov	r4, r9
100054f8:	2101      	movs	r1, #1
100054fa:	2700      	movs	r7, #0
100054fc:	e650      	b.n	100051a0 <__aeabi_dsub+0x124>
100054fe:	1c1f      	adds	r7, r3, #0
10005500:	3f20      	subs	r7, #32
10005502:	1c01      	adds	r1, r0, #0
10005504:	40f9      	lsrs	r1, r7
10005506:	1c0f      	adds	r7, r1, #0
10005508:	2b20      	cmp	r3, #32
1000550a:	d100      	bne.n	1000550e <__aeabi_dsub+0x492>
1000550c:	e0c6      	b.n	1000569c <__aeabi_dsub+0x620>
1000550e:	2240      	movs	r2, #64	; 0x40
10005510:	1ad3      	subs	r3, r2, r3
10005512:	4098      	lsls	r0, r3
10005514:	1c02      	adds	r2, r0, #0
10005516:	4650      	mov	r0, sl
10005518:	4302      	orrs	r2, r0
1000551a:	1e53      	subs	r3, r2, #1
1000551c:	419a      	sbcs	r2, r3
1000551e:	433a      	orrs	r2, r7
10005520:	2700      	movs	r7, #0
10005522:	e68d      	b.n	10005240 <__aeabi_dsub+0x1c4>
10005524:	425b      	negs	r3, r3
10005526:	2e00      	cmp	r6, #0
10005528:	d130      	bne.n	1000558c <__aeabi_dsub+0x510>
1000552a:	4667      	mov	r7, ip
1000552c:	432f      	orrs	r7, r5
1000552e:	d000      	beq.n	10005532 <__aeabi_dsub+0x4b6>
10005530:	e0c8      	b.n	100056c4 <__aeabi_dsub+0x648>
10005532:	1c51      	adds	r1, r2, #1
10005534:	1c03      	adds	r3, r0, #0
10005536:	4655      	mov	r5, sl
10005538:	1c17      	adds	r7, r2, #0
1000553a:	e631      	b.n	100051a0 <__aeabi_dsub+0x124>
1000553c:	2900      	cmp	r1, #0
1000553e:	d165      	bne.n	1000560c <__aeabi_dsub+0x590>
10005540:	4657      	mov	r7, sl
10005542:	4307      	orrs	r7, r0
10005544:	d100      	bne.n	10005548 <__aeabi_dsub+0x4cc>
10005546:	e0c8      	b.n	100056da <__aeabi_dsub+0x65e>
10005548:	1c03      	adds	r3, r0, #0
1000554a:	2080      	movs	r0, #128	; 0x80
1000554c:	4655      	mov	r5, sl
1000554e:	464c      	mov	r4, r9
10005550:	0101      	lsls	r1, r0, #4
10005552:	4f77      	ldr	r7, [pc, #476]	; (10005730 <__aeabi_dsub+0x6b4>)
10005554:	e624      	b.n	100051a0 <__aeabi_dsub+0x124>
10005556:	2380      	movs	r3, #128	; 0x80
10005558:	1c37      	adds	r7, r6, #0
1000555a:	0119      	lsls	r1, r3, #4
1000555c:	2604      	movs	r6, #4
1000555e:	2300      	movs	r3, #0
10005560:	e637      	b.n	100051d2 <__aeabi_dsub+0x156>
10005562:	3f01      	subs	r7, #1
10005564:	2f00      	cmp	r7, #0
10005566:	d16e      	bne.n	10005646 <__aeabi_dsub+0x5ca>
10005568:	4654      	mov	r4, sl
1000556a:	4661      	mov	r1, ip
1000556c:	1b65      	subs	r5, r4, r5
1000556e:	1a40      	subs	r0, r0, r1
10005570:	e768      	b.n	10005444 <__aeabi_dsub+0x3c8>
10005572:	4667      	mov	r7, ip
10005574:	433d      	orrs	r5, r7
10005576:	2300      	movs	r3, #0
10005578:	2d00      	cmp	r5, #0
1000557a:	d100      	bne.n	1000557e <__aeabi_dsub+0x502>
1000557c:	e75f      	b.n	1000543e <__aeabi_dsub+0x3c2>
1000557e:	2501      	movs	r5, #1
10005580:	e75d      	b.n	1000543e <__aeabi_dsub+0x3c2>
10005582:	2680      	movs	r6, #128	; 0x80
10005584:	0131      	lsls	r1, r6, #4
10005586:	2300      	movs	r3, #0
10005588:	2604      	movs	r6, #4
1000558a:	e622      	b.n	100051d2 <__aeabi_dsub+0x156>
1000558c:	4968      	ldr	r1, [pc, #416]	; (10005730 <__aeabi_dsub+0x6b4>)
1000558e:	428a      	cmp	r2, r1
10005590:	d100      	bne.n	10005594 <__aeabi_dsub+0x518>
10005592:	e0c1      	b.n	10005718 <__aeabi_dsub+0x69c>
10005594:	2780      	movs	r7, #128	; 0x80
10005596:	4666      	mov	r6, ip
10005598:	0439      	lsls	r1, r7, #16
1000559a:	430e      	orrs	r6, r1
1000559c:	46b4      	mov	ip, r6
1000559e:	2b38      	cmp	r3, #56	; 0x38
100055a0:	dd00      	ble.n	100055a4 <__aeabi_dsub+0x528>
100055a2:	e0a2      	b.n	100056ea <__aeabi_dsub+0x66e>
100055a4:	2b1f      	cmp	r3, #31
100055a6:	dd00      	ble.n	100055aa <__aeabi_dsub+0x52e>
100055a8:	e0d0      	b.n	1000574c <__aeabi_dsub+0x6d0>
100055aa:	2120      	movs	r1, #32
100055ac:	1ac9      	subs	r1, r1, r3
100055ae:	1c2e      	adds	r6, r5, #0
100055b0:	4667      	mov	r7, ip
100055b2:	408f      	lsls	r7, r1
100055b4:	408d      	lsls	r5, r1
100055b6:	40de      	lsrs	r6, r3
100055b8:	433e      	orrs	r6, r7
100055ba:	1c29      	adds	r1, r5, #0
100055bc:	4667      	mov	r7, ip
100055be:	1e4d      	subs	r5, r1, #1
100055c0:	41a9      	sbcs	r1, r5
100055c2:	40df      	lsrs	r7, r3
100055c4:	1c35      	adds	r5, r6, #0
100055c6:	430d      	orrs	r5, r1
100055c8:	1c3e      	adds	r6, r7, #0
100055ca:	4455      	add	r5, sl
100055cc:	4555      	cmp	r5, sl
100055ce:	419b      	sbcs	r3, r3
100055d0:	1830      	adds	r0, r6, r0
100055d2:	425e      	negs	r6, r3
100055d4:	1983      	adds	r3, r0, r6
100055d6:	1c17      	adds	r7, r2, #0
100055d8:	e63a      	b.n	10005250 <__aeabi_dsub+0x1d4>
100055da:	4656      	mov	r6, sl
100055dc:	4306      	orrs	r6, r0
100055de:	d054      	beq.n	1000568a <__aeabi_dsub+0x60e>
100055e0:	4657      	mov	r7, sl
100055e2:	1bea      	subs	r2, r5, r7
100055e4:	4663      	mov	r3, ip
100055e6:	4295      	cmp	r5, r2
100055e8:	41b6      	sbcs	r6, r6
100055ea:	1a19      	subs	r1, r3, r0
100055ec:	4273      	negs	r3, r6
100055ee:	1acb      	subs	r3, r1, r3
100055f0:	021e      	lsls	r6, r3, #8
100055f2:	d400      	bmi.n	100055f6 <__aeabi_dsub+0x57a>
100055f4:	e0a2      	b.n	1000573c <__aeabi_dsub+0x6c0>
100055f6:	1b7d      	subs	r5, r7, r5
100055f8:	4664      	mov	r4, ip
100055fa:	45aa      	cmp	sl, r5
100055fc:	41bf      	sbcs	r7, r7
100055fe:	1b00      	subs	r0, r0, r4
10005600:	427a      	negs	r2, r7
10005602:	1a83      	subs	r3, r0, r2
10005604:	464c      	mov	r4, r9
10005606:	2101      	movs	r1, #1
10005608:	2700      	movs	r7, #0
1000560a:	e5c9      	b.n	100051a0 <__aeabi_dsub+0x124>
1000560c:	4656      	mov	r6, sl
1000560e:	4306      	orrs	r6, r0
10005610:	d03f      	beq.n	10005692 <__aeabi_dsub+0x616>
10005612:	4662      	mov	r2, ip
10005614:	2180      	movs	r1, #128	; 0x80
10005616:	0757      	lsls	r7, r2, #29
10005618:	08ed      	lsrs	r5, r5, #3
1000561a:	08d3      	lsrs	r3, r2, #3
1000561c:	030a      	lsls	r2, r1, #12
1000561e:	433d      	orrs	r5, r7
10005620:	4213      	tst	r3, r2
10005622:	d008      	beq.n	10005636 <__aeabi_dsub+0x5ba>
10005624:	08c6      	lsrs	r6, r0, #3
10005626:	4216      	tst	r6, r2
10005628:	d105      	bne.n	10005636 <__aeabi_dsub+0x5ba>
1000562a:	4655      	mov	r5, sl
1000562c:	08ec      	lsrs	r4, r5, #3
1000562e:	0745      	lsls	r5, r0, #29
10005630:	4325      	orrs	r5, r4
10005632:	1c33      	adds	r3, r6, #0
10005634:	464c      	mov	r4, r9
10005636:	0f68      	lsrs	r0, r5, #29
10005638:	00db      	lsls	r3, r3, #3
1000563a:	2680      	movs	r6, #128	; 0x80
1000563c:	4303      	orrs	r3, r0
1000563e:	00ed      	lsls	r5, r5, #3
10005640:	0131      	lsls	r1, r6, #4
10005642:	4f3b      	ldr	r7, [pc, #236]	; (10005730 <__aeabi_dsub+0x6b4>)
10005644:	e5ac      	b.n	100051a0 <__aeabi_dsub+0x124>
10005646:	493a      	ldr	r1, [pc, #232]	; (10005730 <__aeabi_dsub+0x6b4>)
10005648:	428a      	cmp	r2, r1
1000564a:	d000      	beq.n	1000564e <__aeabi_dsub+0x5d2>
1000564c:	e6e4      	b.n	10005418 <__aeabi_dsub+0x39c>
1000564e:	2680      	movs	r6, #128	; 0x80
10005650:	1c03      	adds	r3, r0, #0
10005652:	4655      	mov	r5, sl
10005654:	464c      	mov	r4, r9
10005656:	0131      	lsls	r1, r6, #4
10005658:	1c17      	adds	r7, r2, #0
1000565a:	e5a1      	b.n	100051a0 <__aeabi_dsub+0x124>
1000565c:	2f00      	cmp	r7, #0
1000565e:	d04c      	beq.n	100056fa <__aeabi_dsub+0x67e>
10005660:	4653      	mov	r3, sl
10005662:	4303      	orrs	r3, r0
10005664:	d015      	beq.n	10005692 <__aeabi_dsub+0x616>
10005666:	4662      	mov	r2, ip
10005668:	2680      	movs	r6, #128	; 0x80
1000566a:	08ed      	lsrs	r5, r5, #3
1000566c:	0751      	lsls	r1, r2, #29
1000566e:	08d3      	lsrs	r3, r2, #3
10005670:	0337      	lsls	r7, r6, #12
10005672:	430d      	orrs	r5, r1
10005674:	423b      	tst	r3, r7
10005676:	d0de      	beq.n	10005636 <__aeabi_dsub+0x5ba>
10005678:	08c2      	lsrs	r2, r0, #3
1000567a:	423a      	tst	r2, r7
1000567c:	d1db      	bne.n	10005636 <__aeabi_dsub+0x5ba>
1000567e:	4655      	mov	r5, sl
10005680:	08e9      	lsrs	r1, r5, #3
10005682:	0745      	lsls	r5, r0, #29
10005684:	1c13      	adds	r3, r2, #0
10005686:	430d      	orrs	r5, r1
10005688:	e7d5      	b.n	10005636 <__aeabi_dsub+0x5ba>
1000568a:	4663      	mov	r3, ip
1000568c:	2101      	movs	r1, #1
1000568e:	2700      	movs	r7, #0
10005690:	e586      	b.n	100051a0 <__aeabi_dsub+0x124>
10005692:	2780      	movs	r7, #128	; 0x80
10005694:	0139      	lsls	r1, r7, #4
10005696:	4663      	mov	r3, ip
10005698:	4f25      	ldr	r7, [pc, #148]	; (10005730 <__aeabi_dsub+0x6b4>)
1000569a:	e581      	b.n	100051a0 <__aeabi_dsub+0x124>
1000569c:	2200      	movs	r2, #0
1000569e:	e73a      	b.n	10005516 <__aeabi_dsub+0x49a>
100056a0:	1c3c      	adds	r4, r7, #0
100056a2:	3c20      	subs	r4, #32
100056a4:	4666      	mov	r6, ip
100056a6:	40e6      	lsrs	r6, r4
100056a8:	1c33      	adds	r3, r6, #0
100056aa:	2f20      	cmp	r7, #32
100056ac:	d05f      	beq.n	1000576e <__aeabi_dsub+0x6f2>
100056ae:	2440      	movs	r4, #64	; 0x40
100056b0:	1be7      	subs	r7, r4, r7
100056b2:	4666      	mov	r6, ip
100056b4:	40be      	lsls	r6, r7
100056b6:	1c31      	adds	r1, r6, #0
100056b8:	430d      	orrs	r5, r1
100056ba:	1e69      	subs	r1, r5, #1
100056bc:	418d      	sbcs	r5, r1
100056be:	431d      	orrs	r5, r3
100056c0:	2300      	movs	r3, #0
100056c2:	e6bc      	b.n	1000543e <__aeabi_dsub+0x3c2>
100056c4:	3b01      	subs	r3, #1
100056c6:	2b00      	cmp	r3, #0
100056c8:	d122      	bne.n	10005710 <__aeabi_dsub+0x694>
100056ca:	4455      	add	r5, sl
100056cc:	4555      	cmp	r5, sl
100056ce:	41bf      	sbcs	r7, r7
100056d0:	427b      	negs	r3, r7
100056d2:	4460      	add	r0, ip
100056d4:	18c3      	adds	r3, r0, r3
100056d6:	1c17      	adds	r7, r2, #0
100056d8:	e5ba      	b.n	10005250 <__aeabi_dsub+0x1d4>
100056da:	2180      	movs	r1, #128	; 0x80
100056dc:	2204      	movs	r2, #4
100056de:	2400      	movs	r4, #0
100056e0:	0109      	lsls	r1, r1, #4
100056e2:	4b15      	ldr	r3, [pc, #84]	; (10005738 <__aeabi_dsub+0x6bc>)
100056e4:	4256      	negs	r6, r2
100056e6:	4f12      	ldr	r7, [pc, #72]	; (10005730 <__aeabi_dsub+0x6b4>)
100056e8:	e573      	b.n	100051d2 <__aeabi_dsub+0x156>
100056ea:	4663      	mov	r3, ip
100056ec:	431d      	orrs	r5, r3
100056ee:	2600      	movs	r6, #0
100056f0:	2d00      	cmp	r5, #0
100056f2:	d100      	bne.n	100056f6 <__aeabi_dsub+0x67a>
100056f4:	e769      	b.n	100055ca <__aeabi_dsub+0x54e>
100056f6:	2501      	movs	r5, #1
100056f8:	e767      	b.n	100055ca <__aeabi_dsub+0x54e>
100056fa:	2280      	movs	r2, #128	; 0x80
100056fc:	1c03      	adds	r3, r0, #0
100056fe:	4655      	mov	r5, sl
10005700:	0111      	lsls	r1, r2, #4
10005702:	4f0b      	ldr	r7, [pc, #44]	; (10005730 <__aeabi_dsub+0x6b4>)
10005704:	e54c      	b.n	100051a0 <__aeabi_dsub+0x124>
10005706:	1c03      	adds	r3, r0, #0
10005708:	4655      	mov	r5, sl
1000570a:	2101      	movs	r1, #1
1000570c:	2700      	movs	r7, #0
1000570e:	e547      	b.n	100051a0 <__aeabi_dsub+0x124>
10005710:	4907      	ldr	r1, [pc, #28]	; (10005730 <__aeabi_dsub+0x6b4>)
10005712:	428a      	cmp	r2, r1
10005714:	d000      	beq.n	10005718 <__aeabi_dsub+0x69c>
10005716:	e742      	b.n	1000559e <__aeabi_dsub+0x522>
10005718:	2180      	movs	r1, #128	; 0x80
1000571a:	1c03      	adds	r3, r0, #0
1000571c:	4655      	mov	r5, sl
1000571e:	0109      	lsls	r1, r1, #4
10005720:	1c17      	adds	r7, r2, #0
10005722:	e53d      	b.n	100051a0 <__aeabi_dsub+0x124>
10005724:	057f      	lsls	r7, r7, #21
10005726:	0d7f      	lsrs	r7, r7, #21
10005728:	2600      	movs	r6, #0
1000572a:	2200      	movs	r2, #0
1000572c:	e55e      	b.n	100051ec <__aeabi_dsub+0x170>
1000572e:	46c0      	nop			; (mov r8, r8)
10005730:	000007ff 	.word	0x000007ff
10005734:	ff7fffff 	.word	0xff7fffff
10005738:	007fffff 	.word	0x007fffff
1000573c:	1c1d      	adds	r5, r3, #0
1000573e:	4315      	orrs	r5, r2
10005740:	d100      	bne.n	10005744 <__aeabi_dsub+0x6c8>
10005742:	e689      	b.n	10005458 <__aeabi_dsub+0x3dc>
10005744:	1c15      	adds	r5, r2, #0
10005746:	2101      	movs	r1, #1
10005748:	2700      	movs	r7, #0
1000574a:	e529      	b.n	100051a0 <__aeabi_dsub+0x124>
1000574c:	1c1f      	adds	r7, r3, #0
1000574e:	3f20      	subs	r7, #32
10005750:	4661      	mov	r1, ip
10005752:	40f9      	lsrs	r1, r7
10005754:	2b20      	cmp	r3, #32
10005756:	d010      	beq.n	1000577a <__aeabi_dsub+0x6fe>
10005758:	2640      	movs	r6, #64	; 0x40
1000575a:	1af3      	subs	r3, r6, r3
1000575c:	4667      	mov	r7, ip
1000575e:	409f      	lsls	r7, r3
10005760:	1c3b      	adds	r3, r7, #0
10005762:	431d      	orrs	r5, r3
10005764:	1e6b      	subs	r3, r5, #1
10005766:	419d      	sbcs	r5, r3
10005768:	430d      	orrs	r5, r1
1000576a:	2600      	movs	r6, #0
1000576c:	e72d      	b.n	100055ca <__aeabi_dsub+0x54e>
1000576e:	2100      	movs	r1, #0
10005770:	e7a2      	b.n	100056b8 <__aeabi_dsub+0x63c>
10005772:	1c3d      	adds	r5, r7, #0
10005774:	2101      	movs	r1, #1
10005776:	2700      	movs	r7, #0
10005778:	e512      	b.n	100051a0 <__aeabi_dsub+0x124>
1000577a:	2300      	movs	r3, #0
1000577c:	e7f1      	b.n	10005762 <__aeabi_dsub+0x6e6>
1000577e:	46c0      	nop			; (mov r8, r8)

10005780 <__aeabi_d2iz>:
10005780:	4a13      	ldr	r2, [pc, #76]	; (100057d0 <__aeabi_d2iz+0x50>)
10005782:	030b      	lsls	r3, r1, #12
10005784:	b530      	push	{r4, r5, lr}
10005786:	1c05      	adds	r5, r0, #0
10005788:	0048      	lsls	r0, r1, #1
1000578a:	0b1c      	lsrs	r4, r3, #12
1000578c:	0fc9      	lsrs	r1, r1, #31
1000578e:	0d43      	lsrs	r3, r0, #21
10005790:	2000      	movs	r0, #0
10005792:	4293      	cmp	r3, r2
10005794:	dd11      	ble.n	100057ba <__aeabi_d2iz+0x3a>
10005796:	480f      	ldr	r0, [pc, #60]	; (100057d4 <__aeabi_d2iz+0x54>)
10005798:	4283      	cmp	r3, r0
1000579a:	dc0f      	bgt.n	100057bc <__aeabi_d2iz+0x3c>
1000579c:	2280      	movs	r2, #128	; 0x80
1000579e:	0350      	lsls	r0, r2, #13
100057a0:	4a0d      	ldr	r2, [pc, #52]	; (100057d8 <__aeabi_d2iz+0x58>)
100057a2:	4304      	orrs	r4, r0
100057a4:	1ad0      	subs	r0, r2, r3
100057a6:	281f      	cmp	r0, #31
100057a8:	dd0b      	ble.n	100057c2 <__aeabi_d2iz+0x42>
100057aa:	4d0c      	ldr	r5, [pc, #48]	; (100057dc <__aeabi_d2iz+0x5c>)
100057ac:	1aeb      	subs	r3, r5, r3
100057ae:	40dc      	lsrs	r4, r3
100057b0:	1c22      	adds	r2, r4, #0
100057b2:	4250      	negs	r0, r2
100057b4:	2900      	cmp	r1, #0
100057b6:	d100      	bne.n	100057ba <__aeabi_d2iz+0x3a>
100057b8:	1c10      	adds	r0, r2, #0
100057ba:	bd30      	pop	{r4, r5, pc}
100057bc:	4c08      	ldr	r4, [pc, #32]	; (100057e0 <__aeabi_d2iz+0x60>)
100057be:	1908      	adds	r0, r1, r4
100057c0:	e7fb      	b.n	100057ba <__aeabi_d2iz+0x3a>
100057c2:	40c5      	lsrs	r5, r0
100057c4:	4807      	ldr	r0, [pc, #28]	; (100057e4 <__aeabi_d2iz+0x64>)
100057c6:	1c2a      	adds	r2, r5, #0
100057c8:	181d      	adds	r5, r3, r0
100057ca:	40ac      	lsls	r4, r5
100057cc:	4322      	orrs	r2, r4
100057ce:	e7f0      	b.n	100057b2 <__aeabi_d2iz+0x32>
100057d0:	000003fe 	.word	0x000003fe
100057d4:	0000041d 	.word	0x0000041d
100057d8:	00000433 	.word	0x00000433
100057dc:	00000413 	.word	0x00000413
100057e0:	7fffffff 	.word	0x7fffffff
100057e4:	fffffbed 	.word	0xfffffbed

100057e8 <__aeabi_i2d>:
100057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100057ea:	1e04      	subs	r4, r0, #0
100057ec:	d02d      	beq.n	1000584a <__aeabi_i2d+0x62>
100057ee:	0fc5      	lsrs	r5, r0, #31
100057f0:	d000      	beq.n	100057f4 <__aeabi_i2d+0xc>
100057f2:	4244      	negs	r4, r0
100057f4:	1c20      	adds	r0, r4, #0
100057f6:	f000 f959 	bl	10005aac <__clzsi2>
100057fa:	4916      	ldr	r1, [pc, #88]	; (10005854 <__aeabi_i2d+0x6c>)
100057fc:	1a0a      	subs	r2, r1, r0
100057fe:	280a      	cmp	r0, #10
10005800:	dd16      	ble.n	10005830 <__aeabi_i2d+0x48>
10005802:	380b      	subs	r0, #11
10005804:	4084      	lsls	r4, r0
10005806:	0557      	lsls	r7, r2, #21
10005808:	0326      	lsls	r6, r4, #12
1000580a:	0d7a      	lsrs	r2, r7, #21
1000580c:	0b36      	lsrs	r6, r6, #12
1000580e:	2700      	movs	r7, #0
10005810:	2000      	movs	r0, #0
10005812:	2100      	movs	r1, #0
10005814:	1c38      	adds	r0, r7, #0
10005816:	0d0f      	lsrs	r7, r1, #20
10005818:	053b      	lsls	r3, r7, #20
1000581a:	4c0f      	ldr	r4, [pc, #60]	; (10005858 <__aeabi_i2d+0x70>)
1000581c:	4333      	orrs	r3, r6
1000581e:	401c      	ands	r4, r3
10005820:	0516      	lsls	r6, r2, #20
10005822:	4334      	orrs	r4, r6
10005824:	0061      	lsls	r1, r4, #1
10005826:	084a      	lsrs	r2, r1, #1
10005828:	07ed      	lsls	r5, r5, #31
1000582a:	1c11      	adds	r1, r2, #0
1000582c:	4329      	orrs	r1, r5
1000582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005830:	260b      	movs	r6, #11
10005832:	1c01      	adds	r1, r0, #0
10005834:	1a30      	subs	r0, r6, r0
10005836:	3115      	adds	r1, #21
10005838:	1c23      	adds	r3, r4, #0
1000583a:	40c4      	lsrs	r4, r0
1000583c:	408b      	lsls	r3, r1
1000583e:	0552      	lsls	r2, r2, #21
10005840:	0321      	lsls	r1, r4, #12
10005842:	1c1f      	adds	r7, r3, #0
10005844:	0b0e      	lsrs	r6, r1, #12
10005846:	0d52      	lsrs	r2, r2, #21
10005848:	e7e2      	b.n	10005810 <__aeabi_i2d+0x28>
1000584a:	2500      	movs	r5, #0
1000584c:	2200      	movs	r2, #0
1000584e:	2600      	movs	r6, #0
10005850:	2700      	movs	r7, #0
10005852:	e7dd      	b.n	10005810 <__aeabi_i2d+0x28>
10005854:	0000041e 	.word	0x0000041e
10005858:	800fffff 	.word	0x800fffff

1000585c <__aeabi_ui2d>:
1000585c:	b570      	push	{r4, r5, r6, lr}
1000585e:	1e04      	subs	r4, r0, #0
10005860:	d026      	beq.n	100058b0 <__aeabi_ui2d+0x54>
10005862:	f000 f923 	bl	10005aac <__clzsi2>
10005866:	4914      	ldr	r1, [pc, #80]	; (100058b8 <__aeabi_ui2d+0x5c>)
10005868:	1a0a      	subs	r2, r1, r0
1000586a:	280a      	cmp	r0, #10
1000586c:	dd13      	ble.n	10005896 <__aeabi_ui2d+0x3a>
1000586e:	380b      	subs	r0, #11
10005870:	4084      	lsls	r4, r0
10005872:	0556      	lsls	r6, r2, #21
10005874:	0324      	lsls	r4, r4, #12
10005876:	0d72      	lsrs	r2, r6, #21
10005878:	0b25      	lsrs	r5, r4, #12
1000587a:	2600      	movs	r6, #0
1000587c:	2000      	movs	r0, #0
1000587e:	2100      	movs	r1, #0
10005880:	1c30      	adds	r0, r6, #0
10005882:	0d0e      	lsrs	r6, r1, #20
10005884:	0533      	lsls	r3, r6, #20
10005886:	4c0d      	ldr	r4, [pc, #52]	; (100058bc <__aeabi_ui2d+0x60>)
10005888:	432b      	orrs	r3, r5
1000588a:	0511      	lsls	r1, r2, #20
1000588c:	401c      	ands	r4, r3
1000588e:	430c      	orrs	r4, r1
10005890:	0065      	lsls	r5, r4, #1
10005892:	0869      	lsrs	r1, r5, #1
10005894:	bd70      	pop	{r4, r5, r6, pc}
10005896:	230b      	movs	r3, #11
10005898:	1c05      	adds	r5, r0, #0
1000589a:	1a18      	subs	r0, r3, r0
1000589c:	3515      	adds	r5, #21
1000589e:	1c21      	adds	r1, r4, #0
100058a0:	40c4      	lsrs	r4, r0
100058a2:	40a9      	lsls	r1, r5
100058a4:	0552      	lsls	r2, r2, #21
100058a6:	0325      	lsls	r5, r4, #12
100058a8:	1c0e      	adds	r6, r1, #0
100058aa:	0b2d      	lsrs	r5, r5, #12
100058ac:	0d52      	lsrs	r2, r2, #21
100058ae:	e7e5      	b.n	1000587c <__aeabi_ui2d+0x20>
100058b0:	2200      	movs	r2, #0
100058b2:	2500      	movs	r5, #0
100058b4:	2600      	movs	r6, #0
100058b6:	e7e1      	b.n	1000587c <__aeabi_ui2d+0x20>
100058b8:	0000041e 	.word	0x0000041e
100058bc:	800fffff 	.word	0x800fffff

100058c0 <__aeabi_f2d>:
100058c0:	0041      	lsls	r1, r0, #1
100058c2:	b570      	push	{r4, r5, r6, lr}
100058c4:	0e0e      	lsrs	r6, r1, #24
100058c6:	1c73      	adds	r3, r6, #1
100058c8:	0242      	lsls	r2, r0, #9
100058ca:	0fc5      	lsrs	r5, r0, #31
100058cc:	b2d8      	uxtb	r0, r3
100058ce:	0a54      	lsrs	r4, r2, #9
100058d0:	2801      	cmp	r0, #1
100058d2:	dd15      	ble.n	10005900 <__aeabi_f2d+0x40>
100058d4:	0763      	lsls	r3, r4, #29
100058d6:	24e0      	movs	r4, #224	; 0xe0
100058d8:	00a0      	lsls	r0, r4, #2
100058da:	0b12      	lsrs	r2, r2, #12
100058dc:	1834      	adds	r4, r6, r0
100058de:	2000      	movs	r0, #0
100058e0:	2100      	movs	r1, #0
100058e2:	1c18      	adds	r0, r3, #0
100058e4:	0d0b      	lsrs	r3, r1, #20
100058e6:	051e      	lsls	r6, r3, #20
100058e8:	4b1c      	ldr	r3, [pc, #112]	; (1000595c <__aeabi_f2d+0x9c>)
100058ea:	4332      	orrs	r2, r6
100058ec:	0561      	lsls	r1, r4, #21
100058ee:	084c      	lsrs	r4, r1, #1
100058f0:	4013      	ands	r3, r2
100058f2:	4323      	orrs	r3, r4
100058f4:	005a      	lsls	r2, r3, #1
100058f6:	0856      	lsrs	r6, r2, #1
100058f8:	07ed      	lsls	r5, r5, #31
100058fa:	1c31      	adds	r1, r6, #0
100058fc:	4329      	orrs	r1, r5
100058fe:	bd70      	pop	{r4, r5, r6, pc}
10005900:	2e00      	cmp	r6, #0
10005902:	d116      	bne.n	10005932 <__aeabi_f2d+0x72>
10005904:	2c00      	cmp	r4, #0
10005906:	d01e      	beq.n	10005946 <__aeabi_f2d+0x86>
10005908:	1c20      	adds	r0, r4, #0
1000590a:	f000 f8cf 	bl	10005aac <__clzsi2>
1000590e:	280a      	cmp	r0, #10
10005910:	dc1d      	bgt.n	1000594e <__aeabi_f2d+0x8e>
10005912:	220b      	movs	r2, #11
10005914:	1a11      	subs	r1, r2, r0
10005916:	1c02      	adds	r2, r0, #0
10005918:	1c23      	adds	r3, r4, #0
1000591a:	3215      	adds	r2, #21
1000591c:	40cb      	lsrs	r3, r1
1000591e:	4094      	lsls	r4, r2
10005920:	1c1e      	adds	r6, r3, #0
10005922:	1c23      	adds	r3, r4, #0
10005924:	0334      	lsls	r4, r6, #12
10005926:	4e0e      	ldr	r6, [pc, #56]	; (10005960 <__aeabi_f2d+0xa0>)
10005928:	0b22      	lsrs	r2, r4, #12
1000592a:	1a30      	subs	r0, r6, r0
1000592c:	0541      	lsls	r1, r0, #21
1000592e:	0d4c      	lsrs	r4, r1, #21
10005930:	e7d5      	b.n	100058de <__aeabi_f2d+0x1e>
10005932:	2c00      	cmp	r4, #0
10005934:	d003      	beq.n	1000593e <__aeabi_f2d+0x7e>
10005936:	0763      	lsls	r3, r4, #29
10005938:	0b12      	lsrs	r2, r2, #12
1000593a:	4c0a      	ldr	r4, [pc, #40]	; (10005964 <__aeabi_f2d+0xa4>)
1000593c:	e7cf      	b.n	100058de <__aeabi_f2d+0x1e>
1000593e:	4c09      	ldr	r4, [pc, #36]	; (10005964 <__aeabi_f2d+0xa4>)
10005940:	2200      	movs	r2, #0
10005942:	2300      	movs	r3, #0
10005944:	e7cb      	b.n	100058de <__aeabi_f2d+0x1e>
10005946:	2400      	movs	r4, #0
10005948:	2200      	movs	r2, #0
1000594a:	2300      	movs	r3, #0
1000594c:	e7c7      	b.n	100058de <__aeabi_f2d+0x1e>
1000594e:	1c01      	adds	r1, r0, #0
10005950:	390b      	subs	r1, #11
10005952:	408c      	lsls	r4, r1
10005954:	1c26      	adds	r6, r4, #0
10005956:	2300      	movs	r3, #0
10005958:	e7e4      	b.n	10005924 <__aeabi_f2d+0x64>
1000595a:	46c0      	nop			; (mov r8, r8)
1000595c:	800fffff 	.word	0x800fffff
10005960:	00000389 	.word	0x00000389
10005964:	000007ff 	.word	0x000007ff

10005968 <__aeabi_d2f>:
10005968:	b5f0      	push	{r4, r5, r6, r7, lr}
1000596a:	1c04      	adds	r4, r0, #0
1000596c:	0048      	lsls	r0, r1, #1
1000596e:	0d40      	lsrs	r0, r0, #21
10005970:	030a      	lsls	r2, r1, #12
10005972:	0fcd      	lsrs	r5, r1, #31
10005974:	1c41      	adds	r1, r0, #1
10005976:	0f63      	lsrs	r3, r4, #29
10005978:	0a52      	lsrs	r2, r2, #9
1000597a:	054f      	lsls	r7, r1, #21
1000597c:	431a      	orrs	r2, r3
1000597e:	00e6      	lsls	r6, r4, #3
10005980:	0d7b      	lsrs	r3, r7, #21
10005982:	2b01      	cmp	r3, #1
10005984:	dd3b      	ble.n	100059fe <__aeabi_d2f+0x96>
10005986:	4942      	ldr	r1, [pc, #264]	; (10005a90 <__aeabi_d2f+0x128>)
10005988:	1843      	adds	r3, r0, r1
1000598a:	2bfe      	cmp	r3, #254	; 0xfe
1000598c:	dc2c      	bgt.n	100059e8 <__aeabi_d2f+0x80>
1000598e:	2b00      	cmp	r3, #0
10005990:	dd4e      	ble.n	10005a30 <__aeabi_d2f+0xc8>
10005992:	01a4      	lsls	r4, r4, #6
10005994:	0f77      	lsrs	r7, r6, #29
10005996:	00d2      	lsls	r2, r2, #3
10005998:	1e61      	subs	r1, r4, #1
1000599a:	418c      	sbcs	r4, r1
1000599c:	4e3d      	ldr	r6, [pc, #244]	; (10005a94 <__aeabi_d2f+0x12c>)
1000599e:	4322      	orrs	r2, r4
100059a0:	1980      	adds	r0, r0, r6
100059a2:	433a      	orrs	r2, r7
100059a4:	260f      	movs	r6, #15
100059a6:	4016      	ands	r6, r2
100059a8:	2e04      	cmp	r6, #4
100059aa:	d147      	bne.n	10005a3c <__aeabi_d2f+0xd4>
100059ac:	2780      	movs	r7, #128	; 0x80
100059ae:	04fc      	lsls	r4, r7, #19
100059b0:	4014      	ands	r4, r2
100059b2:	d01d      	beq.n	100059f0 <__aeabi_d2f+0x88>
100059b4:	28ff      	cmp	r0, #255	; 0xff
100059b6:	d038      	beq.n	10005a2a <__aeabi_d2f+0xc2>
100059b8:	4b37      	ldr	r3, [pc, #220]	; (10005a98 <__aeabi_d2f+0x130>)
100059ba:	401a      	ands	r2, r3
100059bc:	1c03      	adds	r3, r0, #0
100059be:	3001      	adds	r0, #1
100059c0:	b2c6      	uxtb	r6, r0
100059c2:	08d2      	lsrs	r2, r2, #3
100059c4:	2e01      	cmp	r6, #1
100059c6:	dc17      	bgt.n	100059f8 <__aeabi_d2f+0x90>
100059c8:	2a00      	cmp	r2, #0
100059ca:	d006      	beq.n	100059da <__aeabi_d2f+0x72>
100059cc:	2b00      	cmp	r3, #0
100059ce:	d029      	beq.n	10005a24 <__aeabi_d2f+0xbc>
100059d0:	2780      	movs	r7, #128	; 0x80
100059d2:	03fc      	lsls	r4, r7, #15
100059d4:	4322      	orrs	r2, r4
100059d6:	0251      	lsls	r1, r2, #9
100059d8:	0a4a      	lsrs	r2, r1, #9
100059da:	b2db      	uxtb	r3, r3
100059dc:	05db      	lsls	r3, r3, #23
100059de:	431a      	orrs	r2, r3
100059e0:	07ed      	lsls	r5, r5, #31
100059e2:	1c10      	adds	r0, r2, #0
100059e4:	4328      	orrs	r0, r5
100059e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100059e8:	2180      	movs	r1, #128	; 0x80
100059ea:	0048      	lsls	r0, r1, #1
100059ec:	2204      	movs	r2, #4
100059ee:	23ff      	movs	r3, #255	; 0xff
100059f0:	b2c6      	uxtb	r6, r0
100059f2:	08d2      	lsrs	r2, r2, #3
100059f4:	2e01      	cmp	r6, #1
100059f6:	dde7      	ble.n	100059c8 <__aeabi_d2f+0x60>
100059f8:	0251      	lsls	r1, r2, #9
100059fa:	0a4a      	lsrs	r2, r1, #9
100059fc:	e7ed      	b.n	100059da <__aeabi_d2f+0x72>
100059fe:	2800      	cmp	r0, #0
10005a00:	d106      	bne.n	10005a10 <__aeabi_d2f+0xa8>
10005a02:	4332      	orrs	r2, r6
10005a04:	2001      	movs	r0, #1
10005a06:	2a00      	cmp	r2, #0
10005a08:	d115      	bne.n	10005a36 <__aeabi_d2f+0xce>
10005a0a:	2204      	movs	r2, #4
10005a0c:	2300      	movs	r3, #0
10005a0e:	e7ef      	b.n	100059f0 <__aeabi_d2f+0x88>
10005a10:	4316      	orrs	r6, r2
10005a12:	d0e9      	beq.n	100059e8 <__aeabi_d2f+0x80>
10005a14:	2480      	movs	r4, #128	; 0x80
10005a16:	04a0      	lsls	r0, r4, #18
10005a18:	00d2      	lsls	r2, r2, #3
10005a1a:	2680      	movs	r6, #128	; 0x80
10005a1c:	4302      	orrs	r2, r0
10005a1e:	23ff      	movs	r3, #255	; 0xff
10005a20:	0070      	lsls	r0, r6, #1
10005a22:	e7bf      	b.n	100059a4 <__aeabi_d2f+0x3c>
10005a24:	0250      	lsls	r0, r2, #9
10005a26:	0a42      	lsrs	r2, r0, #9
10005a28:	e7d8      	b.n	100059dc <__aeabi_d2f+0x74>
10005a2a:	23ff      	movs	r3, #255	; 0xff
10005a2c:	2200      	movs	r2, #0
10005a2e:	e7d5      	b.n	100059dc <__aeabi_d2f+0x74>
10005a30:	3317      	adds	r3, #23
10005a32:	da05      	bge.n	10005a40 <__aeabi_d2f+0xd8>
10005a34:	2001      	movs	r0, #1
10005a36:	2205      	movs	r2, #5
10005a38:	2300      	movs	r3, #0
10005a3a:	e7d9      	b.n	100059f0 <__aeabi_d2f+0x88>
10005a3c:	3204      	adds	r2, #4
10005a3e:	e7b5      	b.n	100059ac <__aeabi_d2f+0x44>
10005a40:	2380      	movs	r3, #128	; 0x80
10005a42:	4f16      	ldr	r7, [pc, #88]	; (10005a9c <__aeabi_d2f+0x134>)
10005a44:	0419      	lsls	r1, r3, #16
10005a46:	430a      	orrs	r2, r1
10005a48:	1a3c      	subs	r4, r7, r0
10005a4a:	2c1f      	cmp	r4, #31
10005a4c:	dc0d      	bgt.n	10005a6a <__aeabi_d2f+0x102>
10005a4e:	4914      	ldr	r1, [pc, #80]	; (10005aa0 <__aeabi_d2f+0x138>)
10005a50:	1c33      	adds	r3, r6, #0
10005a52:	1847      	adds	r7, r0, r1
10005a54:	40be      	lsls	r6, r7
10005a56:	1c30      	adds	r0, r6, #0
10005a58:	1e46      	subs	r6, r0, #1
10005a5a:	41b0      	sbcs	r0, r6
10005a5c:	40ba      	lsls	r2, r7
10005a5e:	40e3      	lsrs	r3, r4
10005a60:	4302      	orrs	r2, r0
10005a62:	431a      	orrs	r2, r3
10005a64:	2001      	movs	r0, #1
10005a66:	2300      	movs	r3, #0
10005a68:	e79c      	b.n	100059a4 <__aeabi_d2f+0x3c>
10005a6a:	4b0e      	ldr	r3, [pc, #56]	; (10005aa4 <__aeabi_d2f+0x13c>)
10005a6c:	1c17      	adds	r7, r2, #0
10005a6e:	1a19      	subs	r1, r3, r0
10005a70:	40cf      	lsrs	r7, r1
10005a72:	1c3b      	adds	r3, r7, #0
10005a74:	2c20      	cmp	r4, #32
10005a76:	d009      	beq.n	10005a8c <__aeabi_d2f+0x124>
10005a78:	4c0b      	ldr	r4, [pc, #44]	; (10005aa8 <__aeabi_d2f+0x140>)
10005a7a:	1900      	adds	r0, r0, r4
10005a7c:	4082      	lsls	r2, r0
10005a7e:	4332      	orrs	r2, r6
10005a80:	1e56      	subs	r6, r2, #1
10005a82:	41b2      	sbcs	r2, r6
10005a84:	431a      	orrs	r2, r3
10005a86:	2001      	movs	r0, #1
10005a88:	2300      	movs	r3, #0
10005a8a:	e78b      	b.n	100059a4 <__aeabi_d2f+0x3c>
10005a8c:	2200      	movs	r2, #0
10005a8e:	e7f6      	b.n	10005a7e <__aeabi_d2f+0x116>
10005a90:	fffffc80 	.word	0xfffffc80
10005a94:	fffffc81 	.word	0xfffffc81
10005a98:	fbffffff 	.word	0xfbffffff
10005a9c:	0000039e 	.word	0x0000039e
10005aa0:	fffffc82 	.word	0xfffffc82
10005aa4:	0000037e 	.word	0x0000037e
10005aa8:	fffffca2 	.word	0xfffffca2

10005aac <__clzsi2>:
10005aac:	211c      	movs	r1, #28
10005aae:	2301      	movs	r3, #1
10005ab0:	041b      	lsls	r3, r3, #16
10005ab2:	4298      	cmp	r0, r3
10005ab4:	d301      	bcc.n	10005aba <__clzsi2+0xe>
10005ab6:	0c00      	lsrs	r0, r0, #16
10005ab8:	3910      	subs	r1, #16
10005aba:	0a1b      	lsrs	r3, r3, #8
10005abc:	4298      	cmp	r0, r3
10005abe:	d301      	bcc.n	10005ac4 <__clzsi2+0x18>
10005ac0:	0a00      	lsrs	r0, r0, #8
10005ac2:	3908      	subs	r1, #8
10005ac4:	091b      	lsrs	r3, r3, #4
10005ac6:	4298      	cmp	r0, r3
10005ac8:	d301      	bcc.n	10005ace <__clzsi2+0x22>
10005aca:	0900      	lsrs	r0, r0, #4
10005acc:	3904      	subs	r1, #4
10005ace:	a202      	add	r2, pc, #8	; (adr r2, 10005ad8 <__clzsi2+0x2c>)
10005ad0:	5c10      	ldrb	r0, [r2, r0]
10005ad2:	1840      	adds	r0, r0, r1
10005ad4:	4770      	bx	lr
10005ad6:	46c0      	nop			; (mov r8, r8)
10005ad8:	02020304 	.word	0x02020304
10005adc:	01010101 	.word	0x01010101
	...

10005ae8 <__aeabi_d2uiz>:
10005ae8:	b538      	push	{r3, r4, r5, lr}
10005aea:	4b0e      	ldr	r3, [pc, #56]	; (10005b24 <__aeabi_d2uiz+0x3c>)
10005aec:	4a0c      	ldr	r2, [pc, #48]	; (10005b20 <__aeabi_d2uiz+0x38>)
10005aee:	1c04      	adds	r4, r0, #0
10005af0:	1c0d      	adds	r5, r1, #0
10005af2:	f7fd f869 	bl	10002bc8 <__aeabi_dcmpge>
10005af6:	2800      	cmp	r0, #0
10005af8:	d104      	bne.n	10005b04 <__aeabi_d2uiz+0x1c>
10005afa:	1c20      	adds	r0, r4, #0
10005afc:	1c29      	adds	r1, r5, #0
10005afe:	f7ff fe3f 	bl	10005780 <__aeabi_d2iz>
10005b02:	bd38      	pop	{r3, r4, r5, pc}
10005b04:	4b07      	ldr	r3, [pc, #28]	; (10005b24 <__aeabi_d2uiz+0x3c>)
10005b06:	4a06      	ldr	r2, [pc, #24]	; (10005b20 <__aeabi_d2uiz+0x38>)
10005b08:	1c20      	adds	r0, r4, #0
10005b0a:	1c29      	adds	r1, r5, #0
10005b0c:	f7ff fab6 	bl	1000507c <__aeabi_dsub>
10005b10:	f7ff fe36 	bl	10005780 <__aeabi_d2iz>
10005b14:	2380      	movs	r3, #128	; 0x80
10005b16:	0619      	lsls	r1, r3, #24
10005b18:	1840      	adds	r0, r0, r1
10005b1a:	e7f2      	b.n	10005b02 <__aeabi_d2uiz+0x1a>
10005b1c:	46c0      	nop			; (mov r8, r8)
10005b1e:	46c0      	nop			; (mov r8, r8)
10005b20:	00000000 	.word	0x00000000
10005b24:	41e00000 	.word	0x41e00000

10005b28 <__errno>:
10005b28:	4b01      	ldr	r3, [pc, #4]	; (10005b30 <__errno+0x8>)
10005b2a:	6818      	ldr	r0, [r3, #0]
10005b2c:	4770      	bx	lr
10005b2e:	46c0      	nop			; (mov r8, r8)
10005b30:	20001e80 	.word	0x20001e80

10005b34 <memset>:
10005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
10005b36:	0783      	lsls	r3, r0, #30
10005b38:	d100      	bne.n	10005b3c <memset+0x8>
10005b3a:	e081      	b.n	10005c40 <memset+0x10c>
10005b3c:	1e54      	subs	r4, r2, #1
10005b3e:	2a00      	cmp	r2, #0
10005b40:	d07d      	beq.n	10005c3e <memset+0x10a>
10005b42:	b2cd      	uxtb	r5, r1
10005b44:	1c03      	adds	r3, r0, #0
10005b46:	2603      	movs	r6, #3
10005b48:	07e7      	lsls	r7, r4, #31
10005b4a:	d511      	bpl.n	10005b70 <memset+0x3c>
10005b4c:	1c43      	adds	r3, r0, #1
10005b4e:	7005      	strb	r5, [r0, #0]
10005b50:	4233      	tst	r3, r6
10005b52:	d011      	beq.n	10005b78 <memset+0x44>
10005b54:	701d      	strb	r5, [r3, #0]
10005b56:	3301      	adds	r3, #1
10005b58:	1e94      	subs	r4, r2, #2
10005b5a:	4233      	tst	r3, r6
10005b5c:	d00c      	beq.n	10005b78 <memset+0x44>
10005b5e:	1e62      	subs	r2, r4, #1
10005b60:	2c00      	cmp	r4, #0
10005b62:	d06c      	beq.n	10005c3e <memset+0x10a>
10005b64:	701d      	strb	r5, [r3, #0]
10005b66:	3301      	adds	r3, #1
10005b68:	1c14      	adds	r4, r2, #0
10005b6a:	4233      	tst	r3, r6
10005b6c:	d004      	beq.n	10005b78 <memset+0x44>
10005b6e:	3c01      	subs	r4, #1
10005b70:	701d      	strb	r5, [r3, #0]
10005b72:	3301      	adds	r3, #1
10005b74:	4233      	tst	r3, r6
10005b76:	d1f2      	bne.n	10005b5e <memset+0x2a>
10005b78:	2c03      	cmp	r4, #3
10005b7a:	d949      	bls.n	10005c10 <memset+0xdc>
10005b7c:	22ff      	movs	r2, #255	; 0xff
10005b7e:	400a      	ands	r2, r1
10005b80:	0217      	lsls	r7, r2, #8
10005b82:	433a      	orrs	r2, r7
10005b84:	0415      	lsls	r5, r2, #16
10005b86:	432a      	orrs	r2, r5
10005b88:	2c0f      	cmp	r4, #15
10005b8a:	d95c      	bls.n	10005c46 <memset+0x112>
10005b8c:	1c26      	adds	r6, r4, #0
10005b8e:	3e10      	subs	r6, #16
10005b90:	0937      	lsrs	r7, r6, #4
10005b92:	3701      	adds	r7, #1
10005b94:	013d      	lsls	r5, r7, #4
10005b96:	195e      	adds	r6, r3, r5
10005b98:	3d10      	subs	r5, #16
10005b9a:	06ef      	lsls	r7, r5, #27
10005b9c:	601a      	str	r2, [r3, #0]
10005b9e:	605a      	str	r2, [r3, #4]
10005ba0:	609a      	str	r2, [r3, #8]
10005ba2:	60da      	str	r2, [r3, #12]
10005ba4:	3310      	adds	r3, #16
10005ba6:	0ffd      	lsrs	r5, r7, #31
10005ba8:	429e      	cmp	r6, r3
10005baa:	d013      	beq.n	10005bd4 <memset+0xa0>
10005bac:	2d00      	cmp	r5, #0
10005bae:	d006      	beq.n	10005bbe <memset+0x8a>
10005bb0:	601a      	str	r2, [r3, #0]
10005bb2:	605a      	str	r2, [r3, #4]
10005bb4:	609a      	str	r2, [r3, #8]
10005bb6:	60da      	str	r2, [r3, #12]
10005bb8:	3310      	adds	r3, #16
10005bba:	429e      	cmp	r6, r3
10005bbc:	d00a      	beq.n	10005bd4 <memset+0xa0>
10005bbe:	601a      	str	r2, [r3, #0]
10005bc0:	605a      	str	r2, [r3, #4]
10005bc2:	609a      	str	r2, [r3, #8]
10005bc4:	60da      	str	r2, [r3, #12]
10005bc6:	611a      	str	r2, [r3, #16]
10005bc8:	615a      	str	r2, [r3, #20]
10005bca:	619a      	str	r2, [r3, #24]
10005bcc:	61da      	str	r2, [r3, #28]
10005bce:	3320      	adds	r3, #32
10005bd0:	429e      	cmp	r6, r3
10005bd2:	d1f4      	bne.n	10005bbe <memset+0x8a>
10005bd4:	230f      	movs	r3, #15
10005bd6:	401c      	ands	r4, r3
10005bd8:	1c35      	adds	r5, r6, #0
10005bda:	1c33      	adds	r3, r6, #0
10005bdc:	2c03      	cmp	r4, #3
10005bde:	d917      	bls.n	10005c10 <memset+0xdc>
10005be0:	1f26      	subs	r6, r4, #4
10005be2:	08b7      	lsrs	r7, r6, #2
10005be4:	3701      	adds	r7, #1
10005be6:	00be      	lsls	r6, r7, #2
10005be8:	19ab      	adds	r3, r5, r6
10005bea:	3e04      	subs	r6, #4
10005bec:	0777      	lsls	r7, r6, #29
10005bee:	c504      	stmia	r5!, {r2}
10005bf0:	0ffe      	lsrs	r6, r7, #31
10005bf2:	429d      	cmp	r5, r3
10005bf4:	d00a      	beq.n	10005c0c <memset+0xd8>
10005bf6:	2e00      	cmp	r6, #0
10005bf8:	d002      	beq.n	10005c00 <memset+0xcc>
10005bfa:	c504      	stmia	r5!, {r2}
10005bfc:	429d      	cmp	r5, r3
10005bfe:	d005      	beq.n	10005c0c <memset+0xd8>
10005c00:	1c2f      	adds	r7, r5, #0
10005c02:	c704      	stmia	r7!, {r2}
10005c04:	606a      	str	r2, [r5, #4]
10005c06:	1d3d      	adds	r5, r7, #4
10005c08:	429d      	cmp	r5, r3
10005c0a:	d1f9      	bne.n	10005c00 <memset+0xcc>
10005c0c:	2203      	movs	r2, #3
10005c0e:	4014      	ands	r4, r2
10005c10:	2c00      	cmp	r4, #0
10005c12:	d014      	beq.n	10005c3e <memset+0x10a>
10005c14:	191c      	adds	r4, r3, r4
10005c16:	43dd      	mvns	r5, r3
10005c18:	b2c9      	uxtb	r1, r1
10005c1a:	1966      	adds	r6, r4, r5
10005c1c:	2701      	movs	r7, #1
10005c1e:	7019      	strb	r1, [r3, #0]
10005c20:	3301      	adds	r3, #1
10005c22:	403e      	ands	r6, r7
10005c24:	42a3      	cmp	r3, r4
10005c26:	d00a      	beq.n	10005c3e <memset+0x10a>
10005c28:	2e00      	cmp	r6, #0
10005c2a:	d003      	beq.n	10005c34 <memset+0x100>
10005c2c:	7019      	strb	r1, [r3, #0]
10005c2e:	3301      	adds	r3, #1
10005c30:	42a3      	cmp	r3, r4
10005c32:	d004      	beq.n	10005c3e <memset+0x10a>
10005c34:	7019      	strb	r1, [r3, #0]
10005c36:	7059      	strb	r1, [r3, #1]
10005c38:	3302      	adds	r3, #2
10005c3a:	42a3      	cmp	r3, r4
10005c3c:	d1fa      	bne.n	10005c34 <memset+0x100>
10005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005c40:	1c03      	adds	r3, r0, #0
10005c42:	1c14      	adds	r4, r2, #0
10005c44:	e798      	b.n	10005b78 <memset+0x44>
10005c46:	1c1d      	adds	r5, r3, #0
10005c48:	e7ca      	b.n	10005be0 <memset+0xac>
10005c4a:	46c0      	nop			; (mov r8, r8)

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	100012f3 	.word	0x100012f3
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100012f5 	.word	0x100012f5
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100012f7 	.word	0x100012f7
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100012f9 	.word	0x100012f9
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	100012fb 	.word	0x100012fb
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100012fd 	.word	0x100012fd
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100012ff 	.word	0x100012ff
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001301 	.word	0x10001301
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001303 	.word	0x10001303
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001305 	.word	0x10001305
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001307 	.word	0x10001307
    MOV PC,R0
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001309 	.word	0x10001309
    MOV PC,R0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001327 	.word	0x10001327
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001329 	.word	0x10001329
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	1000132b 	.word	0x1000132b
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	1000132d 	.word	0x1000132d
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	1000132f 	.word	0x1000132f
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001331 	.word	0x10001331
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	1000130b 	.word	0x1000130b
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	1000130d 	.word	0x1000130d
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	1000130f 	.word	0x1000130f
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001311 	.word	0x10001311
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001313 	.word	0x10001313
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001315 	.word	0x10001315
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001317 	.word	0x10001317
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001319 	.word	0x10001319
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	1000131b 	.word	0x1000131b
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	1000131d 	.word	0x1000131d
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	1000131f 	.word	0x1000131f
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001321 	.word	0x10001321
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001323 	.word	0x10001323
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001325 	.word	0x10001325
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001333 	.word	0x10001333
