
Convolution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005308  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10006308  10006308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00027064  10006318  10006318  00006318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000138  2000000c  1002d380  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   0000000c  20000144  00000000  00000144  2**0
                  ALLOC
  5 Stack         00000800  20000150  00000000  00000150  2**0
                  ALLOC
  6 .bss          0000080c  20000950  20000950  00038950  2**2
                  ALLOC
  7 .data         0000063c  20001160  1002d4b8  00031160  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000210  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002336  00000000  00000000  000319b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008e2  00000000  00000000  00033ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000032dd  00000000  00000000  000345c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a2c  00000000  00000000  000378a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00037d9c  00000000  00000000  000382d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002e34  00000000  00000000  00070070  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00072ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000079d  00000000  00000000  00073008  2**0
                  CONTENTS, READONLY
 17 .debug_macro  0000ac53  00000000  00000000  000737a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1300_interrupt_vector_cortex_m>:
10001000:	50 09 00 20 19 10 00 10 f9 11 00 10 fb 11 00 10     P.. ............
10001010:	00 00 00 80 00 00 00 80                             ........

10001018 <__Xmc1300_reset_cortex_m>:
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001018:	4803      	ldr	r0, [pc, #12]	; (10001028 <__Xmc1300_reset_cortex_m+0x10>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000101c:	4803      	ldr	r0, [pc, #12]	; (1000102c <__Xmc1300_reset_cortex_m+0x14>)
    BLX     R0
1000101e:	4780      	blx	r0

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001020:	4803      	ldr	r0, [pc, #12]	; (10001030 <__Xmc1300_reset_cortex_m+0x18>)
    BLX     R0
10001022:	4780      	blx	r0

    B       __Xmc1300_Program_Loader 
10001024:	e006      	b.n	10001034 <__Xmc1300_Program_Loader>
10001026:	0000      	.short	0x0000
__Xmc1300_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1300_stack
10001028:	20000950 	.word	0x20000950
    MOV SP,R0

    /* Clock tree, External memory setup etc may be done here */    
    LDR     R0, =SystemInit
1000102c:	1000123d 	.word	0x1000123d

/* 
   SystemInit_DAVE3() is provided by DAVE3 code generation engine. It is  
   weakly defined here though for a potential override.
*/
    LDR     R0, =SystemInit_DAVE3 	
10001030:	100010c9 	.word	0x100010c9

10001034 <__Xmc1300_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001034:	4818      	ldr	r0, [pc, #96]	; (10001098 <SKIPVENEERCOPY+0x12>)
   LDR R1, =__Xmc1300_sData
10001036:	4919      	ldr	r1, [pc, #100]	; (1000109c <SKIPVENEERCOPY+0x16>)
   LDR R2, =__Xmc1300_Data_Size
10001038:	4a19      	ldr	r2, [pc, #100]	; (100010a0 <SKIPVENEERCOPY+0x1a>)

   /* Is there anything to be copied? */
   CMP R2,#0
1000103a:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000103c:	d00a      	beq.n	10001054 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
1000103e:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001040:	d200      	bcs.n	10001044 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001042:	2204      	movs	r2, #4

10001044 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001044:	0892      	lsrs	r2, r2, #2

10001046 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001046:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
10001048:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000104a:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000104c:	d002      	beq.n	10001054 <SKIPCOPY>
   ADDS R0,#4
1000104e:	3004      	adds	r0, #4
   ADDS R1,#4
10001050:	3104      	adds	r1, #4
   B COPYLOOP
10001052:	e7f8      	b.n	10001046 <COPYLOOP>

10001054 <SKIPCOPY>:
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
10001054:	4813      	ldr	r0, [pc, #76]	; (100010a4 <SKIPVENEERCOPY+0x1e>)
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
10001056:	4914      	ldr	r1, [pc, #80]	; (100010a8 <SKIPVENEERCOPY+0x22>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
10001058:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000105a:	d009      	beq.n	10001070 <SKIPCLEAR>

   /* At least 1 word must be copied */
   CMP R1,#4
1000105c:	2904      	cmp	r1, #4
   BCS STARTCLEAR
1000105e:	d200      	bcs.n	10001062 <STARTCLEAR>
   
   /* Byte count < 4 ; so bump it up to a word*/
   MOVS R1,#4
10001060:	2104      	movs	r1, #4

10001062 <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
10001062:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001064:	2200      	movs	r2, #0

10001066 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001066:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001068:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
1000106a:	d001      	beq.n	10001070 <SKIPCLEAR>
   ADDS R0,#4
1000106c:	3004      	adds	r0, #4
   B CLEARLOOP
1000106e:	e7fa      	b.n	10001066 <CLEARLOOP>

10001070 <SKIPCLEAR>:
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
10001070:	480e      	ldr	r0, [pc, #56]	; (100010ac <SKIPVENEERCOPY+0x26>)
   LDR R1, =VeneerStart
10001072:	490f      	ldr	r1, [pc, #60]	; (100010b0 <SKIPVENEERCOPY+0x2a>)
   LDR R2, =VeneerSize
10001074:	4a0f      	ldr	r2, [pc, #60]	; (100010b4 <SKIPVENEERCOPY+0x2e>)

10001076 <STARTVENEERCOPY>:
STARTVENEERCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001076:	0892      	lsrs	r2, r2, #2

10001078 <VENEERCOPYLOOP>:

   /* The proverbial loop from the schooldays */
VENEERCOPYLOOP:
   LDR R3,[R0]
10001078:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000107a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000107c:	3a01      	subs	r2, #1
   BEQ SKIPVENEERCOPY
1000107e:	d002      	beq.n	10001086 <SKIPVENEERCOPY>
   ADDS R0,#4
10001080:	3004      	adds	r0, #4
   ADDS R1,#4
10001082:	3104      	adds	r1, #4
   B VENEERCOPYLOOP
10001084:	e7f8      	b.n	10001078 <VENEERCOPYLOOP>

10001086 <SKIPVENEERCOPY>:
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
10001086:	480c      	ldr	r0, [pc, #48]	; (100010b8 <SKIPVENEERCOPY+0x32>)
   BLX R0
10001088:	4780      	blx	r0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
1000108a:	480c      	ldr	r0, [pc, #48]	; (100010bc <SKIPVENEERCOPY+0x36>)
   MOV SP,R0
1000108c:	4685      	mov	sp, r0

   MOVS R0,#0
1000108e:	2000      	movs	r0, #0
   MOVS R1,#0
10001090:	2100      	movs	r1, #0
   LDR R2, =main
10001092:	4a0b      	ldr	r2, [pc, #44]	; (100010c0 <SKIPVENEERCOPY+0x3a>)
   MOV PC,R2
10001094:	4697      	mov	pc, r2
10001096:	0000      	.short	0x0000
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001098:	1002d4b8 	.word	0x1002d4b8
   LDR R1, =__Xmc1300_sData
1000109c:	20001160 	.word	0x20001160
   LDR R2, =__Xmc1300_Data_Size
100010a0:	0000063c 	.word	0x0000063c
   ADDS R1,#4
   B COPYLOOP
    
SKIPCOPY:
   /* BSS CLEAR */
   LDR R0, =__Xmc1300_sBSS     /* Start of BSS */
100010a4:	20000950 	.word	0x20000950
   LDR R1, =__Xmc1300_BSS_Size /* BSS size in bytes */
100010a8:	0000080c 	.word	0x0000080c
    
SKIPCLEAR:

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010ac:	1002d380 	.word	0x1002d380
   LDR R1, =VeneerStart
100010b0:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b4:	00000138 	.word	0x00000138
   ADDS R1,#4
   B VENEERCOPYLOOP
    
SKIPVENEERCOPY:
   /* Update System Clock */
   LDR R0,=SystemCoreClockUpdate
100010b8:	10001249 	.word	0x10001249
   BLX R0

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1300_stack 
100010bc:	20000950 	.word	0x20000950
   MOV SP,R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c0:	100010cd 	.word	0x100010cd

100010c4 <AllowClkInitByStartup>:
*/   
     .section ".XmcStartup"
    .weak   AllowClkInitByStartup
    .type   AllowClkInitByStartup, %function
AllowClkInitByStartup:
    MOVS R0,#1
100010c4:	2001      	movs	r0, #1
    BX LR
100010c6:	4770      	bx	lr

100010c8 <SystemInit_DAVE3>:
setting up of external memory interfaces.
*/
     .weak SystemInit_DAVE3
     .type SystemInit_DAVE3, %function
SystemInit_DAVE3:
     NOP
100010c8:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ca:	4770      	bx	lr

100010cc <main>:
uint32_t srcBLen = 64;   /* Length of Input B */
uint32_t outLen;     /* Length of convolution output */
float32_t snr;        /* output SNR */

int32_t main(void)
{
100010cc:	b590      	push	{r4, r7, lr}
100010ce:	b089      	sub	sp, #36	; 0x24
100010d0:	af00      	add	r7, sp, #0
  arm_status status;     /* Status of the example */
  arm_cfft_radix4_instance_f32 cfft_instance;  /* CFFT Structure instance */

  /* CFFT Structure instance pointer */
  arm_cfft_radix4_instance_f32 *cfft_instance_ptr =
100010d2:	1d3b      	adds	r3, r7, #4
100010d4:	61bb      	str	r3, [r7, #24]
      (arm_cfft_radix4_instance_f32*) &cfft_instance;

  /* output length of convolution */
  outLen = srcALen + srcBLen - 1;
100010d6:	4b3d      	ldr	r3, [pc, #244]	; (100011cc <main+0x100>)
100010d8:	681a      	ldr	r2, [r3, #0]
100010da:	4b3d      	ldr	r3, [pc, #244]	; (100011d0 <main+0x104>)
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	18d3      	adds	r3, r2, r3
100010e0:	1e5a      	subs	r2, r3, #1
100010e2:	4b3c      	ldr	r3, [pc, #240]	; (100011d4 <main+0x108>)
100010e4:	601a      	str	r2, [r3, #0]

  /* Initialise the fft input buffers with all zeros */
  arm_fill_f32(0.0,  Ak, MAX_BLOCKSIZE);
100010e6:	2200      	movs	r2, #0
100010e8:	4b3b      	ldr	r3, [pc, #236]	; (100011d8 <main+0x10c>)
100010ea:	1c10      	adds	r0, r2, #0
100010ec:	1c19      	adds	r1, r3, #0
100010ee:	2280      	movs	r2, #128	; 0x80
100010f0:	f001 fb82 	bl	100027f8 <arm_fill_f32>
  arm_fill_f32(0.0,  Bk, MAX_BLOCKSIZE);
100010f4:	2200      	movs	r2, #0
100010f6:	4b39      	ldr	r3, [pc, #228]	; (100011dc <main+0x110>)
100010f8:	1c10      	adds	r0, r2, #0
100010fa:	1c19      	adds	r1, r3, #0
100010fc:	2280      	movs	r2, #128	; 0x80
100010fe:	f001 fb7b 	bl	100027f8 <arm_fill_f32>

  /* Copy the input values to the fft input buffers */
  arm_copy_f32(testInputA_f32,  Ak, MAX_BLOCKSIZE/2);
10001102:	4a37      	ldr	r2, [pc, #220]	; (100011e0 <main+0x114>)
10001104:	4b34      	ldr	r3, [pc, #208]	; (100011d8 <main+0x10c>)
10001106:	1c10      	adds	r0, r2, #0
10001108:	1c19      	adds	r1, r3, #0
1000110a:	2240      	movs	r2, #64	; 0x40
1000110c:	f001 fb56 	bl	100027bc <arm_copy_f32>
  arm_copy_f32(testInputB_f32,  Bk, MAX_BLOCKSIZE/2);
10001110:	4a34      	ldr	r2, [pc, #208]	; (100011e4 <main+0x118>)
10001112:	4b32      	ldr	r3, [pc, #200]	; (100011dc <main+0x110>)
10001114:	1c10      	adds	r0, r2, #0
10001116:	1c19      	adds	r1, r3, #0
10001118:	2240      	movs	r2, #64	; 0x40
1000111a:	f001 fb4f 	bl	100027bc <arm_copy_f32>

  /* Initialize the CFFT function to compute 64 point fft */
  status = arm_cfft_radix4_init_f32(cfft_instance_ptr, 64, 0, 1);
1000111e:	1c3c      	adds	r4, r7, #0
10001120:	341f      	adds	r4, #31
10001122:	69bb      	ldr	r3, [r7, #24]
10001124:	1c18      	adds	r0, r3, #0
10001126:	2140      	movs	r1, #64	; 0x40
10001128:	2200      	movs	r2, #0
1000112a:	2301      	movs	r3, #1
1000112c:	f001 fae8 	bl	10002700 <arm_cfft_radix4_init_f32>
10001130:	1c03      	adds	r3, r0, #0
10001132:	7023      	strb	r3, [r4, #0]

  /* Transform input a[n] from time domain to frequency domain A[k] */
  arm_cfft_radix4_f32(cfft_instance_ptr, Ak);
10001134:	69ba      	ldr	r2, [r7, #24]
10001136:	4b28      	ldr	r3, [pc, #160]	; (100011d8 <main+0x10c>)
10001138:	1c10      	adds	r0, r2, #0
1000113a:	1c19      	adds	r1, r3, #0
1000113c:	f001 fabc 	bl	100026b8 <arm_cfft_radix4_f32>
  /* Transform input b[n] from time domain to frequency domain B[k] */
  arm_cfft_radix4_f32(cfft_instance_ptr, Bk);
10001140:	69ba      	ldr	r2, [r7, #24]
10001142:	4b26      	ldr	r3, [pc, #152]	; (100011dc <main+0x110>)
10001144:	1c10      	adds	r0, r2, #0
10001146:	1c19      	adds	r1, r3, #0
10001148:	f001 fab6 	bl	100026b8 <arm_cfft_radix4_f32>

  /* Complex Multiplication of the two input buffers in frequency domain */
  arm_cmplx_mult_cmplx_f32(Ak, Bk, AxB, MAX_BLOCKSIZE/2);
1000114c:	4922      	ldr	r1, [pc, #136]	; (100011d8 <main+0x10c>)
1000114e:	4a23      	ldr	r2, [pc, #140]	; (100011dc <main+0x110>)
10001150:	4b25      	ldr	r3, [pc, #148]	; (100011e8 <main+0x11c>)
10001152:	1c08      	adds	r0, r1, #0
10001154:	1c11      	adds	r1, r2, #0
10001156:	1c1a      	adds	r2, r3, #0
10001158:	2340      	movs	r3, #64	; 0x40
1000115a:	f001 fb65 	bl	10002828 <arm_cmplx_mult_cmplx_f32>

  /* Initialize the CIFFT function to compute 64 point ifft */
  status = arm_cfft_radix4_init_f32(cfft_instance_ptr, 64, 1, 1);
1000115e:	1c3c      	adds	r4, r7, #0
10001160:	341f      	adds	r4, #31
10001162:	69bb      	ldr	r3, [r7, #24]
10001164:	1c18      	adds	r0, r3, #0
10001166:	2140      	movs	r1, #64	; 0x40
10001168:	2201      	movs	r2, #1
1000116a:	2301      	movs	r3, #1
1000116c:	f001 fac8 	bl	10002700 <arm_cfft_radix4_init_f32>
10001170:	1c03      	adds	r3, r0, #0
10001172:	7023      	strb	r3, [r4, #0]

  /* Transform the multiplication output from frequency domain to time domain,
     that gives the convolved output  */
  arm_cfft_radix4_f32(cfft_instance_ptr, AxB);
10001174:	69ba      	ldr	r2, [r7, #24]
10001176:	4b1c      	ldr	r3, [pc, #112]	; (100011e8 <main+0x11c>)
10001178:	1c10      	adds	r0, r2, #0
1000117a:	1c19      	adds	r1, r3, #0
1000117c:	f001 fa9c 	bl	100026b8 <arm_cfft_radix4_f32>

  /* SNR Calculation */
  snr = arm_snr_f32((float32_t *)testRefOutput_f32, AxB, srcALen + srcBLen - 1);
10001180:	4b12      	ldr	r3, [pc, #72]	; (100011cc <main+0x100>)
10001182:	681a      	ldr	r2, [r3, #0]
10001184:	4b12      	ldr	r3, [pc, #72]	; (100011d0 <main+0x104>)
10001186:	681b      	ldr	r3, [r3, #0]
10001188:	18d3      	adds	r3, r2, r3
1000118a:	3b01      	subs	r3, #1
1000118c:	4917      	ldr	r1, [pc, #92]	; (100011ec <main+0x120>)
1000118e:	4a16      	ldr	r2, [pc, #88]	; (100011e8 <main+0x11c>)
10001190:	1c08      	adds	r0, r1, #0
10001192:	1c11      	adds	r1, r2, #0
10001194:	1c1a      	adds	r2, r3, #0
10001196:	f000 f89b 	bl	100012d0 <arm_snr_f32>
1000119a:	1c02      	adds	r2, r0, #0
1000119c:	4b14      	ldr	r3, [pc, #80]	; (100011f0 <main+0x124>)
1000119e:	601a      	str	r2, [r3, #0]

  /* Compare the SNR with threshold to test whether the
     computed output is matched with the reference output values. */
  if( snr > SNR_THRESHOLD)
100011a0:	4b13      	ldr	r3, [pc, #76]	; (100011f0 <main+0x124>)
100011a2:	681b      	ldr	r3, [r3, #0]
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	4913      	ldr	r1, [pc, #76]	; (100011f4 <main+0x128>)
100011a8:	f002 fa2e 	bl	10003608 <__aeabi_fcmpgt>
100011ac:	1c03      	adds	r3, r0, #0
100011ae:	2b00      	cmp	r3, #0
100011b0:	d003      	beq.n	100011ba <main+0xee>
  {
    status = ARM_MATH_SUCCESS;
100011b2:	1c3b      	adds	r3, r7, #0
100011b4:	331f      	adds	r3, #31
100011b6:	2200      	movs	r2, #0
100011b8:	701a      	strb	r2, [r3, #0]
  }

  if( status != ARM_MATH_SUCCESS)
100011ba:	1c3b      	adds	r3, r7, #0
100011bc:	331f      	adds	r3, #31
100011be:	781b      	ldrb	r3, [r3, #0]
100011c0:	b25b      	sxtb	r3, r3
100011c2:	2b00      	cmp	r3, #0
100011c4:	d000      	beq.n	100011c8 <main+0xfc>
  {
    while(1);
100011c6:	e7fe      	b.n	100011c6 <main+0xfa>
  }

  while(1);                             /* main function does not return */
100011c8:	e7fe      	b.n	100011c8 <main+0xfc>
100011ca:	46c0      	nop			; (mov r8, r8)
100011cc:	20001360 	.word	0x20001360
100011d0:	20001364 	.word	0x20001364
100011d4:	20000d50 	.word	0x20000d50
100011d8:	20000950 	.word	0x20000950
100011dc:	20000b50 	.word	0x20000b50
100011e0:	20001160 	.word	0x20001160
100011e4:	20001260 	.word	0x20001260
100011e8:	20000d54 	.word	0x20000d54
100011ec:	10006318 	.word	0x10006318
100011f0:	20001154 	.word	0x20001154
100011f4:	42b40000 	.word	0x42b40000

100011f8 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
100011f8:	e7fe      	b.n	100011f8 <NMI_Handler>

100011fa <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
100011fa:	e7fe      	b.n	100011fa <HardFault_Handler>

100011fc <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
100011fc:	e7fe      	b.n	100011fc <SVC_Handler>

100011fe <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
100011fe:	e7fe      	b.n	100011fe <PendSV_Handler>

10001200 <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
10001200:	e7fe      	b.n	10001200 <SysTick_Handler>

10001202 <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
10001202:	e7fe      	b.n	10001202 <SCU_0_IRQHandler>

10001204 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
10001204:	e7fe      	b.n	10001204 <SCU_1_IRQHandler>

10001206 <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
10001206:	e7fe      	b.n	10001206 <SCU_2_IRQHandler>

10001208 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
10001208:	e7fe      	b.n	10001208 <ERU0_0_IRQHandler>

1000120a <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
1000120a:	e7fe      	b.n	1000120a <ERU0_1_IRQHandler>

1000120c <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
1000120c:	e7fe      	b.n	1000120c <ERU0_2_IRQHandler>

1000120e <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
1000120e:	e7fe      	b.n	1000120e <ERU0_3_IRQHandler>

10001210 <MATH0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler MATH0_0_IRQHandler
10001210:	e7fe      	b.n	10001210 <MATH0_0_IRQHandler>

10001212 <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
10001212:	e7fe      	b.n	10001212 <VADC0_C0_0_IRQHandler>

10001214 <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
10001214:	e7fe      	b.n	10001214 <VADC0_C0_1_IRQHandler>

10001216 <VADC0_G0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_0_IRQHandler
10001216:	e7fe      	b.n	10001216 <VADC0_G0_0_IRQHandler>

10001218 <VADC0_G0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G0_1_IRQHandler
10001218:	e7fe      	b.n	10001218 <VADC0_G0_1_IRQHandler>

1000121a <VADC0_G1_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_0_IRQHandler
1000121a:	e7fe      	b.n	1000121a <VADC0_G1_0_IRQHandler>

1000121c <VADC0_G1_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_G1_1_IRQHandler
1000121c:	e7fe      	b.n	1000121c <VADC0_G1_1_IRQHandler>

1000121e <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
1000121e:	e7fe      	b.n	1000121e <CCU40_0_IRQHandler>

10001220 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
10001220:	e7fe      	b.n	10001220 <CCU40_1_IRQHandler>

10001222 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
10001222:	e7fe      	b.n	10001222 <CCU40_2_IRQHandler>

10001224 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
10001224:	e7fe      	b.n	10001224 <CCU40_3_IRQHandler>

10001226 <CCU80_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_0_IRQHandler
10001226:	e7fe      	b.n	10001226 <CCU80_0_IRQHandler>

10001228 <CCU80_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU80_1_IRQHandler
10001228:	e7fe      	b.n	10001228 <CCU80_1_IRQHandler>

1000122a <POSIF0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_0_IRQHandler
1000122a:	e7fe      	b.n	1000122a <POSIF0_0_IRQHandler>

1000122c <POSIF0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler POSIF0_1_IRQHandler
1000122c:	e7fe      	b.n	1000122c <POSIF0_1_IRQHandler>

1000122e <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
1000122e:	e7fe      	b.n	1000122e <USIC0_0_IRQHandler>

10001230 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
10001230:	e7fe      	b.n	10001230 <USIC0_1_IRQHandler>

10001232 <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
10001232:	e7fe      	b.n	10001232 <USIC0_2_IRQHandler>

10001234 <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
10001234:	e7fe      	b.n	10001234 <USIC0_3_IRQHandler>

10001236 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
10001236:	e7fe      	b.n	10001236 <USIC0_4_IRQHandler>

10001238 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
10001238:	e7fe      	b.n	10001238 <USIC0_5_IRQHandler>

1000123a <BCCU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler BCCU0_0_IRQHandler
1000123a:	e7fe      	b.n	1000123a <BCCU0_0_IRQHandler>

1000123c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
1000123c:	b580      	push	{r7, lr}
1000123e:	af00      	add	r7, sp, #0

  /*
   * Clock tree setup by CMSIS routines is allowed only in the absence of DAVE
   * Clock app.
   */ 
  if(AllowClkInitByStartup()){ 
10001240:	f7ff ff40 	bl	100010c4 <AllowClkInitByStartup>
   * MCLK    = DCO_DCLK
   * PCLK    = MCLK
   * RTC CLK = Standby clock
   */
  }
}
10001244:	46bd      	mov	sp, r7
10001246:	bd80      	pop	{r7, pc}

10001248 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10001248:	b580      	push	{r7, lr}
1000124a:	b086      	sub	sp, #24
1000124c:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV, CLKCR, Clock;

  CLKCR = SCU_CLK -> CLKCR;
1000124e:	4b1c      	ldr	r3, [pc, #112]	; (100012c0 <SystemCoreClockUpdate+0x78>)
10001250:	681b      	ldr	r3, [r3, #0]
10001252:	613b      	str	r3, [r7, #16]
  IDIV = (CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001254:	693a      	ldr	r2, [r7, #16]
10001256:	23ff      	movs	r3, #255	; 0xff
10001258:	021b      	lsls	r3, r3, #8
1000125a:	4013      	ands	r3, r2
1000125c:	0a1b      	lsrs	r3, r3, #8
1000125e:	60fb      	str	r3, [r7, #12]
  FDIV = (CLKCR & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001260:	693a      	ldr	r2, [r7, #16]
10001262:	23ff      	movs	r3, #255	; 0xff
10001264:	4013      	ands	r3, r2
10001266:	60bb      	str	r3, [r7, #8]
  
  if(IDIV)
10001268:	68fb      	ldr	r3, [r7, #12]
1000126a:	2b00      	cmp	r3, #0
1000126c:	d01f      	beq.n	100012ae <SystemCoreClockUpdate+0x66>
  {
    /* Divider is enabled and used */
    if(0 == FDIV)
1000126e:	68bb      	ldr	r3, [r7, #8]
10001270:	2b00      	cmp	r3, #0
10001272:	d106      	bne.n	10001282 <SystemCoreClockUpdate+0x3a>
     {
       /* No fractional divider, so MCLK = DCO_Clk / (2 * IDIV) */
       Clock = MCLK_MHZ / IDIV;
10001274:	4813      	ldr	r0, [pc, #76]	; (100012c4 <SystemCoreClockUpdate+0x7c>)
10001276:	68f9      	ldr	r1, [r7, #12]
10001278:	f002 f912 	bl	100034a0 <__aeabi_uidiv>
1000127c:	1c03      	adds	r3, r0, #0
1000127e:	617b      	str	r3, [r7, #20]
10001280:	e017      	b.n	100012b2 <SystemCoreClockUpdate+0x6a>
     }
    else
     {
       /* Both integer and fractional divider must be considered */
       /* 1. IDIV + FDIV/256 */
       Q_24_8 FDiv_IDiv_Sum = (IDIV << FRACBITS) + FDIV;  
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	021a      	lsls	r2, r3, #8
10001286:	68bb      	ldr	r3, [r7, #8]
10001288:	18d3      	adds	r3, r2, r3
1000128a:	607b      	str	r3, [r7, #4]

       /* 2. Fixed point division Q24.8 / Q9.8 = Q15.0 */
       Q_15_0 ClockVal = (DCO_DCLK_MULTIPLIER << FRACBITS)/ FDiv_IDiv_Sum;
1000128c:	687b      	ldr	r3, [r7, #4]
1000128e:	22fa      	movs	r2, #250	; 0xfa
10001290:	0610      	lsls	r0, r2, #24
10001292:	1c19      	adds	r1, r3, #0
10001294:	f002 f904 	bl	100034a0 <__aeabi_uidiv>
10001298:	1c03      	adds	r3, r0, #0
1000129a:	603b      	str	r3, [r7, #0]
       Clock = ((uint32_t)ClockVal) * KHZ_MULTIPLIER;
1000129c:	683b      	ldr	r3, [r7, #0]
1000129e:	22fa      	movs	r2, #250	; 0xfa
100012a0:	0092      	lsls	r2, r2, #2
100012a2:	4353      	muls	r3, r2
100012a4:	617b      	str	r3, [r7, #20]
       Clock = Clock >> DCO_DCLK_DIVIDER;
100012a6:	697b      	ldr	r3, [r7, #20]
100012a8:	0a5b      	lsrs	r3, r3, #9
100012aa:	617b      	str	r3, [r7, #20]
100012ac:	e001      	b.n	100012b2 <SystemCoreClockUpdate+0x6a>
     }
  }
  else
  {
    /* Divider bypassed. Simply divide DCO_DCLK by 2 */
    Clock = MCLK_MHZ;
100012ae:	4b05      	ldr	r3, [pc, #20]	; (100012c4 <SystemCoreClockUpdate+0x7c>)
100012b0:	617b      	str	r3, [r7, #20]
  }

  /* Finally with the math class over, update SystemCoreClock */
  SystemCoreClock = Clock;  
100012b2:	4b05      	ldr	r3, [pc, #20]	; (100012c8 <SystemCoreClockUpdate+0x80>)
100012b4:	697a      	ldr	r2, [r7, #20]
100012b6:	601a      	str	r2, [r3, #0]
}
100012b8:	46bd      	mov	sp, r7
100012ba:	b006      	add	sp, #24
100012bc:	bd80      	pop	{r7, pc}
100012be:	46c0      	nop			; (mov r8, r8)
100012c0:	40010300 	.word	0x40010300
100012c4:	01e84800 	.word	0x01e84800
100012c8:	20001158 	.word	0x20001158
100012cc:	00000000 	.word	0x00000000

100012d0 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output 
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
100012d0:	b590      	push	{r4, r7, lr}
100012d2:	b08b      	sub	sp, #44	; 0x2c
100012d4:	af00      	add	r7, sp, #0
100012d6:	60f8      	str	r0, [r7, #12]
100012d8:	60b9      	str	r1, [r7, #8]
100012da:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
100012dc:	2300      	movs	r3, #0
100012de:	627b      	str	r3, [r7, #36]	; 0x24
100012e0:	2300      	movs	r3, #0
100012e2:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
100012e4:	2300      	movs	r3, #0
100012e6:	623b      	str	r3, [r7, #32]
100012e8:	e05f      	b.n	100013aa <arm_snr_f32+0xda>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
100012ea:	6a3b      	ldr	r3, [r7, #32]
100012ec:	009b      	lsls	r3, r3, #2
100012ee:	68fa      	ldr	r2, [r7, #12]
100012f0:	18d3      	adds	r3, r2, r3
100012f2:	61fb      	str	r3, [r7, #28]
      temp =  *test;
100012f4:	69fb      	ldr	r3, [r7, #28]
100012f6:	681b      	ldr	r3, [r3, #0]
100012f8:	61bb      	str	r3, [r7, #24]

	  if(temp == 0x7FC00000)
100012fa:	69ba      	ldr	r2, [r7, #24]
100012fc:	4b48      	ldr	r3, [pc, #288]	; (10001420 <arm_snr_f32+0x150>)
100012fe:	429a      	cmp	r2, r3
10001300:	d101      	bne.n	10001306 <arm_snr_f32+0x36>
	  {
	  		return(0);
10001302:	2300      	movs	r3, #0
10001304:	e081      	b.n	1000140a <arm_snr_f32+0x13a>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
10001306:	6a3b      	ldr	r3, [r7, #32]
10001308:	009b      	lsls	r3, r3, #2
1000130a:	68ba      	ldr	r2, [r7, #8]
1000130c:	18d3      	adds	r3, r2, r3
1000130e:	61fb      	str	r3, [r7, #28]
      temp =  *test;
10001310:	69fb      	ldr	r3, [r7, #28]
10001312:	681b      	ldr	r3, [r3, #0]
10001314:	61bb      	str	r3, [r7, #24]

	  if(temp == 0x7FC00000)
10001316:	69ba      	ldr	r2, [r7, #24]
10001318:	4b41      	ldr	r3, [pc, #260]	; (10001420 <arm_snr_f32+0x150>)
1000131a:	429a      	cmp	r2, r3
1000131c:	d101      	bne.n	10001322 <arm_snr_f32+0x52>
	  {
	  		return(0);
1000131e:	2300      	movs	r3, #0
10001320:	e073      	b.n	1000140a <arm_snr_f32+0x13a>
	  }
      EnergySignal += pRef[i] * pRef[i];
10001322:	6a3b      	ldr	r3, [r7, #32]
10001324:	009b      	lsls	r3, r3, #2
10001326:	68fa      	ldr	r2, [r7, #12]
10001328:	18d3      	adds	r3, r2, r3
1000132a:	681a      	ldr	r2, [r3, #0]
1000132c:	6a3b      	ldr	r3, [r7, #32]
1000132e:	009b      	lsls	r3, r3, #2
10001330:	68f9      	ldr	r1, [r7, #12]
10001332:	18cb      	adds	r3, r1, r3
10001334:	681b      	ldr	r3, [r3, #0]
10001336:	1c10      	adds	r0, r2, #0
10001338:	1c19      	adds	r1, r3, #0
1000133a:	f002 fd41 	bl	10003dc0 <__aeabi_fmul>
1000133e:	1c03      	adds	r3, r0, #0
10001340:	6a78      	ldr	r0, [r7, #36]	; 0x24
10001342:	1c19      	adds	r1, r3, #0
10001344:	f002 f974 	bl	10003630 <__aeabi_fadd>
10001348:	1c03      	adds	r3, r0, #0
1000134a:	627b      	str	r3, [r7, #36]	; 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
1000134c:	6a3b      	ldr	r3, [r7, #32]
1000134e:	009b      	lsls	r3, r3, #2
10001350:	68fa      	ldr	r2, [r7, #12]
10001352:	18d3      	adds	r3, r2, r3
10001354:	681a      	ldr	r2, [r3, #0]
10001356:	6a3b      	ldr	r3, [r7, #32]
10001358:	009b      	lsls	r3, r3, #2
1000135a:	68b9      	ldr	r1, [r7, #8]
1000135c:	18cb      	adds	r3, r1, r3
1000135e:	681b      	ldr	r3, [r3, #0]
10001360:	1c10      	adds	r0, r2, #0
10001362:	1c19      	adds	r1, r3, #0
10001364:	f002 fe5c 	bl	10004020 <__aeabi_fsub>
10001368:	1c03      	adds	r3, r0, #0
1000136a:	1c1c      	adds	r4, r3, #0
1000136c:	6a3b      	ldr	r3, [r7, #32]
1000136e:	009b      	lsls	r3, r3, #2
10001370:	68fa      	ldr	r2, [r7, #12]
10001372:	18d3      	adds	r3, r2, r3
10001374:	681a      	ldr	r2, [r3, #0]
10001376:	6a3b      	ldr	r3, [r7, #32]
10001378:	009b      	lsls	r3, r3, #2
1000137a:	68b9      	ldr	r1, [r7, #8]
1000137c:	18cb      	adds	r3, r1, r3
1000137e:	681b      	ldr	r3, [r3, #0]
10001380:	1c10      	adds	r0, r2, #0
10001382:	1c19      	adds	r1, r3, #0
10001384:	f002 fe4c 	bl	10004020 <__aeabi_fsub>
10001388:	1c03      	adds	r3, r0, #0
1000138a:	1c20      	adds	r0, r4, #0
1000138c:	1c19      	adds	r1, r3, #0
1000138e:	f002 fd17 	bl	10003dc0 <__aeabi_fmul>
10001392:	1c03      	adds	r3, r0, #0
10001394:	1c1a      	adds	r2, r3, #0
10001396:	693b      	ldr	r3, [r7, #16]
10001398:	1c10      	adds	r0, r2, #0
1000139a:	1c19      	adds	r1, r3, #0
1000139c:	f002 f948 	bl	10003630 <__aeabi_fadd>
100013a0:	1c03      	adds	r3, r0, #0
100013a2:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
100013a4:	6a3b      	ldr	r3, [r7, #32]
100013a6:	3301      	adds	r3, #1
100013a8:	623b      	str	r3, [r7, #32]
100013aa:	6a3a      	ldr	r2, [r7, #32]
100013ac:	687b      	ldr	r3, [r7, #4]
100013ae:	429a      	cmp	r2, r3
100013b0:	d39b      	bcc.n	100012ea <arm_snr_f32+0x1a>
      EnergySignal += pRef[i] * pRef[i];
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
100013b2:	1c3b      	adds	r3, r7, #0
100013b4:	3310      	adds	r3, #16
100013b6:	61fb      	str	r3, [r7, #28]
    temp =  *test;
100013b8:	69fb      	ldr	r3, [r7, #28]
100013ba:	681b      	ldr	r3, [r3, #0]
100013bc:	61bb      	str	r3, [r7, #24]

    if(temp == 0x7FC00000)
100013be:	69ba      	ldr	r2, [r7, #24]
100013c0:	4b17      	ldr	r3, [pc, #92]	; (10001420 <arm_snr_f32+0x150>)
100013c2:	429a      	cmp	r2, r3
100013c4:	d101      	bne.n	100013ca <arm_snr_f32+0xfa>
    {
  		return(0);
100013c6:	2300      	movs	r3, #0
100013c8:	e01f      	b.n	1000140a <arm_snr_f32+0x13a>
    }
	

  SNR = 10 * log10 (EnergySignal / EnergyError);
100013ca:	693b      	ldr	r3, [r7, #16]
100013cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
100013ce:	1c19      	adds	r1, r3, #0
100013d0:	f002 fb04 	bl	100039dc <__aeabi_fdiv>
100013d4:	1c03      	adds	r3, r0, #0
100013d6:	1c18      	adds	r0, r3, #0
100013d8:	f004 fe7c 	bl	100060d4 <__aeabi_f2d>
100013dc:	1c03      	adds	r3, r0, #0
100013de:	1c0c      	adds	r4, r1, #0
100013e0:	1c18      	adds	r0, r3, #0
100013e2:	1c21      	adds	r1, r4, #0
100013e4:	f001 fce8 	bl	10002db8 <log10>
100013e8:	1c03      	adds	r3, r0, #0
100013ea:	1c0c      	adds	r4, r1, #0
100013ec:	1c18      	adds	r0, r3, #0
100013ee:	1c21      	adds	r1, r4, #0
100013f0:	4b0a      	ldr	r3, [pc, #40]	; (1000141c <arm_snr_f32+0x14c>)
100013f2:	4a09      	ldr	r2, [pc, #36]	; (10001418 <arm_snr_f32+0x148>)
100013f4:	f004 f80c 	bl	10005410 <__aeabi_dmul>
100013f8:	1c03      	adds	r3, r0, #0
100013fa:	1c0c      	adds	r4, r1, #0
100013fc:	1c18      	adds	r0, r3, #0
100013fe:	1c21      	adds	r1, r4, #0
10001400:	f004 febc 	bl	1000617c <__aeabi_d2f>
10001404:	1c03      	adds	r3, r0, #0
10001406:	617b      	str	r3, [r7, #20]

  return (SNR);
10001408:	697b      	ldr	r3, [r7, #20]

}
1000140a:	1c18      	adds	r0, r3, #0
1000140c:	46bd      	mov	sp, r7
1000140e:	b00b      	add	sp, #44	; 0x2c
10001410:	bd90      	pop	{r4, r7, pc}
10001412:	46c0      	nop			; (mov r8, r8)
10001414:	46c0      	nop			; (mov r8, r8)
10001416:	46c0      	nop			; (mov r8, r8)
10001418:	00000000 	.word	0x00000000
1000141c:	40240000 	.word	0x40240000
10001420:	7fc00000 	.word	0x7fc00000
10001424:	46c0      	nop			; (mov r8, r8)
10001426:	46c0      	nop			; (mov r8, r8)

10001428 <arm_provide_guard_bits_q15>:
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
10001428:	b580      	push	{r7, lr}
1000142a:	b086      	sub	sp, #24
1000142c:	af00      	add	r7, sp, #0
1000142e:	60f8      	str	r0, [r7, #12]
10001430:	60b9      	str	r1, [r7, #8]
10001432:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001434:	2300      	movs	r3, #0
10001436:	617b      	str	r3, [r7, #20]
10001438:	e012      	b.n	10001460 <arm_provide_guard_bits_q15+0x38>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
1000143a:	697b      	ldr	r3, [r7, #20]
1000143c:	005b      	lsls	r3, r3, #1
1000143e:	68fa      	ldr	r2, [r7, #12]
10001440:	18d3      	adds	r3, r2, r3
10001442:	697a      	ldr	r2, [r7, #20]
10001444:	0052      	lsls	r2, r2, #1
10001446:	68f9      	ldr	r1, [r7, #12]
10001448:	188a      	adds	r2, r1, r2
1000144a:	8812      	ldrh	r2, [r2, #0]
1000144c:	b211      	sxth	r1, r2
1000144e:	687a      	ldr	r2, [r7, #4]
10001450:	1c08      	adds	r0, r1, #0
10001452:	4110      	asrs	r0, r2
10001454:	1c02      	adds	r2, r0, #0
10001456:	b292      	uxth	r2, r2
10001458:	801a      	strh	r2, [r3, #0]
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
1000145a:	697b      	ldr	r3, [r7, #20]
1000145c:	3301      	adds	r3, #1
1000145e:	617b      	str	r3, [r7, #20]
10001460:	697a      	ldr	r2, [r7, #20]
10001462:	68bb      	ldr	r3, [r7, #8]
10001464:	429a      	cmp	r2, r3
10001466:	d3e8      	bcc.n	1000143a <arm_provide_guard_bits_q15+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
10001468:	46bd      	mov	sp, r7
1000146a:	b006      	add	sp, #24
1000146c:	bd80      	pop	{r7, pc}
1000146e:	46c0      	nop			; (mov r8, r8)

10001470 <arm_float_to_q12_20>:
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
10001470:	b5f0      	push	{r4, r5, r6, r7, lr}
10001472:	4647      	mov	r7, r8
10001474:	b480      	push	{r7}
10001476:	b086      	sub	sp, #24
10001478:	af00      	add	r7, sp, #0
1000147a:	60f8      	str	r0, [r7, #12]
1000147c:	60b9      	str	r1, [r7, #8]
1000147e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001480:	2300      	movs	r3, #0
10001482:	617b      	str	r3, [r7, #20]
10001484:	e058      	b.n	10001538 <arm_float_to_q12_20+0xc8>
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
10001486:	697b      	ldr	r3, [r7, #20]
10001488:	009b      	lsls	r3, r3, #2
1000148a:	68ba      	ldr	r2, [r7, #8]
1000148c:	18d4      	adds	r4, r2, r3
1000148e:	697b      	ldr	r3, [r7, #20]
10001490:	009b      	lsls	r3, r3, #2
10001492:	68fa      	ldr	r2, [r7, #12]
10001494:	18d3      	adds	r3, r2, r3
10001496:	681b      	ldr	r3, [r3, #0]
10001498:	1c18      	adds	r0, r3, #0
1000149a:	2193      	movs	r1, #147	; 0x93
1000149c:	05c9      	lsls	r1, r1, #23
1000149e:	f002 fc8f 	bl	10003dc0 <__aeabi_fmul>
100014a2:	1c03      	adds	r3, r0, #0
100014a4:	1c18      	adds	r0, r3, #0
100014a6:	f002 ff95 	bl	100043d4 <__aeabi_f2iz>
100014aa:	1c03      	adds	r3, r0, #0
100014ac:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100014ae:	697b      	ldr	r3, [r7, #20]
100014b0:	009b      	lsls	r3, r3, #2
100014b2:	68ba      	ldr	r2, [r7, #8]
100014b4:	18d2      	adds	r2, r2, r3
100014b6:	4690      	mov	r8, r2
100014b8:	697b      	ldr	r3, [r7, #20]
100014ba:	009b      	lsls	r3, r3, #2
100014bc:	68ba      	ldr	r2, [r7, #8]
100014be:	18d3      	adds	r3, r2, r3
100014c0:	681b      	ldr	r3, [r3, #0]
100014c2:	1c18      	adds	r0, r3, #0
100014c4:	f004 fdcc 	bl	10006060 <__aeabi_i2d>
100014c8:	1c05      	adds	r5, r0, #0
100014ca:	1c0e      	adds	r6, r1, #0
100014cc:	697b      	ldr	r3, [r7, #20]
100014ce:	009b      	lsls	r3, r3, #2
100014d0:	68fa      	ldr	r2, [r7, #12]
100014d2:	18d3      	adds	r3, r2, r3
100014d4:	681b      	ldr	r3, [r3, #0]
100014d6:	1c18      	adds	r0, r3, #0
100014d8:	2100      	movs	r1, #0
100014da:	f002 f895 	bl	10003608 <__aeabi_fcmpgt>
100014de:	1c03      	adds	r3, r0, #0
100014e0:	2b00      	cmp	r3, #0
100014e2:	d002      	beq.n	100014ea <arm_float_to_q12_20+0x7a>
100014e4:	4c1b      	ldr	r4, [pc, #108]	; (10001554 <arm_float_to_q12_20+0xe4>)
100014e6:	4b1a      	ldr	r3, [pc, #104]	; (10001550 <arm_float_to_q12_20+0xe0>)
100014e8:	e001      	b.n	100014ee <arm_float_to_q12_20+0x7e>
100014ea:	4b1b      	ldr	r3, [pc, #108]	; (10001558 <arm_float_to_q12_20+0xe8>)
100014ec:	4c1b      	ldr	r4, [pc, #108]	; (1000155c <arm_float_to_q12_20+0xec>)
100014ee:	1c28      	adds	r0, r5, #0
100014f0:	1c31      	adds	r1, r6, #0
100014f2:	1c1a      	adds	r2, r3, #0
100014f4:	1c23      	adds	r3, r4, #0
100014f6:	f002 ffe1 	bl	100044bc <__aeabi_dadd>
100014fa:	1c03      	adds	r3, r0, #0
100014fc:	1c0c      	adds	r4, r1, #0
100014fe:	1c18      	adds	r0, r3, #0
10001500:	1c21      	adds	r1, r4, #0
10001502:	f004 fd79 	bl	10005ff8 <__aeabi_d2iz>
10001506:	1c03      	adds	r3, r0, #0
10001508:	4642      	mov	r2, r8
1000150a:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 1.0)
1000150c:	697b      	ldr	r3, [r7, #20]
1000150e:	009b      	lsls	r3, r3, #2
10001510:	68fa      	ldr	r2, [r7, #12]
10001512:	18d3      	adds	r3, r2, r3
10001514:	681b      	ldr	r3, [r3, #0]
10001516:	1c18      	adds	r0, r3, #0
10001518:	21fe      	movs	r1, #254	; 0xfe
1000151a:	0589      	lsls	r1, r1, #22
1000151c:	f002 f85a 	bl	100035d4 <__aeabi_fcmpeq>
10001520:	1c03      	adds	r3, r0, #0
10001522:	2b00      	cmp	r3, #0
10001524:	d005      	beq.n	10001532 <arm_float_to_q12_20+0xc2>
        {
          pOut[i] = 0x000FFFFF;
10001526:	697b      	ldr	r3, [r7, #20]
10001528:	009b      	lsls	r3, r3, #2
1000152a:	68ba      	ldr	r2, [r7, #8]
1000152c:	18d3      	adds	r3, r2, r3
1000152e:	4a0c      	ldr	r2, [pc, #48]	; (10001560 <arm_float_to_q12_20+0xf0>)
10001530:	601a      	str	r2, [r3, #0]

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001532:	697b      	ldr	r3, [r7, #20]
10001534:	3301      	adds	r3, #1
10001536:	617b      	str	r3, [r7, #20]
10001538:	697a      	ldr	r2, [r7, #20]
1000153a:	687b      	ldr	r3, [r7, #4]
1000153c:	429a      	cmp	r2, r3
1000153e:	d3a2      	bcc.n	10001486 <arm_float_to_q12_20+0x16>
      if (pIn[i] == (float) 1.0)
        {
          pOut[i] = 0x000FFFFF;
        }
    }
}
10001540:	46bd      	mov	sp, r7
10001542:	b006      	add	sp, #24
10001544:	bc04      	pop	{r2}
10001546:	4690      	mov	r8, r2
10001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000154a:	46c0      	nop			; (mov r8, r8)
1000154c:	46c0      	nop			; (mov r8, r8)
1000154e:	46c0      	nop			; (mov r8, r8)
10001550:	00000000 	.word	0x00000000
10001554:	3fe00000 	.word	0x3fe00000
10001558:	00000000 	.word	0x00000000
1000155c:	bfe00000 	.word	0xbfe00000
10001560:	000fffff 	.word	0x000fffff
10001564:	46c0      	nop			; (mov r8, r8)
10001566:	46c0      	nop			; (mov r8, r8)

10001568 <arm_compare_fixed_q15>:
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
{
10001568:	b580      	push	{r7, lr}
1000156a:	b088      	sub	sp, #32
1000156c:	af00      	add	r7, sp, #0
1000156e:	60f8      	str	r0, [r7, #12]
10001570:	60b9      	str	r1, [r7, #8]
10001572:	607a      	str	r2, [r7, #4]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
10001574:	2300      	movs	r3, #0
10001576:	617b      	str	r3, [r7, #20]
  uint32_t maxDiff = 0;
10001578:	2300      	movs	r3, #0
1000157a:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < numSamples; i++)
1000157c:	2300      	movs	r3, #0
1000157e:	61fb      	str	r3, [r7, #28]
10001580:	e01b      	b.n	100015ba <arm_compare_fixed_q15+0x52>
  {
  	diff = pIn[i] - pOut[i];
10001582:	69fb      	ldr	r3, [r7, #28]
10001584:	005b      	lsls	r3, r3, #1
10001586:	68fa      	ldr	r2, [r7, #12]
10001588:	18d3      	adds	r3, r2, r3
1000158a:	881b      	ldrh	r3, [r3, #0]
1000158c:	b21a      	sxth	r2, r3
1000158e:	69fb      	ldr	r3, [r7, #28]
10001590:	005b      	lsls	r3, r3, #1
10001592:	68b9      	ldr	r1, [r7, #8]
10001594:	18cb      	adds	r3, r1, r3
10001596:	881b      	ldrh	r3, [r3, #0]
10001598:	b21b      	sxth	r3, r3
1000159a:	1ad3      	subs	r3, r2, r3
1000159c:	613b      	str	r3, [r7, #16]
  	diffCrnt = (diff > 0) ? diff : -diff;
1000159e:	693b      	ldr	r3, [r7, #16]
100015a0:	17da      	asrs	r2, r3, #31
100015a2:	189b      	adds	r3, r3, r2
100015a4:	4053      	eors	r3, r2
100015a6:	617b      	str	r3, [r7, #20]

	if(diffCrnt > maxDiff)
100015a8:	697a      	ldr	r2, [r7, #20]
100015aa:	69bb      	ldr	r3, [r7, #24]
100015ac:	429a      	cmp	r2, r3
100015ae:	d901      	bls.n	100015b4 <arm_compare_fixed_q15+0x4c>
	{
		maxDiff = diffCrnt;
100015b0:	697b      	ldr	r3, [r7, #20]
100015b2:	61bb      	str	r3, [r7, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
100015b4:	69fb      	ldr	r3, [r7, #28]
100015b6:	3301      	adds	r3, #1
100015b8:	61fb      	str	r3, [r7, #28]
100015ba:	69fa      	ldr	r2, [r7, #28]
100015bc:	687b      	ldr	r3, [r7, #4]
100015be:	429a      	cmp	r2, r3
100015c0:	d3df      	bcc.n	10001582 <arm_compare_fixed_q15+0x1a>
	{
		maxDiff = diffCrnt;
	}	
  }

  return(maxDiff);
100015c2:	69bb      	ldr	r3, [r7, #24]
}
100015c4:	1c18      	adds	r0, r3, #0
100015c6:	46bd      	mov	sp, r7
100015c8:	b008      	add	sp, #32
100015ca:	bd80      	pop	{r7, pc}

100015cc <arm_compare_fixed_q31>:
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
{
100015cc:	b580      	push	{r7, lr}
100015ce:	b088      	sub	sp, #32
100015d0:	af00      	add	r7, sp, #0
100015d2:	60f8      	str	r0, [r7, #12]
100015d4:	60b9      	str	r1, [r7, #8]
100015d6:	607a      	str	r2, [r7, #4]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
100015d8:	2300      	movs	r3, #0
100015da:	617b      	str	r3, [r7, #20]
  uint32_t maxDiff = 0;
100015dc:	2300      	movs	r3, #0
100015de:	61bb      	str	r3, [r7, #24]

  for (i = 0; i < numSamples; i++)
100015e0:	2300      	movs	r3, #0
100015e2:	61fb      	str	r3, [r7, #28]
100015e4:	e019      	b.n	1000161a <arm_compare_fixed_q31+0x4e>
  {
  	diff = pIn[i] - pOut[i];
100015e6:	69fb      	ldr	r3, [r7, #28]
100015e8:	009b      	lsls	r3, r3, #2
100015ea:	68fa      	ldr	r2, [r7, #12]
100015ec:	18d3      	adds	r3, r2, r3
100015ee:	681a      	ldr	r2, [r3, #0]
100015f0:	69fb      	ldr	r3, [r7, #28]
100015f2:	009b      	lsls	r3, r3, #2
100015f4:	68b9      	ldr	r1, [r7, #8]
100015f6:	18cb      	adds	r3, r1, r3
100015f8:	681b      	ldr	r3, [r3, #0]
100015fa:	1ad3      	subs	r3, r2, r3
100015fc:	613b      	str	r3, [r7, #16]
  	diffCrnt = (diff > 0) ? diff : -diff;
100015fe:	693b      	ldr	r3, [r7, #16]
10001600:	17da      	asrs	r2, r3, #31
10001602:	189b      	adds	r3, r3, r2
10001604:	4053      	eors	r3, r2
10001606:	617b      	str	r3, [r7, #20]

	if(diffCrnt > maxDiff)
10001608:	697a      	ldr	r2, [r7, #20]
1000160a:	69bb      	ldr	r3, [r7, #24]
1000160c:	429a      	cmp	r2, r3
1000160e:	d901      	bls.n	10001614 <arm_compare_fixed_q31+0x48>
	{
		maxDiff = diffCrnt;
10001610:	697b      	ldr	r3, [r7, #20]
10001612:	61bb      	str	r3, [r7, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
10001614:	69fb      	ldr	r3, [r7, #28]
10001616:	3301      	adds	r3, #1
10001618:	61fb      	str	r3, [r7, #28]
1000161a:	69fa      	ldr	r2, [r7, #28]
1000161c:	687b      	ldr	r3, [r7, #4]
1000161e:	429a      	cmp	r2, r3
10001620:	d3e1      	bcc.n	100015e6 <arm_compare_fixed_q31+0x1a>
	{
		maxDiff = diffCrnt;
	}
  }

  return(maxDiff);
10001622:	69bb      	ldr	r3, [r7, #24]
}
10001624:	1c18      	adds	r0, r3, #0
10001626:	46bd      	mov	sp, r7
10001628:	b008      	add	sp, #32
1000162a:	bd80      	pop	{r7, pc}

1000162c <arm_provide_guard_bits_q31>:
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
1000162c:	b580      	push	{r7, lr}
1000162e:	b086      	sub	sp, #24
10001630:	af00      	add	r7, sp, #0
10001632:	60f8      	str	r0, [r7, #12]
10001634:	60b9      	str	r1, [r7, #8]
10001636:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
10001638:	2300      	movs	r3, #0
1000163a:	617b      	str	r3, [r7, #20]
1000163c:	e010      	b.n	10001660 <arm_provide_guard_bits_q31+0x34>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
1000163e:	697b      	ldr	r3, [r7, #20]
10001640:	009b      	lsls	r3, r3, #2
10001642:	68fa      	ldr	r2, [r7, #12]
10001644:	18d3      	adds	r3, r2, r3
10001646:	697a      	ldr	r2, [r7, #20]
10001648:	0092      	lsls	r2, r2, #2
1000164a:	68f9      	ldr	r1, [r7, #12]
1000164c:	188a      	adds	r2, r1, r2
1000164e:	6811      	ldr	r1, [r2, #0]
10001650:	687a      	ldr	r2, [r7, #4]
10001652:	1c08      	adds	r0, r1, #0
10001654:	4110      	asrs	r0, r2
10001656:	1c02      	adds	r2, r0, #0
10001658:	601a      	str	r2, [r3, #0]
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
1000165a:	697b      	ldr	r3, [r7, #20]
1000165c:	3301      	adds	r3, #1
1000165e:	617b      	str	r3, [r7, #20]
10001660:	697a      	ldr	r2, [r7, #20]
10001662:	68bb      	ldr	r3, [r7, #8]
10001664:	429a      	cmp	r2, r3
10001666:	d3ea      	bcc.n	1000163e <arm_provide_guard_bits_q31+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
10001668:	46bd      	mov	sp, r7
1000166a:	b006      	add	sp, #24
1000166c:	bd80      	pop	{r7, pc}
1000166e:	46c0      	nop			; (mov r8, r8)

10001670 <arm_provide_guard_bits_q7>:
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
								uint32_t blockSize,
                                uint32_t guard_bits)
{
10001670:	b580      	push	{r7, lr}
10001672:	b086      	sub	sp, #24
10001674:	af00      	add	r7, sp, #0
10001676:	60f8      	str	r0, [r7, #12]
10001678:	60b9      	str	r1, [r7, #8]
1000167a:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
1000167c:	2300      	movs	r3, #0
1000167e:	617b      	str	r3, [r7, #20]
10001680:	e010      	b.n	100016a4 <arm_provide_guard_bits_q7+0x34>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
10001682:	68fa      	ldr	r2, [r7, #12]
10001684:	697b      	ldr	r3, [r7, #20]
10001686:	18d3      	adds	r3, r2, r3
10001688:	68f9      	ldr	r1, [r7, #12]
1000168a:	697a      	ldr	r2, [r7, #20]
1000168c:	188a      	adds	r2, r1, r2
1000168e:	7812      	ldrb	r2, [r2, #0]
10001690:	b251      	sxtb	r1, r2
10001692:	687a      	ldr	r2, [r7, #4]
10001694:	1c08      	adds	r0, r1, #0
10001696:	4110      	asrs	r0, r2
10001698:	1c02      	adds	r2, r0, #0
1000169a:	b2d2      	uxtb	r2, r2
1000169c:	701a      	strb	r2, [r3, #0]
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
1000169e:	697b      	ldr	r3, [r7, #20]
100016a0:	3301      	adds	r3, #1
100016a2:	617b      	str	r3, [r7, #20]
100016a4:	697a      	ldr	r2, [r7, #20]
100016a6:	68bb      	ldr	r3, [r7, #8]
100016a8:	429a      	cmp	r2, r3
100016aa:	d3ea      	bcc.n	10001682 <arm_provide_guard_bits_q7+0x12>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
100016ac:	46bd      	mov	sp, r7
100016ae:	b006      	add	sp, #24
100016b0:	bd80      	pop	{r7, pc}
100016b2:	46c0      	nop			; (mov r8, r8)

100016b4 <arm_calc_guard_bits>:
 * The function Caluclates the number of guard bits  
 * depending on the numtaps 
 */

uint32_t arm_calc_guard_bits (uint32_t num_adds)
{
100016b4:	b580      	push	{r7, lr}
100016b6:	b084      	sub	sp, #16
100016b8:	af00      	add	r7, sp, #0
100016ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 1, j = 0;
100016bc:	2301      	movs	r3, #1
100016be:	60fb      	str	r3, [r7, #12]
100016c0:	2300      	movs	r3, #0
100016c2:	60bb      	str	r3, [r7, #8]

  if (num_adds == 1)
100016c4:	687b      	ldr	r3, [r7, #4]
100016c6:	2b01      	cmp	r3, #1
100016c8:	d107      	bne.n	100016da <arm_calc_guard_bits+0x26>
    {
      return (0);
100016ca:	2300      	movs	r3, #0
100016cc:	e00a      	b.n	100016e4 <arm_calc_guard_bits+0x30>
    }

  while (i < num_adds)
    {
      i = i * 2;
100016ce:	68fb      	ldr	r3, [r7, #12]
100016d0:	005b      	lsls	r3, r3, #1
100016d2:	60fb      	str	r3, [r7, #12]
      j++;
100016d4:	68bb      	ldr	r3, [r7, #8]
100016d6:	3301      	adds	r3, #1
100016d8:	60bb      	str	r3, [r7, #8]
  if (num_adds == 1)
    {
      return (0);
    }

  while (i < num_adds)
100016da:	68fa      	ldr	r2, [r7, #12]
100016dc:	687b      	ldr	r3, [r7, #4]
100016de:	429a      	cmp	r2, r3
100016e0:	d3f5      	bcc.n	100016ce <arm_calc_guard_bits+0x1a>
    {
      i = i * 2;
      j++;
    }

  return (j);
100016e2:	68bb      	ldr	r3, [r7, #8]
}
100016e4:	1c18      	adds	r0, r3, #0
100016e6:	46bd      	mov	sp, r7
100016e8:	b004      	add	sp, #16
100016ea:	bd80      	pop	{r7, pc}

100016ec <arm_apply_guard_bits>:
 */

void arm_apply_guard_bits (float32_t * pIn, 
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
100016ec:	b5b0      	push	{r4, r5, r7, lr}
100016ee:	b086      	sub	sp, #24
100016f0:	af00      	add	r7, sp, #0
100016f2:	60f8      	str	r0, [r7, #12]
100016f4:	60b9      	str	r1, [r7, #8]
100016f6:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
100016f8:	2300      	movs	r3, #0
100016fa:	617b      	str	r3, [r7, #20]
100016fc:	e01a      	b.n	10001734 <arm_apply_guard_bits+0x48>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
100016fe:	697b      	ldr	r3, [r7, #20]
10001700:	009b      	lsls	r3, r3, #2
10001702:	68fa      	ldr	r2, [r7, #12]
10001704:	18d4      	adds	r4, r2, r3
10001706:	697b      	ldr	r3, [r7, #20]
10001708:	009b      	lsls	r3, r3, #2
1000170a:	68fa      	ldr	r2, [r7, #12]
1000170c:	18d3      	adds	r3, r2, r3
1000170e:	681d      	ldr	r5, [r3, #0]
10001710:	687b      	ldr	r3, [r7, #4]
10001712:	1c18      	adds	r0, r3, #0
10001714:	f000 f816 	bl	10001744 <arm_calc_2pow>
10001718:	1c03      	adds	r3, r0, #0
1000171a:	1c18      	adds	r0, r3, #0
1000171c:	f002 fe7a 	bl	10004414 <__aeabi_ui2f>
10001720:	1c03      	adds	r3, r0, #0
10001722:	1c28      	adds	r0, r5, #0
10001724:	1c19      	adds	r1, r3, #0
10001726:	f002 fb4b 	bl	10003dc0 <__aeabi_fmul>
1000172a:	1c03      	adds	r3, r0, #0
1000172c:	6023      	str	r3, [r4, #0]
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
1000172e:	697b      	ldr	r3, [r7, #20]
10001730:	3301      	adds	r3, #1
10001732:	617b      	str	r3, [r7, #20]
10001734:	697a      	ldr	r2, [r7, #20]
10001736:	68bb      	ldr	r3, [r7, #8]
10001738:	429a      	cmp	r2, r3
1000173a:	d3e0      	bcc.n	100016fe <arm_apply_guard_bits+0x12>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
    }
}
1000173c:	46bd      	mov	sp, r7
1000173e:	b006      	add	sp, #24
10001740:	bdb0      	pop	{r4, r5, r7, pc}
10001742:	46c0      	nop			; (mov r8, r8)

10001744 <arm_calc_2pow>:
 * @brief  Calculates pow(2, numShifts)
 * @param  uint32_t 	number of shifts
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
{
10001744:	b580      	push	{r7, lr}
10001746:	b084      	sub	sp, #16
10001748:	af00      	add	r7, sp, #0
1000174a:	6078      	str	r0, [r7, #4]

  uint32_t i, val = 1;
1000174c:	2301      	movs	r3, #1
1000174e:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < numShifts; i++)
10001750:	2300      	movs	r3, #0
10001752:	60fb      	str	r3, [r7, #12]
10001754:	e005      	b.n	10001762 <arm_calc_2pow+0x1e>
    {
      val = val * 2;
10001756:	68bb      	ldr	r3, [r7, #8]
10001758:	005b      	lsls	r3, r3, #1
1000175a:	60bb      	str	r3, [r7, #8]
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
1000175c:	68fb      	ldr	r3, [r7, #12]
1000175e:	3301      	adds	r3, #1
10001760:	60fb      	str	r3, [r7, #12]
10001762:	68fa      	ldr	r2, [r7, #12]
10001764:	687b      	ldr	r3, [r7, #4]
10001766:	429a      	cmp	r2, r3
10001768:	d3f5      	bcc.n	10001756 <arm_calc_2pow+0x12>
    {
      val = val * 2;
    }	

  return(val);
1000176a:	68bb      	ldr	r3, [r7, #8]
}
1000176c:	1c18      	adds	r0, r3, #0
1000176e:	46bd      	mov	sp, r7
10001770:	b004      	add	sp, #16
10001772:	bd80      	pop	{r7, pc}
10001774:	0000      	movs	r0, r0
	...

10001778 <arm_float_to_q14>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
10001778:	b5f0      	push	{r4, r5, r6, r7, lr}
1000177a:	4647      	mov	r7, r8
1000177c:	b480      	push	{r7}
1000177e:	b086      	sub	sp, #24
10001780:	af00      	add	r7, sp, #0
10001782:	60f8      	str	r0, [r7, #12]
10001784:	60b9      	str	r1, [r7, #8]
10001786:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001788:	2300      	movs	r3, #0
1000178a:	617b      	str	r3, [r7, #20]
1000178c:	e05b      	b.n	10001846 <arm_float_to_q14+0xce>
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
1000178e:	697b      	ldr	r3, [r7, #20]
10001790:	005b      	lsls	r3, r3, #1
10001792:	68ba      	ldr	r2, [r7, #8]
10001794:	18d4      	adds	r4, r2, r3
10001796:	697b      	ldr	r3, [r7, #20]
10001798:	009b      	lsls	r3, r3, #2
1000179a:	68fa      	ldr	r2, [r7, #12]
1000179c:	18d3      	adds	r3, r2, r3
1000179e:	681b      	ldr	r3, [r3, #0]
100017a0:	1c18      	adds	r0, r3, #0
100017a2:	218d      	movs	r1, #141	; 0x8d
100017a4:	05c9      	lsls	r1, r1, #23
100017a6:	f002 fb0b 	bl	10003dc0 <__aeabi_fmul>
100017aa:	1c03      	adds	r3, r0, #0
100017ac:	1c18      	adds	r0, r3, #0
100017ae:	f002 fe11 	bl	100043d4 <__aeabi_f2iz>
100017b2:	1c03      	adds	r3, r0, #0
100017b4:	b29b      	uxth	r3, r3
100017b6:	8023      	strh	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100017b8:	697b      	ldr	r3, [r7, #20]
100017ba:	005b      	lsls	r3, r3, #1
100017bc:	68ba      	ldr	r2, [r7, #8]
100017be:	18d2      	adds	r2, r2, r3
100017c0:	4690      	mov	r8, r2
100017c2:	697b      	ldr	r3, [r7, #20]
100017c4:	005b      	lsls	r3, r3, #1
100017c6:	68ba      	ldr	r2, [r7, #8]
100017c8:	18d3      	adds	r3, r2, r3
100017ca:	881b      	ldrh	r3, [r3, #0]
100017cc:	b21b      	sxth	r3, r3
100017ce:	1c18      	adds	r0, r3, #0
100017d0:	f004 fc46 	bl	10006060 <__aeabi_i2d>
100017d4:	1c05      	adds	r5, r0, #0
100017d6:	1c0e      	adds	r6, r1, #0
100017d8:	697b      	ldr	r3, [r7, #20]
100017da:	009b      	lsls	r3, r3, #2
100017dc:	68fa      	ldr	r2, [r7, #12]
100017de:	18d3      	adds	r3, r2, r3
100017e0:	681b      	ldr	r3, [r3, #0]
100017e2:	1c18      	adds	r0, r3, #0
100017e4:	2100      	movs	r1, #0
100017e6:	f001 ff0f 	bl	10003608 <__aeabi_fcmpgt>
100017ea:	1c03      	adds	r3, r0, #0
100017ec:	2b00      	cmp	r3, #0
100017ee:	d002      	beq.n	100017f6 <arm_float_to_q14+0x7e>
100017f0:	4c1a      	ldr	r4, [pc, #104]	; (1000185c <arm_float_to_q14+0xe4>)
100017f2:	4b19      	ldr	r3, [pc, #100]	; (10001858 <arm_float_to_q14+0xe0>)
100017f4:	e001      	b.n	100017fa <arm_float_to_q14+0x82>
100017f6:	4b1a      	ldr	r3, [pc, #104]	; (10001860 <arm_float_to_q14+0xe8>)
100017f8:	4c1a      	ldr	r4, [pc, #104]	; (10001864 <arm_float_to_q14+0xec>)
100017fa:	1c28      	adds	r0, r5, #0
100017fc:	1c31      	adds	r1, r6, #0
100017fe:	1c1a      	adds	r2, r3, #0
10001800:	1c23      	adds	r3, r4, #0
10001802:	f002 fe5b 	bl	100044bc <__aeabi_dadd>
10001806:	1c03      	adds	r3, r0, #0
10001808:	1c0c      	adds	r4, r1, #0
1000180a:	1c18      	adds	r0, r3, #0
1000180c:	1c21      	adds	r1, r4, #0
1000180e:	f004 fbf3 	bl	10005ff8 <__aeabi_d2iz>
10001812:	1c03      	adds	r3, r0, #0
10001814:	b29b      	uxth	r3, r3
10001816:	4642      	mov	r2, r8
10001818:	8013      	strh	r3, [r2, #0]

      if (pIn[i] == (float) 2.0)
1000181a:	697b      	ldr	r3, [r7, #20]
1000181c:	009b      	lsls	r3, r3, #2
1000181e:	68fa      	ldr	r2, [r7, #12]
10001820:	18d3      	adds	r3, r2, r3
10001822:	681b      	ldr	r3, [r3, #0]
10001824:	1c18      	adds	r0, r3, #0
10001826:	2180      	movs	r1, #128	; 0x80
10001828:	05c9      	lsls	r1, r1, #23
1000182a:	f001 fed3 	bl	100035d4 <__aeabi_fcmpeq>
1000182e:	1c03      	adds	r3, r0, #0
10001830:	2b00      	cmp	r3, #0
10001832:	d005      	beq.n	10001840 <arm_float_to_q14+0xc8>
        {
          pOut[i] = 0x7FFF;
10001834:	697b      	ldr	r3, [r7, #20]
10001836:	005b      	lsls	r3, r3, #1
10001838:	68ba      	ldr	r2, [r7, #8]
1000183a:	18d3      	adds	r3, r2, r3
1000183c:	4a0a      	ldr	r2, [pc, #40]	; (10001868 <arm_float_to_q14+0xf0>)
1000183e:	801a      	strh	r2, [r3, #0]
void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001840:	697b      	ldr	r3, [r7, #20]
10001842:	3301      	adds	r3, #1
10001844:	617b      	str	r3, [r7, #20]
10001846:	697a      	ldr	r2, [r7, #20]
10001848:	687b      	ldr	r3, [r7, #4]
1000184a:	429a      	cmp	r2, r3
1000184c:	d39f      	bcc.n	1000178e <arm_float_to_q14+0x16>
          pOut[i] = 0x7FFF;
        }

    }

}
1000184e:	46bd      	mov	sp, r7
10001850:	b006      	add	sp, #24
10001852:	bc04      	pop	{r2}
10001854:	4690      	mov	r8, r2
10001856:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001858:	00000000 	.word	0x00000000
1000185c:	3fe00000 	.word	0x3fe00000
10001860:	00000000 	.word	0x00000000
10001864:	bfe00000 	.word	0xbfe00000
10001868:	00007fff 	.word	0x00007fff
1000186c:	46c0      	nop			; (mov r8, r8)
1000186e:	46c0      	nop			; (mov r8, r8)

10001870 <arm_float_to_q30>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
10001870:	b5f0      	push	{r4, r5, r6, r7, lr}
10001872:	4647      	mov	r7, r8
10001874:	b480      	push	{r7}
10001876:	b086      	sub	sp, #24
10001878:	af00      	add	r7, sp, #0
1000187a:	60f8      	str	r0, [r7, #12]
1000187c:	60b9      	str	r1, [r7, #8]
1000187e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001880:	2300      	movs	r3, #0
10001882:	617b      	str	r3, [r7, #20]
10001884:	e058      	b.n	10001938 <arm_float_to_q30+0xc8>
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
10001886:	697b      	ldr	r3, [r7, #20]
10001888:	009b      	lsls	r3, r3, #2
1000188a:	68ba      	ldr	r2, [r7, #8]
1000188c:	18d4      	adds	r4, r2, r3
1000188e:	697b      	ldr	r3, [r7, #20]
10001890:	009b      	lsls	r3, r3, #2
10001892:	68fa      	ldr	r2, [r7, #12]
10001894:	18d3      	adds	r3, r2, r3
10001896:	681b      	ldr	r3, [r3, #0]
10001898:	1c18      	adds	r0, r3, #0
1000189a:	219d      	movs	r1, #157	; 0x9d
1000189c:	05c9      	lsls	r1, r1, #23
1000189e:	f002 fa8f 	bl	10003dc0 <__aeabi_fmul>
100018a2:	1c03      	adds	r3, r0, #0
100018a4:	1c18      	adds	r0, r3, #0
100018a6:	f002 fd95 	bl	100043d4 <__aeabi_f2iz>
100018aa:	1c03      	adds	r3, r0, #0
100018ac:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100018ae:	697b      	ldr	r3, [r7, #20]
100018b0:	009b      	lsls	r3, r3, #2
100018b2:	68ba      	ldr	r2, [r7, #8]
100018b4:	18d2      	adds	r2, r2, r3
100018b6:	4690      	mov	r8, r2
100018b8:	697b      	ldr	r3, [r7, #20]
100018ba:	009b      	lsls	r3, r3, #2
100018bc:	68ba      	ldr	r2, [r7, #8]
100018be:	18d3      	adds	r3, r2, r3
100018c0:	681b      	ldr	r3, [r3, #0]
100018c2:	1c18      	adds	r0, r3, #0
100018c4:	f004 fbcc 	bl	10006060 <__aeabi_i2d>
100018c8:	1c05      	adds	r5, r0, #0
100018ca:	1c0e      	adds	r6, r1, #0
100018cc:	697b      	ldr	r3, [r7, #20]
100018ce:	009b      	lsls	r3, r3, #2
100018d0:	68fa      	ldr	r2, [r7, #12]
100018d2:	18d3      	adds	r3, r2, r3
100018d4:	681b      	ldr	r3, [r3, #0]
100018d6:	1c18      	adds	r0, r3, #0
100018d8:	2100      	movs	r1, #0
100018da:	f001 fe95 	bl	10003608 <__aeabi_fcmpgt>
100018de:	1c03      	adds	r3, r0, #0
100018e0:	2b00      	cmp	r3, #0
100018e2:	d002      	beq.n	100018ea <arm_float_to_q30+0x7a>
100018e4:	4c1b      	ldr	r4, [pc, #108]	; (10001954 <arm_float_to_q30+0xe4>)
100018e6:	4b1a      	ldr	r3, [pc, #104]	; (10001950 <arm_float_to_q30+0xe0>)
100018e8:	e001      	b.n	100018ee <arm_float_to_q30+0x7e>
100018ea:	4b1b      	ldr	r3, [pc, #108]	; (10001958 <arm_float_to_q30+0xe8>)
100018ec:	4c1b      	ldr	r4, [pc, #108]	; (1000195c <arm_float_to_q30+0xec>)
100018ee:	1c28      	adds	r0, r5, #0
100018f0:	1c31      	adds	r1, r6, #0
100018f2:	1c1a      	adds	r2, r3, #0
100018f4:	1c23      	adds	r3, r4, #0
100018f6:	f002 fde1 	bl	100044bc <__aeabi_dadd>
100018fa:	1c03      	adds	r3, r0, #0
100018fc:	1c0c      	adds	r4, r1, #0
100018fe:	1c18      	adds	r0, r3, #0
10001900:	1c21      	adds	r1, r4, #0
10001902:	f004 fb79 	bl	10005ff8 <__aeabi_d2iz>
10001906:	1c03      	adds	r3, r0, #0
10001908:	4642      	mov	r2, r8
1000190a:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 2.0)
1000190c:	697b      	ldr	r3, [r7, #20]
1000190e:	009b      	lsls	r3, r3, #2
10001910:	68fa      	ldr	r2, [r7, #12]
10001912:	18d3      	adds	r3, r2, r3
10001914:	681b      	ldr	r3, [r3, #0]
10001916:	1c18      	adds	r0, r3, #0
10001918:	2180      	movs	r1, #128	; 0x80
1000191a:	05c9      	lsls	r1, r1, #23
1000191c:	f001 fe5a 	bl	100035d4 <__aeabi_fcmpeq>
10001920:	1c03      	adds	r3, r0, #0
10001922:	2b00      	cmp	r3, #0
10001924:	d005      	beq.n	10001932 <arm_float_to_q30+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001926:	697b      	ldr	r3, [r7, #20]
10001928:	009b      	lsls	r3, r3, #2
1000192a:	68ba      	ldr	r2, [r7, #8]
1000192c:	18d3      	adds	r3, r2, r3
1000192e:	4a0c      	ldr	r2, [pc, #48]	; (10001960 <arm_float_to_q30+0xf0>)
10001930:	601a      	str	r2, [r3, #0]
void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001932:	697b      	ldr	r3, [r7, #20]
10001934:	3301      	adds	r3, #1
10001936:	617b      	str	r3, [r7, #20]
10001938:	697a      	ldr	r2, [r7, #20]
1000193a:	687b      	ldr	r3, [r7, #4]
1000193c:	429a      	cmp	r2, r3
1000193e:	d3a2      	bcc.n	10001886 <arm_float_to_q30+0x16>
      if (pIn[i] == (float) 2.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001940:	46bd      	mov	sp, r7
10001942:	b006      	add	sp, #24
10001944:	bc04      	pop	{r2}
10001946:	4690      	mov	r8, r2
10001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000194a:	46c0      	nop			; (mov r8, r8)
1000194c:	46c0      	nop			; (mov r8, r8)
1000194e:	46c0      	nop			; (mov r8, r8)
10001950:	00000000 	.word	0x00000000
10001954:	3fe00000 	.word	0x3fe00000
10001958:	00000000 	.word	0x00000000
1000195c:	bfe00000 	.word	0xbfe00000
10001960:	7fffffff 	.word	0x7fffffff
10001964:	46c0      	nop			; (mov r8, r8)
10001966:	46c0      	nop			; (mov r8, r8)

10001968 <arm_float_to_q29>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
10001968:	b5f0      	push	{r4, r5, r6, r7, lr}
1000196a:	4647      	mov	r7, r8
1000196c:	b480      	push	{r7}
1000196e:	b086      	sub	sp, #24
10001970:	af00      	add	r7, sp, #0
10001972:	60f8      	str	r0, [r7, #12]
10001974:	60b9      	str	r1, [r7, #8]
10001976:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001978:	2300      	movs	r3, #0
1000197a:	617b      	str	r3, [r7, #20]
1000197c:	e058      	b.n	10001a30 <arm_float_to_q29+0xc8>
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
1000197e:	697b      	ldr	r3, [r7, #20]
10001980:	009b      	lsls	r3, r3, #2
10001982:	68ba      	ldr	r2, [r7, #8]
10001984:	18d4      	adds	r4, r2, r3
10001986:	697b      	ldr	r3, [r7, #20]
10001988:	009b      	lsls	r3, r3, #2
1000198a:	68fa      	ldr	r2, [r7, #12]
1000198c:	18d3      	adds	r3, r2, r3
1000198e:	681b      	ldr	r3, [r3, #0]
10001990:	1c18      	adds	r0, r3, #0
10001992:	219c      	movs	r1, #156	; 0x9c
10001994:	05c9      	lsls	r1, r1, #23
10001996:	f002 fa13 	bl	10003dc0 <__aeabi_fmul>
1000199a:	1c03      	adds	r3, r0, #0
1000199c:	1c18      	adds	r0, r3, #0
1000199e:	f002 fd19 	bl	100043d4 <__aeabi_f2iz>
100019a2:	1c03      	adds	r3, r0, #0
100019a4:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
100019a6:	697b      	ldr	r3, [r7, #20]
100019a8:	009b      	lsls	r3, r3, #2
100019aa:	68ba      	ldr	r2, [r7, #8]
100019ac:	18d2      	adds	r2, r2, r3
100019ae:	4690      	mov	r8, r2
100019b0:	697b      	ldr	r3, [r7, #20]
100019b2:	009b      	lsls	r3, r3, #2
100019b4:	68ba      	ldr	r2, [r7, #8]
100019b6:	18d3      	adds	r3, r2, r3
100019b8:	681b      	ldr	r3, [r3, #0]
100019ba:	1c18      	adds	r0, r3, #0
100019bc:	f004 fb50 	bl	10006060 <__aeabi_i2d>
100019c0:	1c05      	adds	r5, r0, #0
100019c2:	1c0e      	adds	r6, r1, #0
100019c4:	697b      	ldr	r3, [r7, #20]
100019c6:	009b      	lsls	r3, r3, #2
100019c8:	68fa      	ldr	r2, [r7, #12]
100019ca:	18d3      	adds	r3, r2, r3
100019cc:	681b      	ldr	r3, [r3, #0]
100019ce:	1c18      	adds	r0, r3, #0
100019d0:	2100      	movs	r1, #0
100019d2:	f001 fe19 	bl	10003608 <__aeabi_fcmpgt>
100019d6:	1c03      	adds	r3, r0, #0
100019d8:	2b00      	cmp	r3, #0
100019da:	d002      	beq.n	100019e2 <arm_float_to_q29+0x7a>
100019dc:	4c1b      	ldr	r4, [pc, #108]	; (10001a4c <arm_float_to_q29+0xe4>)
100019de:	4b1a      	ldr	r3, [pc, #104]	; (10001a48 <arm_float_to_q29+0xe0>)
100019e0:	e001      	b.n	100019e6 <arm_float_to_q29+0x7e>
100019e2:	4b1b      	ldr	r3, [pc, #108]	; (10001a50 <arm_float_to_q29+0xe8>)
100019e4:	4c1b      	ldr	r4, [pc, #108]	; (10001a54 <arm_float_to_q29+0xec>)
100019e6:	1c28      	adds	r0, r5, #0
100019e8:	1c31      	adds	r1, r6, #0
100019ea:	1c1a      	adds	r2, r3, #0
100019ec:	1c23      	adds	r3, r4, #0
100019ee:	f002 fd65 	bl	100044bc <__aeabi_dadd>
100019f2:	1c03      	adds	r3, r0, #0
100019f4:	1c0c      	adds	r4, r1, #0
100019f6:	1c18      	adds	r0, r3, #0
100019f8:	1c21      	adds	r1, r4, #0
100019fa:	f004 fafd 	bl	10005ff8 <__aeabi_d2iz>
100019fe:	1c03      	adds	r3, r0, #0
10001a00:	4642      	mov	r2, r8
10001a02:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 4.0)
10001a04:	697b      	ldr	r3, [r7, #20]
10001a06:	009b      	lsls	r3, r3, #2
10001a08:	68fa      	ldr	r2, [r7, #12]
10001a0a:	18d3      	adds	r3, r2, r3
10001a0c:	681b      	ldr	r3, [r3, #0]
10001a0e:	1c18      	adds	r0, r3, #0
10001a10:	2181      	movs	r1, #129	; 0x81
10001a12:	05c9      	lsls	r1, r1, #23
10001a14:	f001 fdde 	bl	100035d4 <__aeabi_fcmpeq>
10001a18:	1c03      	adds	r3, r0, #0
10001a1a:	2b00      	cmp	r3, #0
10001a1c:	d005      	beq.n	10001a2a <arm_float_to_q29+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001a1e:	697b      	ldr	r3, [r7, #20]
10001a20:	009b      	lsls	r3, r3, #2
10001a22:	68ba      	ldr	r2, [r7, #8]
10001a24:	18d3      	adds	r3, r2, r3
10001a26:	4a0c      	ldr	r2, [pc, #48]	; (10001a58 <arm_float_to_q29+0xf0>)
10001a28:	601a      	str	r2, [r3, #0]
void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001a2a:	697b      	ldr	r3, [r7, #20]
10001a2c:	3301      	adds	r3, #1
10001a2e:	617b      	str	r3, [r7, #20]
10001a30:	697a      	ldr	r2, [r7, #20]
10001a32:	687b      	ldr	r3, [r7, #4]
10001a34:	429a      	cmp	r2, r3
10001a36:	d3a2      	bcc.n	1000197e <arm_float_to_q29+0x16>
      if (pIn[i] == (float) 4.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001a38:	46bd      	mov	sp, r7
10001a3a:	b006      	add	sp, #24
10001a3c:	bc04      	pop	{r2}
10001a3e:	4690      	mov	r8, r2
10001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001a42:	46c0      	nop			; (mov r8, r8)
10001a44:	46c0      	nop			; (mov r8, r8)
10001a46:	46c0      	nop			; (mov r8, r8)
10001a48:	00000000 	.word	0x00000000
10001a4c:	3fe00000 	.word	0x3fe00000
10001a50:	00000000 	.word	0x00000000
10001a54:	bfe00000 	.word	0xbfe00000
10001a58:	7fffffff 	.word	0x7fffffff
10001a5c:	46c0      	nop			; (mov r8, r8)
10001a5e:	46c0      	nop			; (mov r8, r8)

10001a60 <arm_float_to_q28>:
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
10001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a62:	4647      	mov	r7, r8
10001a64:	b480      	push	{r7}
10001a66:	b086      	sub	sp, #24
10001a68:	af00      	add	r7, sp, #0
10001a6a:	60f8      	str	r0, [r7, #12]
10001a6c:	60b9      	str	r1, [r7, #8]
10001a6e:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001a70:	2300      	movs	r3, #0
10001a72:	617b      	str	r3, [r7, #20]
10001a74:	e058      	b.n	10001b28 <arm_float_to_q28+0xc8>
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
10001a76:	697b      	ldr	r3, [r7, #20]
10001a78:	009b      	lsls	r3, r3, #2
10001a7a:	68ba      	ldr	r2, [r7, #8]
10001a7c:	18d4      	adds	r4, r2, r3
10001a7e:	697b      	ldr	r3, [r7, #20]
10001a80:	009b      	lsls	r3, r3, #2
10001a82:	68fa      	ldr	r2, [r7, #12]
10001a84:	18d3      	adds	r3, r2, r3
10001a86:	681b      	ldr	r3, [r3, #0]
10001a88:	1c18      	adds	r0, r3, #0
10001a8a:	219b      	movs	r1, #155	; 0x9b
10001a8c:	05c9      	lsls	r1, r1, #23
10001a8e:	f002 f997 	bl	10003dc0 <__aeabi_fmul>
10001a92:	1c03      	adds	r3, r0, #0
10001a94:	1c18      	adds	r0, r3, #0
10001a96:	f002 fc9d 	bl	100043d4 <__aeabi_f2iz>
10001a9a:	1c03      	adds	r3, r0, #0
10001a9c:	6023      	str	r3, [r4, #0]

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
10001a9e:	697b      	ldr	r3, [r7, #20]
10001aa0:	009b      	lsls	r3, r3, #2
10001aa2:	68ba      	ldr	r2, [r7, #8]
10001aa4:	18d2      	adds	r2, r2, r3
10001aa6:	4690      	mov	r8, r2
10001aa8:	697b      	ldr	r3, [r7, #20]
10001aaa:	009b      	lsls	r3, r3, #2
10001aac:	68ba      	ldr	r2, [r7, #8]
10001aae:	18d3      	adds	r3, r2, r3
10001ab0:	681b      	ldr	r3, [r3, #0]
10001ab2:	1c18      	adds	r0, r3, #0
10001ab4:	f004 fad4 	bl	10006060 <__aeabi_i2d>
10001ab8:	1c05      	adds	r5, r0, #0
10001aba:	1c0e      	adds	r6, r1, #0
10001abc:	697b      	ldr	r3, [r7, #20]
10001abe:	009b      	lsls	r3, r3, #2
10001ac0:	68fa      	ldr	r2, [r7, #12]
10001ac2:	18d3      	adds	r3, r2, r3
10001ac4:	681b      	ldr	r3, [r3, #0]
10001ac6:	1c18      	adds	r0, r3, #0
10001ac8:	2100      	movs	r1, #0
10001aca:	f001 fd9d 	bl	10003608 <__aeabi_fcmpgt>
10001ace:	1c03      	adds	r3, r0, #0
10001ad0:	2b00      	cmp	r3, #0
10001ad2:	d002      	beq.n	10001ada <arm_float_to_q28+0x7a>
10001ad4:	4c1b      	ldr	r4, [pc, #108]	; (10001b44 <arm_float_to_q28+0xe4>)
10001ad6:	4b1a      	ldr	r3, [pc, #104]	; (10001b40 <arm_float_to_q28+0xe0>)
10001ad8:	e001      	b.n	10001ade <arm_float_to_q28+0x7e>
10001ada:	4b1b      	ldr	r3, [pc, #108]	; (10001b48 <arm_float_to_q28+0xe8>)
10001adc:	4c1b      	ldr	r4, [pc, #108]	; (10001b4c <arm_float_to_q28+0xec>)
10001ade:	1c28      	adds	r0, r5, #0
10001ae0:	1c31      	adds	r1, r6, #0
10001ae2:	1c1a      	adds	r2, r3, #0
10001ae4:	1c23      	adds	r3, r4, #0
10001ae6:	f002 fce9 	bl	100044bc <__aeabi_dadd>
10001aea:	1c03      	adds	r3, r0, #0
10001aec:	1c0c      	adds	r4, r1, #0
10001aee:	1c18      	adds	r0, r3, #0
10001af0:	1c21      	adds	r1, r4, #0
10001af2:	f004 fa81 	bl	10005ff8 <__aeabi_d2iz>
10001af6:	1c03      	adds	r3, r0, #0
10001af8:	4642      	mov	r2, r8
10001afa:	6013      	str	r3, [r2, #0]

      if (pIn[i] == (float) 8.0)
10001afc:	697b      	ldr	r3, [r7, #20]
10001afe:	009b      	lsls	r3, r3, #2
10001b00:	68fa      	ldr	r2, [r7, #12]
10001b02:	18d3      	adds	r3, r2, r3
10001b04:	681b      	ldr	r3, [r3, #0]
10001b06:	1c18      	adds	r0, r3, #0
10001b08:	2182      	movs	r1, #130	; 0x82
10001b0a:	05c9      	lsls	r1, r1, #23
10001b0c:	f001 fd62 	bl	100035d4 <__aeabi_fcmpeq>
10001b10:	1c03      	adds	r3, r0, #0
10001b12:	2b00      	cmp	r3, #0
10001b14:	d005      	beq.n	10001b22 <arm_float_to_q28+0xc2>
        {
          pOut[i] = 0x7FFFFFFF;
10001b16:	697b      	ldr	r3, [r7, #20]
10001b18:	009b      	lsls	r3, r3, #2
10001b1a:	68ba      	ldr	r2, [r7, #8]
10001b1c:	18d3      	adds	r3, r2, r3
10001b1e:	4a0c      	ldr	r2, [pc, #48]	; (10001b50 <arm_float_to_q28+0xf0>)
10001b20:	601a      	str	r2, [r3, #0]
void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001b22:	697b      	ldr	r3, [r7, #20]
10001b24:	3301      	adds	r3, #1
10001b26:	617b      	str	r3, [r7, #20]
10001b28:	697a      	ldr	r2, [r7, #20]
10001b2a:	687b      	ldr	r3, [r7, #4]
10001b2c:	429a      	cmp	r2, r3
10001b2e:	d3a2      	bcc.n	10001a76 <arm_float_to_q28+0x16>
      if (pIn[i] == (float) 8.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
10001b30:	46bd      	mov	sp, r7
10001b32:	b006      	add	sp, #24
10001b34:	bc04      	pop	{r2}
10001b36:	4690      	mov	r8, r2
10001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001b3a:	46c0      	nop			; (mov r8, r8)
10001b3c:	46c0      	nop			; (mov r8, r8)
10001b3e:	46c0      	nop			; (mov r8, r8)
10001b40:	00000000 	.word	0x00000000
10001b44:	3fe00000 	.word	0x3fe00000
10001b48:	00000000 	.word	0x00000000
10001b4c:	bfe00000 	.word	0xbfe00000
10001b50:	7fffffff 	.word	0x7fffffff
10001b54:	46c0      	nop			; (mov r8, r8)
10001b56:	46c0      	nop			; (mov r8, r8)

10001b58 <arm_clip_f32>:
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
10001b58:	b580      	push	{r7, lr}
10001b5a:	b084      	sub	sp, #16
10001b5c:	af00      	add	r7, sp, #0
10001b5e:	6078      	str	r0, [r7, #4]
10001b60:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001b62:	2300      	movs	r3, #0
10001b64:	60fb      	str	r3, [r7, #12]
10001b66:	e029      	b.n	10001bbc <arm_clip_f32+0x64>
    {
      if(pIn[i] > 1.0f)
10001b68:	68fb      	ldr	r3, [r7, #12]
10001b6a:	009b      	lsls	r3, r3, #2
10001b6c:	687a      	ldr	r2, [r7, #4]
10001b6e:	18d3      	adds	r3, r2, r3
10001b70:	681b      	ldr	r3, [r3, #0]
10001b72:	1c18      	adds	r0, r3, #0
10001b74:	21fe      	movs	r1, #254	; 0xfe
10001b76:	0589      	lsls	r1, r1, #22
10001b78:	f001 fd46 	bl	10003608 <__aeabi_fcmpgt>
10001b7c:	1c03      	adds	r3, r0, #0
10001b7e:	2b00      	cmp	r3, #0
10001b80:	d007      	beq.n	10001b92 <arm_clip_f32+0x3a>
	  {
	    pIn[i] = 1.0;
10001b82:	68fb      	ldr	r3, [r7, #12]
10001b84:	009b      	lsls	r3, r3, #2
10001b86:	687a      	ldr	r2, [r7, #4]
10001b88:	18d3      	adds	r3, r2, r3
10001b8a:	22fe      	movs	r2, #254	; 0xfe
10001b8c:	0592      	lsls	r2, r2, #22
10001b8e:	601a      	str	r2, [r3, #0]
10001b90:	e011      	b.n	10001bb6 <arm_clip_f32+0x5e>
	  }
	  else if( pIn[i] < -1.0f)
10001b92:	68fb      	ldr	r3, [r7, #12]
10001b94:	009b      	lsls	r3, r3, #2
10001b96:	687a      	ldr	r2, [r7, #4]
10001b98:	18d3      	adds	r3, r2, r3
10001b9a:	681b      	ldr	r3, [r3, #0]
10001b9c:	1c18      	adds	r0, r3, #0
10001b9e:	490b      	ldr	r1, [pc, #44]	; (10001bcc <arm_clip_f32+0x74>)
10001ba0:	f001 fd1e 	bl	100035e0 <__aeabi_fcmplt>
10001ba4:	1c03      	adds	r3, r0, #0
10001ba6:	2b00      	cmp	r3, #0
10001ba8:	d005      	beq.n	10001bb6 <arm_clip_f32+0x5e>
	  {
	    pIn[i] = -1.0;
10001baa:	68fb      	ldr	r3, [r7, #12]
10001bac:	009b      	lsls	r3, r3, #2
10001bae:	687a      	ldr	r2, [r7, #4]
10001bb0:	18d3      	adds	r3, r2, r3
10001bb2:	4a06      	ldr	r2, [pc, #24]	; (10001bcc <arm_clip_f32+0x74>)
10001bb4:	601a      	str	r2, [r3, #0]

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
10001bb6:	68fb      	ldr	r3, [r7, #12]
10001bb8:	3301      	adds	r3, #1
10001bba:	60fb      	str	r3, [r7, #12]
10001bbc:	68fa      	ldr	r2, [r7, #12]
10001bbe:	683b      	ldr	r3, [r7, #0]
10001bc0:	429a      	cmp	r2, r3
10001bc2:	d3d1      	bcc.n	10001b68 <arm_clip_f32+0x10>
	  {
	    pIn[i] = -1.0;
	  }
	       
    }
}
10001bc4:	46bd      	mov	sp, r7
10001bc6:	b004      	add	sp, #16
10001bc8:	bd80      	pop	{r7, pc}
10001bca:	46c0      	nop			; (mov r8, r8)
10001bcc:	bf800000 	.word	0xbf800000

10001bd0 <arm_radix4_butterfly_f32>:
void arm_radix4_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier)
{
10001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10001bd2:	465f      	mov	r7, fp
10001bd4:	4656      	mov	r6, sl
10001bd6:	464d      	mov	r5, r9
10001bd8:	4644      	mov	r4, r8
10001bda:	b4f0      	push	{r4, r5, r6, r7}
10001bdc:	b0a5      	sub	sp, #148	; 0x94
10001bde:	9317      	str	r3, [sp, #92]	; 0x5c
10001be0:	9220      	str	r2, [sp, #128]	; 0x80
10001be2:	9114      	str	r1, [sp, #80]	; 0x50
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10001be4:	088a      	lsrs	r2, r1, #2
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001be6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10001be8:	9216      	str	r2, [sp, #88]	; 0x58
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001bea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10001bec:	00cc      	lsls	r4, r1, #3
10001bee:	9916      	ldr	r1, [sp, #88]	; 0x58
10001bf0:	0077      	lsls	r7, r6, #1
10001bf2:	011b      	lsls	r3, r3, #4
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10001bf4:	9213      	str	r2, [sp, #76]	; 0x4c
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001bf6:	9411      	str	r4, [sp, #68]	; 0x44
10001bf8:	19ba      	adds	r2, r7, r6
10001bfa:	00cc      	lsls	r4, r1, #3
10001bfc:	9916      	ldr	r1, [sp, #88]	; 0x58
10001bfe:	930f      	str	r3, [sp, #60]	; 0x3c
10001c00:	00d3      	lsls	r3, r2, #3
10001c02:	9a16      	ldr	r2, [sp, #88]	; 0x58
10001c04:	1907      	adds	r7, r0, r4
10001c06:	9412      	str	r4, [sp, #72]	; 0x48
10001c08:	004c      	lsls	r4, r1, #1
10001c0a:	1866      	adds	r6, r4, r1
10001c0c:	1c05      	adds	r5, r0, #0
10001c0e:	9310      	str	r3, [sp, #64]	; 0x40
10001c10:	0113      	lsls	r3, r2, #4
10001c12:	9a20      	ldr	r2, [sp, #128]	; 0x80
10001c14:	3504      	adds	r5, #4
10001c16:	9715      	str	r7, [sp, #84]	; 0x54
10001c18:	00f7      	lsls	r7, r6, #3
10001c1a:	9703      	str	r7, [sp, #12]
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier)
{
10001c1c:	9022      	str	r0, [sp, #136]	; 0x88
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001c1e:	9309      	str	r3, [sp, #36]	; 0x24
10001c20:	9207      	str	r2, [sp, #28]
10001c22:	9208      	str	r2, [sp, #32]
10001c24:	9206      	str	r2, [sp, #24]
10001c26:	1c04      	adds	r4, r0, #0
10001c28:	1c2f      	adds	r7, r5, #0
      /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
10001c2a:	6820      	ldr	r0, [r4, #0]
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
10001c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
10001c2e:	4683      	mov	fp, r0
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
10001c30:	58e1      	ldr	r1, [r4, r3]
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
10001c32:	683d      	ldr	r5, [r7, #0]

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
10001c34:	9e12      	ldr	r6, [sp, #72]	; 0x48

      xcIn = pSrc[(2u * i2)];
10001c36:	9809      	ldr	r0, [sp, #36]	; 0x24

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
10001c38:	59ba      	ldr	r2, [r7, r6]
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
10001c3a:	4689      	mov	r9, r1
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
10001c3c:	9501      	str	r5, [sp, #4]
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xdIn = pSrc[(2u * i3)];
10001c3e:	9903      	ldr	r1, [sp, #12]
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
10001c40:	5825      	ldr	r5, [r4, r0]
      ycIn = pSrc[(2u * i2) + 1u];

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];
10001c42:	9803      	ldr	r0, [sp, #12]

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
10001c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
10001c46:	46aa      	mov	sl, r5

      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
10001c48:	9202      	str	r2, [sp, #8]

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xdIn = pSrc[(2u * i3)];
10001c4a:	5862      	ldr	r2, [r4, r1]
      ydIn = pSrc[(2u * i3) + 1u];
10001c4c:	583d      	ldr	r5, [r7, r0]

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001c4e:	4651      	mov	r1, sl
10001c50:	4658      	mov	r0, fp

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
10001c52:	58fe      	ldr	r6, [r7, r3]

      xdIn = pSrc[(2u * i3)];
10001c54:	4690      	mov	r8, r2
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001c56:	f001 fceb 	bl	10003630 <__aeabi_fadd>
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001c5a:	4641      	mov	r1, r8

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10001c5c:	900a      	str	r0, [sp, #40]	; 0x28
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001c5e:	4648      	mov	r0, r9
10001c60:	f001 fce6 	bl	10003630 <__aeabi_fadd>
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10001c64:	1c31      	adds	r1, r6, #0
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10001c66:	900b      	str	r0, [sp, #44]	; 0x2c
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10001c68:	9801      	ldr	r0, [sp, #4]
10001c6a:	f001 fce1 	bl	10003630 <__aeabi_fadd>
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001c6e:	1c29      	adds	r1, r5, #0
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10001c70:	900c      	str	r0, [sp, #48]	; 0x30
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001c72:	9802      	ldr	r0, [sp, #8]
10001c74:	f001 fcdc 	bl	10003630 <__aeabi_fadd>

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
10001c78:	9b06      	ldr	r3, [sp, #24]
      si2 = pCoef[(ia2 * 2u) + 1u];
10001c7a:	9a06      	ldr	r2, [sp, #24]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
10001c7c:	6819      	ldr	r1, [r3, #0]
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10001c7e:	900d      	str	r0, [sp, #52]	; 0x34

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];
10001c80:	6850      	ldr	r0, [r2, #4]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
10001c82:	9104      	str	r1, [sp, #16]
      si2 = pCoef[(ia2 * 2u) + 1u];
10001c84:	9005      	str	r0, [sp, #20]

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001c86:	4651      	mov	r1, sl
10001c88:	4658      	mov	r0, fp
10001c8a:	f002 f9c9 	bl	10004020 <__aeabi_fsub>
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
10001c8e:	4641      	mov	r1, r8
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10001c90:	4682      	mov	sl, r0
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
10001c92:	4648      	mov	r0, r9
10001c94:	f002 f9c4 	bl	10004020 <__aeabi_fsub>
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001c98:	1c31      	adds	r1, r6, #0
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
10001c9a:	4680      	mov	r8, r0
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001c9c:	9801      	ldr	r0, [sp, #4]
10001c9e:	f002 f9bf 	bl	10004020 <__aeabi_fsub>
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10001ca2:	1c29      	adds	r1, r5, #0
      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10001ca4:	1c06      	adds	r6, r0, #0
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10001ca6:	9802      	ldr	r0, [sp, #8]
10001ca8:	f002 f9ba 	bl	10004020 <__aeabi_fsub>

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10001cae:	1c05      	adds	r5, r0, #0

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
10001cb2:	f001 fcbd 	bl	10003630 <__aeabi_fadd>
10001cb6:	6020      	str	r0, [r4, #0]
      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001cb8:	990d      	ldr	r1, [sp, #52]	; 0x34
10001cba:	980c      	ldr	r0, [sp, #48]	; 0x30
10001cbc:	f001 fcb8 	bl	10003630 <__aeabi_fadd>

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
10001cc0:	1c29      	adds	r1, r5, #0
      Ybminusd = ybIn - ydIn;

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001cc2:	6038      	str	r0, [r7, #0]

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
10001cc4:	4650      	mov	r0, sl
10001cc6:	f001 fcb3 	bl	10003630 <__aeabi_fadd>
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
10001cca:	4641      	mov	r1, r8
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
10001ccc:	9001      	str	r0, [sp, #4]
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
10001cce:	1c30      	adds	r0, r6, #0
10001cd0:	f002 f9a6 	bl	10004020 <__aeabi_fsub>
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10001cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
10001cd6:	9002      	str	r0, [sp, #8]
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10001cd8:	980a      	ldr	r0, [sp, #40]	; 0x28
10001cda:	f002 f9a1 	bl	10004020 <__aeabi_fsub>
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
10001cde:	990d      	ldr	r1, [sp, #52]	; 0x34
      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10001ce0:	4681      	mov	r9, r0
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
10001ce2:	980c      	ldr	r0, [sp, #48]	; 0x30
10001ce4:	f002 f99c 	bl	10004020 <__aeabi_fsub>
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
10001ce8:	1c29      	adds	r1, r5, #0
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
10001cea:	4683      	mov	fp, r0
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
10001cec:	4650      	mov	r0, sl
10001cee:	f002 f997 	bl	10004020 <__aeabi_fsub>
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
10001cf2:	1c31      	adds	r1, r6, #0
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
10001cf4:	900a      	str	r0, [sp, #40]	; 0x28
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
10001cf6:	4640      	mov	r0, r8
10001cf8:	f001 fc9a 	bl	10003630 <__aeabi_fadd>

      co1 = pCoef[ia1 * 2u];
10001cfc:	9b08      	ldr	r3, [sp, #32]
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
10001cfe:	900b      	str	r0, [sp, #44]	; 0x2c
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
10001d00:	9807      	ldr	r0, [sp, #28]
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
10001d02:	9a08      	ldr	r2, [sp, #32]
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
10001d04:	6819      	ldr	r1, [r3, #0]
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
10001d06:	6843      	ldr	r3, [r0, #4]
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
10001d08:	6806      	ldr	r6, [r0, #0]
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10001d0a:	9801      	ldr	r0, [sp, #4]
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
10001d0c:	6855      	ldr	r5, [r2, #4]

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
10001d0e:	469a      	mov	sl, r3
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);

      co1 = pCoef[ia1 * 2u];
10001d10:	4688      	mov	r8, r1
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10001d12:	f002 f855 	bl	10003dc0 <__aeabi_fmul>
      Yb12_out = Yb12C_out * co1;
10001d16:	4641      	mov	r1, r8
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10001d18:	900c      	str	r0, [sp, #48]	; 0x30
      Yb12_out = Yb12C_out * co1;
10001d1a:	9802      	ldr	r0, [sp, #8]
10001d1c:	f002 f850 	bl	10003dc0 <__aeabi_fmul>
      Xc12_out = Xc12C_out * co2;
10001d20:	9904      	ldr	r1, [sp, #16]
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
10001d22:	900d      	str	r0, [sp, #52]	; 0x34
      Xc12_out = Xc12C_out * co2;
10001d24:	4648      	mov	r0, r9
10001d26:	f002 f84b 	bl	10003dc0 <__aeabi_fmul>
      Yc12_out = Yc12C_out * co2;
10001d2a:	9904      	ldr	r1, [sp, #16]
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
10001d2c:	900e      	str	r0, [sp, #56]	; 0x38
      Yc12_out = Yc12C_out * co2;
10001d2e:	4658      	mov	r0, fp
10001d30:	f002 f846 	bl	10003dc0 <__aeabi_fmul>
      Xd12_out = Xd12C_out * co3;
10001d34:	1c31      	adds	r1, r6, #0
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
10001d36:	4680      	mov	r8, r0
      Xd12_out = Xd12C_out * co3;
10001d38:	980a      	ldr	r0, [sp, #40]	; 0x28
10001d3a:	f002 f841 	bl	10003dc0 <__aeabi_fmul>
      Yd12_out = Yd12C_out * co3;
10001d3e:	1c31      	adds	r1, r6, #0

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
10001d40:	9004      	str	r0, [sp, #16]
      Yd12_out = Yd12C_out * co3;
10001d42:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001d44:	f002 f83c 	bl	10003dc0 <__aeabi_fmul>
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
10001d48:	9905      	ldr	r1, [sp, #20]
      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
10001d4a:	1c06      	adds	r6, r0, #0
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
10001d4c:	4658      	mov	r0, fp
10001d4e:	f002 f837 	bl	10003dc0 <__aeabi_fmul>
10001d52:	1c01      	adds	r1, r0, #0
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
10001d54:	980e      	ldr	r0, [sp, #56]	; 0x38
10001d56:	f001 fc6b 	bl	10003630 <__aeabi_fadd>
      Yc12_out -= p3;
      Xd12_out += p4;
      Yd12_out -= p5;

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;
10001d5a:	9912      	ldr	r1, [sp, #72]	; 0x48
10001d5c:	5060      	str	r0, [r4, r1]
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
10001d5e:	9905      	ldr	r1, [sp, #20]
10001d60:	4648      	mov	r0, r9
10001d62:	f002 f82d 	bl	10003dc0 <__aeabi_fmul>
10001d66:	1c01      	adds	r1, r0, #0
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
      Yc12_out -= p3;
10001d68:	4640      	mov	r0, r8
10001d6a:	f002 f959 	bl	10004020 <__aeabi_fsub>

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
10001d6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
         
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
10001d70:	1c29      	adds	r1, r5, #0

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
10001d72:	50b8      	str	r0, [r7, r2]
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
         
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
10001d74:	9802      	ldr	r0, [sp, #8]
10001d76:	f002 f823 	bl	10003dc0 <__aeabi_fmul>
10001d7a:	1c01      	adds	r1, r0, #0
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
10001d7c:	980c      	ldr	r0, [sp, #48]	; 0x30
10001d7e:	f001 fc57 	bl	10003630 <__aeabi_fadd>

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
10001d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
10001d84:	1c29      	adds	r1, r5, #0

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
10001d86:	50e0      	str	r0, [r4, r3]
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
10001d88:	9801      	ldr	r0, [sp, #4]
10001d8a:	f002 f819 	bl	10003dc0 <__aeabi_fmul>
10001d8e:	1c01      	adds	r1, r0, #0
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out += p0;
      Yb12_out -= p1;
10001d90:	980d      	ldr	r0, [sp, #52]	; 0x34
10001d92:	f002 f945 	bl	10004020 <__aeabi_fsub>

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
10001d96:	9d09      	ldr	r5, [sp, #36]	; 0x24
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
10001d98:	4651      	mov	r1, sl

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
10001d9a:	5178      	str	r0, [r7, r5]
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
10001d9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001d9e:	f002 f80f 	bl	10003dc0 <__aeabi_fmul>
10001da2:	1c01      	adds	r1, r0, #0
      
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
      Yc12_out -= p3;
      Xd12_out += p4;
10001da4:	9804      	ldr	r0, [sp, #16]
10001da6:	f001 fc43 	bl	10003630 <__aeabi_fadd>

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;

      /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;
10001daa:	9903      	ldr	r1, [sp, #12]
10001dac:	5060      	str	r0, [r4, r1]
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
10001dae:	4651      	mov	r1, sl
10001db0:	980a      	ldr	r0, [sp, #40]	; 0x28
10001db2:	f002 f805 	bl	10003dc0 <__aeabi_fmul>
10001db6:	1c01      	adds	r1, r0, #0
      Xb12_out += p0;
      Yb12_out -= p1;
      Xc12_out += p2;
      Yc12_out -= p3;
      Xd12_out += p4;
      Yd12_out -= p5;
10001db8:	1c30      	adds	r0, r6, #0
10001dba:	f002 f931 	bl	10004020 <__aeabi_fsub>

      /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;

      /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
      pSrc[(2u * i3) + 1u] = Yd12_out;
10001dbe:	9e03      	ldr	r6, [sp, #12]
10001dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10001dc2:	51b8      	str	r0, [r7, r6]
10001dc4:	9806      	ldr	r0, [sp, #24]
10001dc6:	9d08      	ldr	r5, [sp, #32]
10001dc8:	9911      	ldr	r1, [sp, #68]	; 0x44
10001dca:	1883      	adds	r3, r0, r2
10001dcc:	9807      	ldr	r0, [sp, #28]
10001dce:	9a10      	ldr	r2, [sp, #64]	; 0x40
10001dd0:	186e      	adds	r6, r5, r1

      /*  Updating input index */
      i0++;

   }
   while(--j);
10001dd2:	9d15      	ldr	r5, [sp, #84]	; 0x54
10001dd4:	9306      	str	r3, [sp, #24]
10001dd6:	3408      	adds	r4, #8
10001dd8:	1883      	adds	r3, r0, r2
10001dda:	3708      	adds	r7, #8
10001ddc:	9608      	str	r6, [sp, #32]
10001dde:	9307      	str	r3, [sp, #28]
10001de0:	42ac      	cmp	r4, r5
10001de2:	d000      	beq.n	10001de6 <arm_radix4_butterfly_f32+0x216>
10001de4:	e721      	b.n	10001c2a <arm_radix4_butterfly_f32+0x5a>

   twidCoefModifier <<= 2u;
10001de6:	9c17      	ldr	r4, [sp, #92]	; 0x5c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001de8:	ae16      	add	r6, sp, #88	; 0x58
10001dea:	8830      	ldrh	r0, [r6, #0]
      i0++;

   }
   while(--j);

   twidCoefModifier <<= 2u;
10001dec:	00a7      	lsls	r7, r4, #2
10001dee:	b2b9      	uxth	r1, r7
10001df0:	911f      	str	r1, [sp, #124]	; 0x7c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10001df2:	9023      	str	r0, [sp, #140]	; 0x8c
10001df4:	9021      	str	r0, [sp, #132]	; 0x84
10001df6:	2804      	cmp	r0, #4
10001df8:	d800      	bhi.n	10001dfc <arm_radix4_butterfly_f32+0x22c>
10001dfa:	e129      	b.n	10002050 <arm_radix4_butterfly_f32+0x480>
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001dfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001dfe:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001e00:	0893      	lsrs	r3, r2, #2
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001e02:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10001e04:	931e      	str	r3, [sp, #120]	; 0x78
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001e06:	0070      	lsls	r0, r6, #1
10001e08:	1982      	adds	r2, r0, r6
10001e0a:	00ec      	lsls	r4, r5, #3
10001e0c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
10001e0e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
10001e10:	9e1e      	ldr	r6, [sp, #120]	; 0x78
10001e12:	0139      	lsls	r1, r7, #4
10001e14:	3b01      	subs	r3, #1
10001e16:	9f1e      	ldr	r7, [sp, #120]	; 0x78
10001e18:	941a      	str	r4, [sp, #104]	; 0x68
10001e1a:	0070      	lsls	r0, r6, #1
10001e1c:	00ec      	lsls	r4, r5, #3
10001e1e:	931d      	str	r3, [sp, #116]	; 0x74
10001e20:	9407      	str	r4, [sp, #28]
10001e22:	00d3      	lsls	r3, r2, #3
10001e24:	9c20      	ldr	r4, [sp, #128]	; 0x80
10001e26:	1982      	adds	r2, r0, r6
10001e28:	9d22      	ldr	r5, [sp, #136]	; 0x88
10001e2a:	911b      	str	r1, [sp, #108]	; 0x6c
10001e2c:	931c      	str	r3, [sp, #112]	; 0x70
10001e2e:	0139      	lsls	r1, r7, #4
10001e30:	00d3      	lsls	r3, r2, #3
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
10001e32:	2700      	movs	r7, #0
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001e34:	9106      	str	r1, [sp, #24]
10001e36:	9308      	str	r3, [sp, #32]
10001e38:	9519      	str	r5, [sp, #100]	; 0x64
10001e3a:	9418      	str	r4, [sp, #96]	; 0x60
10001e3c:	9417      	str	r4, [sp, #92]	; 0x5c
10001e3e:	9416      	str	r4, [sp, #88]	; 0x58
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
10001e40:	9715      	str	r7, [sp, #84]	; 0x54
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
10001e42:	9916      	ldr	r1, [sp, #88]	; 0x58
         si1 = pCoef[(ia1 * 2u) + 1u];
10001e44:	9816      	ldr	r0, [sp, #88]	; 0x58
         co2 = pCoef[ia2 * 2u];
10001e46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
10001e48:	680e      	ldr	r6, [r1, #0]
         si1 = pCoef[(ia1 * 2u) + 1u];
10001e4a:	6842      	ldr	r2, [r0, #4]
         co2 = pCoef[ia2 * 2u];
10001e4c:	681d      	ldr	r5, [r3, #0]
         si2 = pCoef[(ia2 * 2u) + 1u];
10001e4e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
         co3 = pCoef[ia3 * 2u];
10001e50:	9918      	ldr	r1, [sp, #96]	; 0x60
         si3 = pCoef[(ia3 * 2u) + 1u];
10001e52:	9818      	ldr	r0, [sp, #96]	; 0x60
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
10001e56:	6867      	ldr	r7, [r4, #4]
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
10001e58:	960c      	str	r6, [sp, #48]	; 0x30
         si1 = pCoef[(ia1 * 2u) + 1u];
10001e5a:	920d      	str	r2, [sp, #52]	; 0x34
         co2 = pCoef[ia2 * 2u];
10001e5c:	950e      	str	r5, [sp, #56]	; 0x38
         si2 = pCoef[(ia2 * 2u) + 1u];
         co3 = pCoef[ia3 * 2u];
10001e5e:	680e      	ldr	r6, [r1, #0]
         si3 = pCoef[(ia3 * 2u) + 1u];
10001e60:	6842      	ldr	r2, [r0, #4]

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
      
         i0 = j;
10001e62:	9d15      	ldr	r5, [sp, #84]	; 0x54
* @param[in]      *pCoef           points to the twiddle coefficient buffer.   
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @return none.   
*/

void arm_radix4_butterfly_f32(
10001e64:	3304      	adds	r3, #4
10001e66:	9c19      	ldr	r4, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
10001e68:	970f      	str	r7, [sp, #60]	; 0x3c
         co3 = pCoef[ia3 * 2u];
10001e6a:	9610      	str	r6, [sp, #64]	; 0x40
         si3 = pCoef[(ia3 * 2u) + 1u];
10001e6c:	9211      	str	r2, [sp, #68]	; 0x44

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
      
         i0 = j;
10001e6e:	9509      	str	r5, [sp, #36]	; 0x24
10001e70:	1c1f      	adds	r7, r3, #0
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
10001e72:	6821      	ldr	r1, [r4, #0]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
10001e74:	9807      	ldr	r0, [sp, #28]
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
10001e76:	468b      	mov	fp, r1
            yaIn = pSrc[(2u * i0) + 1u];
10001e78:	683e      	ldr	r6, [r7, #0]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
10001e7a:	9906      	ldr	r1, [sp, #24]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
10001e7c:	5822      	ldr	r2, [r4, r0]
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];
10001e7e:	9603      	str	r6, [sp, #12]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];
10001e80:	9806      	ldr	r0, [sp, #24]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
10001e82:	5866      	ldr	r6, [r4, r1]
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001e84:	9908      	ldr	r1, [sp, #32]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
10001e86:	4691      	mov	r9, r2
            ybIn = pSrc[(2u * i1) + 1u];
10001e88:	9b07      	ldr	r3, [sp, #28]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001e8a:	9a08      	ldr	r2, [sp, #32]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
10001e8c:	46b2      	mov	sl, r6
            ycIn = pSrc[(2u * i2) + 1u];
10001e8e:	583e      	ldr	r6, [r7, r0]

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001e90:	5878      	ldr	r0, [r7, r1]

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];
10001e92:	58fd      	ldr	r5, [r7, r3]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001e94:	58a3      	ldr	r3, [r4, r2]
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001e96:	4651      	mov	r1, sl

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
10001e98:	9001      	str	r0, [sp, #4]

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001e9a:	4658      	mov	r0, fp
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
10001e9c:	4698      	mov	r8, r3
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001e9e:	f002 f8bf 	bl	10004020 <__aeabi_fsub>
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001ea2:	4641      	mov	r1, r8

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
10001ea4:	9002      	str	r0, [sp, #8]
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001ea6:	4648      	mov	r0, r9
10001ea8:	f002 f8ba 	bl	10004020 <__aeabi_fsub>
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001eac:	1c31      	adds	r1, r6, #0
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10001eae:	9004      	str	r0, [sp, #16]
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001eb0:	9803      	ldr	r0, [sp, #12]
10001eb2:	f002 f8b5 	bl	10004020 <__aeabi_fsub>
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001eb6:	9901      	ldr	r1, [sp, #4]
            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10001eb8:	9005      	str	r0, [sp, #20]
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001eba:	1c28      	adds	r0, r5, #0
10001ebc:	f002 f8b0 	bl	10004020 <__aeabi_fsub>

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001ec0:	4651      	mov	r1, sl
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10001ec2:	900a      	str	r0, [sp, #40]	; 0x28

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001ec4:	4658      	mov	r0, fp
10001ec6:	f001 fbb3 	bl	10003630 <__aeabi_fadd>
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001eca:	4641      	mov	r1, r8
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10001ecc:	4682      	mov	sl, r0
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001ece:	4648      	mov	r0, r9
10001ed0:	f001 fbae 	bl	10003630 <__aeabi_fadd>
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001ed4:	1c31      	adds	r1, r6, #0
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10001ed6:	4680      	mov	r8, r0
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001ed8:	9803      	ldr	r0, [sp, #12]
10001eda:	f001 fba9 	bl	10003630 <__aeabi_fadd>
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001ede:	9901      	ldr	r1, [sp, #4]
            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10001ee0:	1c06      	adds	r6, r0, #0
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001ee2:	1c28      	adds	r0, r5, #0
10001ee4:	f001 fba4 	bl	10003630 <__aeabi_fadd>

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
10001ee8:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10001eea:	1c05      	adds	r5, r0, #0

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
10001eec:	9802      	ldr	r0, [sp, #8]
10001eee:	f001 fb9f 	bl	10003630 <__aeabi_fadd>
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
10001ef2:	9904      	ldr	r1, [sp, #16]
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
10001ef4:	9003      	str	r0, [sp, #12]
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
10001ef6:	9805      	ldr	r0, [sp, #20]
10001ef8:	f002 f892 	bl	10004020 <__aeabi_fsub>
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001efc:	4641      	mov	r1, r8
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
10001efe:	4681      	mov	r9, r0
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001f00:	4650      	mov	r0, sl
10001f02:	f002 f88d 	bl	10004020 <__aeabi_fsub>
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001f06:	1c29      	adds	r1, r5, #0
            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10001f08:	9001      	str	r0, [sp, #4]
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001f0a:	1c30      	adds	r0, r6, #0
10001f0c:	f002 f888 	bl	10004020 <__aeabi_fsub>
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
10001f10:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10001f12:	900b      	str	r0, [sp, #44]	; 0x2c
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
10001f14:	9802      	ldr	r0, [sp, #8]
10001f16:	f002 f883 	bl	10004020 <__aeabi_fsub>
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
10001f1a:	9905      	ldr	r1, [sp, #20]
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
10001f1c:	4683      	mov	fp, r0
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
10001f1e:	9804      	ldr	r0, [sp, #16]
10001f20:	f001 fb86 	bl	10003630 <__aeabi_fadd>

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001f24:	4641      	mov	r1, r8
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
10001f26:	9002      	str	r0, [sp, #8]

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001f28:	4650      	mov	r0, sl
10001f2a:	f001 fb81 	bl	10003630 <__aeabi_fadd>
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001f2e:	1c29      	adds	r1, r5, #0
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10001f30:	6020      	str	r0, [r4, #0]
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001f32:	1c30      	adds	r0, r6, #0
10001f34:	f001 fb7c 	bl	10003630 <__aeabi_fadd>

            Xb12_out = Xb12C_out * co1;
10001f38:	990c      	ldr	r1, [sp, #48]	; 0x30
            Xd12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10001f3a:	6038      	str	r0, [r7, #0]

            Xb12_out = Xb12C_out * co1;
10001f3c:	9803      	ldr	r0, [sp, #12]
10001f3e:	f001 ff3f 	bl	10003dc0 <__aeabi_fmul>
            Yb12_out = Yb12C_out * co1;
10001f42:	990c      	ldr	r1, [sp, #48]	; 0x30
            Yd12C_out = (Xbminusd + Yaminusc);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
10001f44:	4680      	mov	r8, r0
            Yb12_out = Yb12C_out * co1;
10001f46:	4648      	mov	r0, r9
10001f48:	f001 ff3a 	bl	10003dc0 <__aeabi_fmul>
            Xc12_out = Xc12C_out * co2;
10001f4c:	990e      	ldr	r1, [sp, #56]	; 0x38

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
10001f4e:	1c06      	adds	r6, r0, #0
            Xc12_out = Xc12C_out * co2;
10001f50:	9801      	ldr	r0, [sp, #4]
10001f52:	f001 ff35 	bl	10003dc0 <__aeabi_fmul>
            Yc12_out = Yc12C_out * co2;
10001f56:	990e      	ldr	r1, [sp, #56]	; 0x38
            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
10001f58:	9004      	str	r0, [sp, #16]
            Yc12_out = Yc12C_out * co2;
10001f5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001f5c:	f001 ff30 	bl	10003dc0 <__aeabi_fmul>
            Xd12_out = Xd12C_out * co3;
10001f60:	9910      	ldr	r1, [sp, #64]	; 0x40
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
10001f62:	4682      	mov	sl, r0
            Xd12_out = Xd12C_out * co3;
10001f64:	4658      	mov	r0, fp
10001f66:	f001 ff2b 	bl	10003dc0 <__aeabi_fmul>
            Yd12_out = Yd12C_out * co3;
10001f6a:	9910      	ldr	r1, [sp, #64]	; 0x40

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
10001f6c:	1c05      	adds	r5, r0, #0
            Yd12_out = Yd12C_out * co3;
10001f6e:	9802      	ldr	r0, [sp, #8]
10001f70:	f001 ff26 	bl	10003dc0 <__aeabi_fmul>
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
10001f74:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;
10001f76:	9005      	str	r0, [sp, #20]
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
10001f78:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001f7a:	f001 ff21 	bl	10003dc0 <__aeabi_fmul>
10001f7e:	1c01      	adds	r1, r0, #0
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
10001f80:	9804      	ldr	r0, [sp, #16]
10001f82:	f001 fb55 	bl	10003630 <__aeabi_fadd>
            Yc12_out -= p3;
            Xd12_out += p4;
            Yd12_out -= p5;

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
10001f86:	9a07      	ldr	r2, [sp, #28]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
10001f88:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Yc12_out -= p3;
            Xd12_out += p4;
            Yd12_out -= p5;

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
10001f8a:	50a0      	str	r0, [r4, r2]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
10001f8c:	9801      	ldr	r0, [sp, #4]
10001f8e:	f001 ff17 	bl	10003dc0 <__aeabi_fmul>
10001f92:	1c01      	adds	r1, r0, #0
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
            Yc12_out -= p3;
10001f94:	4650      	mov	r0, sl
10001f96:	f002 f843 	bl	10004020 <__aeabi_fsub>

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;

            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;
10001f9a:	9b07      	ldr	r3, [sp, #28]
10001f9c:	50f8      	str	r0, [r7, r3]
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;
         
            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
10001f9e:	990d      	ldr	r1, [sp, #52]	; 0x34
10001fa0:	4648      	mov	r0, r9
10001fa2:	f001 ff0d 	bl	10003dc0 <__aeabi_fmul>
10001fa6:	1c01      	adds	r1, r0, #0
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
10001fa8:	4640      	mov	r0, r8
10001faa:	f001 fb41 	bl	10003630 <__aeabi_fadd>

            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;
10001fae:	9906      	ldr	r1, [sp, #24]
10001fb0:	5060      	str	r0, [r4, r1]
            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
10001fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
10001fb4:	9803      	ldr	r0, [sp, #12]
10001fb6:	f001 ff03 	bl	10003dc0 <__aeabi_fmul>
10001fba:	1c01      	adds	r1, r0, #0
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out += p0;
            Yb12_out -= p1;
10001fbc:	1c30      	adds	r0, r6, #0
10001fbe:	f002 f82f 	bl	10004020 <__aeabi_fsub>

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
10001fc2:	9e06      	ldr	r6, [sp, #24]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10001fc4:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
10001fc6:	51b8      	str	r0, [r7, r6]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10001fc8:	9802      	ldr	r0, [sp, #8]
10001fca:	f001 fef9 	bl	10003dc0 <__aeabi_fmul>
10001fce:	1c01      	adds	r1, r0, #0
            
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
            Yc12_out -= p3;
            Xd12_out += p4;
10001fd0:	1c28      	adds	r0, r5, #0
10001fd2:	f001 fb2d 	bl	10003630 <__aeabi_fadd>

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
10001fd6:	9d08      	ldr	r5, [sp, #32]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10001fd8:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
10001fda:	5160      	str	r0, [r4, r5]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10001fdc:	4658      	mov	r0, fp
10001fde:	f001 feef 	bl	10003dc0 <__aeabi_fmul>
10001fe2:	1c01      	adds	r1, r0, #0
            Xb12_out += p0;
            Yb12_out -= p1;
            Xc12_out += p2;
            Yc12_out -= p3;
            Xd12_out += p4;
            Yd12_out -= p5;
10001fe4:	9805      	ldr	r0, [sp, #20]
10001fe6:	f002 f81b 	bl	10004020 <__aeabi_fsub>

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
10001fea:	9a08      	ldr	r2, [sp, #32]

            i0 += n1;
10001fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
10001fee:	50b8      	str	r0, [r7, r2]

            i0 += n1;
10001ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
10001ff2:	9e12      	ldr	r6, [sp, #72]	; 0x48
10001ff4:	18c1      	adds	r1, r0, r3
10001ff6:	9109      	str	r1, [sp, #36]	; 0x24
         } while(i0 < fftLen);
10001ff8:	9d14      	ldr	r5, [sp, #80]	; 0x50
10001ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001ffc:	19a4      	adds	r4, r4, r6
10001ffe:	19bf      	adds	r7, r7, r6
10002000:	4295      	cmp	r5, r2
10002002:	d900      	bls.n	10002006 <arm_radix4_butterfly_f32+0x436>
10002004:	e735      	b.n	10001e72 <arm_radix4_butterfly_f32+0x2a2>
         j++;
10002006:	9815      	ldr	r0, [sp, #84]	; 0x54
10002008:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000200a:	991a      	ldr	r1, [sp, #104]	; 0x68
1000200c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
1000200e:	3001      	adds	r0, #1
10002010:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
10002012:	185e      	adds	r6, r3, r1
10002014:	9015      	str	r0, [sp, #84]	; 0x54
10002016:	9919      	ldr	r1, [sp, #100]	; 0x64
10002018:	9818      	ldr	r0, [sp, #96]	; 0x60
1000201a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
1000201c:	19e5      	adds	r5, r4, r7
1000201e:	9616      	str	r6, [sp, #88]	; 0x58
      } while(j <= (n2 - 1u));
10002020:	9c1d      	ldr	r4, [sp, #116]	; 0x74
10002022:	9e15      	ldr	r6, [sp, #84]	; 0x54
10002024:	1883      	adds	r3, r0, r2
10002026:	3108      	adds	r1, #8
10002028:	9517      	str	r5, [sp, #92]	; 0x5c
1000202a:	9318      	str	r3, [sp, #96]	; 0x60
1000202c:	9119      	str	r1, [sp, #100]	; 0x64
1000202e:	42a6      	cmp	r6, r4
10002030:	d800      	bhi.n	10002034 <arm_radix4_butterfly_f32+0x464>
10002032:	e706      	b.n	10001e42 <arm_radix4_butterfly_f32+0x272>
      twidCoefModifier <<= 2u;
10002034:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10002036:	9a21      	ldr	r2, [sp, #132]	; 0x84

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10002038:	00bd      	lsls	r5, r7, #2
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
1000203a:	991e      	ldr	r1, [sp, #120]	; 0x78

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
1000203c:	b2a8      	uxth	r0, r5
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
1000203e:	0893      	lsrs	r3, r2, #2

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10002040:	901f      	str	r0, [sp, #124]	; 0x7c
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10002042:	9321      	str	r3, [sp, #132]	; 0x84
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10002044:	9113      	str	r1, [sp, #76]	; 0x4c
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10002046:	2b04      	cmp	r3, #4
10002048:	d902      	bls.n	10002050 <arm_radix4_butterfly_f32+0x480>
1000204a:	00cf      	lsls	r7, r1, #3
1000204c:	9712      	str	r7, [sp, #72]	; 0x48
1000204e:	e6d5      	b.n	10001dfc <arm_radix4_butterfly_f32+0x22c>
         si3 = pCoef[(ia3 * 2u) + 1u];

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
      
         i0 = j;
10002050:	9c22      	ldr	r4, [sp, #136]	; 0x88
   while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10002052:	9f23      	ldr	r7, [sp, #140]	; 0x8c

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
10002054:	6865      	ldr	r5, [r4, #4]
      xbIn = ptr1[2];
10002056:	68a0      	ldr	r0, [r4, #8]
   ptr1 = &pSrc[0];

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
10002058:	6826      	ldr	r6, [r4, #0]
      yaIn = ptr1[1];
1000205a:	46ab      	mov	fp, r5
      xbIn = ptr1[2];
1000205c:	4681      	mov	r9, r0
      ybIn = ptr1[3];
      xcIn = ptr1[4];
1000205e:	6925      	ldr	r5, [r4, #16]
      ycIn = ptr1[5];
      xdIn = ptr1[6];
10002060:	69a1      	ldr	r1, [r4, #24]
      ydIn = ptr1[7];
10002062:	69e0      	ldr	r0, [r4, #28]
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
10002064:	68e2      	ldr	r2, [r4, #12]
      xcIn = ptr1[4];
      ycIn = ptr1[5];
10002066:	6963      	ldr	r3, [r4, #20]
      xdIn = ptr1[6];
10002068:	4688      	mov	r8, r1
      ydIn = ptr1[7];
1000206a:	9007      	str	r0, [sp, #28]

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
1000206c:	1c29      	adds	r1, r5, #0
1000206e:	1c30      	adds	r0, r6, #0
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
10002070:	469a      	mov	sl, r3
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
10002072:	9206      	str	r2, [sp, #24]
      ycIn = ptr1[5];
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
10002074:	f001 fadc 	bl	10003630 <__aeabi_fadd>

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10002078:	1c29      	adds	r1, r5, #0
      ycIn = ptr1[5];
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
1000207a:	9008      	str	r0, [sp, #32]

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
1000207c:	1c30      	adds	r0, r6, #0
1000207e:	f001 ffcf 	bl	10004020 <__aeabi_fsub>

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10002082:	4651      	mov	r1, sl

      /* xa + xc */
      Xaplusc = xaIn + xcIn;

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
10002084:	1c05      	adds	r5, r0, #0

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
10002086:	4658      	mov	r0, fp
10002088:	f001 fad2 	bl	10003630 <__aeabi_fadd>

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
1000208c:	4651      	mov	r1, sl

      /* xa - xc */
      Xaminusc = xaIn - xcIn;

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
1000208e:	1c06      	adds	r6, r0, #0

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10002090:	4658      	mov	r0, fp
10002092:	f001 ffc5 	bl	10004020 <__aeabi_fsub>

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
10002096:	4641      	mov	r1, r8

      /* ya + yc */
      Yaplusc = yaIn + ycIn;

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
10002098:	9009      	str	r0, [sp, #36]	; 0x24

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
1000209a:	4648      	mov	r0, r9
1000209c:	f001 fac8 	bl	10003630 <__aeabi_fadd>

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100020a0:	9907      	ldr	r1, [sp, #28]

      /* ya - yc */
      Yaminusc = yaIn - ycIn;

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100020a2:	4682      	mov	sl, r0

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100020a4:	9806      	ldr	r0, [sp, #24]
100020a6:	f001 fac3 	bl	10003630 <__aeabi_fadd>

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
100020aa:	4641      	mov	r1, r8

      /* xb + xd */
      Xbplusd = xbIn + xdIn;

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100020ac:	4683      	mov	fp, r0

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
100020ae:	4648      	mov	r0, r9
100020b0:	f001 ffb6 	bl	10004020 <__aeabi_fsub>

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
100020b4:	9907      	ldr	r1, [sp, #28]

      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
100020b6:	4680      	mov	r8, r0

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
100020b8:	9806      	ldr	r0, [sp, #24]
100020ba:	f001 ffb1 	bl	10004020 <__aeabi_fsub>

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
100020be:	4651      	mov	r1, sl

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
100020c0:	4681      	mov	r9, r0

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
100020c2:	9808      	ldr	r0, [sp, #32]
100020c4:	f001 fab4 	bl	10003630 <__aeabi_fadd>
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
100020c8:	4659      	mov	r1, fp
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
100020ca:	6020      	str	r0, [r4, #0]
      Ybminusd = ybIn - ydIn;

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
100020cc:	1c30      	adds	r0, r6, #0
100020ce:	f001 faaf 	bl	10003630 <__aeabi_fadd>
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
100020d2:	4651      	mov	r1, sl
      a6 = (Xaminusc - Ybminusd);
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
      ptr1[1] = a1;
100020d4:	6060      	str	r0, [r4, #4]
      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
100020d6:	9808      	ldr	r0, [sp, #32]
100020d8:	f001 ffa2 	bl	10004020 <__aeabi_fsub>
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
100020dc:	4659      	mov	r1, fp
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
100020de:	60a0      	str	r0, [r4, #8]
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
100020e0:	1c30      	adds	r0, r6, #0
100020e2:	f001 ff9d 	bl	10004020 <__aeabi_fsub>
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
100020e6:	4649      	mov	r1, r9
      a7 = (Xbminusd + Yaminusc);
   
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
100020e8:	60e0      	str	r0, [r4, #12]
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
100020ea:	1c28      	adds	r0, r5, #0
100020ec:	f001 faa0 	bl	10003630 <__aeabi_fadd>
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
100020f0:	4641      	mov	r1, r8
   
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
100020f2:	6120      	str	r0, [r4, #16]
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
100020f4:	9809      	ldr	r0, [sp, #36]	; 0x24
100020f6:	f001 ff93 	bl	10004020 <__aeabi_fsub>
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
100020fa:	4649      	mov	r1, r9
      ptr1[0] = a0;
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
      ptr1[5] = a5;
100020fc:	6160      	str	r0, [r4, #20]
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
100020fe:	1c28      	adds	r0, r5, #0
10002100:	f001 ff8e 	bl	10004020 <__aeabi_fsub>
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
10002104:	9909      	ldr	r1, [sp, #36]	; 0x24
      ptr1[1] = a1;
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
      ptr1[5] = a5;
      ptr1[6] = a6;
10002106:	61a0      	str	r0, [r4, #24]
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
10002108:	4640      	mov	r0, r8
1000210a:	f001 fa91 	bl	10003630 <__aeabi_fadd>
      ptr1[6] = a6;
      ptr1[7] = a7;

      /* increment pointer by 8 */
      ptr1 += 8u;
   } while(--j);
1000210e:	3f01      	subs	r7, #1
      ptr1[2] = a2;
      ptr1[3] = a3;
      ptr1[4] = a4;
      ptr1[5] = a5;
      ptr1[6] = a6;
      ptr1[7] = a7;
10002110:	61e0      	str	r0, [r4, #28]

      /* increment pointer by 8 */
      ptr1 += 8u;
10002112:	3420      	adds	r4, #32
   } while(--j);
10002114:	2f00      	cmp	r7, #0
10002116:	d19d      	bne.n	10002054 <arm_radix4_butterfly_f32+0x484>
      twidCoefModifier <<= 2u;
   }

#endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */

}
10002118:	b025      	add	sp, #148	; 0x94
1000211a:	bc3c      	pop	{r2, r3, r4, r5}
1000211c:	4690      	mov	r8, r2
1000211e:	4699      	mov	r9, r3
10002120:	46a2      	mov	sl, r4
10002122:	46ab      	mov	fp, r5
10002124:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002126:	46c0      	nop			; (mov r8, r8)

10002128 <arm_radix4_butterfly_inverse_f32>:
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier,
float32_t onebyfftLen)
{
10002128:	b5f0      	push	{r4, r5, r6, r7, lr}
1000212a:	465f      	mov	r7, fp
1000212c:	4656      	mov	r6, sl
1000212e:	464d      	mov	r5, r9
10002130:	4644      	mov	r4, r8
10002132:	b4f0      	push	{r4, r5, r6, r7}
10002134:	b0a5      	sub	sp, #148	; 0x94
10002136:	9317      	str	r3, [sp, #92]	; 0x5c
10002138:	9220      	str	r2, [sp, #128]	; 0x80
1000213a:	9114      	str	r1, [sp, #80]	; 0x50
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
1000213c:	088a      	lsrs	r2, r1, #2
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
1000213e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
10002140:	9216      	str	r2, [sp, #88]	; 0x58
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
10002142:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10002144:	00cc      	lsls	r4, r1, #3
10002146:	9916      	ldr	r1, [sp, #88]	; 0x58
10002148:	0077      	lsls	r7, r6, #1
1000214a:	011b      	lsls	r3, r3, #4
   /*  Initializations for the first stage */
   n2 = fftLen;
   n1 = n2;

   /* n2 = fftLen/4 */
   n2 >>= 2u;
1000214c:	9213      	str	r2, [sp, #76]	; 0x4c
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
1000214e:	9410      	str	r4, [sp, #64]	; 0x40
10002150:	19ba      	adds	r2, r7, r6
10002152:	00cc      	lsls	r4, r1, #3
10002154:	9916      	ldr	r1, [sp, #88]	; 0x58
10002156:	9311      	str	r3, [sp, #68]	; 0x44
10002158:	00d3      	lsls	r3, r2, #3
1000215a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000215c:	1907      	adds	r7, r0, r4
1000215e:	9412      	str	r4, [sp, #72]	; 0x48
10002160:	004c      	lsls	r4, r1, #1
10002162:	1866      	adds	r6, r4, r1
10002164:	1c05      	adds	r5, r0, #0
10002166:	930f      	str	r3, [sp, #60]	; 0x3c
10002168:	0113      	lsls	r3, r2, #4
1000216a:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000216c:	3504      	adds	r5, #4
1000216e:	9715      	str	r7, [sp, #84]	; 0x54
10002170:	00f7      	lsls	r7, r6, #3
10002172:	9702      	str	r7, [sp, #8]
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier,
float32_t onebyfftLen)
{
10002174:	9022      	str	r0, [sp, #136]	; 0x88
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
10002176:	9309      	str	r3, [sp, #36]	; 0x24
10002178:	9207      	str	r2, [sp, #28]
1000217a:	9206      	str	r2, [sp, #24]
1000217c:	9208      	str	r2, [sp, #32]
1000217e:	1c04      	adds	r4, r0, #0
10002180:	1c2f      	adds	r7, r5, #0

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
10002182:	9b09      	ldr	r3, [sp, #36]	; 0x24
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
10002184:	6820      	ldr	r0, [r4, #0]
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
10002186:	9a12      	ldr	r2, [sp, #72]	; 0x48

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
10002188:	58e1      	ldr	r1, [r4, r3]
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
1000218a:	683d      	ldr	r5, [r7, #0]
      i1 = i0 + n2;
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
1000218c:	4683      	mov	fp, r0
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
1000218e:	58a0      	ldr	r0, [r4, r2]

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
10002190:	468a      	mov	sl, r1
      i2 = i1 + n2;
      i3 = i2 + n2;

      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];
10002192:	9501      	str	r5, [sp, #4]
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xdIn = pSrc[(2u * i3)];
10002194:	9902      	ldr	r1, [sp, #8]

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
10002196:	9d12      	ldr	r5, [sp, #72]	; 0x48
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
10002198:	4681      	mov	r9, r0
      ybIn = pSrc[(2u * i1) + 1u];

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];
1000219a:	9802      	ldr	r0, [sp, #8]

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
1000219c:	597b      	ldr	r3, [r7, r5]

      xdIn = pSrc[(2u * i3)];
1000219e:	5862      	ldr	r2, [r4, r1]
      ydIn = pSrc[(2u * i3) + 1u];
100021a0:	583d      	ldr	r5, [r7, r0]

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100021a2:	4651      	mov	r1, sl
100021a4:	4658      	mov	r0, fp
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];

      xdIn = pSrc[(2u * i3)];
100021a6:	4690      	mov	r8, r2

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];

      xbIn = pSrc[(2u * i1)];
      ybIn = pSrc[(2u * i1) + 1u];
100021a8:	9303      	str	r3, [sp, #12]

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100021aa:	f001 fa41 	bl	10003630 <__aeabi_fadd>
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100021ae:	4641      	mov	r1, r8

      xdIn = pSrc[(2u * i3)];
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100021b0:	900a      	str	r0, [sp, #40]	; 0x28
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100021b2:	4648      	mov	r0, r9
100021b4:	f001 fa3c 	bl	10003630 <__aeabi_fadd>
      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
100021b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
      ydIn = pSrc[(2u * i3) + 1u];

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100021ba:	900b      	str	r0, [sp, #44]	; 0x2c
      /*  Butterfly implementation */
      xaIn = pSrc[(2u * i0)];
      yaIn = pSrc[(2u * i0) + 1u];

      xcIn = pSrc[(2u * i2)];
      ycIn = pSrc[(2u * i2) + 1u];
100021bc:	59be      	ldr	r6, [r7, r6]
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100021be:	9801      	ldr	r0, [sp, #4]
100021c0:	1c31      	adds	r1, r6, #0
100021c2:	f001 fa35 	bl	10003630 <__aeabi_fadd>
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100021c6:	1c29      	adds	r1, r5, #0
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100021c8:	900c      	str	r0, [sp, #48]	; 0x30
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100021ca:	9803      	ldr	r0, [sp, #12]
100021cc:	f001 fa30 	bl	10003630 <__aeabi_fadd>

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
100021d0:	9b08      	ldr	r3, [sp, #32]
      si2 = pCoef[(ia2 * 2u) + 1u];
100021d2:	9a08      	ldr	r2, [sp, #32]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
100021d4:	6819      	ldr	r1, [r3, #0]
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100021d6:	900d      	str	r0, [sp, #52]	; 0x34

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];
100021d8:	6850      	ldr	r0, [r2, #4]
      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
100021da:	9104      	str	r1, [sp, #16]
      si2 = pCoef[(ia2 * 2u) + 1u];
100021dc:	9005      	str	r0, [sp, #20]

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100021de:	4651      	mov	r1, sl
100021e0:	4658      	mov	r0, fp
100021e2:	f001 ff1d 	bl	10004020 <__aeabi_fsub>
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
100021e6:	4641      	mov	r1, r8
      ia2 = ia1 + ia1;
      co2 = pCoef[ia2 * 2u];
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100021e8:	4682      	mov	sl, r0
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
100021ea:	4648      	mov	r0, r9
100021ec:	f001 ff18 	bl	10004020 <__aeabi_fsub>
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100021f0:	1c31      	adds	r1, r6, #0
      si2 = pCoef[(ia2 * 2u) + 1u];

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
100021f2:	4680      	mov	r8, r0
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100021f4:	9801      	ldr	r0, [sp, #4]
100021f6:	f001 ff13 	bl	10004020 <__aeabi_fsub>
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
100021fa:	1c29      	adds	r1, r5, #0
      /* xa - xc */
      Xaminusc = xaIn - xcIn;
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100021fc:	1c06      	adds	r6, r0, #0
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
100021fe:	9803      	ldr	r0, [sp, #12]
10002200:	f001 ff0e 	bl	10004020 <__aeabi_fsub>

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10002204:	990b      	ldr	r1, [sp, #44]	; 0x2c
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
10002206:	1c05      	adds	r5, r0, #0

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10002208:	980a      	ldr	r0, [sp, #40]	; 0x28
1000220a:	f001 fa11 	bl	10003630 <__aeabi_fadd>
1000220e:	6020      	str	r0, [r4, #0]

      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10002210:	990d      	ldr	r1, [sp, #52]	; 0x34
10002212:	980c      	ldr	r0, [sp, #48]	; 0x30
10002214:	f001 fa0c 	bl	10003630 <__aeabi_fadd>

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
10002218:	1c29      	adds	r1, r5, #0

      /* xa' = xa + xb + xc + xd */
      pSrc[(2u * i0)] = Xaplusc + Xbplusd;

      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
1000221a:	6038      	str	r0, [r7, #0]

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
1000221c:	4650      	mov	r0, sl
1000221e:	f001 feff 	bl	10004020 <__aeabi_fsub>
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
10002222:	4641      	mov	r1, r8

      /* ya' = ya + yb + yc + yd */
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
10002224:	9001      	str	r0, [sp, #4]
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
10002226:	1c30      	adds	r0, r6, #0
10002228:	f001 fa02 	bl	10003630 <__aeabi_fadd>
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
1000222c:	990b      	ldr	r1, [sp, #44]	; 0x2c
      pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
1000222e:	9003      	str	r0, [sp, #12]
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10002230:	980a      	ldr	r0, [sp, #40]	; 0x28
10002232:	f001 fef5 	bl	10004020 <__aeabi_fsub>
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
10002236:	990d      	ldr	r1, [sp, #52]	; 0x34
      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
10002238:	4681      	mov	r9, r0
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
1000223a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000223c:	f001 fef0 	bl	10004020 <__aeabi_fsub>
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
10002240:	1c29      	adds	r1, r5, #0
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
10002242:	4683      	mov	fp, r0
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
10002244:	4650      	mov	r0, sl
10002246:	f001 f9f3 	bl	10003630 <__aeabi_fadd>
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
1000224a:	4641      	mov	r1, r8
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
1000224c:	900a      	str	r0, [sp, #40]	; 0x28
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
1000224e:	1c30      	adds	r0, r6, #0
10002250:	f001 fee6 	bl	10004020 <__aeabi_fsub>

      co1 = pCoef[ia1 * 2u];
10002254:	9b06      	ldr	r3, [sp, #24]
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
10002256:	900b      	str	r0, [sp, #44]	; 0x2c
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
10002258:	9807      	ldr	r0, [sp, #28]
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
1000225a:	9a06      	ldr	r2, [sp, #24]
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
1000225c:	6819      	ldr	r1, [r3, #0]
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
1000225e:	6843      	ldr	r3, [r0, #4]
      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
10002260:	6806      	ldr	r6, [r0, #0]
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10002262:	9801      	ldr	r0, [sp, #4]
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
      si1 = pCoef[(ia1 * 2u) + 1u];
10002264:	6855      	ldr	r5, [r2, #4]

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];
10002266:	469a      	mov	sl, r3
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);

      co1 = pCoef[ia1 * 2u];
10002268:	4688      	mov	r8, r1
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
1000226a:	f001 fda9 	bl	10003dc0 <__aeabi_fmul>
      Yb12_out = Yb12C_out * co1;
1000226e:	4641      	mov	r1, r8
      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
10002270:	900c      	str	r0, [sp, #48]	; 0x30
      Yb12_out = Yb12C_out * co1;
10002272:	9803      	ldr	r0, [sp, #12]
10002274:	f001 fda4 	bl	10003dc0 <__aeabi_fmul>
      Xc12_out = Xc12C_out * co2;
10002278:	9904      	ldr	r1, [sp, #16]
      ia3 = ia2 + ia1;
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
1000227a:	900d      	str	r0, [sp, #52]	; 0x34
      Xc12_out = Xc12C_out * co2;
1000227c:	4648      	mov	r0, r9
1000227e:	f001 fd9f 	bl	10003dc0 <__aeabi_fmul>
      Yc12_out = Yc12C_out * co2;
10002282:	9904      	ldr	r1, [sp, #16]
      co3 = pCoef[ia3 * 2u];
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
10002284:	900e      	str	r0, [sp, #56]	; 0x38
      Yc12_out = Yc12C_out * co2;
10002286:	4658      	mov	r0, fp
10002288:	f001 fd9a 	bl	10003dc0 <__aeabi_fmul>
      Xd12_out = Xd12C_out * co3;
1000228c:	1c31      	adds	r1, r6, #0
      si3 = pCoef[(ia3 * 2u) + 1u];

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
1000228e:	4680      	mov	r8, r0
      Xd12_out = Xd12C_out * co3;
10002290:	980a      	ldr	r0, [sp, #40]	; 0x28
10002292:	f001 fd95 	bl	10003dc0 <__aeabi_fmul>
      Yd12_out = Yd12C_out * co3;
10002296:	1c31      	adds	r1, r6, #0

      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
10002298:	9004      	str	r0, [sp, #16]
      Yd12_out = Yd12C_out * co3;
1000229a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000229c:	f001 fd90 	bl	10003dc0 <__aeabi_fmul>
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
100022a0:	9905      	ldr	r1, [sp, #20]
      Xb12_out = Xb12C_out * co1;
      Yb12_out = Yb12C_out * co1;
      Xc12_out = Xc12C_out * co2;
      Yc12_out = Yc12C_out * co2;
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
100022a2:	1c06      	adds	r6, r0, #0
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
100022a4:	4658      	mov	r0, fp
100022a6:	f001 fd8b 	bl	10003dc0 <__aeabi_fmul>
100022aa:	1c01      	adds	r1, r0, #0
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
100022ac:	980e      	ldr	r0, [sp, #56]	; 0x38
100022ae:	f001 feb7 	bl	10004020 <__aeabi_fsub>
      Yc12_out += p3;
      Xd12_out -= p4;
      Yd12_out += p5;

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;
100022b2:	9912      	ldr	r1, [sp, #72]	; 0x48
100022b4:	5060      	str	r0, [r4, r1]
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
100022b6:	9905      	ldr	r1, [sp, #20]
100022b8:	4648      	mov	r0, r9
100022ba:	f001 fd81 	bl	10003dc0 <__aeabi_fmul>
100022be:	1c01      	adds	r1, r0, #0
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
      Yc12_out += p3;
100022c0:	4640      	mov	r0, r8
100022c2:	f001 f9b5 	bl	10003630 <__aeabi_fadd>

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
100022c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
   
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
100022c8:	1c29      	adds	r1, r5, #0

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2u * i1] = Xc12_out;

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;
100022ca:	50b8      	str	r0, [r7, r2]
      Xd12_out = Xd12C_out * co3;
      Yd12_out = Yd12C_out * co3;
   
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
100022cc:	9803      	ldr	r0, [sp, #12]
100022ce:	f001 fd77 	bl	10003dc0 <__aeabi_fmul>
100022d2:	1c01      	adds	r1, r0, #0
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
100022d4:	980c      	ldr	r0, [sp, #48]	; 0x30
100022d6:	f001 fea3 	bl	10004020 <__aeabi_fsub>

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
100022da:	9b09      	ldr	r3, [sp, #36]	; 0x24
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
100022dc:	1c29      	adds	r1, r5, #0

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2u * i1) + 1u] = Yc12_out;

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;
100022de:	50e0      	str	r0, [r4, r3]
      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
100022e0:	9801      	ldr	r0, [sp, #4]
100022e2:	f001 fd6d 	bl	10003dc0 <__aeabi_fmul>
100022e6:	1c01      	adds	r1, r0, #0
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
      
      Xb12_out -= p0;
      Yb12_out += p1;
100022e8:	980d      	ldr	r0, [sp, #52]	; 0x34
100022ea:	f001 f9a1 	bl	10003630 <__aeabi_fadd>

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
100022ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
100022f0:	4651      	mov	r1, sl

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2u * i2] = Xb12_out;

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;
100022f2:	5178      	str	r0, [r7, r5]
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
100022f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
100022f6:	f001 fd63 	bl	10003dc0 <__aeabi_fmul>
100022fa:	1c01      	adds	r1, r0, #0
      
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
      Yc12_out += p3;
      Xd12_out -= p4;
100022fc:	9804      	ldr	r0, [sp, #16]
100022fe:	f001 fe8f 	bl	10004020 <__aeabi_fsub>

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2u * i2) + 1u] = Yb12_out;

      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;
10002302:	9902      	ldr	r1, [sp, #8]
10002304:	5060      	str	r0, [r4, r1]
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
10002306:	4651      	mov	r1, sl
10002308:	980a      	ldr	r0, [sp, #40]	; 0x28
1000230a:	f001 fd59 	bl	10003dc0 <__aeabi_fmul>
1000230e:	1c01      	adds	r1, r0, #0
      Xb12_out -= p0;
      Yb12_out += p1;
      Xc12_out -= p2;
      Yc12_out += p3;
      Xd12_out -= p4;
      Yd12_out += p5;
10002310:	1c30      	adds	r0, r6, #0
10002312:	f001 f98d 	bl	10003630 <__aeabi_fadd>

      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      pSrc[2u * i3] = Xd12_out;

      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      pSrc[(2u * i3) + 1u] = Yd12_out;
10002316:	9e02      	ldr	r6, [sp, #8]
10002318:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000231a:	51b8      	str	r0, [r7, r6]
1000231c:	9808      	ldr	r0, [sp, #32]
1000231e:	9d06      	ldr	r5, [sp, #24]
10002320:	9910      	ldr	r1, [sp, #64]	; 0x40
10002322:	1883      	adds	r3, r0, r2
10002324:	9807      	ldr	r0, [sp, #28]
10002326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10002328:	186e      	adds	r6, r5, r1
      ia1 = ia1 + twidCoefModifier;

      /*  Updating input index */
      i0 = i0 + 1u;

   } while(--j);
1000232a:	9d15      	ldr	r5, [sp, #84]	; 0x54
1000232c:	9308      	str	r3, [sp, #32]
1000232e:	3408      	adds	r4, #8
10002330:	1883      	adds	r3, r0, r2
10002332:	3708      	adds	r7, #8
10002334:	9606      	str	r6, [sp, #24]
10002336:	9307      	str	r3, [sp, #28]
10002338:	42ac      	cmp	r4, r5
1000233a:	d000      	beq.n	1000233e <arm_radix4_butterfly_inverse_f32+0x216>
1000233c:	e721      	b.n	10002182 <arm_radix4_butterfly_inverse_f32+0x5a>

   twidCoefModifier <<= 2u;
1000233e:	9c17      	ldr	r4, [sp, #92]	; 0x5c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10002340:	ae16      	add	r6, sp, #88	; 0x58
10002342:	8830      	ldrh	r0, [r6, #0]
      /*  Updating input index */
      i0 = i0 + 1u;

   } while(--j);

   twidCoefModifier <<= 2u;
10002344:	00a7      	lsls	r7, r4, #2
10002346:	b2b9      	uxth	r1, r7
10002348:	911f      	str	r1, [sp, #124]	; 0x7c

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
1000234a:	9023      	str	r0, [sp, #140]	; 0x8c
1000234c:	9021      	str	r0, [sp, #132]	; 0x84
1000234e:	2804      	cmp	r0, #4
10002350:	d800      	bhi.n	10002354 <arm_radix4_butterfly_inverse_f32+0x22c>
10002352:	e129      	b.n	100025a8 <arm_radix4_butterfly_inverse_f32+0x480>
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10002354:	9a13      	ldr	r2, [sp, #76]	; 0x4c
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
10002356:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10002358:	0893      	lsrs	r3, r2, #2
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
1000235a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
1000235c:	931e      	str	r3, [sp, #120]	; 0x78
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
1000235e:	0070      	lsls	r0, r6, #1
10002360:	1982      	adds	r2, r0, r6
10002362:	00ec      	lsls	r4, r5, #3
10002364:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
10002366:	9d1e      	ldr	r5, [sp, #120]	; 0x78
10002368:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1000236a:	0139      	lsls	r1, r7, #4
1000236c:	3b01      	subs	r3, #1
1000236e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
10002370:	941a      	str	r4, [sp, #104]	; 0x68
10002372:	0070      	lsls	r0, r6, #1
10002374:	00ec      	lsls	r4, r5, #3
10002376:	931d      	str	r3, [sp, #116]	; 0x74
10002378:	9407      	str	r4, [sp, #28]
1000237a:	00d3      	lsls	r3, r2, #3
1000237c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1000237e:	1982      	adds	r2, r0, r6
10002380:	9d22      	ldr	r5, [sp, #136]	; 0x88
10002382:	911b      	str	r1, [sp, #108]	; 0x6c
10002384:	931c      	str	r3, [sp, #112]	; 0x70
10002386:	0139      	lsls	r1, r7, #4
10002388:	00d3      	lsls	r3, r2, #3
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
1000238a:	2700      	movs	r7, #0
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
1000238c:	9106      	str	r1, [sp, #24]
1000238e:	9308      	str	r3, [sp, #32]
10002390:	9519      	str	r5, [sp, #100]	; 0x64
10002392:	9418      	str	r4, [sp, #96]	; 0x60
10002394:	9417      	str	r4, [sp, #92]	; 0x5c
10002396:	9416      	str	r4, [sp, #88]	; 0x58
      n1 = n2;
      n2 >>= 2u;
      ia1 = 0u;

      /*  Calculation of first stage */
      j = 0;
10002398:	9715      	str	r7, [sp, #84]	; 0x54
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
1000239a:	9916      	ldr	r1, [sp, #88]	; 0x58
         si1 = pCoef[(ia1 * 2u) + 1u];
1000239c:	9816      	ldr	r0, [sp, #88]	; 0x58
         co2 = pCoef[ia2 * 2u];
1000239e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
100023a0:	680e      	ldr	r6, [r1, #0]
         si1 = pCoef[(ia1 * 2u) + 1u];
100023a2:	6842      	ldr	r2, [r0, #4]
         co2 = pCoef[ia2 * 2u];
100023a4:	681d      	ldr	r5, [r3, #0]
         si2 = pCoef[(ia2 * 2u) + 1u];
100023a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
         co3 = pCoef[ia3 * 2u];
100023a8:	9918      	ldr	r1, [sp, #96]	; 0x60
         si3 = pCoef[(ia3 * 2u) + 1u];
100023aa:	9818      	ldr	r0, [sp, #96]	; 0x60
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100023ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
100023ae:	6867      	ldr	r7, [r4, #4]
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
100023b0:	960c      	str	r6, [sp, #48]	; 0x30
         si1 = pCoef[(ia1 * 2u) + 1u];
100023b2:	920d      	str	r2, [sp, #52]	; 0x34
         co2 = pCoef[ia2 * 2u];
100023b4:	950e      	str	r5, [sp, #56]	; 0x38
         si2 = pCoef[(ia2 * 2u) + 1u];
         co3 = pCoef[ia3 * 2u];
100023b6:	680e      	ldr	r6, [r1, #0]
         si3 = pCoef[(ia3 * 2u) + 1u];
100023b8:	6842      	ldr	r2, [r0, #4]

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;

         i0 = j;
100023ba:	9d15      	ldr	r5, [sp, #84]	; 0x54
* @param[in]      twidCoefModifier twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table.   
* @param[in]      onebyfftLen      value of 1/fftLen.   
* @return none.   
*/

void arm_radix4_butterfly_inverse_f32(
100023bc:	3304      	adds	r3, #4
100023be:	9c19      	ldr	r4, [sp, #100]	; 0x64
         ia2 = ia1 + ia1;
         ia3 = ia2 + ia1;
         co1 = pCoef[ia1 * 2u];
         si1 = pCoef[(ia1 * 2u) + 1u];
         co2 = pCoef[ia2 * 2u];
         si2 = pCoef[(ia2 * 2u) + 1u];
100023c0:	970f      	str	r7, [sp, #60]	; 0x3c
         co3 = pCoef[ia3 * 2u];
100023c2:	9610      	str	r6, [sp, #64]	; 0x40
         si3 = pCoef[(ia3 * 2u) + 1u];
100023c4:	9211      	str	r2, [sp, #68]	; 0x44

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;

         i0 = j;
100023c6:	9509      	str	r5, [sp, #36]	; 0x24
100023c8:	1c1f      	adds	r7, r3, #0
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
100023ca:	6821      	ldr	r1, [r4, #0]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
100023cc:	9807      	ldr	r0, [sp, #28]
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
100023ce:	468b      	mov	fp, r1
            yaIn = pSrc[(2u * i0) + 1u];
100023d0:	683e      	ldr	r6, [r7, #0]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
100023d2:	9906      	ldr	r1, [sp, #24]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
100023d4:	5822      	ldr	r2, [r4, r0]
            i1 = i0 + n2;
            i2 = i1 + n2;
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];
100023d6:	9602      	str	r6, [sp, #8]

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];
100023d8:	9806      	ldr	r0, [sp, #24]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
100023da:	5866      	ldr	r6, [r4, r1]
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
100023dc:	9908      	ldr	r1, [sp, #32]
            i3 = i2 + n2;

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
100023de:	4691      	mov	r9, r2
            ybIn = pSrc[(2u * i1) + 1u];
100023e0:	9b07      	ldr	r3, [sp, #28]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
100023e2:	9a08      	ldr	r2, [sp, #32]
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
100023e4:	46b2      	mov	sl, r6
            ycIn = pSrc[(2u * i2) + 1u];
100023e6:	583e      	ldr	r6, [r7, r0]

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
100023e8:	5878      	ldr	r0, [r7, r1]

            xaIn = pSrc[(2u * i0)];
            yaIn = pSrc[(2u * i0) + 1u];

            xbIn = pSrc[(2u * i1)];
            ybIn = pSrc[(2u * i1) + 1u];
100023ea:	58fd      	ldr	r5, [r7, r3]

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
100023ec:	58a3      	ldr	r3, [r4, r2]
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
100023ee:	4651      	mov	r1, sl

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];
100023f0:	9001      	str	r0, [sp, #4]

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
100023f2:	4658      	mov	r0, fp
            ybIn = pSrc[(2u * i1) + 1u];

            xcIn = pSrc[(2u * i2)];
            ycIn = pSrc[(2u * i2) + 1u];

            xdIn = pSrc[(2u * i3)];
100023f4:	4698      	mov	r8, r3
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
100023f6:	f001 fe13 	bl	10004020 <__aeabi_fsub>
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
100023fa:	4641      	mov	r1, r8

            xdIn = pSrc[(2u * i3)];
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
100023fc:	9003      	str	r0, [sp, #12]
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
100023fe:	4648      	mov	r0, r9
10002400:	f001 fe0e 	bl	10004020 <__aeabi_fsub>
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10002404:	1c31      	adds	r1, r6, #0
            ydIn = pSrc[(2u * i3) + 1u];

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
10002406:	9004      	str	r0, [sp, #16]
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10002408:	9802      	ldr	r0, [sp, #8]
1000240a:	f001 fe09 	bl	10004020 <__aeabi_fsub>
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
1000240e:	9901      	ldr	r1, [sp, #4]
            /* xa - xc */
            Xaminusc = xaIn - xcIn;
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
10002410:	9005      	str	r0, [sp, #20]
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
10002412:	1c28      	adds	r0, r5, #0
10002414:	f001 fe04 	bl	10004020 <__aeabi_fsub>

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10002418:	4651      	mov	r1, sl
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
1000241a:	900a      	str	r0, [sp, #40]	; 0x28

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
1000241c:	4658      	mov	r0, fp
1000241e:	f001 f907 	bl	10003630 <__aeabi_fadd>
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10002422:	4641      	mov	r1, r8
            Yaminusc = yaIn - ycIn;
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
10002424:	4682      	mov	sl, r0
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
10002426:	4648      	mov	r0, r9
10002428:	f001 f902 	bl	10003630 <__aeabi_fadd>
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
1000242c:	1c31      	adds	r1, r6, #0
            Ybminusd = ybIn - ydIn;

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
1000242e:	4680      	mov	r8, r0
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10002430:	9802      	ldr	r0, [sp, #8]
10002432:	f001 f8fd 	bl	10003630 <__aeabi_fadd>
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10002436:	9901      	ldr	r1, [sp, #4]
            /* xa + xc */
            Xaplusc = xaIn + xcIn;
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
10002438:	1c06      	adds	r6, r0, #0
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
1000243a:	1c28      	adds	r0, r5, #0
1000243c:	f001 f8f8 	bl	10003630 <__aeabi_fadd>

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
10002440:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
10002442:	1c05      	adds	r5, r0, #0

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
10002444:	9803      	ldr	r0, [sp, #12]
10002446:	f001 fdeb 	bl	10004020 <__aeabi_fsub>
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
1000244a:	9904      	ldr	r1, [sp, #16]
            Yaplusc = yaIn + ycIn;
            /* yb + yd */
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
1000244c:	9002      	str	r0, [sp, #8]
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
1000244e:	9805      	ldr	r0, [sp, #20]
10002450:	f001 f8ee 	bl	10003630 <__aeabi_fadd>
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10002454:	4641      	mov	r1, r8
            Ybplusd = ybIn + ydIn;

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
10002456:	4681      	mov	r9, r0
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10002458:	4650      	mov	r0, sl
1000245a:	f001 fde1 	bl	10004020 <__aeabi_fsub>
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
1000245e:	1c29      	adds	r1, r5, #0
            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
10002460:	9001      	str	r0, [sp, #4]
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
10002462:	1c30      	adds	r0, r6, #0
10002464:	f001 fddc 	bl	10004020 <__aeabi_fsub>
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
10002468:	990a      	ldr	r1, [sp, #40]	; 0x28
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
1000246a:	900b      	str	r0, [sp, #44]	; 0x2c
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
1000246c:	9803      	ldr	r0, [sp, #12]
1000246e:	f001 f8df 	bl	10003630 <__aeabi_fadd>
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
10002472:	9904      	ldr	r1, [sp, #16]
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
10002474:	4683      	mov	fp, r0
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
10002476:	9805      	ldr	r0, [sp, #20]
10002478:	f001 fdd2 	bl	10004020 <__aeabi_fsub>

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
1000247c:	4641      	mov	r1, r8
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
1000247e:	9003      	str	r0, [sp, #12]

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10002480:	4650      	mov	r0, sl
10002482:	f001 f8d5 	bl	10003630 <__aeabi_fadd>
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10002486:	1c29      	adds	r1, r5, #0
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
10002488:	6020      	str	r0, [r4, #0]
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
1000248a:	1c30      	adds	r0, r6, #0
1000248c:	f001 f8d0 	bl	10003630 <__aeabi_fadd>

            Xb12_out = Xb12C_out * co1;
10002490:	990c      	ldr	r1, [sp, #48]	; 0x30
            Xd12C_out = (Xaminusc + Ybminusd);
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;
10002492:	6038      	str	r0, [r7, #0]

            Xb12_out = Xb12C_out * co1;
10002494:	9802      	ldr	r0, [sp, #8]
10002496:	f001 fc93 	bl	10003dc0 <__aeabi_fmul>
            Yb12_out = Yb12C_out * co1;
1000249a:	990c      	ldr	r1, [sp, #48]	; 0x30
            Yd12C_out = (Yaminusc - Xbminusd);

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
1000249c:	4680      	mov	r8, r0
            Yb12_out = Yb12C_out * co1;
1000249e:	4648      	mov	r0, r9
100024a0:	f001 fc8e 	bl	10003dc0 <__aeabi_fmul>
            Xc12_out = Xc12C_out * co2;
100024a4:	990e      	ldr	r1, [sp, #56]	; 0x38

            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
100024a6:	1c06      	adds	r6, r0, #0
            Xc12_out = Xc12C_out * co2;
100024a8:	9801      	ldr	r0, [sp, #4]
100024aa:	f001 fc89 	bl	10003dc0 <__aeabi_fmul>
            Yc12_out = Yc12C_out * co2;
100024ae:	990e      	ldr	r1, [sp, #56]	; 0x38
            pSrc[(2u * i0)] = Xaplusc + Xbplusd;
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
100024b0:	9004      	str	r0, [sp, #16]
            Yc12_out = Yc12C_out * co2;
100024b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
100024b4:	f001 fc84 	bl	10003dc0 <__aeabi_fmul>
            Xd12_out = Xd12C_out * co3;
100024b8:	9910      	ldr	r1, [sp, #64]	; 0x40
            pSrc[(2u * i0) + 1u] = Yaplusc + Ybplusd;

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
100024ba:	4682      	mov	sl, r0
            Xd12_out = Xd12C_out * co3;
100024bc:	4658      	mov	r0, fp
100024be:	f001 fc7f 	bl	10003dc0 <__aeabi_fmul>
            Yd12_out = Yd12C_out * co3;
100024c2:	9910      	ldr	r1, [sp, #64]	; 0x40

            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
100024c4:	1c05      	adds	r5, r0, #0
            Yd12_out = Yd12C_out * co3;
100024c6:	9803      	ldr	r0, [sp, #12]
100024c8:	f001 fc7a 	bl	10003dc0 <__aeabi_fmul>
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
100024cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Xb12_out = Xb12C_out * co1;
            Yb12_out = Yb12C_out * co1;
            Xc12_out = Xc12C_out * co2;
            Yc12_out = Yc12C_out * co2;
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;
100024ce:	9005      	str	r0, [sp, #20]
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
100024d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100024d2:	f001 fc75 	bl	10003dc0 <__aeabi_fmul>
100024d6:	1c01      	adds	r1, r0, #0
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
100024d8:	9804      	ldr	r0, [sp, #16]
100024da:	f001 fda1 	bl	10004020 <__aeabi_fsub>
            Yc12_out += p3;
            Xd12_out -= p4;
            Yd12_out += p5;

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
100024de:	9a07      	ldr	r2, [sp, #28]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
100024e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
            Yc12_out += p3;
            Xd12_out -= p4;
            Yd12_out += p5;

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;
100024e2:	50a0      	str	r0, [r4, r2]
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
100024e4:	9801      	ldr	r0, [sp, #4]
100024e6:	f001 fc6b 	bl	10003dc0 <__aeabi_fmul>
100024ea:	1c01      	adds	r1, r0, #0
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
            Yc12_out += p3;
100024ec:	4650      	mov	r0, sl
100024ee:	f001 f89f 	bl	10003630 <__aeabi_fadd>

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2u * i1] = Xc12_out;

            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;
100024f2:	9b07      	ldr	r3, [sp, #28]
100024f4:	50f8      	str	r0, [r7, r3]
            Xd12_out = Xd12C_out * co3;
            Yd12_out = Yd12C_out * co3;

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
100024f6:	990d      	ldr	r1, [sp, #52]	; 0x34
100024f8:	4648      	mov	r0, r9
100024fa:	f001 fc61 	bl	10003dc0 <__aeabi_fmul>
100024fe:	1c01      	adds	r1, r0, #0
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
10002500:	4640      	mov	r0, r8
10002502:	f001 fd8d 	bl	10004020 <__aeabi_fsub>

            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            pSrc[(2u * i1) + 1u] = Yc12_out;

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;
10002506:	9906      	ldr	r1, [sp, #24]
10002508:	5060      	str	r0, [r4, r1]
            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
1000250a:	990d      	ldr	r1, [sp, #52]	; 0x34
1000250c:	9802      	ldr	r0, [sp, #8]
1000250e:	f001 fc57 	bl	10003dc0 <__aeabi_fmul>
10002512:	1c01      	adds	r1, r0, #0
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
            
            Xb12_out -= p0;
            Yb12_out += p1;
10002514:	1c30      	adds	r0, r6, #0
10002516:	f001 f88b 	bl	10003630 <__aeabi_fadd>

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
1000251a:	9e06      	ldr	r6, [sp, #24]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
1000251c:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2u * i2] = Xb12_out;

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;
1000251e:	51b8      	str	r0, [r7, r6]
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
10002520:	9803      	ldr	r0, [sp, #12]
10002522:	f001 fc4d 	bl	10003dc0 <__aeabi_fmul>
10002526:	1c01      	adds	r1, r0, #0
            
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
            Yc12_out += p3;
            Xd12_out -= p4;
10002528:	1c28      	adds	r0, r5, #0
1000252a:	f001 fd79 	bl	10004020 <__aeabi_fsub>

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
1000252e:	9d08      	ldr	r5, [sp, #32]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10002530:	9911      	ldr	r1, [sp, #68]	; 0x44

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2u * i2) + 1u] = Yb12_out;

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;
10002532:	5160      	str	r0, [r4, r5]
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
10002534:	4658      	mov	r0, fp
10002536:	f001 fc43 	bl	10003dc0 <__aeabi_fmul>
1000253a:	1c01      	adds	r1, r0, #0
            Xb12_out -= p0;
            Yb12_out += p1;
            Xc12_out -= p2;
            Yc12_out += p3;
            Xd12_out -= p4;
            Yd12_out += p5;
1000253c:	9805      	ldr	r0, [sp, #20]
1000253e:	f001 f877 	bl	10003630 <__aeabi_fadd>

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
10002542:	9a08      	ldr	r2, [sp, #32]

            i0 += n1;
10002544:	9b13      	ldr	r3, [sp, #76]	; 0x4c

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2u * i3] = Xd12_out;

            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            pSrc[(2u * i3) + 1u] = Yd12_out;
10002546:	50b8      	str	r0, [r7, r2]

            i0 += n1;
10002548:	9809      	ldr	r0, [sp, #36]	; 0x24
1000254a:	9e12      	ldr	r6, [sp, #72]	; 0x48
1000254c:	18c1      	adds	r1, r0, r3
1000254e:	9109      	str	r1, [sp, #36]	; 0x24
         } while(i0 < fftLen);
10002550:	9d14      	ldr	r5, [sp, #80]	; 0x50
10002552:	9a09      	ldr	r2, [sp, #36]	; 0x24
10002554:	19a4      	adds	r4, r4, r6
10002556:	19bf      	adds	r7, r7, r6
10002558:	4295      	cmp	r5, r2
1000255a:	d900      	bls.n	1000255e <arm_radix4_butterfly_inverse_f32+0x436>
1000255c:	e735      	b.n	100023ca <arm_radix4_butterfly_inverse_f32+0x2a2>
         j++;
1000255e:	9815      	ldr	r0, [sp, #84]	; 0x54
10002560:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002562:	991a      	ldr	r1, [sp, #104]	; 0x68
10002564:	9c17      	ldr	r4, [sp, #92]	; 0x5c
10002566:	3001      	adds	r0, #1
10002568:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
1000256a:	185e      	adds	r6, r3, r1
1000256c:	9015      	str	r0, [sp, #84]	; 0x54
1000256e:	9919      	ldr	r1, [sp, #100]	; 0x64
10002570:	9818      	ldr	r0, [sp, #96]	; 0x60
10002572:	9a1c      	ldr	r2, [sp, #112]	; 0x70
10002574:	19e5      	adds	r5, r4, r7
10002576:	9616      	str	r6, [sp, #88]	; 0x58
      } while(j <= (n2 - 1u));
10002578:	9c1d      	ldr	r4, [sp, #116]	; 0x74
1000257a:	9e15      	ldr	r6, [sp, #84]	; 0x54
1000257c:	1883      	adds	r3, r0, r2
1000257e:	3108      	adds	r1, #8
10002580:	9517      	str	r5, [sp, #92]	; 0x5c
10002582:	9318      	str	r3, [sp, #96]	; 0x60
10002584:	9119      	str	r1, [sp, #100]	; 0x64
10002586:	42a6      	cmp	r6, r4
10002588:	d800      	bhi.n	1000258c <arm_radix4_butterfly_inverse_f32+0x464>
1000258a:	e706      	b.n	1000239a <arm_radix4_butterfly_inverse_f32+0x272>
      twidCoefModifier <<= 2u;
1000258c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
1000258e:	9a21      	ldr	r2, [sp, #132]	; 0x84

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10002590:	00bd      	lsls	r5, r7, #2
   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
10002592:	991e      	ldr	r1, [sp, #120]	; 0x78

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10002594:	b2a8      	uxth	r0, r5
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
10002596:	0893      	lsrs	r3, r2, #2

            i0 += n1;
         } while(i0 < fftLen);
         j++;
      } while(j <= (n2 - 1u));
      twidCoefModifier <<= 2u;
10002598:	901f      	str	r0, [sp, #124]	; 0x7c
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
1000259a:	9321      	str	r3, [sp, #132]	; 0x84
   {
      /*  Initializations for the first stage */
      n1 = n2;
      n2 >>= 2u;
1000259c:	9113      	str	r1, [sp, #76]	; 0x4c
   } while(--j);

   twidCoefModifier <<= 2u;

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2u; k > 4u; k >>= 2u)
1000259e:	2b04      	cmp	r3, #4
100025a0:	d902      	bls.n	100025a8 <arm_radix4_butterfly_inverse_f32+0x480>
100025a2:	00cd      	lsls	r5, r1, #3
100025a4:	9512      	str	r5, [sp, #72]	; 0x48
100025a6:	e6d5      	b.n	10002354 <arm_radix4_butterfly_inverse_f32+0x22c>
100025a8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
         si3 = pCoef[(ia3 * 2u) + 1u];

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;

         i0 = j;
100025aa:	9c22      	ldr	r4, [sp, #136]	; 0x88
100025ac:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
100025ae:	46b3      	mov	fp, r6

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
100025b0:	6860      	ldr	r0, [r4, #4]
   ptr1 = &pSrc[0];

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
100025b2:	6827      	ldr	r7, [r4, #0]
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
100025b4:	6923      	ldr	r3, [r4, #16]

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
100025b6:	4681      	mov	r9, r0
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
      xdIn = ptr1[6];
100025b8:	69a1      	ldr	r1, [r4, #24]
      ydIn = ptr1[7];
100025ba:	69e0      	ldr	r0, [r4, #28]
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
100025bc:	68e2      	ldr	r2, [r4, #12]
   ptr1 = &pSrc[0];

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
100025be:	46ba      	mov	sl, r7
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
      xdIn = ptr1[6];
100025c0:	9107      	str	r1, [sp, #28]
      ydIn = ptr1[7];
100025c2:	9008      	str	r0, [sp, #32]

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100025c4:	1c19      	adds	r1, r3, #0
100025c6:	4650      	mov	r0, sl
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
100025c8:	4698      	mov	r8, r3
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
100025ca:	9206      	str	r2, [sp, #24]
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100025cc:	f001 f830 	bl	10003630 <__aeabi_fadd>

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100025d0:	4641      	mov	r1, r8
      xdIn = ptr1[6];
      ydIn = ptr1[7];

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
100025d2:	9009      	str	r0, [sp, #36]	; 0x24

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100025d4:	4650      	mov	r0, sl
100025d6:	f001 fd23 	bl	10004020 <__aeabi_fsub>
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
      ybIn = ptr1[3];
      xcIn = ptr1[4];
      ycIn = ptr1[5];
100025da:	6967      	ldr	r7, [r4, #20]
      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
100025dc:	4680      	mov	r8, r0

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100025de:	1c39      	adds	r1, r7, #0
100025e0:	4648      	mov	r0, r9
100025e2:	f001 f825 	bl	10003630 <__aeabi_fadd>

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100025e6:	1c39      	adds	r1, r7, #0

      /* xa - xc */
      Xaminusc = xaIn - xcIn;

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
100025e8:	4682      	mov	sl, r0

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100025ea:	4648      	mov	r0, r9
100025ec:	f001 fd18 	bl	10004020 <__aeabi_fsub>
   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
      yaIn = ptr1[1];
      xbIn = ptr1[2];
100025f0:	68a6      	ldr	r6, [r4, #8]

      /* ya - yc */
      Yaminusc = yaIn - ycIn;

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100025f2:	9907      	ldr	r1, [sp, #28]

      /* ya + yc */
      Yaplusc = yaIn + ycIn;

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
100025f4:	9002      	str	r0, [sp, #8]

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100025f6:	1c30      	adds	r0, r6, #0
100025f8:	f001 f81a 	bl	10003630 <__aeabi_fadd>

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
100025fc:	9908      	ldr	r1, [sp, #32]

      /* ya - yc */
      Yaminusc = yaIn - ycIn;

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
100025fe:	9001      	str	r0, [sp, #4]

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10002600:	9806      	ldr	r0, [sp, #24]
10002602:	f001 f815 	bl	10003630 <__aeabi_fadd>

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
10002606:	9907      	ldr	r1, [sp, #28]

      /* xb + xd */
      Xbplusd = xbIn + xdIn;

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
10002608:	4681      	mov	r9, r0

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
1000260a:	1c30      	adds	r0, r6, #0
1000260c:	f001 fd08 	bl	10004020 <__aeabi_fsub>

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10002610:	9908      	ldr	r1, [sp, #32]

      /* yb + yd */
      Ybplusd = ybIn + ydIn;

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
10002612:	1c06      	adds	r6, r0, #0

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
10002614:	9806      	ldr	r0, [sp, #24]
10002616:	f001 fd03 	bl	10004020 <__aeabi_fsub>
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
1000261a:	9901      	ldr	r1, [sp, #4]

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
1000261c:	1c07      	adds	r7, r0, #0
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
1000261e:	9809      	ldr	r0, [sp, #36]	; 0x24
10002620:	f001 f806 	bl	10003630 <__aeabi_fadd>
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
10002624:	1c29      	adds	r1, r5, #0
10002626:	f001 fbcb 	bl	10003dc0 <__aeabi_fmul>
      Ybminusd = ybIn - ydIn;
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
1000262a:	4649      	mov	r1, r9
      p5 = a5 * onebyfftLen;
      p6 = a6 * onebyfftLen;
      p7 = a7 * onebyfftLen;
   
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
1000262c:	6020      	str	r0, [r4, #0]
      Ybminusd = ybIn - ydIn;
      
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
1000262e:	4650      	mov	r0, sl
10002630:	f000 fffe 	bl	10003630 <__aeabi_fadd>
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
10002634:	1c29      	adds	r1, r5, #0
10002636:	f001 fbc3 	bl	10003dc0 <__aeabi_fmul>
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
1000263a:	9901      	ldr	r1, [sp, #4]
      p7 = a7 * onebyfftLen;
   
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
1000263c:	6060      	str	r0, [r4, #4]
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
1000263e:	9809      	ldr	r0, [sp, #36]	; 0x24
10002640:	f001 fcee 	bl	10004020 <__aeabi_fsub>
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
10002644:	1c29      	adds	r1, r5, #0
10002646:	f001 fbbb 	bl	10003dc0 <__aeabi_fmul>
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
1000264a:	4649      	mov	r1, r9
      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
1000264c:	60a0      	str	r0, [r4, #8]
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
1000264e:	4650      	mov	r0, sl
10002650:	f001 fce6 	bl	10004020 <__aeabi_fsub>
      a7 = (Yaminusc - Xbminusd);
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
10002654:	1c29      	adds	r1, r5, #0
10002656:	f001 fbb3 	bl	10003dc0 <__aeabi_fmul>
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
1000265a:	1c39      	adds	r1, r7, #0
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
1000265c:	60e0      	str	r0, [r4, #12]
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
1000265e:	4640      	mov	r0, r8
10002660:	f001 fcde 	bl	10004020 <__aeabi_fsub>
   
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
10002664:	1c29      	adds	r1, r5, #0
10002666:	f001 fbab 	bl	10003dc0 <__aeabi_fmul>
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
1000266a:	1c31      	adds	r1, r6, #0
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
1000266c:	6120      	str	r0, [r4, #16]
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
1000266e:	9802      	ldr	r0, [sp, #8]
10002670:	f000 ffde 	bl	10003630 <__aeabi_fadd>
      p0 = a0 * onebyfftLen;
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
      p5 = a5 * onebyfftLen;
10002674:	1c29      	adds	r1, r5, #0
10002676:	f001 fba3 	bl	10003dc0 <__aeabi_fmul>
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
1000267a:	1c39      	adds	r1, r7, #0
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
1000267c:	6160      	str	r0, [r4, #20]
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
1000267e:	4640      	mov	r0, r8
10002680:	f000 ffd6 	bl	10003630 <__aeabi_fadd>
      p1 = a1 * onebyfftLen;
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
      p5 = a5 * onebyfftLen;
      p6 = a6 * onebyfftLen;
10002684:	1c29      	adds	r1, r5, #0
10002686:	f001 fb9b 	bl	10003dc0 <__aeabi_fmul>
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
1000268a:	1c31      	adds	r1, r6, #0
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[6] = p6;
1000268c:	61a0      	str	r0, [r4, #24]
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
1000268e:	9802      	ldr	r0, [sp, #8]
10002690:	f001 fcc6 	bl	10004020 <__aeabi_fsub>
      p2 = a2 * onebyfftLen;
      p3 = a3 * onebyfftLen;
      p4 = a4 * onebyfftLen;
      p5 = a5 * onebyfftLen;
      p6 = a6 * onebyfftLen;
      p7 = a7 * onebyfftLen;
10002694:	1c29      	adds	r1, r5, #0
10002696:	f001 fb93 	bl	10003dc0 <__aeabi_fmul>
      ptr1[7] = p7;

      /* increment source pointer by 8 for next calculations */
      ptr1 = ptr1 + 8u;

   } while(--j);
1000269a:	2201      	movs	r2, #1
1000269c:	4253      	negs	r3, r2
1000269e:	449b      	add	fp, r3
100026a0:	4659      	mov	r1, fp
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[6] = p6;
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      ptr1[7] = p7;
100026a2:	61e0      	str	r0, [r4, #28]

      /* increment source pointer by 8 for next calculations */
      ptr1 = ptr1 + 8u;
100026a4:	3420      	adds	r4, #32

   } while(--j);
100026a6:	2900      	cmp	r1, #0
100026a8:	d182      	bne.n	100025b0 <arm_radix4_butterfly_inverse_f32+0x488>
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      pSrc[(2u * i3) + 1u] = s2 * onebyfftLen;
   }

#endif /* #ifndef ARM_MATH_CM0_FAMILY_FAMILY */
}
100026aa:	b025      	add	sp, #148	; 0x94
100026ac:	bc3c      	pop	{r2, r3, r4, r5}
100026ae:	4690      	mov	r8, r2
100026b0:	4699      	mov	r9, r3
100026b2:	46a2      	mov	sl, r4
100026b4:	46ab      	mov	fp, r5
100026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100026b8 <arm_cfft_radix4_f32>:
*/

void arm_cfft_radix4_f32(
const arm_cfft_radix4_instance_f32 * S,
float32_t * pSrc)
{
100026b8:	b530      	push	{r4, r5, lr}

   if(S->ifftFlag == 1u)
100026ba:	7883      	ldrb	r3, [r0, #2]
*/

void arm_cfft_radix4_f32(
const arm_cfft_radix4_instance_f32 * S,
float32_t * pSrc)
{
100026bc:	1c0d      	adds	r5, r1, #0
100026be:	b083      	sub	sp, #12
100026c0:	1c04      	adds	r4, r0, #0

   if(S->ifftFlag == 1u)
   {
      /*  Complex IFFT radix-4  */
      arm_radix4_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
100026c2:	8801      	ldrh	r1, [r0, #0]
void arm_cfft_radix4_f32(
const arm_cfft_radix4_instance_f32 * S,
float32_t * pSrc)
{

   if(S->ifftFlag == 1u)
100026c4:	2b01      	cmp	r3, #1
100026c6:	d009      	beq.n	100026dc <arm_cfft_radix4_f32+0x24>
      S->twidCoefModifier, S->onebyfftLen);
   }
   else
   {
      /*  Complex FFT radix-4  */
      arm_radix4_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
100026c8:	8983      	ldrh	r3, [r0, #12]
100026ca:	6862      	ldr	r2, [r4, #4]
100026cc:	1c28      	adds	r0, r5, #0
100026ce:	f7ff fa7f 	bl	10001bd0 <arm_radix4_butterfly_f32>
      S->twidCoefModifier);
   }

   if(S->bitReverseFlag == 1u)
100026d2:	78e0      	ldrb	r0, [r4, #3]
100026d4:	2801      	cmp	r0, #1
100026d6:	d00b      	beq.n	100026f0 <arm_cfft_radix4_f32+0x38>
   {
      /*  Bit Reversal */
      arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
   }

}
100026d8:	b003      	add	sp, #12
100026da:	bd30      	pop	{r4, r5, pc}
{

   if(S->ifftFlag == 1u)
   {
      /*  Complex IFFT radix-4  */
      arm_radix4_butterfly_inverse_f32(pSrc, S->fftLen, S->pTwiddle,
100026dc:	6902      	ldr	r2, [r0, #16]
100026de:	8983      	ldrh	r3, [r0, #12]
100026e0:	9200      	str	r2, [sp, #0]
100026e2:	1c28      	adds	r0, r5, #0
100026e4:	6862      	ldr	r2, [r4, #4]
100026e6:	f7ff fd1f 	bl	10002128 <arm_radix4_butterfly_inverse_f32>
      /*  Complex FFT radix-4  */
      arm_radix4_butterfly_f32(pSrc, S->fftLen, S->pTwiddle,
      S->twidCoefModifier);
   }

   if(S->bitReverseFlag == 1u)
100026ea:	78e0      	ldrb	r0, [r4, #3]
100026ec:	2801      	cmp	r0, #1
100026ee:	d1f3      	bne.n	100026d8 <arm_cfft_radix4_f32+0x20>
   {
      /*  Bit Reversal */
      arm_bitreversal_f32(pSrc, S->fftLen, S->bitRevFactor, S->pBitRevTable);
100026f0:	8821      	ldrh	r1, [r4, #0]
100026f2:	89e2      	ldrh	r2, [r4, #14]
100026f4:	68a3      	ldr	r3, [r4, #8]
100026f6:	1c28      	adds	r0, r5, #0
100026f8:	f000 f964 	bl	100029c4 <arm_bitreversal_f32>
100026fc:	e7ec      	b.n	100026d8 <arm_cfft_radix4_f32+0x20>
100026fe:	46c0      	nop			; (mov r8, r8)

10002700 <arm_cfft_radix4_init_f32>:
arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
10002700:	b510      	push	{r4, lr}

  /*  Initialise the FFT length */
  S->fftLen = fftLen;

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;
10002702:	4c23      	ldr	r4, [pc, #140]	; (10002790 <arm_cfft_radix4_init_f32+0x90>)

  /*  Initialise the Flag for selection of CFFT or CIFFT */
  S->ifftFlag = ifftFlag;

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;
10002704:	70c3      	strb	r3, [r0, #3]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
10002706:	2380      	movs	r3, #128	; 0x80

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;

  /*  Initialise the Flag for selection of CFFT or CIFFT */
  S->ifftFlag = ifftFlag;
10002708:	7082      	strb	r2, [r0, #2]
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;

  /*  Initialise the FFT length */
  S->fftLen = fftLen;
1000270a:	8001      	strh	r1, [r0, #0]

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;
1000270c:	6044      	str	r4, [r0, #4]

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
1000270e:	005a      	lsls	r2, r3, #1
10002710:	4291      	cmp	r1, r2
10002712:	d033      	beq.n	1000277c <arm_cfft_radix4_init_f32+0x7c>
10002714:	d90a      	bls.n	1000272c <arm_cfft_radix4_init_f32+0x2c>
10002716:	2480      	movs	r4, #128	; 0x80
10002718:	00e3      	lsls	r3, r4, #3
1000271a:	4299      	cmp	r1, r3
1000271c:	d01c      	beq.n	10002758 <arm_cfft_radix4_init_f32+0x58>
1000271e:	2280      	movs	r2, #128	; 0x80
10002720:	0154      	lsls	r4, r2, #5
10002722:	42a1      	cmp	r1, r4
10002724:	d00f      	beq.n	10002746 <arm_cfft_radix4_init_f32+0x46>
    break;


  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
10002726:	20ff      	movs	r0, #255	; 0xff
    break;
  }

  return (status);
10002728:	b240      	sxtb	r0, r0
}
1000272a:	bd10      	pop	{r4, pc}

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
1000272c:	2910      	cmp	r1, #16
1000272e:	d01c      	beq.n	1000276a <arm_cfft_radix4_init_f32+0x6a>
10002730:	2940      	cmp	r1, #64	; 0x40
10002732:	d1f8      	bne.n	10002726 <arm_cfft_radix4_init_f32+0x26>
    S->onebyfftLen = 0.00390625f;
    break;

  case 64u:
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64u;
10002734:	4917      	ldr	r1, [pc, #92]	; (10002794 <arm_cfft_radix4_init_f32+0x94>)
    S->bitRevFactor = 64u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
10002736:	4c18      	ldr	r4, [pc, #96]	; (10002798 <arm_cfft_radix4_init_f32+0x98>)
    S->onebyfftLen = 0.015625f;
10002738:	23f2      	movs	r3, #242	; 0xf2
1000273a:	059a      	lsls	r2, r3, #22
    S->onebyfftLen = 0.00390625f;
    break;

  case 64u:
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64u;
1000273c:	60c1      	str	r1, [r0, #12]
    S->bitRevFactor = 64u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
1000273e:	6084      	str	r4, [r0, #8]
    S->onebyfftLen = 0.015625f;
10002740:	6102      	str	r2, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10002742:	2000      	movs	r0, #0
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64u;
    S->bitRevFactor = 64u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
    S->onebyfftLen = 0.015625f;
    break;
10002744:	e7f0      	b.n	10002728 <arm_cfft_radix4_init_f32+0x28>

  case 4096u:
    /*  Initializations of structure parameters for 4096 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 1u;
10002746:	4915      	ldr	r1, [pc, #84]	; (1000279c <arm_cfft_radix4_init_f32+0x9c>)
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 1u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
10002748:	4b15      	ldr	r3, [pc, #84]	; (100027a0 <arm_cfft_radix4_init_f32+0xa0>)
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
1000274a:	22e6      	movs	r2, #230	; 0xe6
1000274c:	0594      	lsls	r4, r2, #22

  case 4096u:
    /*  Initializations of structure parameters for 4096 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 1u;
1000274e:	60c1      	str	r1, [r0, #12]
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 1u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
10002750:	6083      	str	r3, [r0, #8]
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
10002752:	6104      	str	r4, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10002754:	2000      	movs	r0, #0
    S->bitRevFactor = 1u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
    break;
10002756:	e7e7      	b.n	10002728 <arm_cfft_radix4_init_f32+0x28>

  case 1024u:
    /*  Initializations of structure parameters for 1024 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 4u;
10002758:	4912      	ldr	r1, [pc, #72]	; (100027a4 <arm_cfft_radix4_init_f32+0xa4>)
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 4u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
1000275a:	4b13      	ldr	r3, [pc, #76]	; (100027a8 <arm_cfft_radix4_init_f32+0xa8>)
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
1000275c:	22ea      	movs	r2, #234	; 0xea
1000275e:	0594      	lsls	r4, r2, #22

  case 1024u:
    /*  Initializations of structure parameters for 1024 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 4u;
10002760:	60c1      	str	r1, [r0, #12]
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 4u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
10002762:	6083      	str	r3, [r0, #8]
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
10002764:	6104      	str	r4, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10002766:	2000      	movs	r0, #0
    S->bitRevFactor = 4u;
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
    break;
10002768:	e7de      	b.n	10002728 <arm_cfft_radix4_init_f32+0x28>
    S->onebyfftLen = 0.015625f;
    break;

  case 16u:
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256u;
1000276a:	4910      	ldr	r1, [pc, #64]	; (100027ac <arm_cfft_radix4_init_f32+0xac>)
    S->bitRevFactor = 256u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
1000276c:	4c10      	ldr	r4, [pc, #64]	; (100027b0 <arm_cfft_radix4_init_f32+0xb0>)
    S->onebyfftLen = 0.0625f;
1000276e:	23f6      	movs	r3, #246	; 0xf6
10002770:	059a      	lsls	r2, r3, #22
    S->onebyfftLen = 0.015625f;
    break;

  case 16u:
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256u;
10002772:	60c1      	str	r1, [r0, #12]
    S->bitRevFactor = 256u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
10002774:	6084      	str	r4, [r0, #8]
    S->onebyfftLen = 0.0625f;
10002776:	6102      	str	r2, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
10002778:	2000      	movs	r0, #0
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256u;
    S->bitRevFactor = 256u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
    S->onebyfftLen = 0.0625f;
    break;
1000277a:	e7d5      	b.n	10002728 <arm_cfft_radix4_init_f32+0x28>
    break;


  case 256u:
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16u;
1000277c:	490d      	ldr	r1, [pc, #52]	; (100027b4 <arm_cfft_radix4_init_f32+0xb4>)
    S->bitRevFactor = 16u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
1000277e:	4b0e      	ldr	r3, [pc, #56]	; (100027b8 <arm_cfft_radix4_init_f32+0xb8>)
    S->onebyfftLen = 0.00390625f;
10002780:	22ee      	movs	r2, #238	; 0xee
10002782:	0594      	lsls	r4, r2, #22
    break;


  case 256u:
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16u;
10002784:	60c1      	str	r1, [r0, #12]
    S->bitRevFactor = 16u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
10002786:	6083      	str	r3, [r0, #8]
    S->onebyfftLen = 0.00390625f;
10002788:	6104      	str	r4, [r0, #16]
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
1000278a:	2000      	movs	r0, #0
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16u;
    S->bitRevFactor = 16u;
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
    S->onebyfftLen = 0.00390625f;
    break;
1000278c:	e7cc      	b.n	10002728 <arm_cfft_radix4_init_f32+0x28>
1000278e:	46c0      	nop			; (mov r8, r8)
10002790:	1001cae8 	.word	0x1001cae8
10002794:	00400040 	.word	0x00400040
10002798:	1002cae6 	.word	0x1002cae6
1000279c:	00010001 	.word	0x00010001
100027a0:	1002ca68 	.word	0x1002ca68
100027a4:	00040004 	.word	0x00040004
100027a8:	1002ca6e 	.word	0x1002ca6e
100027ac:	01000100 	.word	0x01000100
100027b0:	1002cc66 	.word	0x1002cc66
100027b4:	00100010 	.word	0x00100010
100027b8:	1002ca86 	.word	0x1002ca86

100027bc <arm_copy_f32>:

void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
100027bc:	b530      	push	{r4, r5, lr}
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100027be:	2a00      	cmp	r2, #0
100027c0:	d019      	beq.n	100027f6 <arm_copy_f32+0x3a>
100027c2:	2301      	movs	r3, #1
100027c4:	1c1d      	adds	r5, r3, #0
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
100027c6:	c808      	ldmia	r0!, {r3}
100027c8:	1e54      	subs	r4, r2, #1
100027ca:	4025      	ands	r5, r4
100027cc:	c108      	stmia	r1!, {r3}
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100027ce:	2c00      	cmp	r4, #0
100027d0:	d011      	beq.n	100027f6 <arm_copy_f32+0x3a>
100027d2:	2d00      	cmp	r5, #0
100027d4:	d004      	beq.n	100027e0 <arm_copy_f32+0x24>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
100027d6:	c810      	ldmia	r0!, {r4}
100027d8:	c110      	stmia	r1!, {r4}

    /* Decrement the loop counter */
    blkCnt--;
100027da:	1e94      	subs	r4, r2, #2
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100027dc:	2c00      	cmp	r4, #0
100027de:	d00a      	beq.n	100027f6 <arm_copy_f32+0x3a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
100027e0:	1c02      	adds	r2, r0, #0
100027e2:	ca20      	ldmia	r2!, {r5}
100027e4:	1c0b      	adds	r3, r1, #0
100027e6:	c320      	stmia	r3!, {r5}
100027e8:	6840      	ldr	r0, [r0, #4]

    /* Decrement the loop counter */
    blkCnt--;
100027ea:	3c02      	subs	r4, #2

  while(blkCnt > 0u)
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
100027ec:	6048      	str	r0, [r1, #4]
100027ee:	1d10      	adds	r0, r2, #4
100027f0:	1d19      	adds	r1, r3, #4
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100027f2:	2c00      	cmp	r4, #0
100027f4:	d1f4      	bne.n	100027e0 <arm_copy_f32+0x24>
    *pDst++ = *pSrc++;

    /* Decrement the loop counter */
    blkCnt--;
  }
}
100027f6:	bd30      	pop	{r4, r5, pc}

100027f8 <arm_fill_f32>:

void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize)
{
100027f8:	b510      	push	{r4, lr}
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
100027fa:	2a00      	cmp	r2, #0
100027fc:	d012      	beq.n	10002824 <arm_fill_f32+0x2c>
100027fe:	1e54      	subs	r4, r2, #1
10002800:	2301      	movs	r3, #1
10002802:	4023      	ands	r3, r4
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;
10002804:	c101      	stmia	r1!, {r0}
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
10002806:	2c00      	cmp	r4, #0
10002808:	d00c      	beq.n	10002824 <arm_fill_f32+0x2c>
1000280a:	2b00      	cmp	r3, #0
1000280c:	d003      	beq.n	10002816 <arm_fill_f32+0x1e>
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;

    /* Decrement the loop counter */
    blkCnt--;
1000280e:	1e94      	subs	r4, r2, #2

  while(blkCnt > 0u)
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;
10002810:	c101      	stmia	r1!, {r0}
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
10002812:	2c00      	cmp	r4, #0
10002814:	d006      	beq.n	10002824 <arm_fill_f32+0x2c>
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;
10002816:	1c0a      	adds	r2, r1, #0
10002818:	c201      	stmia	r2!, {r0}

    /* Decrement the loop counter */
    blkCnt--;
1000281a:	3c02      	subs	r4, #2

  while(blkCnt > 0u)
  {
    /* C = value */
    /* Fill the value in the destination buffer */
    *pDst++ = value;
1000281c:	6048      	str	r0, [r1, #4]
1000281e:	1d11      	adds	r1, r2, #4
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
10002820:	2c00      	cmp	r4, #0
10002822:	d1f8      	bne.n	10002816 <arm_fill_f32+0x1e>
    *pDst++ = value;

    /* Decrement the loop counter */
    blkCnt--;
  }
}
10002824:	bd10      	pop	{r4, pc}
10002826:	46c0      	nop			; (mov r8, r8)

10002828 <arm_cmplx_mult_cmplx_f32>:
void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples)
{
10002828:	b5f0      	push	{r4, r5, r6, r7, lr}
1000282a:	465f      	mov	r7, fp
1000282c:	4644      	mov	r4, r8
1000282e:	4656      	mov	r6, sl
10002830:	464d      	mov	r5, r9
10002832:	b4f0      	push	{r4, r5, r6, r7}
10002834:	1c14      	adds	r4, r2, #0
10002836:	b085      	sub	sp, #20
10002838:	1e1f      	subs	r7, r3, #0
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
1000283a:	d100      	bne.n	1000283e <arm_cmplx_mult_cmplx_f32+0x16>
1000283c:	e0ba      	b.n	100029b4 <arm_cmplx_mult_cmplx_f32+0x18c>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
1000283e:	6846      	ldr	r6, [r0, #4]

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
10002840:	6805      	ldr	r5, [r0, #0]
10002842:	1e5a      	subs	r2, r3, #1
    b1 = *pSrcA++;
10002844:	46b1      	mov	r9, r6
10002846:	2301      	movs	r3, #1
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
10002848:	1c06      	adds	r6, r0, #0
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
    c1 = *pSrcB++;
1000284a:	6808      	ldr	r0, [r1, #0]
1000284c:	9202      	str	r2, [sp, #8]
1000284e:	401a      	ands	r2, r3

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
10002850:	46ab      	mov	fp, r5
    b1 = *pSrcA++;
    c1 = *pSrcB++;
10002852:	4680      	mov	r8, r0
10002854:	9203      	str	r2, [sp, #12]
    d1 = *pSrcB++;
10002856:	684a      	ldr	r2, [r1, #4]
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
10002858:	1c0d      	adds	r5, r1, #0
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
1000285a:	4658      	mov	r0, fp
1000285c:	4641      	mov	r1, r8
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;
1000285e:	4692      	mov	sl, r2

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002860:	f001 faae 	bl	10003dc0 <__aeabi_fmul>
10002864:	4651      	mov	r1, sl
10002866:	9001      	str	r0, [sp, #4]
10002868:	4648      	mov	r0, r9
1000286a:	f001 faa9 	bl	10003dc0 <__aeabi_fmul>
1000286e:	1c01      	adds	r1, r0, #0
10002870:	9801      	ldr	r0, [sp, #4]
10002872:	f001 fbd5 	bl	10004020 <__aeabi_fsub>
    *pDst++ = (a1 * d1) + (b1 * c1);
10002876:	4651      	mov	r1, sl
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002878:	6020      	str	r0, [r4, #0]
    *pDst++ = (a1 * d1) + (b1 * c1);
1000287a:	4658      	mov	r0, fp
1000287c:	f001 faa0 	bl	10003dc0 <__aeabi_fmul>
10002880:	4641      	mov	r1, r8
10002882:	4683      	mov	fp, r0
10002884:	4648      	mov	r0, r9
10002886:	f001 fa9b 	bl	10003dc0 <__aeabi_fmul>
1000288a:	1c01      	adds	r1, r0, #0
1000288c:	4658      	mov	r0, fp
1000288e:	f000 fecf 	bl	10003630 <__aeabi_fadd>
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
10002892:	9902      	ldr	r1, [sp, #8]
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
    *pDst++ = (a1 * d1) + (b1 * c1);
10002894:	6060      	str	r0, [r4, #4]
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
10002896:	3608      	adds	r6, #8
10002898:	3508      	adds	r5, #8
1000289a:	3408      	adds	r4, #8
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
1000289c:	2900      	cmp	r1, #0
1000289e:	d100      	bne.n	100028a2 <arm_cmplx_mult_cmplx_f32+0x7a>
100028a0:	e088      	b.n	100029b4 <arm_cmplx_mult_cmplx_f32+0x18c>
100028a2:	9b03      	ldr	r3, [sp, #12]
100028a4:	2b00      	cmp	r3, #0
100028a6:	d028      	beq.n	100028fa <arm_cmplx_mult_cmplx_f32+0xd2>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
100028a8:	6872      	ldr	r2, [r6, #4]
    c1 = *pSrcB++;
    d1 = *pSrcB++;
100028aa:	686b      	ldr	r3, [r5, #4]
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
    c1 = *pSrcB++;
100028ac:	6829      	ldr	r1, [r5, #0]

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
100028ae:	6830      	ldr	r0, [r6, #0]
    b1 = *pSrcA++;
100028b0:	4691      	mov	r9, r2
    c1 = *pSrcB++;
    d1 = *pSrcB++;
100028b2:	469a      	mov	sl, r3

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
100028b4:	4683      	mov	fp, r0
    b1 = *pSrcA++;
    c1 = *pSrcB++;
100028b6:	4688      	mov	r8, r1
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
100028b8:	f001 fa82 	bl	10003dc0 <__aeabi_fmul>
100028bc:	4651      	mov	r1, sl
100028be:	9002      	str	r0, [sp, #8]
100028c0:	4648      	mov	r0, r9
100028c2:	f001 fa7d 	bl	10003dc0 <__aeabi_fmul>
100028c6:	1c01      	adds	r1, r0, #0
100028c8:	9802      	ldr	r0, [sp, #8]
100028ca:	f001 fba9 	bl	10004020 <__aeabi_fsub>
    *pDst++ = (a1 * d1) + (b1 * c1);
100028ce:	4651      	mov	r1, sl
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
100028d0:	6020      	str	r0, [r4, #0]
    *pDst++ = (a1 * d1) + (b1 * c1);
100028d2:	4658      	mov	r0, fp
100028d4:	f001 fa74 	bl	10003dc0 <__aeabi_fmul>
100028d8:	4641      	mov	r1, r8
100028da:	4683      	mov	fp, r0
100028dc:	4648      	mov	r0, r9
100028de:	f001 fa6f 	bl	10003dc0 <__aeabi_fmul>
100028e2:	1c01      	adds	r1, r0, #0
100028e4:	4658      	mov	r0, fp
100028e6:	f000 fea3 	bl	10003630 <__aeabi_fadd>

    /* Decrement the numSamples loop counter */
    blkCnt--;
100028ea:	3f02      	subs	r7, #2
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
    *pDst++ = (a1 * d1) + (b1 * c1);
100028ec:	6060      	str	r0, [r4, #4]
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
100028ee:	3608      	adds	r6, #8
100028f0:	3508      	adds	r5, #8
100028f2:	3408      	adds	r4, #8
    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
    *pDst++ = (a1 * d1) + (b1 * c1);

    /* Decrement the numSamples loop counter */
    blkCnt--;
100028f4:	9702      	str	r7, [sp, #8]
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100028f6:	2f00      	cmp	r7, #0
100028f8:	d05c      	beq.n	100029b4 <arm_cmplx_mult_cmplx_f32+0x18c>
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
100028fa:	6837      	ldr	r7, [r6, #0]
    b1 = *pSrcA++;
100028fc:	6870      	ldr	r0, [r6, #4]
    c1 = *pSrcB++;
    d1 = *pSrcB++;
100028fe:	6869      	ldr	r1, [r5, #4]

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
10002900:	46ba      	mov	sl, r7
    b1 = *pSrcA++;
    c1 = *pSrcB++;
10002902:	682f      	ldr	r7, [r5, #0]
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
10002904:	1c32      	adds	r2, r6, #0
10002906:	1c2b      	adds	r3, r5, #0
10002908:	3208      	adds	r2, #8
1000290a:	3308      	adds	r3, #8
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
1000290c:	4680      	mov	r8, r0
    c1 = *pSrcB++;
    d1 = *pSrcB++;
1000290e:	4689      	mov	r9, r1

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002910:	4650      	mov	r0, sl
10002912:	1c39      	adds	r1, r7, #0
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
10002914:	9201      	str	r2, [sp, #4]
10002916:	9303      	str	r3, [sp, #12]
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002918:	f001 fa52 	bl	10003dc0 <__aeabi_fmul>
1000291c:	4649      	mov	r1, r9
1000291e:	4683      	mov	fp, r0
10002920:	4640      	mov	r0, r8
10002922:	f001 fa4d 	bl	10003dc0 <__aeabi_fmul>
10002926:	1c01      	adds	r1, r0, #0
10002928:	4658      	mov	r0, fp
1000292a:	f001 fb79 	bl	10004020 <__aeabi_fsub>
    *pDst++ = (a1 * d1) + (b1 * c1);
1000292e:	4649      	mov	r1, r9
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002930:	6020      	str	r0, [r4, #0]
    *pDst++ = (a1 * d1) + (b1 * c1);
10002932:	4650      	mov	r0, sl
10002934:	f001 fa44 	bl	10003dc0 <__aeabi_fmul>
10002938:	1c39      	adds	r1, r7, #0
1000293a:	4682      	mov	sl, r0
1000293c:	4640      	mov	r0, r8
1000293e:	f001 fa3f 	bl	10003dc0 <__aeabi_fmul>
10002942:	1c01      	adds	r1, r0, #0
10002944:	4650      	mov	r0, sl
10002946:	f000 fe73 	bl	10003630 <__aeabi_fadd>
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
1000294a:	9f01      	ldr	r7, [sp, #4]
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
    *pDst++ = (a1 * d1) + (b1 * c1);
1000294c:	6060      	str	r0, [r4, #4]
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
1000294e:	6879      	ldr	r1, [r7, #4]

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
10002950:	68b6      	ldr	r6, [r6, #8]
    b1 = *pSrcA++;
    c1 = *pSrcB++;
10002952:	68af      	ldr	r7, [r5, #8]
    d1 = *pSrcB++;
10002954:	9d03      	ldr	r5, [sp, #12]

  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
10002956:	46b2      	mov	sl, r6
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;
10002958:	686b      	ldr	r3, [r5, #4]
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
1000295a:	2008      	movs	r0, #8
1000295c:	1902      	adds	r2, r0, r4
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
1000295e:	4688      	mov	r8, r1
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002960:	4650      	mov	r0, sl
10002962:	1c39      	adds	r1, r7, #0
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
10002964:	4693      	mov	fp, r2
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a1 = *pSrcA++;
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;
10002966:	4699      	mov	r9, r3

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002968:	f001 fa2a 	bl	10003dc0 <__aeabi_fmul>
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
1000296c:	9e01      	ldr	r6, [sp, #4]
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
1000296e:	4649      	mov	r1, r9
10002970:	9001      	str	r0, [sp, #4]
10002972:	4640      	mov	r0, r8
10002974:	f001 fa24 	bl	10003dc0 <__aeabi_fmul>
10002978:	1c01      	adds	r1, r0, #0
1000297a:	9801      	ldr	r0, [sp, #4]
1000297c:	f001 fb50 	bl	10004020 <__aeabi_fsub>
    *pDst++ = (a1 * d1) + (b1 * c1);
10002980:	4649      	mov	r1, r9
    b1 = *pSrcA++;
    c1 = *pSrcB++;
    d1 = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
10002982:	60a0      	str	r0, [r4, #8]
    *pDst++ = (a1 * d1) + (b1 * c1);
10002984:	4650      	mov	r0, sl
10002986:	f001 fa1b 	bl	10003dc0 <__aeabi_fmul>
1000298a:	1c39      	adds	r1, r7, #0
1000298c:	1c04      	adds	r4, r0, #0
1000298e:	4640      	mov	r0, r8
10002990:	f001 fa16 	bl	10003dc0 <__aeabi_fmul>
10002994:	1c01      	adds	r1, r0, #0
10002996:	1c20      	adds	r0, r4, #0
10002998:	f000 fe4a 	bl	10003630 <__aeabi_fadd>
1000299c:	465a      	mov	r2, fp
1000299e:	6050      	str	r0, [r2, #4]

    /* Decrement the numSamples loop counter */
    blkCnt--;
100029a0:	9802      	ldr	r0, [sp, #8]
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
100029a2:	9d03      	ldr	r5, [sp, #12]
100029a4:	465c      	mov	r4, fp
    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
    *pDst++ = (a1 * d1) + (b1 * c1);

    /* Decrement the numSamples loop counter */
    blkCnt--;
100029a6:	3802      	subs	r0, #2
 * @param[out]  *pDst  points to the output vector        
 * @param[in]  numSamples number of complex samples in each vector        
 * @return none.        
 */

void arm_cmplx_mult_cmplx_f32(
100029a8:	3608      	adds	r6, #8
100029aa:	3508      	adds	r5, #8
100029ac:	3408      	adds	r4, #8
    /* store the result in the destination buffer. */
    *pDst++ = (a1 * c1) - (b1 * d1);
    *pDst++ = (a1 * d1) + (b1 * c1);

    /* Decrement the numSamples loop counter */
    blkCnt--;
100029ae:	9002      	str	r0, [sp, #8]
  /* Run the below code for Cortex-M0 */
  blkCnt = numSamples;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
100029b0:	2800      	cmp	r0, #0
100029b2:	d1a2      	bne.n	100028fa <arm_cmplx_mult_cmplx_f32+0xd2>
    *pDst++ = (a1 * d1) + (b1 * c1);

    /* Decrement the numSamples loop counter */
    blkCnt--;
  }
}
100029b4:	b005      	add	sp, #20
100029b6:	bc3c      	pop	{r2, r3, r4, r5}
100029b8:	4690      	mov	r8, r2
100029ba:	4699      	mov	r9, r3
100029bc:	46a2      	mov	sl, r4
100029be:	46ab      	mov	fp, r5
100029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100029c2:	46c0      	nop			; (mov r8, r8)

100029c4 <arm_bitreversal_f32>:
void arm_bitreversal_f32(
float32_t * pSrc,
uint16_t fftSize,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
100029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100029c6:	4656      	mov	r6, sl
100029c8:	464d      	mov	r5, r9
100029ca:	4644      	mov	r4, r8
100029cc:	465f      	mov	r7, fp
100029ce:	b4f0      	push	{r4, r5, r6, r7}
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100029d0:	2502      	movs	r5, #2
   float32_t in;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;
100029d2:	2401      	movs	r4, #1

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100029d4:	426e      	negs	r6, r5
   uint16_t i, j;
   float32_t in;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
100029d6:	0849      	lsrs	r1, r1, #1
100029d8:	4688      	mov	r8, r1
   fftLenBy2p1 = (fftSize >> 1u) + 1u;
100029da:	46a2      	mov	sl, r4
100029dc:	0052      	lsls	r2, r2, #1
void arm_bitreversal_f32(
float32_t * pSrc,
uint16_t fftSize,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
100029de:	b085      	sub	sp, #20
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100029e0:	46b1      	mov	r9, r6
100029e2:	9203      	str	r2, [sp, #12]
   float32_t in;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;
100029e4:	44c2      	add	sl, r8

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100029e6:	44c1      	add	r9, r8
100029e8:	2200      	movs	r2, #0
   uint16_t fftLenBy2, fftLenBy2p1;
   uint16_t i, j;
   float32_t in;

   /*  Initializations */
   j = 0u;
100029ea:	2400      	movs	r4, #0
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
100029ec:	2500      	movs	r5, #0
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
100029ee:	1c6f      	adds	r7, r5, #1
100029f0:	00f9      	lsls	r1, r7, #3
100029f2:	1846      	adds	r6, r0, r1
100029f4:	6835      	ldr	r5, [r6, #0]
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
100029f6:	4444      	add	r4, r8
100029f8:	00e4      	lsls	r4, r4, #3
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
100029fa:	46ac      	mov	ip, r5
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
100029fc:	1905      	adds	r5, r0, r4
100029fe:	682f      	ldr	r7, [r5, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
10002a00:	3104      	adds	r1, #4

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002a02:	6037      	str	r7, [r6, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002a04:	3404      	adds	r4, #4
      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;
10002a06:	4666      	mov	r6, ip
10002a08:	602e      	str	r6, [r5, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002a0a:	1904      	adds	r4, r0, r4
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
10002a0c:	1841      	adds	r1, r0, r1
10002a0e:	680d      	ldr	r5, [r1, #0]
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002a10:	6827      	ldr	r7, [r4, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002a12:	9e03      	ldr	r6, [sp, #12]
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002a14:	3202      	adds	r2, #2
10002a16:	b292      	uxth	r2, r2
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002a18:	600f      	str	r7, [r1, #0]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
10002a1a:	6025      	str	r5, [r4, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
10002a1c:	881c      	ldrh	r4, [r3, #0]
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002a1e:	1c15      	adds	r5, r2, #0

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002a20:	199b      	adds	r3, r3, r6
   j = 0u;
   fftLenBy2 = fftSize >> 1u;
   fftLenBy2p1 = (fftSize >> 1u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002a22:	454a      	cmp	r2, r9
10002a24:	d835      	bhi.n	10002a92 <arm_bitreversal_f32+0xce>
   {
      if(i < j)
10002a26:	4294      	cmp	r4, r2
10002a28:	d9e1      	bls.n	100029ee <arm_bitreversal_f32+0x2a>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002a2a:	00d1      	lsls	r1, r2, #3
10002a2c:	180e      	adds	r6, r1, r0
10002a2e:	6837      	ldr	r7, [r6, #0]
10002a30:	9102      	str	r1, [sp, #8]
         pSrc[2u * i] = pSrc[2u * j];
10002a32:	00e1      	lsls	r1, r4, #3
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002a34:	46bb      	mov	fp, r7
         pSrc[2u * i] = pSrc[2u * j];
10002a36:	1847      	adds	r7, r0, r1
10002a38:	9101      	str	r1, [sp, #4]
10002a3a:	6839      	ldr	r1, [r7, #0]
10002a3c:	6031      	str	r1, [r6, #0]
         pSrc[2u * j] = in;
10002a3e:	465e      	mov	r6, fp
10002a40:	603e      	str	r6, [r7, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002a42:	9f02      	ldr	r7, [sp, #8]
10002a44:	3704      	adds	r7, #4
10002a46:	19c6      	adds	r6, r0, r7
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002a48:	9f01      	ldr	r7, [sp, #4]
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002a4a:	6831      	ldr	r1, [r6, #0]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002a4c:	3704      	adds	r7, #4
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002a4e:	468c      	mov	ip, r1
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002a50:	19c1      	adds	r1, r0, r7
10002a52:	680f      	ldr	r7, [r1, #0]
10002a54:	6037      	str	r7, [r6, #0]
         pSrc[(2u * j) + 1u] = in;
10002a56:	4666      	mov	r6, ip

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002a58:	4657      	mov	r7, sl
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;
10002a5a:	600e      	str	r6, [r1, #0]

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002a5c:	19d1      	adds	r1, r2, r7
10002a5e:	00ce      	lsls	r6, r1, #3
10002a60:	9602      	str	r6, [sp, #8]
10002a62:	1836      	adds	r6, r6, r0
10002a64:	6831      	ldr	r1, [r6, #0]
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002a66:	193f      	adds	r7, r7, r4
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002a68:	468b      	mov	fp, r1
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002a6a:	00f9      	lsls	r1, r7, #3
10002a6c:	1847      	adds	r7, r0, r1
10002a6e:	9101      	str	r1, [sp, #4]
10002a70:	6839      	ldr	r1, [r7, #0]
10002a72:	6031      	str	r1, [r6, #0]
         pSrc[2u * (j + fftLenBy2p1)] = in;
10002a74:	465e      	mov	r6, fp
10002a76:	603e      	str	r6, [r7, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002a78:	9f02      	ldr	r7, [sp, #8]
10002a7a:	3704      	adds	r7, #4
10002a7c:	19c6      	adds	r6, r0, r7
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002a7e:	9f01      	ldr	r7, [sp, #4]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002a80:	6831      	ldr	r1, [r6, #0]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002a82:	3704      	adds	r7, #4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002a84:	468c      	mov	ip, r1
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002a86:	19c1      	adds	r1, r0, r7
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
10002a88:	680f      	ldr	r7, [r1, #0]
10002a8a:	6037      	str	r7, [r6, #0]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
10002a8c:	4666      	mov	r6, ip
10002a8e:	600e      	str	r6, [r1, #0]
10002a90:	e7ad      	b.n	100029ee <arm_bitreversal_f32+0x2a>
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
   }
}
10002a92:	b005      	add	sp, #20
10002a94:	bc3c      	pop	{r2, r3, r4, r5}
10002a96:	4690      	mov	r8, r2
10002a98:	4699      	mov	r9, r3
10002a9a:	46a2      	mov	sl, r4
10002a9c:	46ab      	mov	fp, r5
10002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002aa0 <arm_bitreversal_q31>:
void arm_bitreversal_q31(
q31_t * pSrc,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTable)
{
10002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002aa2:	464d      	mov	r5, r9
10002aa4:	465f      	mov	r7, fp
10002aa6:	4656      	mov	r6, sl
10002aa8:	4644      	mov	r4, r8
10002aaa:	b4f0      	push	{r4, r5, r6, r7}
   uint32_t fftLenBy2, fftLenBy2p1, i, j;
   q31_t in;

   /*  Initializations      */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
10002aac:	0849      	lsrs	r1, r1, #1
void arm_bitreversal_q31(
q31_t * pSrc,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTable)
{
10002aae:	b085      	sub	sp, #20
   q31_t in;

   /*  Initializations      */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002ab0:	1c4c      	adds	r4, r1, #1
10002ab2:	0052      	lsls	r2, r2, #1
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002ab4:	00cd      	lsls	r5, r1, #3
   q31_t in;

   /*  Initializations      */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002ab6:	9403      	str	r4, [sp, #12]

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002ab8:	1e8e      	subs	r6, r1, #2
10002aba:	4694      	mov	ip, r2
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002abc:	1c04      	adds	r4, r0, #0
10002abe:	351c      	adds	r5, #28
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002ac0:	2200      	movs	r2, #0
10002ac2:	46b1      	mov	r9, r6
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002ac4:	3408      	adds	r4, #8
10002ac6:	1945      	adds	r5, r0, r5
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002ac8:	9202      	str	r2, [sp, #8]
{
   uint32_t fftLenBy2, fftLenBy2p1, i, j;
   q31_t in;

   /*  Initializations      */
   j = 0u;
10002aca:	2700      	movs	r7, #0
10002acc:	07b6      	lsls	r6, r6, #30
10002ace:	d500      	bpl.n	10002ad2 <arm_bitreversal_q31+0x32>
10002ad0:	e094      	b.n	10002bfc <arm_bitreversal_q31+0x15c>
10002ad2:	9101      	str	r1, [sp, #4]
10002ad4:	e076      	b.n	10002bc4 <arm_bitreversal_q31+0x124>
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
10002ad6:	4297      	cmp	r7, r2
10002ad8:	d92b      	bls.n	10002b32 <arm_bitreversal_q31+0x92>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
10002ada:	00f9      	lsls	r1, r7, #3
10002adc:	468a      	mov	sl, r1
10002ade:	4680      	mov	r8, r0
10002ae0:	44d0      	add	r8, sl
10002ae2:	4641      	mov	r1, r8
10002ae4:	6809      	ldr	r1, [r1, #0]
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002ae6:	68a6      	ldr	r6, [r4, #8]
         pSrc[2u * i] = pSrc[2u * j];
10002ae8:	60a1      	str	r1, [r4, #8]
         pSrc[2u * j] = in;
10002aea:	4641      	mov	r1, r8
10002aec:	600e      	str	r6, [r1, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002aee:	68e6      	ldr	r6, [r4, #12]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002af0:	4651      	mov	r1, sl
10002af2:	3104      	adds	r1, #4
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002af4:	46b3      	mov	fp, r6
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002af6:	1846      	adds	r6, r0, r1
10002af8:	6831      	ldr	r1, [r6, #0]
10002afa:	60e1      	str	r1, [r4, #12]
         pSrc[(2u * j) + 1u] = in;
10002afc:	4659      	mov	r1, fp
10002afe:	6031      	str	r1, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002b00:	1f2e      	subs	r6, r5, #4
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002b02:	6831      	ldr	r1, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002b04:	46b2      	mov	sl, r6
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002b06:	9e03      	ldr	r6, [sp, #12]
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002b08:	468b      	mov	fp, r1
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002b0a:	19b9      	adds	r1, r7, r6
10002b0c:	00ce      	lsls	r6, r1, #3
10002b0e:	1831      	adds	r1, r6, r0
10002b10:	9602      	str	r6, [sp, #8]
10002b12:	680e      	ldr	r6, [r1, #0]
10002b14:	4688      	mov	r8, r1
10002b16:	4651      	mov	r1, sl
10002b18:	600e      	str	r6, [r1, #0]
         pSrc[2u * (j + fftLenBy2p1)] = in;
10002b1a:	465e      	mov	r6, fp
10002b1c:	4641      	mov	r1, r8
10002b1e:	600e      	str	r6, [r1, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002b20:	9902      	ldr	r1, [sp, #8]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002b22:	682e      	ldr	r6, [r5, #0]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002b24:	3104      	adds	r1, #4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002b26:	46b2      	mov	sl, r6
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002b28:	1846      	adds	r6, r0, r1
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
10002b2a:	6831      	ldr	r1, [r6, #0]
10002b2c:	6029      	str	r1, [r5, #0]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
10002b2e:	4651      	mov	r1, sl
10002b30:	6031      	str	r1, [r6, #0]
10002b32:	2110      	movs	r1, #16
10002b34:	1949      	adds	r1, r1, r5
10002b36:	4688      	mov	r8, r1

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
10002b38:	6921      	ldr	r1, [r4, #16]
10002b3a:	1c26      	adds	r6, r4, #0
10002b3c:	468a      	mov	sl, r1
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002b3e:	9901      	ldr	r1, [sp, #4]
10002b40:	3610      	adds	r6, #16
10002b42:	187f      	adds	r7, r7, r1
10002b44:	00f9      	lsls	r1, r7, #3
10002b46:	180f      	adds	r7, r1, r0
10002b48:	9102      	str	r1, [sp, #8]
10002b4a:	6839      	ldr	r1, [r7, #0]
10002b4c:	46bb      	mov	fp, r7
10002b4e:	6121      	str	r1, [r4, #16]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002b50:	9902      	ldr	r1, [sp, #8]
      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;
10002b52:	4657      	mov	r7, sl
10002b54:	465c      	mov	r4, fp

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002b56:	3104      	adds	r1, #4
      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;
10002b58:	6027      	str	r7, [r4, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002b5a:	1847      	adds	r7, r0, r1
10002b5c:	6839      	ldr	r1, [r7, #0]
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
10002b5e:	6874      	ldr	r4, [r6, #4]
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002b60:	6071      	str	r1, [r6, #4]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
10002b62:	603c      	str	r4, [r7, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;
10002b64:	881f      	ldrh	r7, [r3, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002b66:	3202      	adds	r2, #2

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
10002b68:	4463      	add	r3, ip
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
10002b6a:	4297      	cmp	r7, r2
10002b6c:	d925      	bls.n	10002bba <arm_bitreversal_q31+0x11a>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002b6e:	68b4      	ldr	r4, [r6, #8]
         pSrc[2u * i] = pSrc[2u * j];
10002b70:	00f9      	lsls	r1, r7, #3
10002b72:	9102      	str	r1, [sp, #8]
10002b74:	1809      	adds	r1, r1, r0
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002b76:	46a2      	mov	sl, r4
         pSrc[2u * i] = pSrc[2u * j];
10002b78:	680c      	ldr	r4, [r1, #0]
10002b7a:	60b4      	str	r4, [r6, #8]
         pSrc[2u * j] = in;
10002b7c:	4654      	mov	r4, sl
10002b7e:	600c      	str	r4, [r1, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002b80:	9c02      	ldr	r4, [sp, #8]
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002b82:	68f1      	ldr	r1, [r6, #12]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002b84:	3404      	adds	r4, #4
10002b86:	1904      	adds	r4, r0, r4
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002b88:	468b      	mov	fp, r1
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002b8a:	6821      	ldr	r1, [r4, #0]
10002b8c:	60f1      	str	r1, [r6, #12]
         pSrc[(2u * j) + 1u] = in;
10002b8e:	4659      	mov	r1, fp
10002b90:	6021      	str	r1, [r4, #0]

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002b92:	68ec      	ldr	r4, [r5, #12]
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002b94:	9903      	ldr	r1, [sp, #12]
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002b96:	46a3      	mov	fp, r4
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002b98:	187c      	adds	r4, r7, r1
10002b9a:	00e1      	lsls	r1, r4, #3
10002b9c:	180c      	adds	r4, r1, r0
10002b9e:	9102      	str	r1, [sp, #8]
10002ba0:	6821      	ldr	r1, [r4, #0]
10002ba2:	60e9      	str	r1, [r5, #12]
         pSrc[2u * (j + fftLenBy2p1)] = in;
10002ba4:	4659      	mov	r1, fp
10002ba6:	6021      	str	r1, [r4, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002ba8:	9c02      	ldr	r4, [sp, #8]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002baa:	6929      	ldr	r1, [r5, #16]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002bac:	3404      	adds	r4, #4
10002bae:	1904      	adds	r4, r0, r4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002bb0:	468b      	mov	fp, r1
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
10002bb2:	6821      	ldr	r1, [r4, #0]
10002bb4:	6129      	str	r1, [r5, #16]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
10002bb6:	465d      	mov	r5, fp
10002bb8:	6025      	str	r5, [r4, #0]
10002bba:	1c34      	adds	r4, r6, #0
10002bbc:	4645      	mov	r5, r8
10002bbe:	9901      	ldr	r1, [sp, #4]
10002bc0:	3410      	adds	r4, #16
10002bc2:	3510      	adds	r5, #16

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
10002bc4:	6826      	ldr	r6, [r4, #0]
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002bc6:	1879      	adds	r1, r7, r1
10002bc8:	00cf      	lsls	r7, r1, #3
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
10002bca:	46b3      	mov	fp, r6
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002bcc:	19c6      	adds	r6, r0, r7
10002bce:	6831      	ldr	r1, [r6, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002bd0:	3704      	adds	r7, #4

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002bd2:	6021      	str	r1, [r4, #0]
      pSrc[2u * (j + fftLenBy2)] = in;
10002bd4:	4659      	mov	r1, fp
10002bd6:	6031      	str	r1, [r6, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002bd8:	19c7      	adds	r7, r0, r7
10002bda:	6839      	ldr	r1, [r7, #0]
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
10002bdc:	6866      	ldr	r6, [r4, #4]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002bde:	3202      	adds	r2, #2
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002be0:	6061      	str	r1, [r4, #4]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
10002be2:	603e      	str	r6, [r7, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;
10002be4:	881f      	ldrh	r7, [r3, #0]

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
10002be6:	4463      	add	r3, ip
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002be8:	454a      	cmp	r2, r9
10002bea:	d800      	bhi.n	10002bee <arm_bitreversal_q31+0x14e>
10002bec:	e773      	b.n	10002ad6 <arm_bitreversal_q31+0x36>
      j = *pBitRevTable;

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
   }
}
10002bee:	b005      	add	sp, #20
10002bf0:	bc3c      	pop	{r2, r3, r4, r5}
10002bf2:	4690      	mov	r8, r2
10002bf4:	4699      	mov	r9, r3
10002bf6:	46a2      	mov	sl, r4
10002bf8:	46ab      	mov	fp, r5
10002bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
10002bfc:	6827      	ldr	r7, [r4, #0]
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002bfe:	00ca      	lsls	r2, r1, #3
10002c00:	1886      	adds	r6, r0, r2
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
10002c02:	46b8      	mov	r8, r7
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002c04:	6837      	ldr	r7, [r6, #0]
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002c06:	3204      	adds	r2, #4

      }

      /*  pSrc[i+1u] <-> pSrc[j+1u] */
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
10002c08:	6027      	str	r7, [r4, #0]
      pSrc[2u * (j + fftLenBy2)] = in;
10002c0a:	4647      	mov	r7, r8
10002c0c:	6037      	str	r7, [r6, #0]

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002c0e:	1882      	adds	r2, r0, r2
      in = pSrc[2u * (i + 1u)];
      pSrc[2u * (i + 1u)] = pSrc[2u * (j + fftLenBy2)];
      pSrc[2u * (j + fftLenBy2)] = in;

      /*  pSrc[i+2u] <-> pSrc[j+2u] */
      in = pSrc[(2u * (i + 1u)) + 1u];
10002c10:	6866      	ldr	r6, [r4, #4]
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
10002c12:	6817      	ldr	r7, [r2, #0]
10002c14:	6067      	str	r7, [r4, #4]
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;
10002c16:	6016      	str	r6, [r2, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002c18:	2602      	movs	r6, #2
      in = pSrc[(2u * (i + 1u)) + 1u];
      pSrc[(2u * (i + 1u)) + 1u] = pSrc[(2u * (j + fftLenBy2)) + 1u];
      pSrc[(2u * (j + fftLenBy2)) + 1u] = in;

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;
10002c1a:	881f      	ldrh	r7, [r3, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002c1c:	9602      	str	r6, [sp, #8]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTable;

      /*  Updating the bit reversal index depending on the fft length */
      pBitRevTable += bitRevFactor;
10002c1e:	4463      	add	r3, ip
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002c20:	454e      	cmp	r6, r9
10002c22:	d8e4      	bhi.n	10002bee <arm_bitreversal_q31+0x14e>
   {
      if(i < j)
10002c24:	2202      	movs	r2, #2
10002c26:	4297      	cmp	r7, r2
10002c28:	d92b      	bls.n	10002c82 <arm_bitreversal_q31+0x1e2>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
10002c2a:	00fe      	lsls	r6, r7, #3
10002c2c:	46b3      	mov	fp, r6
10002c2e:	4682      	mov	sl, r0
10002c30:	44da      	add	sl, fp
10002c32:	4656      	mov	r6, sl
10002c34:	6836      	ldr	r6, [r6, #0]
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2u * i];
10002c36:	68a2      	ldr	r2, [r4, #8]
         pSrc[2u * i] = pSrc[2u * j];
10002c38:	60a6      	str	r6, [r4, #8]
         pSrc[2u * j] = in;
10002c3a:	4656      	mov	r6, sl
10002c3c:	6032      	str	r2, [r6, #0]

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002c3e:	465e      	mov	r6, fp
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002c40:	68e2      	ldr	r2, [r4, #12]
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002c42:	3604      	adds	r6, #4
10002c44:	1986      	adds	r6, r0, r6
         in = pSrc[2u * i];
         pSrc[2u * i] = pSrc[2u * j];
         pSrc[2u * j] = in;

         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[(2u * i) + 1u];
10002c46:	4690      	mov	r8, r2
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
10002c48:	6832      	ldr	r2, [r6, #0]
10002c4a:	60e2      	str	r2, [r4, #12]
         pSrc[(2u * j) + 1u] = in;
10002c4c:	4642      	mov	r2, r8
10002c4e:	6032      	str	r2, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002c50:	1f2e      	subs	r6, r5, #4
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002c52:	6832      	ldr	r2, [r6, #0]
* @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
* @param[in]      *pBitRevTab  points to bit reversal table.   
* @return none.   
*/

void arm_bitreversal_q31(
10002c54:	46b2      	mov	sl, r6
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002c56:	9e03      	ldr	r6, [sp, #12]
         in = pSrc[(2u * i) + 1u];
         pSrc[(2u * i) + 1u] = pSrc[(2u * j) + 1u];
         pSrc[(2u * j) + 1u] = in;

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2u * (i + fftLenBy2p1)];
10002c58:	4693      	mov	fp, r2
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
10002c5a:	19ba      	adds	r2, r7, r6
10002c5c:	00d6      	lsls	r6, r2, #3
10002c5e:	1832      	adds	r2, r6, r0
10002c60:	9601      	str	r6, [sp, #4]
10002c62:	6816      	ldr	r6, [r2, #0]
10002c64:	4690      	mov	r8, r2
10002c66:	4652      	mov	r2, sl
10002c68:	6016      	str	r6, [r2, #0]
         pSrc[2u * (j + fftLenBy2p1)] = in;
10002c6a:	465e      	mov	r6, fp
10002c6c:	4642      	mov	r2, r8
10002c6e:	6016      	str	r6, [r2, #0]

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002c70:	9a01      	ldr	r2, [sp, #4]
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002c72:	682e      	ldr	r6, [r5, #0]
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002c74:	3204      	adds	r2, #4
         in = pSrc[2u * (i + fftLenBy2p1)];
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
10002c76:	46b2      	mov	sl, r6
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
10002c78:	1886      	adds	r6, r0, r2
         pSrc[2u * (i + fftLenBy2p1)] = pSrc[2u * (j + fftLenBy2p1)];
         pSrc[2u * (j + fftLenBy2p1)] = in;

         /*  pSrc[i+fftLenBy2p1+1u] <-> pSrc[j+fftLenBy2p1+1u] */
         in = pSrc[(2u * (i + fftLenBy2p1)) + 1u];
         pSrc[(2u * (i + fftLenBy2p1)) + 1u] =
10002c7a:	6832      	ldr	r2, [r6, #0]
10002c7c:	602a      	str	r2, [r5, #0]
         pSrc[(2u * (j + fftLenBy2p1)) + 1u];
         pSrc[(2u * (j + fftLenBy2p1)) + 1u] = in;
10002c7e:	4652      	mov	r2, sl
10002c80:	6032      	str	r2, [r6, #0]
10002c82:	3410      	adds	r4, #16
10002c84:	3510      	adds	r5, #16
10002c86:	9101      	str	r1, [sp, #4]
10002c88:	9a02      	ldr	r2, [sp, #8]
10002c8a:	e79b      	b.n	10002bc4 <arm_bitreversal_q31+0x124>

10002c8c <arm_bitreversal_q15>:
void arm_bitreversal_q15(
q15_t * pSrc16,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
10002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002c8e:	4656      	mov	r6, sl
10002c90:	464d      	mov	r5, r9
10002c92:	465f      	mov	r7, fp
10002c94:	4644      	mov	r4, r8
10002c96:	b4f0      	push	{r4, r5, r6, r7}
   uint32_t fftLenBy2, fftLenBy2p1;
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
10002c98:	0849      	lsrs	r1, r1, #1
void arm_bitreversal_q15(
q15_t * pSrc16,
uint32_t fftLen,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
10002c9a:	b083      	sub	sp, #12
   uint32_t fftLenBy2, fftLenBy2p1;
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
10002c9c:	9101      	str	r1, [sp, #4]
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002c9e:	9d01      	ldr	r5, [sp, #4]
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002ca0:	468a      	mov	sl, r1

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002ca2:	2602      	movs	r6, #2
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
10002ca4:	9901      	ldr	r1, [sp, #4]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002ca6:	4277      	negs	r7, r6
10002ca8:	46a9      	mov	r9, r5
10002caa:	44b9      	add	r9, r7
10002cac:	0052      	lsls	r2, r2, #1
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
10002cae:	3103      	adds	r1, #3
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002cb0:	2401      	movs	r4, #1
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
10002cb2:	008d      	lsls	r5, r1, #2
10002cb4:	4694      	mov	ip, r2
10002cb6:	464a      	mov	r2, r9
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;
10002cb8:	44a2      	add	sl, r4
   * @param[in]      bitRevFactor bit reversal modifier that supports different size FFTs with the same bit reversal table   
   * @param[in]      *pBitRevTab  points to bit reversal table.   
   * @return none.   
*/

void arm_bitreversal_q15(
10002cba:	1946      	adds	r6, r0, r5
10002cbc:	1d04      	adds	r4, r0, #4
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002cbe:	2700      	movs	r7, #0
   q31_t in;
   uint32_t fftLenBy2, fftLenBy2p1;
   uint32_t i, j;

   /*  Initializations */
   j = 0u;
10002cc0:	2500      	movs	r5, #0
10002cc2:	0791      	lsls	r1, r2, #30
10002cc4:	d561      	bpl.n	10002d8a <arm_bitreversal_q15+0xfe>
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002cc6:	9f01      	ldr	r7, [sp, #4]
         pSrc[j + fftLenBy2p1] = in;
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
10002cc8:	6825      	ldr	r5, [r4, #0]
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002cca:	00b9      	lsls	r1, r7, #2
10002ccc:	1842      	adds	r2, r0, r1
10002cce:	6817      	ldr	r7, [r2, #0]
10002cd0:	6027      	str	r7, [r4, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002cd2:	2702      	movs	r7, #2

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
      pSrc[j + fftLenBy2] = in;
10002cd4:	6015      	str	r5, [r2, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
10002cd6:	881d      	ldrh	r5, [r3, #0]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002cd8:	4463      	add	r3, ip
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002cda:	454f      	cmp	r7, r9
10002cdc:	d863      	bhi.n	10002da6 <arm_bitreversal_q15+0x11a>
   {
      if(i < j)
10002cde:	42bd      	cmp	r5, r7
10002ce0:	d911      	bls.n	10002d06 <arm_bitreversal_q15+0x7a>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002ce2:	6861      	ldr	r1, [r4, #4]
         pSrc[i] = pSrc[j];
10002ce4:	00aa      	lsls	r2, r5, #2
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002ce6:	4688      	mov	r8, r1
         pSrc[i] = pSrc[j];
10002ce8:	1881      	adds	r1, r0, r2
10002cea:	680a      	ldr	r2, [r1, #0]
10002cec:	6062      	str	r2, [r4, #4]
         pSrc[j] = in;
10002cee:	4642      	mov	r2, r8
10002cf0:	600a      	str	r2, [r1, #0]

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002cf2:	6831      	ldr	r1, [r6, #0]
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002cf4:	4652      	mov	r2, sl
         pSrc[i] = pSrc[j];
         pSrc[j] = in;

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002cf6:	468b      	mov	fp, r1
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002cf8:	18a9      	adds	r1, r5, r2
10002cfa:	008a      	lsls	r2, r1, #2
10002cfc:	1881      	adds	r1, r0, r2
10002cfe:	680a      	ldr	r2, [r1, #0]
10002d00:	6032      	str	r2, [r6, #0]
         pSrc[j + fftLenBy2p1] = in;
10002d02:	465a      	mov	r2, fp
10002d04:	600a      	str	r2, [r1, #0]
10002d06:	3408      	adds	r4, #8
10002d08:	3608      	adds	r6, #8
10002d0a:	e03e      	b.n	10002d8a <arm_bitreversal_q15+0xfe>
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
10002d0c:	42bd      	cmp	r5, r7
10002d0e:	d911      	bls.n	10002d34 <arm_bitreversal_q15+0xa8>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002d10:	6863      	ldr	r3, [r4, #4]
         pSrc[i] = pSrc[j];
10002d12:	00aa      	lsls	r2, r5, #2
10002d14:	1882      	adds	r2, r0, r2
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002d16:	4698      	mov	r8, r3
         pSrc[i] = pSrc[j];
10002d18:	6813      	ldr	r3, [r2, #0]
10002d1a:	6063      	str	r3, [r4, #4]
         pSrc[j] = in;
10002d1c:	4643      	mov	r3, r8
10002d1e:	6013      	str	r3, [r2, #0]

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002d20:	6832      	ldr	r2, [r6, #0]
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002d22:	4653      	mov	r3, sl
         pSrc[i] = pSrc[j];
         pSrc[j] = in;

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002d24:	4693      	mov	fp, r2
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002d26:	18ea      	adds	r2, r5, r3
10002d28:	0093      	lsls	r3, r2, #2
10002d2a:	18c2      	adds	r2, r0, r3
10002d2c:	6813      	ldr	r3, [r2, #0]
10002d2e:	6033      	str	r3, [r6, #0]
         pSrc[j + fftLenBy2p1] = in;
10002d30:	465b      	mov	r3, fp
10002d32:	6013      	str	r3, [r2, #0]
10002d34:	2308      	movs	r3, #8
10002d36:	199b      	adds	r3, r3, r6
10002d38:	4698      	mov	r8, r3
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
10002d3a:	68a3      	ldr	r3, [r4, #8]
10002d3c:	1c22      	adds	r2, r4, #0
10002d3e:	469b      	mov	fp, r3
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002d40:	9b01      	ldr	r3, [sp, #4]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002d42:	3702      	adds	r7, #2
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002d44:	18ed      	adds	r5, r5, r3
10002d46:	00ab      	lsls	r3, r5, #2
10002d48:	18c5      	adds	r5, r0, r3
10002d4a:	682b      	ldr	r3, [r5, #0]
10002d4c:	3208      	adds	r2, #8
10002d4e:	60a3      	str	r3, [r4, #8]
      pSrc[j + fftLenBy2] = in;
10002d50:	465c      	mov	r4, fp
10002d52:	602c      	str	r4, [r5, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
10002d54:	880d      	ldrh	r5, [r1, #0]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002d56:	4663      	mov	r3, ip
10002d58:	18cb      	adds	r3, r1, r3
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
   {
      if(i < j)
10002d5a:	42bd      	cmp	r5, r7
10002d5c:	d911      	bls.n	10002d82 <arm_bitreversal_q15+0xf6>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002d5e:	6851      	ldr	r1, [r2, #4]
         pSrc[i] = pSrc[j];
10002d60:	00ac      	lsls	r4, r5, #2
10002d62:	1904      	adds	r4, r0, r4
   {
      if(i < j)
      {
         /*  pSrc[i] <-> pSrc[j]; */
         /*  pSrc[i+1u] <-> pSrc[j+1u] */
         in = pSrc[i];
10002d64:	468b      	mov	fp, r1
         pSrc[i] = pSrc[j];
10002d66:	6821      	ldr	r1, [r4, #0]
10002d68:	6051      	str	r1, [r2, #4]
         pSrc[j] = in;
10002d6a:	4659      	mov	r1, fp
10002d6c:	6021      	str	r1, [r4, #0]

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002d6e:	68b4      	ldr	r4, [r6, #8]
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002d70:	4651      	mov	r1, sl
         pSrc[i] = pSrc[j];
         pSrc[j] = in;

         /*  pSrc[i + fftLenBy2p1] <-> pSrc[j + fftLenBy2p1];  */
         /*  pSrc[i + fftLenBy2p1+1u] <-> pSrc[j + fftLenBy2p1+1u] */
         in = pSrc[i + fftLenBy2p1];
10002d72:	46a3      	mov	fp, r4
         pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
10002d74:	186c      	adds	r4, r5, r1
10002d76:	00a1      	lsls	r1, r4, #2
10002d78:	1844      	adds	r4, r0, r1
10002d7a:	6821      	ldr	r1, [r4, #0]
10002d7c:	60b1      	str	r1, [r6, #8]
         pSrc[j + fftLenBy2p1] = in;
10002d7e:	465e      	mov	r6, fp
10002d80:	6026      	str	r6, [r4, #0]
10002d82:	1c14      	adds	r4, r2, #0
10002d84:	4646      	mov	r6, r8
10002d86:	3408      	adds	r4, #8
10002d88:	3608      	adds	r6, #8
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002d8a:	9a01      	ldr	r2, [sp, #4]
         pSrc[j + fftLenBy2p1] = in;
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
10002d8c:	6821      	ldr	r1, [r4, #0]
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002d8e:	18ad      	adds	r5, r5, r2
10002d90:	00aa      	lsls	r2, r5, #2
10002d92:	1885      	adds	r5, r0, r2
10002d94:	682a      	ldr	r2, [r5, #0]
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002d96:	3702      	adds	r7, #2
      }

      /*  pSrc[i+1u] <-> pSrc[j+fftLenBy2];         */
      /*  pSrc[i+2] <-> pSrc[j+fftLenBy2+1u]  */
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
10002d98:	6022      	str	r2, [r4, #0]
      pSrc[j + fftLenBy2] = in;
10002d9a:	6029      	str	r1, [r5, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002d9c:	4661      	mov	r1, ip
      in = pSrc[i + 1u];
      pSrc[i + 1u] = pSrc[j + fftLenBy2];
      pSrc[j + fftLenBy2] = in;

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
10002d9e:	881d      	ldrh	r5, [r3, #0]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
10002da0:	1859      	adds	r1, r3, r1
   j = 0u;
   fftLenBy2 = fftLen / 2u;
   fftLenBy2p1 = (fftLen / 2u) + 1u;

   /* Bit Reversal Implementation */
   for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
10002da2:	454f      	cmp	r7, r9
10002da4:	d9b2      	bls.n	10002d0c <arm_bitreversal_q15+0x80>
      j = *pBitRevTab;

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
   }
}
10002da6:	b003      	add	sp, #12
10002da8:	bc3c      	pop	{r2, r3, r4, r5}
10002daa:	4690      	mov	r8, r2
10002dac:	4699      	mov	r9, r3
10002dae:	46a2      	mov	sl, r4
10002db0:	46ab      	mov	fp, r5
10002db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002db4:	0000      	movs	r0, r0
	...

10002db8 <log10>:
10002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002dba:	4647      	mov	r7, r8
10002dbc:	b480      	push	{r7}
10002dbe:	b08a      	sub	sp, #40	; 0x28
10002dc0:	1c04      	adds	r4, r0, #0
10002dc2:	1c0d      	adds	r5, r1, #0
10002dc4:	f000 f87c 	bl	10002ec0 <__ieee754_log10>
10002dc8:	4a39      	ldr	r2, [pc, #228]	; (10002eb0 <log10+0xf8>)
10002dca:	2300      	movs	r3, #0
10002dcc:	1c06      	adds	r6, r0, #0
10002dce:	56d0      	ldrsb	r0, [r2, r3]
10002dd0:	1c0f      	adds	r7, r1, #0
10002dd2:	4690      	mov	r8, r2
10002dd4:	1c43      	adds	r3, r0, #1
10002dd6:	d00d      	beq.n	10002df4 <log10+0x3c>
10002dd8:	1c20      	adds	r0, r4, #0
10002dda:	1c29      	adds	r1, r5, #0
10002ddc:	f000 f910 	bl	10003000 <__fpclassifyd>
10002de0:	2800      	cmp	r0, #0
10002de2:	d007      	beq.n	10002df4 <log10+0x3c>
10002de4:	1c20      	adds	r0, r4, #0
10002de6:	1c29      	adds	r1, r5, #0
10002de8:	4b2c      	ldr	r3, [pc, #176]	; (10002e9c <log10+0xe4>)
10002dea:	4a2b      	ldr	r2, [pc, #172]	; (10002e98 <log10+0xe0>)
10002dec:	f000 fbc8 	bl	10003580 <__aeabi_dcmple>
10002df0:	2800      	cmp	r0, #0
10002df2:	d105      	bne.n	10002e00 <log10+0x48>
10002df4:	1c30      	adds	r0, r6, #0
10002df6:	1c39      	adds	r1, r7, #0
10002df8:	b00a      	add	sp, #40	; 0x28
10002dfa:	bc04      	pop	{r2}
10002dfc:	4690      	mov	r8, r2
10002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002e00:	2600      	movs	r6, #0
10002e02:	4647      	mov	r7, r8
10002e04:	492b      	ldr	r1, [pc, #172]	; (10002eb4 <log10+0xfc>)
10002e06:	9608      	str	r6, [sp, #32]
10002e08:	783e      	ldrb	r6, [r7, #0]
10002e0a:	9101      	str	r1, [sp, #4]
10002e0c:	9402      	str	r4, [sp, #8]
10002e0e:	9503      	str	r5, [sp, #12]
10002e10:	9404      	str	r4, [sp, #16]
10002e12:	9505      	str	r5, [sp, #20]
10002e14:	2e00      	cmp	r6, #0
10002e16:	d129      	bne.n	10002e6c <log10+0xb4>
10002e18:	4821      	ldr	r0, [pc, #132]	; (10002ea0 <log10+0xe8>)
10002e1a:	4922      	ldr	r1, [pc, #136]	; (10002ea4 <log10+0xec>)
10002e1c:	9006      	str	r0, [sp, #24]
10002e1e:	9107      	str	r1, [sp, #28]
10002e20:	1c20      	adds	r0, r4, #0
10002e22:	1c29      	adds	r1, r5, #0
10002e24:	4b1d      	ldr	r3, [pc, #116]	; (10002e9c <log10+0xe4>)
10002e26:	4a1c      	ldr	r2, [pc, #112]	; (10002e98 <log10+0xe0>)
10002e28:	f000 fb9a 	bl	10003560 <__aeabi_dcmpeq>
10002e2c:	2800      	cmp	r0, #0
10002e2e:	d00e      	beq.n	10002e4e <log10+0x96>
10002e30:	2302      	movs	r3, #2
10002e32:	9300      	str	r3, [sp, #0]
10002e34:	2e02      	cmp	r6, #2
10002e36:	d023      	beq.n	10002e80 <log10+0xc8>
10002e38:	4668      	mov	r0, sp
10002e3a:	f000 f919 	bl	10003070 <matherr>
10002e3e:	2800      	cmp	r0, #0
10002e40:	d01e      	beq.n	10002e80 <log10+0xc8>
10002e42:	9f08      	ldr	r7, [sp, #32]
10002e44:	2f00      	cmp	r7, #0
10002e46:	d120      	bne.n	10002e8a <log10+0xd2>
10002e48:	9e06      	ldr	r6, [sp, #24]
10002e4a:	9f07      	ldr	r7, [sp, #28]
10002e4c:	e7d2      	b.n	10002df4 <log10+0x3c>
10002e4e:	2401      	movs	r4, #1
10002e50:	9400      	str	r4, [sp, #0]
10002e52:	2e02      	cmp	r6, #2
10002e54:	d00f      	beq.n	10002e76 <log10+0xbe>
10002e56:	4668      	mov	r0, sp
10002e58:	f000 f90a 	bl	10003070 <matherr>
10002e5c:	2800      	cmp	r0, #0
10002e5e:	d00a      	beq.n	10002e76 <log10+0xbe>
10002e60:	4815      	ldr	r0, [pc, #84]	; (10002eb8 <log10+0x100>)
10002e62:	f000 f909 	bl	10003078 <nan>
10002e66:	9006      	str	r0, [sp, #24]
10002e68:	9107      	str	r1, [sp, #28]
10002e6a:	e7ea      	b.n	10002e42 <log10+0x8a>
10002e6c:	4a0e      	ldr	r2, [pc, #56]	; (10002ea8 <log10+0xf0>)
10002e6e:	4b0f      	ldr	r3, [pc, #60]	; (10002eac <log10+0xf4>)
10002e70:	9206      	str	r2, [sp, #24]
10002e72:	9307      	str	r3, [sp, #28]
10002e74:	e7d4      	b.n	10002e20 <log10+0x68>
10002e76:	f003 fa41 	bl	100062fc <__errno>
10002e7a:	2521      	movs	r5, #33	; 0x21
10002e7c:	6005      	str	r5, [r0, #0]
10002e7e:	e7ef      	b.n	10002e60 <log10+0xa8>
10002e80:	f003 fa3c 	bl	100062fc <__errno>
10002e84:	2122      	movs	r1, #34	; 0x22
10002e86:	6001      	str	r1, [r0, #0]
10002e88:	e7db      	b.n	10002e42 <log10+0x8a>
10002e8a:	f003 fa37 	bl	100062fc <__errno>
10002e8e:	9e08      	ldr	r6, [sp, #32]
10002e90:	6006      	str	r6, [r0, #0]
10002e92:	e7d9      	b.n	10002e48 <log10+0x90>
10002e94:	46c0      	nop			; (mov r8, r8)
10002e96:	46c0      	nop			; (mov r8, r8)
	...
10002ea0:	e0000000 	.word	0xe0000000
10002ea4:	c7efffff 	.word	0xc7efffff
10002ea8:	00000000 	.word	0x00000000
10002eac:	fff00000 	.word	0xfff00000
10002eb0:	20001368 	.word	0x20001368
10002eb4:	1002d268 	.word	0x1002d268
10002eb8:	1002d270 	.word	0x1002d270
10002ebc:	46c0      	nop			; (mov r8, r8)
10002ebe:	46c0      	nop			; (mov r8, r8)

10002ec0 <__ieee754_log10>:
10002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ec2:	464f      	mov	r7, r9
10002ec4:	4646      	mov	r6, r8
10002ec6:	b4c0      	push	{r6, r7}
10002ec8:	1c04      	adds	r4, r0, #0
10002eca:	1c02      	adds	r2, r0, #0
10002ecc:	4848      	ldr	r0, [pc, #288]	; (10002ff0 <__ieee754_log10+0x130>)
10002ece:	b083      	sub	sp, #12
10002ed0:	1c0d      	adds	r5, r1, #0
10002ed2:	1e0b      	subs	r3, r1, #0
10002ed4:	4283      	cmp	r3, r0
10002ed6:	dc1e      	bgt.n	10002f16 <__ieee754_log10+0x56>
10002ed8:	004b      	lsls	r3, r1, #1
10002eda:	085e      	lsrs	r6, r3, #1
10002edc:	4332      	orrs	r2, r6
10002ede:	d05b      	beq.n	10002f98 <__ieee754_log10+0xd8>
10002ee0:	1c20      	adds	r0, r4, #0
10002ee2:	2900      	cmp	r1, #0
10002ee4:	db5f      	blt.n	10002fa6 <__ieee754_log10+0xe6>
10002ee6:	4b37      	ldr	r3, [pc, #220]	; (10002fc4 <__ieee754_log10+0x104>)
10002ee8:	4a35      	ldr	r2, [pc, #212]	; (10002fc0 <__ieee754_log10+0x100>)
10002eea:	1c29      	adds	r1, r5, #0
10002eec:	f002 fa90 	bl	10005410 <__aeabi_dmul>
10002ef0:	4a40      	ldr	r2, [pc, #256]	; (10002ff4 <__ieee754_log10+0x134>)
10002ef2:	2736      	movs	r7, #54	; 0x36
10002ef4:	1c0d      	adds	r5, r1, #0
10002ef6:	1c0b      	adds	r3, r1, #0
10002ef8:	1c04      	adds	r4, r0, #0
10002efa:	4279      	negs	r1, r7
10002efc:	4293      	cmp	r3, r2
10002efe:	dd0e      	ble.n	10002f1e <__ieee754_log10+0x5e>
10002f00:	1c20      	adds	r0, r4, #0
10002f02:	1c29      	adds	r1, r5, #0
10002f04:	1c22      	adds	r2, r4, #0
10002f06:	1c2b      	adds	r3, r5, #0
10002f08:	f001 fad8 	bl	100044bc <__aeabi_dadd>
10002f0c:	b003      	add	sp, #12
10002f0e:	bc0c      	pop	{r2, r3}
10002f10:	4690      	mov	r8, r2
10002f12:	4699      	mov	r9, r3
10002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002f16:	4a37      	ldr	r2, [pc, #220]	; (10002ff4 <__ieee754_log10+0x134>)
10002f18:	2100      	movs	r1, #0
10002f1a:	4293      	cmp	r3, r2
10002f1c:	dcf0      	bgt.n	10002f00 <__ieee754_log10+0x40>
10002f1e:	4836      	ldr	r0, [pc, #216]	; (10002ff8 <__ieee754_log10+0x138>)
10002f20:	151a      	asrs	r2, r3, #20
10002f22:	1812      	adds	r2, r2, r0
10002f24:	1851      	adds	r1, r2, r1
10002f26:	0fca      	lsrs	r2, r1, #31
10002f28:	031b      	lsls	r3, r3, #12
10002f2a:	0b1b      	lsrs	r3, r3, #12
10002f2c:	1888      	adds	r0, r1, r2
10002f2e:	4690      	mov	r8, r2
10002f30:	4699      	mov	r9, r3
10002f32:	f003 f895 	bl	10006060 <__aeabi_i2d>
10002f36:	4b31      	ldr	r3, [pc, #196]	; (10002ffc <__ieee754_log10+0x13c>)
10002f38:	1c06      	adds	r6, r0, #0
10002f3a:	4640      	mov	r0, r8
10002f3c:	1a1b      	subs	r3, r3, r0
10002f3e:	051b      	lsls	r3, r3, #20
10002f40:	464d      	mov	r5, r9
10002f42:	431d      	orrs	r5, r3
10002f44:	1c0f      	adds	r7, r1, #0
10002f46:	1c20      	adds	r0, r4, #0
10002f48:	1c29      	adds	r1, r5, #0
10002f4a:	f000 f89d 	bl	10003088 <__ieee754_log>
10002f4e:	4a1e      	ldr	r2, [pc, #120]	; (10002fc8 <__ieee754_log10+0x108>)
10002f50:	4b1e      	ldr	r3, [pc, #120]	; (10002fcc <__ieee754_log10+0x10c>)
10002f52:	1c04      	adds	r4, r0, #0
10002f54:	1c0d      	adds	r5, r1, #0
10002f56:	1c30      	adds	r0, r6, #0
10002f58:	1c39      	adds	r1, r7, #0
10002f5a:	f002 fa59 	bl	10005410 <__aeabi_dmul>
10002f5e:	4a1c      	ldr	r2, [pc, #112]	; (10002fd0 <__ieee754_log10+0x110>)
10002f60:	4b1c      	ldr	r3, [pc, #112]	; (10002fd4 <__ieee754_log10+0x114>)
10002f62:	9000      	str	r0, [sp, #0]
10002f64:	9101      	str	r1, [sp, #4]
10002f66:	1c30      	adds	r0, r6, #0
10002f68:	1c39      	adds	r1, r7, #0
10002f6a:	f002 fa51 	bl	10005410 <__aeabi_dmul>
10002f6e:	4a1a      	ldr	r2, [pc, #104]	; (10002fd8 <__ieee754_log10+0x118>)
10002f70:	4b1a      	ldr	r3, [pc, #104]	; (10002fdc <__ieee754_log10+0x11c>)
10002f72:	1c06      	adds	r6, r0, #0
10002f74:	1c0f      	adds	r7, r1, #0
10002f76:	1c20      	adds	r0, r4, #0
10002f78:	1c29      	adds	r1, r5, #0
10002f7a:	f002 fa49 	bl	10005410 <__aeabi_dmul>
10002f7e:	1c02      	adds	r2, r0, #0
10002f80:	1c0b      	adds	r3, r1, #0
10002f82:	1c30      	adds	r0, r6, #0
10002f84:	1c39      	adds	r1, r7, #0
10002f86:	f001 fa99 	bl	100044bc <__aeabi_dadd>
10002f8a:	1c02      	adds	r2, r0, #0
10002f8c:	1c0b      	adds	r3, r1, #0
10002f8e:	9800      	ldr	r0, [sp, #0]
10002f90:	9901      	ldr	r1, [sp, #4]
10002f92:	f001 fa93 	bl	100044bc <__aeabi_dadd>
10002f96:	e7b9      	b.n	10002f0c <__ieee754_log10+0x4c>
10002f98:	4a11      	ldr	r2, [pc, #68]	; (10002fe0 <__ieee754_log10+0x120>)
10002f9a:	4b12      	ldr	r3, [pc, #72]	; (10002fe4 <__ieee754_log10+0x124>)
10002f9c:	4812      	ldr	r0, [pc, #72]	; (10002fe8 <__ieee754_log10+0x128>)
10002f9e:	4913      	ldr	r1, [pc, #76]	; (10002fec <__ieee754_log10+0x12c>)
10002fa0:	f001 fe3c 	bl	10004c1c <__aeabi_ddiv>
10002fa4:	e7b2      	b.n	10002f0c <__ieee754_log10+0x4c>
10002fa6:	1c22      	adds	r2, r4, #0
10002fa8:	1c2b      	adds	r3, r5, #0
10002faa:	1c29      	adds	r1, r5, #0
10002fac:	f002 fca2 	bl	100058f4 <__aeabi_dsub>
10002fb0:	4a0b      	ldr	r2, [pc, #44]	; (10002fe0 <__ieee754_log10+0x120>)
10002fb2:	4b0c      	ldr	r3, [pc, #48]	; (10002fe4 <__ieee754_log10+0x124>)
10002fb4:	f001 fe32 	bl	10004c1c <__aeabi_ddiv>
10002fb8:	e7a8      	b.n	10002f0c <__ieee754_log10+0x4c>
10002fba:	46c0      	nop			; (mov r8, r8)
10002fbc:	46c0      	nop			; (mov r8, r8)
10002fbe:	46c0      	nop			; (mov r8, r8)
10002fc0:	00000000 	.word	0x00000000
10002fc4:	43500000 	.word	0x43500000
10002fc8:	509f6000 	.word	0x509f6000
10002fcc:	3fd34413 	.word	0x3fd34413
10002fd0:	11f12b36 	.word	0x11f12b36
10002fd4:	3d59fef3 	.word	0x3d59fef3
10002fd8:	1526e50e 	.word	0x1526e50e
10002fdc:	3fdbcb7b 	.word	0x3fdbcb7b
	...
10002fec:	c3500000 	.word	0xc3500000
10002ff0:	000fffff 	.word	0x000fffff
10002ff4:	7fefffff 	.word	0x7fefffff
10002ff8:	fffffc01 	.word	0xfffffc01
10002ffc:	000003ff 	.word	0x000003ff

10003000 <__fpclassifyd>:
10003000:	1c0b      	adds	r3, r1, #0
10003002:	1c01      	adds	r1, r0, #0
10003004:	b530      	push	{r4, r5, lr}
10003006:	4319      	orrs	r1, r3
10003008:	2202      	movs	r2, #2
1000300a:	2900      	cmp	r1, #0
1000300c:	d101      	bne.n	10003012 <__fpclassifyd+0x12>
1000300e:	1c10      	adds	r0, r2, #0
10003010:	bd30      	pop	{r4, r5, pc}
10003012:	2480      	movs	r4, #128	; 0x80
10003014:	0625      	lsls	r5, r4, #24
10003016:	42ab      	cmp	r3, r5
10003018:	d01e      	beq.n	10003058 <__fpclassifyd+0x58>
1000301a:	4a11      	ldr	r2, [pc, #68]	; (10003060 <__fpclassifyd+0x60>)
1000301c:	4911      	ldr	r1, [pc, #68]	; (10003064 <__fpclassifyd+0x64>)
1000301e:	189c      	adds	r4, r3, r2
10003020:	2204      	movs	r2, #4
10003022:	428c      	cmp	r4, r1
10003024:	d9f3      	bls.n	1000300e <__fpclassifyd+0xe>
10003026:	4d10      	ldr	r5, [pc, #64]	; (10003068 <__fpclassifyd+0x68>)
10003028:	195c      	adds	r4, r3, r5
1000302a:	428c      	cmp	r4, r1
1000302c:	d9ef      	bls.n	1000300e <__fpclassifyd+0xe>
1000302e:	490f      	ldr	r1, [pc, #60]	; (1000306c <__fpclassifyd+0x6c>)
10003030:	2203      	movs	r2, #3
10003032:	428b      	cmp	r3, r1
10003034:	d9eb      	bls.n	1000300e <__fpclassifyd+0xe>
10003036:	2280      	movs	r2, #128	; 0x80
10003038:	0615      	lsls	r5, r2, #24
1000303a:	490c      	ldr	r1, [pc, #48]	; (1000306c <__fpclassifyd+0x6c>)
1000303c:	195c      	adds	r4, r3, r5
1000303e:	2203      	movs	r2, #3
10003040:	428c      	cmp	r4, r1
10003042:	d9e4      	bls.n	1000300e <__fpclassifyd+0xe>
10003044:	4a08      	ldr	r2, [pc, #32]	; (10003068 <__fpclassifyd+0x68>)
10003046:	4293      	cmp	r3, r2
10003048:	d003      	beq.n	10003052 <__fpclassifyd+0x52>
1000304a:	4d05      	ldr	r5, [pc, #20]	; (10003060 <__fpclassifyd+0x60>)
1000304c:	2200      	movs	r2, #0
1000304e:	42ab      	cmp	r3, r5
10003050:	d1dd      	bne.n	1000300e <__fpclassifyd+0xe>
10003052:	4242      	negs	r2, r0
10003054:	4142      	adcs	r2, r0
10003056:	e7da      	b.n	1000300e <__fpclassifyd+0xe>
10003058:	2800      	cmp	r0, #0
1000305a:	d0d8      	beq.n	1000300e <__fpclassifyd+0xe>
1000305c:	e7eb      	b.n	10003036 <__fpclassifyd+0x36>
1000305e:	46c0      	nop			; (mov r8, r8)
10003060:	fff00000 	.word	0xfff00000
10003064:	7fdfffff 	.word	0x7fdfffff
10003068:	7ff00000 	.word	0x7ff00000
1000306c:	000fffff 	.word	0x000fffff

10003070 <matherr>:
10003070:	2000      	movs	r0, #0
10003072:	4770      	bx	lr
10003074:	0000      	movs	r0, r0
	...

10003078 <nan>:
10003078:	4902      	ldr	r1, [pc, #8]	; (10003084 <nan+0xc>)
1000307a:	4801      	ldr	r0, [pc, #4]	; (10003080 <nan+0x8>)
1000307c:	4770      	bx	lr
1000307e:	46c0      	nop			; (mov r8, r8)
10003080:	00000000 	.word	0x00000000
10003084:	7ff80000 	.word	0x7ff80000

10003088 <__ieee754_log>:
10003088:	b5f0      	push	{r4, r5, r6, r7, lr}
1000308a:	464e      	mov	r6, r9
1000308c:	4657      	mov	r7, sl
1000308e:	4645      	mov	r5, r8
10003090:	b4e0      	push	{r5, r6, r7}
10003092:	4ec1      	ldr	r6, [pc, #772]	; (10003398 <__ieee754_log+0x310>)
10003094:	b088      	sub	sp, #32
10003096:	1c02      	adds	r2, r0, #0
10003098:	1c0b      	adds	r3, r1, #0
1000309a:	1c04      	adds	r4, r0, #0
1000309c:	42b3      	cmp	r3, r6
1000309e:	dc58      	bgt.n	10003152 <__ieee754_log+0xca>
100030a0:	005d      	lsls	r5, r3, #1
100030a2:	0869      	lsrs	r1, r5, #1
100030a4:	430c      	orrs	r4, r1
100030a6:	d100      	bne.n	100030aa <__ieee754_log+0x22>
100030a8:	e0ed      	b.n	10003286 <__ieee754_log+0x1fe>
100030aa:	2b00      	cmp	r3, #0
100030ac:	da00      	bge.n	100030b0 <__ieee754_log+0x28>
100030ae:	e1b2      	b.n	10003416 <__ieee754_log+0x38e>
100030b0:	1c10      	adds	r0, r2, #0
100030b2:	1c19      	adds	r1, r3, #0
100030b4:	4b99      	ldr	r3, [pc, #612]	; (1000331c <__ieee754_log+0x294>)
100030b6:	4a98      	ldr	r2, [pc, #608]	; (10003318 <__ieee754_log+0x290>)
100030b8:	f002 f9aa 	bl	10005410 <__aeabi_dmul>
100030bc:	1c02      	adds	r2, r0, #0
100030be:	48b7      	ldr	r0, [pc, #732]	; (1000339c <__ieee754_log+0x314>)
100030c0:	2436      	movs	r4, #54	; 0x36
100030c2:	1c0b      	adds	r3, r1, #0
100030c4:	4267      	negs	r7, r4
100030c6:	4281      	cmp	r1, r0
100030c8:	dc47      	bgt.n	1000315a <__ieee754_log+0xd2>
100030ca:	150b      	asrs	r3, r1, #20
100030cc:	4eb4      	ldr	r6, [pc, #720]	; (100033a0 <__ieee754_log+0x318>)
100030ce:	0309      	lsls	r1, r1, #12
100030d0:	48b4      	ldr	r0, [pc, #720]	; (100033a4 <__ieee754_log+0x31c>)
100030d2:	0b0c      	lsrs	r4, r1, #12
100030d4:	199d      	adds	r5, r3, r6
100030d6:	46a0      	mov	r8, r4
100030d8:	1c03      	adds	r3, r0, #0
100030da:	2680      	movs	r6, #128	; 0x80
100030dc:	19ef      	adds	r7, r5, r7
100030de:	4443      	add	r3, r8
100030e0:	0375      	lsls	r5, r6, #13
100030e2:	49b1      	ldr	r1, [pc, #708]	; (100033a8 <__ieee754_log+0x320>)
100030e4:	401d      	ands	r5, r3
100030e6:	4069      	eors	r1, r5
100030e8:	1528      	asrs	r0, r5, #20
100030ea:	430c      	orrs	r4, r1
100030ec:	19c7      	adds	r7, r0, r7
100030ee:	1c21      	adds	r1, r4, #0
100030f0:	1c10      	adds	r0, r2, #0
100030f2:	4a8b      	ldr	r2, [pc, #556]	; (10003320 <__ieee754_log+0x298>)
100030f4:	4b8b      	ldr	r3, [pc, #556]	; (10003324 <__ieee754_log+0x29c>)
100030f6:	f002 fbfd 	bl	100058f4 <__aeabi_dsub>
100030fa:	4642      	mov	r2, r8
100030fc:	3202      	adds	r2, #2
100030fe:	0313      	lsls	r3, r2, #12
10003100:	46b9      	mov	r9, r7
10003102:	1c06      	adds	r6, r0, #0
10003104:	1c0f      	adds	r7, r1, #0
10003106:	0b1d      	lsrs	r5, r3, #12
10003108:	2d02      	cmp	r5, #2
1000310a:	dc30      	bgt.n	1000316e <__ieee754_log+0xe6>
1000310c:	4a86      	ldr	r2, [pc, #536]	; (10003328 <__ieee754_log+0x2a0>)
1000310e:	4b87      	ldr	r3, [pc, #540]	; (1000332c <__ieee754_log+0x2a4>)
10003110:	f000 fa26 	bl	10003560 <__aeabi_dcmpeq>
10003114:	2800      	cmp	r0, #0
10003116:	d100      	bne.n	1000311a <__ieee754_log+0x92>
10003118:	e0bc      	b.n	10003294 <__ieee754_log+0x20c>
1000311a:	464e      	mov	r6, r9
1000311c:	2e00      	cmp	r6, #0
1000311e:	d100      	bne.n	10003122 <__ieee754_log+0x9a>
10003120:	e182      	b.n	10003428 <__ieee754_log+0x3a0>
10003122:	4648      	mov	r0, r9
10003124:	f002 ff9c 	bl	10006060 <__aeabi_i2d>
10003128:	4a81      	ldr	r2, [pc, #516]	; (10003330 <__ieee754_log+0x2a8>)
1000312a:	4b82      	ldr	r3, [pc, #520]	; (10003334 <__ieee754_log+0x2ac>)
1000312c:	1c04      	adds	r4, r0, #0
1000312e:	1c0d      	adds	r5, r1, #0
10003130:	f002 f96e 	bl	10005410 <__aeabi_dmul>
10003134:	4a80      	ldr	r2, [pc, #512]	; (10003338 <__ieee754_log+0x2b0>)
10003136:	4b81      	ldr	r3, [pc, #516]	; (1000333c <__ieee754_log+0x2b4>)
10003138:	1c06      	adds	r6, r0, #0
1000313a:	1c0f      	adds	r7, r1, #0
1000313c:	1c20      	adds	r0, r4, #0
1000313e:	1c29      	adds	r1, r5, #0
10003140:	f002 f966 	bl	10005410 <__aeabi_dmul>
10003144:	1c02      	adds	r2, r0, #0
10003146:	1c0b      	adds	r3, r1, #0
10003148:	1c30      	adds	r0, r6, #0
1000314a:	1c39      	adds	r1, r7, #0
1000314c:	f001 f9b6 	bl	100044bc <__aeabi_dadd>
10003150:	e007      	b.n	10003162 <__ieee754_log+0xda>
10003152:	4892      	ldr	r0, [pc, #584]	; (1000339c <__ieee754_log+0x314>)
10003154:	2700      	movs	r7, #0
10003156:	4281      	cmp	r1, r0
10003158:	ddb7      	ble.n	100030ca <__ieee754_log+0x42>
1000315a:	1c10      	adds	r0, r2, #0
1000315c:	1c19      	adds	r1, r3, #0
1000315e:	f001 f9ad 	bl	100044bc <__aeabi_dadd>
10003162:	b008      	add	sp, #32
10003164:	bc1c      	pop	{r2, r3, r4}
10003166:	4690      	mov	r8, r2
10003168:	4699      	mov	r9, r3
1000316a:	46a2      	mov	sl, r4
1000316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000316e:	4a74      	ldr	r2, [pc, #464]	; (10003340 <__ieee754_log+0x2b8>)
10003170:	4b74      	ldr	r3, [pc, #464]	; (10003344 <__ieee754_log+0x2bc>)
10003172:	f001 f9a3 	bl	100044bc <__aeabi_dadd>
10003176:	1c02      	adds	r2, r0, #0
10003178:	1c0b      	adds	r3, r1, #0
1000317a:	1c30      	adds	r0, r6, #0
1000317c:	1c39      	adds	r1, r7, #0
1000317e:	f001 fd4d 	bl	10004c1c <__aeabi_ddiv>
10003182:	9002      	str	r0, [sp, #8]
10003184:	9103      	str	r1, [sp, #12]
10003186:	4648      	mov	r0, r9
10003188:	f002 ff6a 	bl	10006060 <__aeabi_i2d>
1000318c:	9004      	str	r0, [sp, #16]
1000318e:	9105      	str	r1, [sp, #20]
10003190:	9802      	ldr	r0, [sp, #8]
10003192:	9903      	ldr	r1, [sp, #12]
10003194:	1c02      	adds	r2, r0, #0
10003196:	1c0b      	adds	r3, r1, #0
10003198:	f002 f93a 	bl	10005410 <__aeabi_dmul>
1000319c:	1c02      	adds	r2, r0, #0
1000319e:	1c0b      	adds	r3, r1, #0
100031a0:	9000      	str	r0, [sp, #0]
100031a2:	9101      	str	r1, [sp, #4]
100031a4:	f002 f934 	bl	10005410 <__aeabi_dmul>
100031a8:	4a67      	ldr	r2, [pc, #412]	; (10003348 <__ieee754_log+0x2c0>)
100031aa:	4b68      	ldr	r3, [pc, #416]	; (1000334c <__ieee754_log+0x2c4>)
100031ac:	4c7f      	ldr	r4, [pc, #508]	; (100033ac <__ieee754_log+0x324>)
100031ae:	1c0d      	adds	r5, r1, #0
100031b0:	46a2      	mov	sl, r4
100031b2:	1c04      	adds	r4, r0, #0
100031b4:	f002 f92c 	bl	10005410 <__aeabi_dmul>
100031b8:	4a65      	ldr	r2, [pc, #404]	; (10003350 <__ieee754_log+0x2c8>)
100031ba:	4b66      	ldr	r3, [pc, #408]	; (10003354 <__ieee754_log+0x2cc>)
100031bc:	f001 f97e 	bl	100044bc <__aeabi_dadd>
100031c0:	1c22      	adds	r2, r4, #0
100031c2:	1c2b      	adds	r3, r5, #0
100031c4:	f002 f924 	bl	10005410 <__aeabi_dmul>
100031c8:	4a63      	ldr	r2, [pc, #396]	; (10003358 <__ieee754_log+0x2d0>)
100031ca:	4b64      	ldr	r3, [pc, #400]	; (1000335c <__ieee754_log+0x2d4>)
100031cc:	f001 f976 	bl	100044bc <__aeabi_dadd>
100031d0:	1c22      	adds	r2, r4, #0
100031d2:	1c2b      	adds	r3, r5, #0
100031d4:	f002 f91c 	bl	10005410 <__aeabi_dmul>
100031d8:	4a61      	ldr	r2, [pc, #388]	; (10003360 <__ieee754_log+0x2d8>)
100031da:	4b62      	ldr	r3, [pc, #392]	; (10003364 <__ieee754_log+0x2dc>)
100031dc:	f001 f96e 	bl	100044bc <__aeabi_dadd>
100031e0:	9a00      	ldr	r2, [sp, #0]
100031e2:	9b01      	ldr	r3, [sp, #4]
100031e4:	f002 f914 	bl	10005410 <__aeabi_dmul>
100031e8:	4a5f      	ldr	r2, [pc, #380]	; (10003368 <__ieee754_log+0x2e0>)
100031ea:	4b60      	ldr	r3, [pc, #384]	; (1000336c <__ieee754_log+0x2e4>)
100031ec:	9000      	str	r0, [sp, #0]
100031ee:	9101      	str	r1, [sp, #4]
100031f0:	1c20      	adds	r0, r4, #0
100031f2:	1c29      	adds	r1, r5, #0
100031f4:	f002 f90c 	bl	10005410 <__aeabi_dmul>
100031f8:	4a5d      	ldr	r2, [pc, #372]	; (10003370 <__ieee754_log+0x2e8>)
100031fa:	4b5e      	ldr	r3, [pc, #376]	; (10003374 <__ieee754_log+0x2ec>)
100031fc:	f001 f95e 	bl	100044bc <__aeabi_dadd>
10003200:	1c22      	adds	r2, r4, #0
10003202:	1c2b      	adds	r3, r5, #0
10003204:	f002 f904 	bl	10005410 <__aeabi_dmul>
10003208:	4a5b      	ldr	r2, [pc, #364]	; (10003378 <__ieee754_log+0x2f0>)
1000320a:	4b5c      	ldr	r3, [pc, #368]	; (1000337c <__ieee754_log+0x2f4>)
1000320c:	f001 f956 	bl	100044bc <__aeabi_dadd>
10003210:	1c22      	adds	r2, r4, #0
10003212:	1c2b      	adds	r3, r5, #0
10003214:	f002 f8fc 	bl	10005410 <__aeabi_dmul>
10003218:	1c02      	adds	r2, r0, #0
1000321a:	1c0b      	adds	r3, r1, #0
1000321c:	9800      	ldr	r0, [sp, #0]
1000321e:	9901      	ldr	r1, [sp, #4]
10003220:	f001 f94c 	bl	100044bc <__aeabi_dadd>
10003224:	1c0d      	adds	r5, r1, #0
10003226:	4962      	ldr	r1, [pc, #392]	; (100033b0 <__ieee754_log+0x328>)
10003228:	44c2      	add	sl, r8
1000322a:	1c04      	adds	r4, r0, #0
1000322c:	4640      	mov	r0, r8
1000322e:	1a0a      	subs	r2, r1, r0
10003230:	4653      	mov	r3, sl
10003232:	431a      	orrs	r2, r3
10003234:	2a00      	cmp	r2, #0
10003236:	dd54      	ble.n	100032e2 <__ieee754_log+0x25a>
10003238:	4a51      	ldr	r2, [pc, #324]	; (10003380 <__ieee754_log+0x2f8>)
1000323a:	4b52      	ldr	r3, [pc, #328]	; (10003384 <__ieee754_log+0x2fc>)
1000323c:	1c30      	adds	r0, r6, #0
1000323e:	1c39      	adds	r1, r7, #0
10003240:	f002 f8e6 	bl	10005410 <__aeabi_dmul>
10003244:	1c32      	adds	r2, r6, #0
10003246:	1c3b      	adds	r3, r7, #0
10003248:	f002 f8e2 	bl	10005410 <__aeabi_dmul>
1000324c:	9000      	str	r0, [sp, #0]
1000324e:	9101      	str	r1, [sp, #4]
10003250:	4648      	mov	r0, r9
10003252:	2800      	cmp	r0, #0
10003254:	d000      	beq.n	10003258 <__ieee754_log+0x1d0>
10003256:	e0ad      	b.n	100033b4 <__ieee754_log+0x32c>
10003258:	1c22      	adds	r2, r4, #0
1000325a:	1c2b      	adds	r3, r5, #0
1000325c:	9800      	ldr	r0, [sp, #0]
1000325e:	9901      	ldr	r1, [sp, #4]
10003260:	f001 f92c 	bl	100044bc <__aeabi_dadd>
10003264:	9a02      	ldr	r2, [sp, #8]
10003266:	9b03      	ldr	r3, [sp, #12]
10003268:	f002 f8d2 	bl	10005410 <__aeabi_dmul>
1000326c:	1c02      	adds	r2, r0, #0
1000326e:	1c0b      	adds	r3, r1, #0
10003270:	9800      	ldr	r0, [sp, #0]
10003272:	9901      	ldr	r1, [sp, #4]
10003274:	f002 fb3e 	bl	100058f4 <__aeabi_dsub>
10003278:	1c02      	adds	r2, r0, #0
1000327a:	1c0b      	adds	r3, r1, #0
1000327c:	1c30      	adds	r0, r6, #0
1000327e:	1c39      	adds	r1, r7, #0
10003280:	f002 fb38 	bl	100058f4 <__aeabi_dsub>
10003284:	e76d      	b.n	10003162 <__ieee754_log+0xda>
10003286:	4a28      	ldr	r2, [pc, #160]	; (10003328 <__ieee754_log+0x2a0>)
10003288:	4b28      	ldr	r3, [pc, #160]	; (1000332c <__ieee754_log+0x2a4>)
1000328a:	483f      	ldr	r0, [pc, #252]	; (10003388 <__ieee754_log+0x300>)
1000328c:	493f      	ldr	r1, [pc, #252]	; (1000338c <__ieee754_log+0x304>)
1000328e:	f001 fcc5 	bl	10004c1c <__aeabi_ddiv>
10003292:	e766      	b.n	10003162 <__ieee754_log+0xda>
10003294:	1c32      	adds	r2, r6, #0
10003296:	1c3b      	adds	r3, r7, #0
10003298:	1c30      	adds	r0, r6, #0
1000329a:	1c39      	adds	r1, r7, #0
1000329c:	f002 f8b8 	bl	10005410 <__aeabi_dmul>
100032a0:	4a3b      	ldr	r2, [pc, #236]	; (10003390 <__ieee754_log+0x308>)
100032a2:	4b3c      	ldr	r3, [pc, #240]	; (10003394 <__ieee754_log+0x30c>)
100032a4:	1c04      	adds	r4, r0, #0
100032a6:	1c0d      	adds	r5, r1, #0
100032a8:	1c30      	adds	r0, r6, #0
100032aa:	1c39      	adds	r1, r7, #0
100032ac:	f002 f8b0 	bl	10005410 <__aeabi_dmul>
100032b0:	1c02      	adds	r2, r0, #0
100032b2:	1c0b      	adds	r3, r1, #0
100032b4:	4832      	ldr	r0, [pc, #200]	; (10003380 <__ieee754_log+0x2f8>)
100032b6:	4933      	ldr	r1, [pc, #204]	; (10003384 <__ieee754_log+0x2fc>)
100032b8:	f002 fb1c 	bl	100058f4 <__aeabi_dsub>
100032bc:	1c02      	adds	r2, r0, #0
100032be:	1c0b      	adds	r3, r1, #0
100032c0:	1c20      	adds	r0, r4, #0
100032c2:	1c29      	adds	r1, r5, #0
100032c4:	f002 f8a4 	bl	10005410 <__aeabi_dmul>
100032c8:	464a      	mov	r2, r9
100032ca:	1c04      	adds	r4, r0, #0
100032cc:	1c0d      	adds	r5, r1, #0
100032ce:	2a00      	cmp	r2, #0
100032d0:	d000      	beq.n	100032d4 <__ieee754_log+0x24c>
100032d2:	e0ac      	b.n	1000342e <__ieee754_log+0x3a6>
100032d4:	1c30      	adds	r0, r6, #0
100032d6:	1c39      	adds	r1, r7, #0
100032d8:	1c22      	adds	r2, r4, #0
100032da:	1c2b      	adds	r3, r5, #0
100032dc:	f002 fb0a 	bl	100058f4 <__aeabi_dsub>
100032e0:	e73f      	b.n	10003162 <__ieee754_log+0xda>
100032e2:	4649      	mov	r1, r9
100032e4:	2900      	cmp	r1, #0
100032e6:	d100      	bne.n	100032ea <__ieee754_log+0x262>
100032e8:	e0c3      	b.n	10003472 <__ieee754_log+0x3ea>
100032ea:	4a11      	ldr	r2, [pc, #68]	; (10003330 <__ieee754_log+0x2a8>)
100032ec:	4b11      	ldr	r3, [pc, #68]	; (10003334 <__ieee754_log+0x2ac>)
100032ee:	9804      	ldr	r0, [sp, #16]
100032f0:	9905      	ldr	r1, [sp, #20]
100032f2:	f002 f88d 	bl	10005410 <__aeabi_dmul>
100032f6:	1c22      	adds	r2, r4, #0
100032f8:	9000      	str	r0, [sp, #0]
100032fa:	9101      	str	r1, [sp, #4]
100032fc:	1c2b      	adds	r3, r5, #0
100032fe:	1c30      	adds	r0, r6, #0
10003300:	1c39      	adds	r1, r7, #0
10003302:	f002 faf7 	bl	100058f4 <__aeabi_dsub>
10003306:	9a02      	ldr	r2, [sp, #8]
10003308:	9b03      	ldr	r3, [sp, #12]
1000330a:	f002 f881 	bl	10005410 <__aeabi_dmul>
1000330e:	1c04      	adds	r4, r0, #0
10003310:	1c0d      	adds	r5, r1, #0
10003312:	9804      	ldr	r0, [sp, #16]
10003314:	9905      	ldr	r1, [sp, #20]
10003316:	e097      	b.n	10003448 <__ieee754_log+0x3c0>
10003318:	00000000 	.word	0x00000000
1000331c:	43500000 	.word	0x43500000
10003320:	00000000 	.word	0x00000000
10003324:	3ff00000 	.word	0x3ff00000
	...
10003330:	fee00000 	.word	0xfee00000
10003334:	3fe62e42 	.word	0x3fe62e42
10003338:	35793c76 	.word	0x35793c76
1000333c:	3dea39ef 	.word	0x3dea39ef
10003340:	00000000 	.word	0x00000000
10003344:	40000000 	.word	0x40000000
10003348:	df3e5244 	.word	0xdf3e5244
1000334c:	3fc2f112 	.word	0x3fc2f112
10003350:	96cb03de 	.word	0x96cb03de
10003354:	3fc74664 	.word	0x3fc74664
10003358:	94229359 	.word	0x94229359
1000335c:	3fd24924 	.word	0x3fd24924
10003360:	55555593 	.word	0x55555593
10003364:	3fe55555 	.word	0x3fe55555
10003368:	d078c69f 	.word	0xd078c69f
1000336c:	3fc39a09 	.word	0x3fc39a09
10003370:	1d8e78af 	.word	0x1d8e78af
10003374:	3fcc71c5 	.word	0x3fcc71c5
10003378:	9997fa04 	.word	0x9997fa04
1000337c:	3fd99999 	.word	0x3fd99999
10003380:	00000000 	.word	0x00000000
10003384:	3fe00000 	.word	0x3fe00000
10003388:	00000000 	.word	0x00000000
1000338c:	c3500000 	.word	0xc3500000
10003390:	55555555 	.word	0x55555555
10003394:	3fd55555 	.word	0x3fd55555
10003398:	000fffff 	.word	0x000fffff
1000339c:	7fefffff 	.word	0x7fefffff
100033a0:	fffffc01 	.word	0xfffffc01
100033a4:	00095f64 	.word	0x00095f64
100033a8:	3ff00000 	.word	0x3ff00000
100033ac:	fff9eb86 	.word	0xfff9eb86
100033b0:	0006b851 	.word	0x0006b851
100033b4:	4b35      	ldr	r3, [pc, #212]	; (1000348c <__ieee754_log+0x404>)
100033b6:	4a34      	ldr	r2, [pc, #208]	; (10003488 <__ieee754_log+0x400>)
100033b8:	9804      	ldr	r0, [sp, #16]
100033ba:	9905      	ldr	r1, [sp, #20]
100033bc:	f002 f828 	bl	10005410 <__aeabi_dmul>
100033c0:	1c22      	adds	r2, r4, #0
100033c2:	9006      	str	r0, [sp, #24]
100033c4:	9107      	str	r1, [sp, #28]
100033c6:	9800      	ldr	r0, [sp, #0]
100033c8:	9901      	ldr	r1, [sp, #4]
100033ca:	1c2b      	adds	r3, r5, #0
100033cc:	f001 f876 	bl	100044bc <__aeabi_dadd>
100033d0:	9a02      	ldr	r2, [sp, #8]
100033d2:	9b03      	ldr	r3, [sp, #12]
100033d4:	f002 f81c 	bl	10005410 <__aeabi_dmul>
100033d8:	4a2d      	ldr	r2, [pc, #180]	; (10003490 <__ieee754_log+0x408>)
100033da:	4b2e      	ldr	r3, [pc, #184]	; (10003494 <__ieee754_log+0x40c>)
100033dc:	1c04      	adds	r4, r0, #0
100033de:	1c0d      	adds	r5, r1, #0
100033e0:	9804      	ldr	r0, [sp, #16]
100033e2:	9905      	ldr	r1, [sp, #20]
100033e4:	f002 f814 	bl	10005410 <__aeabi_dmul>
100033e8:	1c02      	adds	r2, r0, #0
100033ea:	1c0b      	adds	r3, r1, #0
100033ec:	1c20      	adds	r0, r4, #0
100033ee:	1c29      	adds	r1, r5, #0
100033f0:	f001 f864 	bl	100044bc <__aeabi_dadd>
100033f4:	1c02      	adds	r2, r0, #0
100033f6:	1c0b      	adds	r3, r1, #0
100033f8:	9800      	ldr	r0, [sp, #0]
100033fa:	9901      	ldr	r1, [sp, #4]
100033fc:	f002 fa7a 	bl	100058f4 <__aeabi_dsub>
10003400:	1c32      	adds	r2, r6, #0
10003402:	1c3b      	adds	r3, r7, #0
10003404:	f002 fa76 	bl	100058f4 <__aeabi_dsub>
10003408:	1c02      	adds	r2, r0, #0
1000340a:	1c0b      	adds	r3, r1, #0
1000340c:	9806      	ldr	r0, [sp, #24]
1000340e:	9907      	ldr	r1, [sp, #28]
10003410:	f002 fa70 	bl	100058f4 <__aeabi_dsub>
10003414:	e6a5      	b.n	10003162 <__ieee754_log+0xda>
10003416:	1c10      	adds	r0, r2, #0
10003418:	1c19      	adds	r1, r3, #0
1000341a:	f002 fa6b 	bl	100058f4 <__aeabi_dsub>
1000341e:	4a1e      	ldr	r2, [pc, #120]	; (10003498 <__ieee754_log+0x410>)
10003420:	4b1e      	ldr	r3, [pc, #120]	; (1000349c <__ieee754_log+0x414>)
10003422:	f001 fbfb 	bl	10004c1c <__aeabi_ddiv>
10003426:	e69c      	b.n	10003162 <__ieee754_log+0xda>
10003428:	481b      	ldr	r0, [pc, #108]	; (10003498 <__ieee754_log+0x410>)
1000342a:	491c      	ldr	r1, [pc, #112]	; (1000349c <__ieee754_log+0x414>)
1000342c:	e699      	b.n	10003162 <__ieee754_log+0xda>
1000342e:	4648      	mov	r0, r9
10003430:	f002 fe16 	bl	10006060 <__aeabi_i2d>
10003434:	4b15      	ldr	r3, [pc, #84]	; (1000348c <__ieee754_log+0x404>)
10003436:	4a14      	ldr	r2, [pc, #80]	; (10003488 <__ieee754_log+0x400>)
10003438:	9002      	str	r0, [sp, #8]
1000343a:	9103      	str	r1, [sp, #12]
1000343c:	f001 ffe8 	bl	10005410 <__aeabi_dmul>
10003440:	9000      	str	r0, [sp, #0]
10003442:	9101      	str	r1, [sp, #4]
10003444:	9802      	ldr	r0, [sp, #8]
10003446:	9903      	ldr	r1, [sp, #12]
10003448:	4a11      	ldr	r2, [pc, #68]	; (10003490 <__ieee754_log+0x408>)
1000344a:	4b12      	ldr	r3, [pc, #72]	; (10003494 <__ieee754_log+0x40c>)
1000344c:	f001 ffe0 	bl	10005410 <__aeabi_dmul>
10003450:	1c02      	adds	r2, r0, #0
10003452:	1c0b      	adds	r3, r1, #0
10003454:	1c20      	adds	r0, r4, #0
10003456:	1c29      	adds	r1, r5, #0
10003458:	f002 fa4c 	bl	100058f4 <__aeabi_dsub>
1000345c:	1c32      	adds	r2, r6, #0
1000345e:	1c3b      	adds	r3, r7, #0
10003460:	f002 fa48 	bl	100058f4 <__aeabi_dsub>
10003464:	1c02      	adds	r2, r0, #0
10003466:	1c0b      	adds	r3, r1, #0
10003468:	9800      	ldr	r0, [sp, #0]
1000346a:	9901      	ldr	r1, [sp, #4]
1000346c:	f002 fa42 	bl	100058f4 <__aeabi_dsub>
10003470:	e677      	b.n	10003162 <__ieee754_log+0xda>
10003472:	1c22      	adds	r2, r4, #0
10003474:	1c2b      	adds	r3, r5, #0
10003476:	1c30      	adds	r0, r6, #0
10003478:	1c39      	adds	r1, r7, #0
1000347a:	f002 fa3b 	bl	100058f4 <__aeabi_dsub>
1000347e:	9a02      	ldr	r2, [sp, #8]
10003480:	9b03      	ldr	r3, [sp, #12]
10003482:	f001 ffc5 	bl	10005410 <__aeabi_dmul>
10003486:	e6f7      	b.n	10003278 <__ieee754_log+0x1f0>
10003488:	fee00000 	.word	0xfee00000
1000348c:	3fe62e42 	.word	0x3fe62e42
10003490:	35793c76 	.word	0x35793c76
10003494:	3dea39ef 	.word	0x3dea39ef
	...

100034a0 <__aeabi_uidiv>:
100034a0:	2900      	cmp	r1, #0
100034a2:	d034      	beq.n	1000350e <.udivsi3_skip_div0_test+0x6a>

100034a4 <.udivsi3_skip_div0_test>:
100034a4:	2301      	movs	r3, #1
100034a6:	2200      	movs	r2, #0
100034a8:	b410      	push	{r4}
100034aa:	4288      	cmp	r0, r1
100034ac:	d32c      	bcc.n	10003508 <.udivsi3_skip_div0_test+0x64>
100034ae:	2401      	movs	r4, #1
100034b0:	0724      	lsls	r4, r4, #28
100034b2:	42a1      	cmp	r1, r4
100034b4:	d204      	bcs.n	100034c0 <.udivsi3_skip_div0_test+0x1c>
100034b6:	4281      	cmp	r1, r0
100034b8:	d202      	bcs.n	100034c0 <.udivsi3_skip_div0_test+0x1c>
100034ba:	0109      	lsls	r1, r1, #4
100034bc:	011b      	lsls	r3, r3, #4
100034be:	e7f8      	b.n	100034b2 <.udivsi3_skip_div0_test+0xe>
100034c0:	00e4      	lsls	r4, r4, #3
100034c2:	42a1      	cmp	r1, r4
100034c4:	d204      	bcs.n	100034d0 <.udivsi3_skip_div0_test+0x2c>
100034c6:	4281      	cmp	r1, r0
100034c8:	d202      	bcs.n	100034d0 <.udivsi3_skip_div0_test+0x2c>
100034ca:	0049      	lsls	r1, r1, #1
100034cc:	005b      	lsls	r3, r3, #1
100034ce:	e7f8      	b.n	100034c2 <.udivsi3_skip_div0_test+0x1e>
100034d0:	4288      	cmp	r0, r1
100034d2:	d301      	bcc.n	100034d8 <.udivsi3_skip_div0_test+0x34>
100034d4:	1a40      	subs	r0, r0, r1
100034d6:	431a      	orrs	r2, r3
100034d8:	084c      	lsrs	r4, r1, #1
100034da:	42a0      	cmp	r0, r4
100034dc:	d302      	bcc.n	100034e4 <.udivsi3_skip_div0_test+0x40>
100034de:	1b00      	subs	r0, r0, r4
100034e0:	085c      	lsrs	r4, r3, #1
100034e2:	4322      	orrs	r2, r4
100034e4:	088c      	lsrs	r4, r1, #2
100034e6:	42a0      	cmp	r0, r4
100034e8:	d302      	bcc.n	100034f0 <.udivsi3_skip_div0_test+0x4c>
100034ea:	1b00      	subs	r0, r0, r4
100034ec:	089c      	lsrs	r4, r3, #2
100034ee:	4322      	orrs	r2, r4
100034f0:	08cc      	lsrs	r4, r1, #3
100034f2:	42a0      	cmp	r0, r4
100034f4:	d302      	bcc.n	100034fc <.udivsi3_skip_div0_test+0x58>
100034f6:	1b00      	subs	r0, r0, r4
100034f8:	08dc      	lsrs	r4, r3, #3
100034fa:	4322      	orrs	r2, r4
100034fc:	2800      	cmp	r0, #0
100034fe:	d003      	beq.n	10003508 <.udivsi3_skip_div0_test+0x64>
10003500:	091b      	lsrs	r3, r3, #4
10003502:	d001      	beq.n	10003508 <.udivsi3_skip_div0_test+0x64>
10003504:	0909      	lsrs	r1, r1, #4
10003506:	e7e3      	b.n	100034d0 <.udivsi3_skip_div0_test+0x2c>
10003508:	1c10      	adds	r0, r2, #0
1000350a:	bc10      	pop	{r4}
1000350c:	4770      	bx	lr
1000350e:	2800      	cmp	r0, #0
10003510:	d001      	beq.n	10003516 <.udivsi3_skip_div0_test+0x72>
10003512:	2000      	movs	r0, #0
10003514:	43c0      	mvns	r0, r0
10003516:	b407      	push	{r0, r1, r2}
10003518:	4802      	ldr	r0, [pc, #8]	; (10003524 <.udivsi3_skip_div0_test+0x80>)
1000351a:	a102      	add	r1, pc, #8	; (adr r1, 10003524 <.udivsi3_skip_div0_test+0x80>)
1000351c:	1840      	adds	r0, r0, r1
1000351e:	9002      	str	r0, [sp, #8]
10003520:	bd03      	pop	{r0, r1, pc}
10003522:	46c0      	nop			; (mov r8, r8)
10003524:	00000019 	.word	0x00000019

10003528 <__aeabi_uidivmod>:
10003528:	2900      	cmp	r1, #0
1000352a:	d0f0      	beq.n	1000350e <.udivsi3_skip_div0_test+0x6a>
1000352c:	b503      	push	{r0, r1, lr}
1000352e:	f7ff ffb9 	bl	100034a4 <.udivsi3_skip_div0_test>
10003532:	bc0e      	pop	{r1, r2, r3}
10003534:	4342      	muls	r2, r0
10003536:	1a89      	subs	r1, r1, r2
10003538:	4718      	bx	r3
1000353a:	46c0      	nop			; (mov r8, r8)

1000353c <__aeabi_idiv0>:
1000353c:	4770      	bx	lr
1000353e:	46c0      	nop			; (mov r8, r8)

10003540 <__aeabi_cdrcmple>:
10003540:	4684      	mov	ip, r0
10003542:	1c10      	adds	r0, r2, #0
10003544:	4662      	mov	r2, ip
10003546:	468c      	mov	ip, r1
10003548:	1c19      	adds	r1, r3, #0
1000354a:	4663      	mov	r3, ip
1000354c:	e000      	b.n	10003550 <__aeabi_cdcmpeq>
1000354e:	46c0      	nop			; (mov r8, r8)

10003550 <__aeabi_cdcmpeq>:
10003550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10003552:	f001 fef1 	bl	10005338 <__ledf2>
10003556:	2800      	cmp	r0, #0
10003558:	d401      	bmi.n	1000355e <__aeabi_cdcmpeq+0xe>
1000355a:	2100      	movs	r1, #0
1000355c:	42c8      	cmn	r0, r1
1000355e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10003560 <__aeabi_dcmpeq>:
10003560:	b510      	push	{r4, lr}
10003562:	f001 fe37 	bl	100051d4 <__eqdf2>
10003566:	4240      	negs	r0, r0
10003568:	3001      	adds	r0, #1
1000356a:	bd10      	pop	{r4, pc}

1000356c <__aeabi_dcmplt>:
1000356c:	b510      	push	{r4, lr}
1000356e:	f001 fee3 	bl	10005338 <__ledf2>
10003572:	2800      	cmp	r0, #0
10003574:	db01      	blt.n	1000357a <__aeabi_dcmplt+0xe>
10003576:	2000      	movs	r0, #0
10003578:	bd10      	pop	{r4, pc}
1000357a:	2001      	movs	r0, #1
1000357c:	bd10      	pop	{r4, pc}
1000357e:	46c0      	nop			; (mov r8, r8)

10003580 <__aeabi_dcmple>:
10003580:	b510      	push	{r4, lr}
10003582:	f001 fed9 	bl	10005338 <__ledf2>
10003586:	2800      	cmp	r0, #0
10003588:	dd01      	ble.n	1000358e <__aeabi_dcmple+0xe>
1000358a:	2000      	movs	r0, #0
1000358c:	bd10      	pop	{r4, pc}
1000358e:	2001      	movs	r0, #1
10003590:	bd10      	pop	{r4, pc}
10003592:	46c0      	nop			; (mov r8, r8)

10003594 <__aeabi_dcmpgt>:
10003594:	b510      	push	{r4, lr}
10003596:	f001 fe5b 	bl	10005250 <__gedf2>
1000359a:	2800      	cmp	r0, #0
1000359c:	dc01      	bgt.n	100035a2 <__aeabi_dcmpgt+0xe>
1000359e:	2000      	movs	r0, #0
100035a0:	bd10      	pop	{r4, pc}
100035a2:	2001      	movs	r0, #1
100035a4:	bd10      	pop	{r4, pc}
100035a6:	46c0      	nop			; (mov r8, r8)

100035a8 <__aeabi_dcmpge>:
100035a8:	b510      	push	{r4, lr}
100035aa:	f001 fe51 	bl	10005250 <__gedf2>
100035ae:	2800      	cmp	r0, #0
100035b0:	da01      	bge.n	100035b6 <__aeabi_dcmpge+0xe>
100035b2:	2000      	movs	r0, #0
100035b4:	bd10      	pop	{r4, pc}
100035b6:	2001      	movs	r0, #1
100035b8:	bd10      	pop	{r4, pc}
100035ba:	46c0      	nop			; (mov r8, r8)

100035bc <__aeabi_cfrcmple>:
100035bc:	4684      	mov	ip, r0
100035be:	1c08      	adds	r0, r1, #0
100035c0:	4661      	mov	r1, ip
100035c2:	e7ff      	b.n	100035c4 <__aeabi_cfcmpeq>

100035c4 <__aeabi_cfcmpeq>:
100035c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100035c6:	f000 fbb3 	bl	10003d30 <__lesf2>
100035ca:	2800      	cmp	r0, #0
100035cc:	d401      	bmi.n	100035d2 <__aeabi_cfcmpeq+0xe>
100035ce:	2100      	movs	r1, #0
100035d0:	42c8      	cmn	r0, r1
100035d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100035d4 <__aeabi_fcmpeq>:
100035d4:	b510      	push	{r4, lr}
100035d6:	f000 fb3b 	bl	10003c50 <__eqsf2>
100035da:	4240      	negs	r0, r0
100035dc:	3001      	adds	r0, #1
100035de:	bd10      	pop	{r4, pc}

100035e0 <__aeabi_fcmplt>:
100035e0:	b510      	push	{r4, lr}
100035e2:	f000 fba5 	bl	10003d30 <__lesf2>
100035e6:	2800      	cmp	r0, #0
100035e8:	db01      	blt.n	100035ee <__aeabi_fcmplt+0xe>
100035ea:	2000      	movs	r0, #0
100035ec:	bd10      	pop	{r4, pc}
100035ee:	2001      	movs	r0, #1
100035f0:	bd10      	pop	{r4, pc}
100035f2:	46c0      	nop			; (mov r8, r8)

100035f4 <__aeabi_fcmple>:
100035f4:	b510      	push	{r4, lr}
100035f6:	f000 fb9b 	bl	10003d30 <__lesf2>
100035fa:	2800      	cmp	r0, #0
100035fc:	dd01      	ble.n	10003602 <__aeabi_fcmple+0xe>
100035fe:	2000      	movs	r0, #0
10003600:	bd10      	pop	{r4, pc}
10003602:	2001      	movs	r0, #1
10003604:	bd10      	pop	{r4, pc}
10003606:	46c0      	nop			; (mov r8, r8)

10003608 <__aeabi_fcmpgt>:
10003608:	b510      	push	{r4, lr}
1000360a:	f000 fb49 	bl	10003ca0 <__gesf2>
1000360e:	2800      	cmp	r0, #0
10003610:	dc01      	bgt.n	10003616 <__aeabi_fcmpgt+0xe>
10003612:	2000      	movs	r0, #0
10003614:	bd10      	pop	{r4, pc}
10003616:	2001      	movs	r0, #1
10003618:	bd10      	pop	{r4, pc}
1000361a:	46c0      	nop			; (mov r8, r8)

1000361c <__aeabi_fcmpge>:
1000361c:	b510      	push	{r4, lr}
1000361e:	f000 fb3f 	bl	10003ca0 <__gesf2>
10003622:	2800      	cmp	r0, #0
10003624:	da01      	bge.n	1000362a <__aeabi_fcmpge+0xe>
10003626:	2000      	movs	r0, #0
10003628:	bd10      	pop	{r4, pc}
1000362a:	2001      	movs	r0, #1
1000362c:	bd10      	pop	{r4, pc}
1000362e:	46c0      	nop			; (mov r8, r8)

10003630 <__aeabi_fadd>:
10003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003632:	0243      	lsls	r3, r0, #9
10003634:	0042      	lsls	r2, r0, #1
10003636:	024f      	lsls	r7, r1, #9
10003638:	004c      	lsls	r4, r1, #1
1000363a:	0fc0      	lsrs	r0, r0, #31
1000363c:	099b      	lsrs	r3, r3, #6
1000363e:	0e12      	lsrs	r2, r2, #24
10003640:	1c06      	adds	r6, r0, #0
10003642:	469c      	mov	ip, r3
10003644:	0e24      	lsrs	r4, r4, #24
10003646:	0fc9      	lsrs	r1, r1, #31
10003648:	09bf      	lsrs	r7, r7, #6
1000364a:	4288      	cmp	r0, r1
1000364c:	d057      	beq.n	100036fe <__aeabi_fadd+0xce>
1000364e:	1b15      	subs	r5, r2, r4
10003650:	2d00      	cmp	r5, #0
10003652:	dc00      	bgt.n	10003656 <__aeabi_fadd+0x26>
10003654:	e07e      	b.n	10003754 <__aeabi_fadd+0x124>
10003656:	2c00      	cmp	r4, #0
10003658:	d141      	bne.n	100036de <__aeabi_fadd+0xae>
1000365a:	2f00      	cmp	r7, #0
1000365c:	d064      	beq.n	10003728 <__aeabi_fadd+0xf8>
1000365e:	3d01      	subs	r5, #1
10003660:	2d00      	cmp	r5, #0
10003662:	d000      	beq.n	10003666 <__aeabi_fadd+0x36>
10003664:	e0ab      	b.n	100037be <__aeabi_fadd+0x18e>
10003666:	1bdb      	subs	r3, r3, r7
10003668:	1c14      	adds	r4, r2, #0
1000366a:	1c06      	adds	r6, r0, #0
1000366c:	0159      	lsls	r1, r3, #5
1000366e:	d544      	bpl.n	100036fa <__aeabi_fadd+0xca>
10003670:	019a      	lsls	r2, r3, #6
10003672:	0995      	lsrs	r5, r2, #6
10003674:	1c28      	adds	r0, r5, #0
10003676:	f002 fe23 	bl	100062c0 <__clzsi2>
1000367a:	3805      	subs	r0, #5
1000367c:	4085      	lsls	r5, r0
1000367e:	4284      	cmp	r4, r0
10003680:	dd00      	ble.n	10003684 <__aeabi_fadd+0x54>
10003682:	e079      	b.n	10003778 <__aeabi_fadd+0x148>
10003684:	1b00      	subs	r0, r0, r4
10003686:	241f      	movs	r4, #31
10003688:	1c2b      	adds	r3, r5, #0
1000368a:	1c41      	adds	r1, r0, #1
1000368c:	1a22      	subs	r2, r4, r0
1000368e:	40cb      	lsrs	r3, r1
10003690:	4095      	lsls	r5, r2
10003692:	1c1f      	adds	r7, r3, #0
10003694:	1c2b      	adds	r3, r5, #0
10003696:	1e5d      	subs	r5, r3, #1
10003698:	41ab      	sbcs	r3, r5
1000369a:	433b      	orrs	r3, r7
1000369c:	2501      	movs	r5, #1
1000369e:	2400      	movs	r4, #0
100036a0:	200f      	movs	r0, #15
100036a2:	4018      	ands	r0, r3
100036a4:	2804      	cmp	r0, #4
100036a6:	d000      	beq.n	100036aa <__aeabi_fadd+0x7a>
100036a8:	3304      	adds	r3, #4
100036aa:	2180      	movs	r1, #128	; 0x80
100036ac:	04cf      	lsls	r7, r1, #19
100036ae:	2201      	movs	r2, #1
100036b0:	401f      	ands	r7, r3
100036b2:	4016      	ands	r6, r2
100036b4:	2f00      	cmp	r7, #0
100036b6:	d005      	beq.n	100036c4 <__aeabi_fadd+0x94>
100036b8:	2dff      	cmp	r5, #255	; 0xff
100036ba:	d05a      	beq.n	10003772 <__aeabi_fadd+0x142>
100036bc:	4cb3      	ldr	r4, [pc, #716]	; (1000398c <__aeabi_fadd+0x35c>)
100036be:	4023      	ands	r3, r4
100036c0:	1c2c      	adds	r4, r5, #0
100036c2:	3501      	adds	r5, #1
100036c4:	b2ed      	uxtb	r5, r5
100036c6:	08da      	lsrs	r2, r3, #3
100036c8:	2d01      	cmp	r5, #1
100036ca:	dd3b      	ble.n	10003744 <__aeabi_fadd+0x114>
100036cc:	0253      	lsls	r3, r2, #9
100036ce:	0a5a      	lsrs	r2, r3, #9
100036d0:	b2e4      	uxtb	r4, r4
100036d2:	05e4      	lsls	r4, r4, #23
100036d4:	4322      	orrs	r2, r4
100036d6:	07f6      	lsls	r6, r6, #31
100036d8:	1c10      	adds	r0, r2, #0
100036da:	4330      	orrs	r0, r6
100036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100036de:	2aff      	cmp	r2, #255	; 0xff
100036e0:	d02b      	beq.n	1000373a <__aeabi_fadd+0x10a>
100036e2:	2180      	movs	r1, #128	; 0x80
100036e4:	04cc      	lsls	r4, r1, #19
100036e6:	4327      	orrs	r7, r4
100036e8:	2301      	movs	r3, #1
100036ea:	2d1b      	cmp	r5, #27
100036ec:	dd49      	ble.n	10003782 <__aeabi_fadd+0x152>
100036ee:	4667      	mov	r7, ip
100036f0:	1afb      	subs	r3, r7, r3
100036f2:	1c14      	adds	r4, r2, #0
100036f4:	1c06      	adds	r6, r0, #0
100036f6:	0159      	lsls	r1, r3, #5
100036f8:	d4ba      	bmi.n	10003670 <__aeabi_fadd+0x40>
100036fa:	1c65      	adds	r5, r4, #1
100036fc:	e7d0      	b.n	100036a0 <__aeabi_fadd+0x70>
100036fe:	1b15      	subs	r5, r2, r4
10003700:	2d00      	cmp	r5, #0
10003702:	dd4f      	ble.n	100037a4 <__aeabi_fadd+0x174>
10003704:	2c00      	cmp	r4, #0
10003706:	d013      	beq.n	10003730 <__aeabi_fadd+0x100>
10003708:	2aff      	cmp	r2, #255	; 0xff
1000370a:	d05a      	beq.n	100037c2 <__aeabi_fadd+0x192>
1000370c:	2480      	movs	r4, #128	; 0x80
1000370e:	04e1      	lsls	r1, r4, #19
10003710:	430f      	orrs	r7, r1
10003712:	2301      	movs	r3, #1
10003714:	2d1b      	cmp	r5, #27
10003716:	dc00      	bgt.n	1000371a <__aeabi_fadd+0xea>
10003718:	e0b0      	b.n	1000387c <__aeabi_fadd+0x24c>
1000371a:	4463      	add	r3, ip
1000371c:	1c14      	adds	r4, r2, #0
1000371e:	0159      	lsls	r1, r3, #5
10003720:	d455      	bmi.n	100037ce <__aeabi_fadd+0x19e>
10003722:	1c65      	adds	r5, r4, #1
10003724:	1c06      	adds	r6, r0, #0
10003726:	e7bb      	b.n	100036a0 <__aeabi_fadd+0x70>
10003728:	1c55      	adds	r5, r2, #1
1000372a:	1c14      	adds	r4, r2, #0
1000372c:	1c06      	adds	r6, r0, #0
1000372e:	e7b7      	b.n	100036a0 <__aeabi_fadd+0x70>
10003730:	2f00      	cmp	r7, #0
10003732:	d17c      	bne.n	1000382e <__aeabi_fadd+0x1fe>
10003734:	1c55      	adds	r5, r2, #1
10003736:	1c14      	adds	r4, r2, #0
10003738:	e7b2      	b.n	100036a0 <__aeabi_fadd+0x70>
1000373a:	2780      	movs	r7, #128	; 0x80
1000373c:	4663      	mov	r3, ip
1000373e:	007d      	lsls	r5, r7, #1
10003740:	24ff      	movs	r4, #255	; 0xff
10003742:	e7ad      	b.n	100036a0 <__aeabi_fadd+0x70>
10003744:	2a00      	cmp	r2, #0
10003746:	d0c3      	beq.n	100036d0 <__aeabi_fadd+0xa0>
10003748:	2c00      	cmp	r4, #0
1000374a:	d028      	beq.n	1000379e <__aeabi_fadd+0x16e>
1000374c:	2080      	movs	r0, #128	; 0x80
1000374e:	03c1      	lsls	r1, r0, #15
10003750:	430a      	orrs	r2, r1
10003752:	e7bb      	b.n	100036cc <__aeabi_fadd+0x9c>
10003754:	2d00      	cmp	r5, #0
10003756:	d147      	bne.n	100037e8 <__aeabi_fadd+0x1b8>
10003758:	1c50      	adds	r0, r2, #1
1000375a:	b2c3      	uxtb	r3, r0
1000375c:	2b01      	cmp	r3, #1
1000375e:	dc00      	bgt.n	10003762 <__aeabi_fadd+0x132>
10003760:	e096      	b.n	10003890 <__aeabi_fadd+0x260>
10003762:	4664      	mov	r4, ip
10003764:	1be5      	subs	r5, r4, r7
10003766:	0168      	lsls	r0, r5, #5
10003768:	d558      	bpl.n	1000381c <__aeabi_fadd+0x1ec>
1000376a:	1b3d      	subs	r5, r7, r4
1000376c:	1c0e      	adds	r6, r1, #0
1000376e:	1c14      	adds	r4, r2, #0
10003770:	e780      	b.n	10003674 <__aeabi_fadd+0x44>
10003772:	24ff      	movs	r4, #255	; 0xff
10003774:	2200      	movs	r2, #0
10003776:	e7ac      	b.n	100036d2 <__aeabi_fadd+0xa2>
10003778:	4b84      	ldr	r3, [pc, #528]	; (1000398c <__aeabi_fadd+0x35c>)
1000377a:	1a24      	subs	r4, r4, r0
1000377c:	402b      	ands	r3, r5
1000377e:	1c65      	adds	r5, r4, #1
10003780:	e78e      	b.n	100036a0 <__aeabi_fadd+0x70>
10003782:	1c3e      	adds	r6, r7, #0
10003784:	2120      	movs	r1, #32
10003786:	40ee      	lsrs	r6, r5
10003788:	1b4d      	subs	r5, r1, r5
1000378a:	40af      	lsls	r7, r5
1000378c:	1c3b      	adds	r3, r7, #0
1000378e:	1e5f      	subs	r7, r3, #1
10003790:	41bb      	sbcs	r3, r7
10003792:	4333      	orrs	r3, r6
10003794:	4667      	mov	r7, ip
10003796:	1afb      	subs	r3, r7, r3
10003798:	1c14      	adds	r4, r2, #0
1000379a:	1c06      	adds	r6, r0, #0
1000379c:	e7ab      	b.n	100036f6 <__aeabi_fadd+0xc6>
1000379e:	0257      	lsls	r7, r2, #9
100037a0:	0a7a      	lsrs	r2, r7, #9
100037a2:	e796      	b.n	100036d2 <__aeabi_fadd+0xa2>
100037a4:	2d00      	cmp	r5, #0
100037a6:	d17f      	bne.n	100038a8 <__aeabi_fadd+0x278>
100037a8:	1c54      	adds	r4, r2, #1
100037aa:	b2e1      	uxtb	r1, r4
100037ac:	2901      	cmp	r1, #1
100037ae:	dd53      	ble.n	10003858 <__aeabi_fadd+0x228>
100037b0:	2cff      	cmp	r4, #255	; 0xff
100037b2:	d100      	bne.n	100037b6 <__aeabi_fadd+0x186>
100037b4:	e09b      	b.n	100038ee <__aeabi_fadd+0x2be>
100037b6:	18fb      	adds	r3, r7, r3
100037b8:	085b      	lsrs	r3, r3, #1
100037ba:	1c95      	adds	r5, r2, #2
100037bc:	e770      	b.n	100036a0 <__aeabi_fadd+0x70>
100037be:	2aff      	cmp	r2, #255	; 0xff
100037c0:	d192      	bne.n	100036e8 <__aeabi_fadd+0xb8>
100037c2:	1c06      	adds	r6, r0, #0
100037c4:	2080      	movs	r0, #128	; 0x80
100037c6:	4663      	mov	r3, ip
100037c8:	0045      	lsls	r5, r0, #1
100037ca:	24ff      	movs	r4, #255	; 0xff
100037cc:	e768      	b.n	100036a0 <__aeabi_fadd+0x70>
100037ce:	1c67      	adds	r7, r4, #1
100037d0:	2fff      	cmp	r7, #255	; 0xff
100037d2:	d03c      	beq.n	1000384e <__aeabi_fadd+0x21e>
100037d4:	4a6d      	ldr	r2, [pc, #436]	; (1000398c <__aeabi_fadd+0x35c>)
100037d6:	2601      	movs	r6, #1
100037d8:	401e      	ands	r6, r3
100037da:	4013      	ands	r3, r2
100037dc:	085b      	lsrs	r3, r3, #1
100037de:	4333      	orrs	r3, r6
100037e0:	1ca5      	adds	r5, r4, #2
100037e2:	1c06      	adds	r6, r0, #0
100037e4:	1c3c      	adds	r4, r7, #0
100037e6:	e75b      	b.n	100036a0 <__aeabi_fadd+0x70>
100037e8:	4268      	negs	r0, r5
100037ea:	2a00      	cmp	r2, #0
100037ec:	d025      	beq.n	1000383a <__aeabi_fadd+0x20a>
100037ee:	2cff      	cmp	r4, #255	; 0xff
100037f0:	d070      	beq.n	100038d4 <__aeabi_fadd+0x2a4>
100037f2:	2280      	movs	r2, #128	; 0x80
100037f4:	04d6      	lsls	r6, r2, #19
100037f6:	1c1d      	adds	r5, r3, #0
100037f8:	4335      	orrs	r5, r6
100037fa:	46ac      	mov	ip, r5
100037fc:	2601      	movs	r6, #1
100037fe:	281b      	cmp	r0, #27
10003800:	dc09      	bgt.n	10003816 <__aeabi_fadd+0x1e6>
10003802:	4662      	mov	r2, ip
10003804:	2520      	movs	r5, #32
10003806:	40c2      	lsrs	r2, r0
10003808:	1a2b      	subs	r3, r5, r0
1000380a:	4660      	mov	r0, ip
1000380c:	4098      	lsls	r0, r3
1000380e:	1c06      	adds	r6, r0, #0
10003810:	1e70      	subs	r0, r6, #1
10003812:	4186      	sbcs	r6, r0
10003814:	4316      	orrs	r6, r2
10003816:	1bbb      	subs	r3, r7, r6
10003818:	1c0e      	adds	r6, r1, #0
1000381a:	e727      	b.n	1000366c <__aeabi_fadd+0x3c>
1000381c:	1c14      	adds	r4, r2, #0
1000381e:	2d00      	cmp	r5, #0
10003820:	d000      	beq.n	10003824 <__aeabi_fadd+0x1f4>
10003822:	e727      	b.n	10003674 <__aeabi_fadd+0x44>
10003824:	2600      	movs	r6, #0
10003826:	2501      	movs	r5, #1
10003828:	2304      	movs	r3, #4
1000382a:	2400      	movs	r4, #0
1000382c:	e74a      	b.n	100036c4 <__aeabi_fadd+0x94>
1000382e:	3d01      	subs	r5, #1
10003830:	2d00      	cmp	r5, #0
10003832:	d108      	bne.n	10003846 <__aeabi_fadd+0x216>
10003834:	18fb      	adds	r3, r7, r3
10003836:	1c14      	adds	r4, r2, #0
10003838:	e771      	b.n	1000371e <__aeabi_fadd+0xee>
1000383a:	2b00      	cmp	r3, #0
1000383c:	d150      	bne.n	100038e0 <__aeabi_fadd+0x2b0>
1000383e:	1c65      	adds	r5, r4, #1
10003840:	1c3b      	adds	r3, r7, #0
10003842:	1c0e      	adds	r6, r1, #0
10003844:	e72c      	b.n	100036a0 <__aeabi_fadd+0x70>
10003846:	2aff      	cmp	r2, #255	; 0xff
10003848:	d000      	beq.n	1000384c <__aeabi_fadd+0x21c>
1000384a:	e762      	b.n	10003712 <__aeabi_fadd+0xe2>
1000384c:	e7b9      	b.n	100037c2 <__aeabi_fadd+0x192>
1000384e:	2380      	movs	r3, #128	; 0x80
10003850:	005d      	lsls	r5, r3, #1
10003852:	24ff      	movs	r4, #255	; 0xff
10003854:	2304      	movs	r3, #4
10003856:	e735      	b.n	100036c4 <__aeabi_fadd+0x94>
10003858:	2a00      	cmp	r2, #0
1000385a:	d17c      	bne.n	10003956 <__aeabi_fadd+0x326>
1000385c:	2b00      	cmp	r3, #0
1000385e:	d100      	bne.n	10003862 <__aeabi_fadd+0x232>
10003860:	e0a1      	b.n	100039a6 <__aeabi_fadd+0x376>
10003862:	2f00      	cmp	r7, #0
10003864:	d100      	bne.n	10003868 <__aeabi_fadd+0x238>
10003866:	e0af      	b.n	100039c8 <__aeabi_fadd+0x398>
10003868:	18fb      	adds	r3, r7, r3
1000386a:	0159      	lsls	r1, r3, #5
1000386c:	d400      	bmi.n	10003870 <__aeabi_fadd+0x240>
1000386e:	e0b0      	b.n	100039d2 <__aeabi_fadd+0x3a2>
10003870:	4e46      	ldr	r6, [pc, #280]	; (1000398c <__aeabi_fadd+0x35c>)
10003872:	2502      	movs	r5, #2
10003874:	4033      	ands	r3, r6
10003876:	2401      	movs	r4, #1
10003878:	1c06      	adds	r6, r0, #0
1000387a:	e711      	b.n	100036a0 <__aeabi_fadd+0x70>
1000387c:	1c3c      	adds	r4, r7, #0
1000387e:	2320      	movs	r3, #32
10003880:	40ec      	lsrs	r4, r5
10003882:	1b5d      	subs	r5, r3, r5
10003884:	40af      	lsls	r7, r5
10003886:	1c3b      	adds	r3, r7, #0
10003888:	1e5f      	subs	r7, r3, #1
1000388a:	41bb      	sbcs	r3, r7
1000388c:	4323      	orrs	r3, r4
1000388e:	e744      	b.n	1000371a <__aeabi_fadd+0xea>
10003890:	2a00      	cmp	r2, #0
10003892:	d112      	bne.n	100038ba <__aeabi_fadd+0x28a>
10003894:	4665      	mov	r5, ip
10003896:	2d00      	cmp	r5, #0
10003898:	d141      	bne.n	1000391e <__aeabi_fadd+0x2ee>
1000389a:	2f00      	cmp	r7, #0
1000389c:	d0c2      	beq.n	10003824 <__aeabi_fadd+0x1f4>
1000389e:	1c3b      	adds	r3, r7, #0
100038a0:	1c0e      	adds	r6, r1, #0
100038a2:	2501      	movs	r5, #1
100038a4:	2400      	movs	r4, #0
100038a6:	e6fb      	b.n	100036a0 <__aeabi_fadd+0x70>
100038a8:	426d      	negs	r5, r5
100038aa:	2a00      	cmp	r2, #0
100038ac:	d123      	bne.n	100038f6 <__aeabi_fadd+0x2c6>
100038ae:	2b00      	cmp	r3, #0
100038b0:	d166      	bne.n	10003980 <__aeabi_fadd+0x350>
100038b2:	1c65      	adds	r5, r4, #1
100038b4:	1c3b      	adds	r3, r7, #0
100038b6:	1c06      	adds	r6, r0, #0
100038b8:	e6f2      	b.n	100036a0 <__aeabi_fadd+0x70>
100038ba:	4662      	mov	r2, ip
100038bc:	2a00      	cmp	r2, #0
100038be:	d138      	bne.n	10003932 <__aeabi_fadd+0x302>
100038c0:	2f00      	cmp	r7, #0
100038c2:	d107      	bne.n	100038d4 <__aeabi_fadd+0x2a4>
100038c4:	2280      	movs	r2, #128	; 0x80
100038c6:	2600      	movs	r6, #0
100038c8:	0055      	lsls	r5, r2, #1
100038ca:	4b31      	ldr	r3, [pc, #196]	; (10003990 <__aeabi_fadd+0x360>)
100038cc:	24ff      	movs	r4, #255	; 0xff
100038ce:	e6f9      	b.n	100036c4 <__aeabi_fadd+0x94>
100038d0:	2cff      	cmp	r4, #255	; 0xff
100038d2:	d193      	bne.n	100037fc <__aeabi_fadd+0x1cc>
100038d4:	1c3b      	adds	r3, r7, #0
100038d6:	2780      	movs	r7, #128	; 0x80
100038d8:	1c0e      	adds	r6, r1, #0
100038da:	007d      	lsls	r5, r7, #1
100038dc:	24ff      	movs	r4, #255	; 0xff
100038de:	e6df      	b.n	100036a0 <__aeabi_fadd+0x70>
100038e0:	3801      	subs	r0, #1
100038e2:	2800      	cmp	r0, #0
100038e4:	d1f4      	bne.n	100038d0 <__aeabi_fadd+0x2a0>
100038e6:	4666      	mov	r6, ip
100038e8:	1bbb      	subs	r3, r7, r6
100038ea:	1c0e      	adds	r6, r1, #0
100038ec:	e6be      	b.n	1000366c <__aeabi_fadd+0x3c>
100038ee:	2780      	movs	r7, #128	; 0x80
100038f0:	007d      	lsls	r5, r7, #1
100038f2:	2304      	movs	r3, #4
100038f4:	e6e6      	b.n	100036c4 <__aeabi_fadd+0x94>
100038f6:	2cff      	cmp	r4, #255	; 0xff
100038f8:	d05c      	beq.n	100039b4 <__aeabi_fadd+0x384>
100038fa:	2280      	movs	r2, #128	; 0x80
100038fc:	04d1      	lsls	r1, r2, #19
100038fe:	430b      	orrs	r3, r1
10003900:	469c      	mov	ip, r3
10003902:	2301      	movs	r3, #1
10003904:	2d1b      	cmp	r5, #27
10003906:	dc08      	bgt.n	1000391a <__aeabi_fadd+0x2ea>
10003908:	2120      	movs	r1, #32
1000390a:	4662      	mov	r2, ip
1000390c:	40ea      	lsrs	r2, r5
1000390e:	4663      	mov	r3, ip
10003910:	1b4d      	subs	r5, r1, r5
10003912:	40ab      	lsls	r3, r5
10003914:	1e59      	subs	r1, r3, #1
10003916:	418b      	sbcs	r3, r1
10003918:	4313      	orrs	r3, r2
1000391a:	19db      	adds	r3, r3, r7
1000391c:	e6ff      	b.n	1000371e <__aeabi_fadd+0xee>
1000391e:	2f00      	cmp	r7, #0
10003920:	d038      	beq.n	10003994 <__aeabi_fadd+0x364>
10003922:	1beb      	subs	r3, r5, r7
10003924:	015a      	lsls	r2, r3, #5
10003926:	d54b      	bpl.n	100039c0 <__aeabi_fadd+0x390>
10003928:	1b7b      	subs	r3, r7, r5
1000392a:	1c0e      	adds	r6, r1, #0
1000392c:	2501      	movs	r5, #1
1000392e:	2400      	movs	r4, #0
10003930:	e6b6      	b.n	100036a0 <__aeabi_fadd+0x70>
10003932:	2f00      	cmp	r7, #0
10003934:	d100      	bne.n	10003938 <__aeabi_fadd+0x308>
10003936:	e700      	b.n	1000373a <__aeabi_fadd+0x10a>
10003938:	2080      	movs	r0, #128	; 0x80
1000393a:	08d3      	lsrs	r3, r2, #3
1000393c:	03c4      	lsls	r4, r0, #15
1000393e:	4223      	tst	r3, r4
10003940:	d004      	beq.n	1000394c <__aeabi_fadd+0x31c>
10003942:	08ff      	lsrs	r7, r7, #3
10003944:	4227      	tst	r7, r4
10003946:	d101      	bne.n	1000394c <__aeabi_fadd+0x31c>
10003948:	1c3b      	adds	r3, r7, #0
1000394a:	1c0e      	adds	r6, r1, #0
1000394c:	2180      	movs	r1, #128	; 0x80
1000394e:	00db      	lsls	r3, r3, #3
10003950:	004d      	lsls	r5, r1, #1
10003952:	24ff      	movs	r4, #255	; 0xff
10003954:	e6a4      	b.n	100036a0 <__aeabi_fadd+0x70>
10003956:	2b00      	cmp	r3, #0
10003958:	d020      	beq.n	1000399c <__aeabi_fadd+0x36c>
1000395a:	2f00      	cmp	r7, #0
1000395c:	d100      	bne.n	10003960 <__aeabi_fadd+0x330>
1000395e:	e6ec      	b.n	1000373a <__aeabi_fadd+0x10a>
10003960:	2280      	movs	r2, #128	; 0x80
10003962:	08de      	lsrs	r6, r3, #3
10003964:	03d5      	lsls	r5, r2, #15
10003966:	1c31      	adds	r1, r6, #0
10003968:	422e      	tst	r6, r5
1000396a:	d003      	beq.n	10003974 <__aeabi_fadd+0x344>
1000396c:	08f9      	lsrs	r1, r7, #3
1000396e:	4229      	tst	r1, r5
10003970:	d000      	beq.n	10003974 <__aeabi_fadd+0x344>
10003972:	1c31      	adds	r1, r6, #0
10003974:	1c06      	adds	r6, r0, #0
10003976:	2080      	movs	r0, #128	; 0x80
10003978:	00cb      	lsls	r3, r1, #3
1000397a:	0045      	lsls	r5, r0, #1
1000397c:	24ff      	movs	r4, #255	; 0xff
1000397e:	e68f      	b.n	100036a0 <__aeabi_fadd+0x70>
10003980:	3d01      	subs	r5, #1
10003982:	2d00      	cmp	r5, #0
10003984:	d114      	bne.n	100039b0 <__aeabi_fadd+0x380>
10003986:	18fb      	adds	r3, r7, r3
10003988:	e6c9      	b.n	1000371e <__aeabi_fadd+0xee>
1000398a:	46c0      	nop			; (mov r8, r8)
1000398c:	fbffffff 	.word	0xfbffffff
10003990:	03fffffc 	.word	0x03fffffc
10003994:	4663      	mov	r3, ip
10003996:	2501      	movs	r5, #1
10003998:	2400      	movs	r4, #0
1000399a:	e681      	b.n	100036a0 <__aeabi_fadd+0x70>
1000399c:	2480      	movs	r4, #128	; 0x80
1000399e:	0065      	lsls	r5, r4, #1
100039a0:	1c3b      	adds	r3, r7, #0
100039a2:	24ff      	movs	r4, #255	; 0xff
100039a4:	e67c      	b.n	100036a0 <__aeabi_fadd+0x70>
100039a6:	1c3b      	adds	r3, r7, #0
100039a8:	1c06      	adds	r6, r0, #0
100039aa:	2501      	movs	r5, #1
100039ac:	2400      	movs	r4, #0
100039ae:	e677      	b.n	100036a0 <__aeabi_fadd+0x70>
100039b0:	2cff      	cmp	r4, #255	; 0xff
100039b2:	d1a6      	bne.n	10003902 <__aeabi_fadd+0x2d2>
100039b4:	1c3b      	adds	r3, r7, #0
100039b6:	2780      	movs	r7, #128	; 0x80
100039b8:	1c06      	adds	r6, r0, #0
100039ba:	007d      	lsls	r5, r7, #1
100039bc:	24ff      	movs	r4, #255	; 0xff
100039be:	e66f      	b.n	100036a0 <__aeabi_fadd+0x70>
100039c0:	2b00      	cmp	r3, #0
100039c2:	d100      	bne.n	100039c6 <__aeabi_fadd+0x396>
100039c4:	e72e      	b.n	10003824 <__aeabi_fadd+0x1f4>
100039c6:	e669      	b.n	1000369c <__aeabi_fadd+0x6c>
100039c8:	4663      	mov	r3, ip
100039ca:	1c06      	adds	r6, r0, #0
100039cc:	2501      	movs	r5, #1
100039ce:	2400      	movs	r4, #0
100039d0:	e666      	b.n	100036a0 <__aeabi_fadd+0x70>
100039d2:	1c06      	adds	r6, r0, #0
100039d4:	2501      	movs	r5, #1
100039d6:	2400      	movs	r4, #0
100039d8:	e662      	b.n	100036a0 <__aeabi_fadd+0x70>
100039da:	46c0      	nop			; (mov r8, r8)

100039dc <__aeabi_fdiv>:
100039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100039de:	465f      	mov	r7, fp
100039e0:	4656      	mov	r6, sl
100039e2:	464d      	mov	r5, r9
100039e4:	4644      	mov	r4, r8
100039e6:	b4f0      	push	{r4, r5, r6, r7}
100039e8:	0245      	lsls	r5, r0, #9
100039ea:	0044      	lsls	r4, r0, #1
100039ec:	b083      	sub	sp, #12
100039ee:	1c0e      	adds	r6, r1, #0
100039f0:	0a6d      	lsrs	r5, r5, #9
100039f2:	0e24      	lsrs	r4, r4, #24
100039f4:	0fc7      	lsrs	r7, r0, #31
100039f6:	2c00      	cmp	r4, #0
100039f8:	d107      	bne.n	10003a0a <__aeabi_fdiv+0x2e>
100039fa:	2d00      	cmp	r5, #0
100039fc:	d000      	beq.n	10003a00 <__aeabi_fdiv+0x24>
100039fe:	e091      	b.n	10003b24 <__aeabi_fdiv+0x148>
10003a00:	2104      	movs	r1, #4
10003a02:	2201      	movs	r2, #1
10003a04:	4688      	mov	r8, r1
10003a06:	4692      	mov	sl, r2
10003a08:	e009      	b.n	10003a1e <__aeabi_fdiv+0x42>
10003a0a:	2cff      	cmp	r4, #255	; 0xff
10003a0c:	d055      	beq.n	10003aba <__aeabi_fdiv+0xde>
10003a0e:	2380      	movs	r3, #128	; 0x80
10003a10:	0418      	lsls	r0, r3, #16
10003a12:	2100      	movs	r1, #0
10003a14:	4305      	orrs	r5, r0
10003a16:	00ed      	lsls	r5, r5, #3
10003a18:	3c7f      	subs	r4, #127	; 0x7f
10003a1a:	4688      	mov	r8, r1
10003a1c:	468a      	mov	sl, r1
10003a1e:	1c33      	adds	r3, r6, #0
10003a20:	0058      	lsls	r0, r3, #1
10003a22:	0276      	lsls	r6, r6, #9
10003a24:	0fd9      	lsrs	r1, r3, #31
10003a26:	0a76      	lsrs	r6, r6, #9
10003a28:	0e00      	lsrs	r0, r0, #24
10003a2a:	468b      	mov	fp, r1
10003a2c:	d14c      	bne.n	10003ac8 <__aeabi_fdiv+0xec>
10003a2e:	2201      	movs	r2, #1
10003a30:	4694      	mov	ip, r2
10003a32:	2e00      	cmp	r6, #0
10003a34:	d000      	beq.n	10003a38 <__aeabi_fdiv+0x5c>
10003a36:	e081      	b.n	10003b3c <__aeabi_fdiv+0x160>
10003a38:	465b      	mov	r3, fp
10003a3a:	407b      	eors	r3, r7
10003a3c:	4662      	mov	r2, ip
10003a3e:	4641      	mov	r1, r8
10003a40:	9301      	str	r3, [sp, #4]
10003a42:	430a      	orrs	r2, r1
10003a44:	2a0f      	cmp	r2, #15
10003a46:	d950      	bls.n	10003aea <__aeabi_fdiv+0x10e>
10003a48:	1a20      	subs	r0, r4, r0
10003a4a:	0169      	lsls	r1, r5, #5
10003a4c:	4681      	mov	r9, r0
10003a4e:	0175      	lsls	r5, r6, #5
10003a50:	42a9      	cmp	r1, r5
10003a52:	d300      	bcc.n	10003a56 <__aeabi_fdiv+0x7a>
10003a54:	e0b3      	b.n	10003bbe <__aeabi_fdiv+0x1e2>
10003a56:	2201      	movs	r2, #1
10003a58:	4253      	negs	r3, r2
10003a5a:	4499      	add	r9, r3
10003a5c:	241b      	movs	r4, #27
10003a5e:	2600      	movs	r6, #0
10003a60:	2701      	movs	r7, #1
10003a62:	1e62      	subs	r2, r4, #1
10003a64:	1c38      	adds	r0, r7, #0
10003a66:	4010      	ands	r0, r2
10003a68:	004b      	lsls	r3, r1, #1
10003a6a:	0076      	lsls	r6, r6, #1
10003a6c:	2900      	cmp	r1, #0
10003a6e:	da00      	bge.n	10003a72 <__aeabi_fdiv+0x96>
10003a70:	e0a9      	b.n	10003bc6 <__aeabi_fdiv+0x1ea>
10003a72:	429d      	cmp	r5, r3
10003a74:	d800      	bhi.n	10003a78 <__aeabi_fdiv+0x9c>
10003a76:	e0a6      	b.n	10003bc6 <__aeabi_fdiv+0x1ea>
10003a78:	3c01      	subs	r4, #1
10003a7a:	2c00      	cmp	r4, #0
10003a7c:	dc00      	bgt.n	10003a80 <__aeabi_fdiv+0xa4>
10003a7e:	e0ab      	b.n	10003bd8 <__aeabi_fdiv+0x1fc>
10003a80:	2800      	cmp	r0, #0
10003a82:	d00c      	beq.n	10003a9e <__aeabi_fdiv+0xc2>
10003a84:	1c19      	adds	r1, r3, #0
10003a86:	0076      	lsls	r6, r6, #1
10003a88:	005b      	lsls	r3, r3, #1
10003a8a:	2900      	cmp	r1, #0
10003a8c:	db01      	blt.n	10003a92 <__aeabi_fdiv+0xb6>
10003a8e:	429d      	cmp	r5, r3
10003a90:	d801      	bhi.n	10003a96 <__aeabi_fdiv+0xba>
10003a92:	1b5b      	subs	r3, r3, r5
10003a94:	433e      	orrs	r6, r7
10003a96:	3c01      	subs	r4, #1
10003a98:	2c00      	cmp	r4, #0
10003a9a:	dc00      	bgt.n	10003a9e <__aeabi_fdiv+0xc2>
10003a9c:	e09c      	b.n	10003bd8 <__aeabi_fdiv+0x1fc>
10003a9e:	0059      	lsls	r1, r3, #1
10003aa0:	0072      	lsls	r2, r6, #1
10003aa2:	2b00      	cmp	r3, #0
10003aa4:	db01      	blt.n	10003aaa <__aeabi_fdiv+0xce>
10003aa6:	428d      	cmp	r5, r1
10003aa8:	d801      	bhi.n	10003aae <__aeabi_fdiv+0xd2>
10003aaa:	1b49      	subs	r1, r1, r5
10003aac:	433a      	orrs	r2, r7
10003aae:	3c01      	subs	r4, #1
10003ab0:	004b      	lsls	r3, r1, #1
10003ab2:	0056      	lsls	r6, r2, #1
10003ab4:	2900      	cmp	r1, #0
10003ab6:	daea      	bge.n	10003a8e <__aeabi_fdiv+0xb2>
10003ab8:	e7eb      	b.n	10003a92 <__aeabi_fdiv+0xb6>
10003aba:	2d00      	cmp	r5, #0
10003abc:	d12d      	bne.n	10003b1a <__aeabi_fdiv+0x13e>
10003abe:	2008      	movs	r0, #8
10003ac0:	2102      	movs	r1, #2
10003ac2:	4680      	mov	r8, r0
10003ac4:	468a      	mov	sl, r1
10003ac6:	e7aa      	b.n	10003a1e <__aeabi_fdiv+0x42>
10003ac8:	28ff      	cmp	r0, #255	; 0xff
10003aca:	d020      	beq.n	10003b0e <__aeabi_fdiv+0x132>
10003acc:	2280      	movs	r2, #128	; 0x80
10003ace:	0413      	lsls	r3, r2, #16
10003ad0:	2100      	movs	r1, #0
10003ad2:	431e      	orrs	r6, r3
10003ad4:	468c      	mov	ip, r1
10003ad6:	465b      	mov	r3, fp
10003ad8:	407b      	eors	r3, r7
10003ada:	4662      	mov	r2, ip
10003adc:	4641      	mov	r1, r8
10003ade:	00f6      	lsls	r6, r6, #3
10003ae0:	387f      	subs	r0, #127	; 0x7f
10003ae2:	9301      	str	r3, [sp, #4]
10003ae4:	430a      	orrs	r2, r1
10003ae6:	2a0f      	cmp	r2, #15
10003ae8:	d8ae      	bhi.n	10003a48 <__aeabi_fdiv+0x6c>
10003aea:	4956      	ldr	r1, [pc, #344]	; (10003c44 <__aeabi_fdiv+0x268>)
10003aec:	0092      	lsls	r2, r2, #2
10003aee:	588a      	ldr	r2, [r1, r2]
10003af0:	4697      	mov	pc, r2
10003af2:	9b01      	ldr	r3, [sp, #4]
10003af4:	26ff      	movs	r6, #255	; 0xff
10003af6:	2500      	movs	r5, #0
10003af8:	05f0      	lsls	r0, r6, #23
10003afa:	4328      	orrs	r0, r5
10003afc:	07de      	lsls	r6, r3, #31
10003afe:	4330      	orrs	r0, r6
10003b00:	b003      	add	sp, #12
10003b02:	bc3c      	pop	{r2, r3, r4, r5}
10003b04:	4690      	mov	r8, r2
10003b06:	4699      	mov	r9, r3
10003b08:	46a2      	mov	sl, r4
10003b0a:	46ab      	mov	fp, r5
10003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003b0e:	1c33      	adds	r3, r6, #0
10003b10:	1e5a      	subs	r2, r3, #1
10003b12:	4193      	sbcs	r3, r2
10003b14:	3302      	adds	r3, #2
10003b16:	469c      	mov	ip, r3
10003b18:	e78e      	b.n	10003a38 <__aeabi_fdiv+0x5c>
10003b1a:	220c      	movs	r2, #12
10003b1c:	2303      	movs	r3, #3
10003b1e:	4690      	mov	r8, r2
10003b20:	469a      	mov	sl, r3
10003b22:	e77c      	b.n	10003a1e <__aeabi_fdiv+0x42>
10003b24:	1c28      	adds	r0, r5, #0
10003b26:	f002 fbcb 	bl	100062c0 <__clzsi2>
10003b2a:	2276      	movs	r2, #118	; 0x76
10003b2c:	1f44      	subs	r4, r0, #5
10003b2e:	4253      	negs	r3, r2
10003b30:	40a5      	lsls	r5, r4
10003b32:	1a1c      	subs	r4, r3, r0
10003b34:	2000      	movs	r0, #0
10003b36:	4680      	mov	r8, r0
10003b38:	4682      	mov	sl, r0
10003b3a:	e770      	b.n	10003a1e <__aeabi_fdiv+0x42>
10003b3c:	1c30      	adds	r0, r6, #0
10003b3e:	f002 fbbf 	bl	100062c0 <__clzsi2>
10003b42:	2376      	movs	r3, #118	; 0x76
10003b44:	1f41      	subs	r1, r0, #5
10003b46:	408e      	lsls	r6, r1
10003b48:	425a      	negs	r2, r3
10003b4a:	2100      	movs	r1, #0
10003b4c:	1a10      	subs	r0, r2, r0
10003b4e:	468c      	mov	ip, r1
10003b50:	e772      	b.n	10003a38 <__aeabi_fdiv+0x5c>
10003b52:	2300      	movs	r3, #0
10003b54:	4d3c      	ldr	r5, [pc, #240]	; (10003c48 <__aeabi_fdiv+0x26c>)
10003b56:	26ff      	movs	r6, #255	; 0xff
10003b58:	e7ce      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003b5a:	465f      	mov	r7, fp
10003b5c:	1c35      	adds	r5, r6, #0
10003b5e:	9701      	str	r7, [sp, #4]
10003b60:	4663      	mov	r3, ip
10003b62:	2b02      	cmp	r3, #2
10003b64:	d0c5      	beq.n	10003af2 <__aeabi_fdiv+0x116>
10003b66:	2b03      	cmp	r3, #3
10003b68:	d063      	beq.n	10003c32 <__aeabi_fdiv+0x256>
10003b6a:	2b01      	cmp	r3, #1
10003b6c:	d043      	beq.n	10003bf6 <__aeabi_fdiv+0x21a>
10003b6e:	4649      	mov	r1, r9
10003b70:	317f      	adds	r1, #127	; 0x7f
10003b72:	2900      	cmp	r1, #0
10003b74:	dd35      	ble.n	10003be2 <__aeabi_fdiv+0x206>
10003b76:	270f      	movs	r7, #15
10003b78:	402f      	ands	r7, r5
10003b7a:	2f04      	cmp	r7, #4
10003b7c:	d000      	beq.n	10003b80 <__aeabi_fdiv+0x1a4>
10003b7e:	3504      	adds	r5, #4
10003b80:	012b      	lsls	r3, r5, #4
10003b82:	d503      	bpl.n	10003b8c <__aeabi_fdiv+0x1b0>
10003b84:	4a31      	ldr	r2, [pc, #196]	; (10003c4c <__aeabi_fdiv+0x270>)
10003b86:	4649      	mov	r1, r9
10003b88:	4015      	ands	r5, r2
10003b8a:	3180      	adds	r1, #128	; 0x80
10003b8c:	29fe      	cmp	r1, #254	; 0xfe
10003b8e:	dcb0      	bgt.n	10003af2 <__aeabi_fdiv+0x116>
10003b90:	01a8      	lsls	r0, r5, #6
10003b92:	0a45      	lsrs	r5, r0, #9
10003b94:	b2ce      	uxtb	r6, r1
10003b96:	9b01      	ldr	r3, [sp, #4]
10003b98:	e7ae      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003b9a:	2600      	movs	r6, #0
10003b9c:	2500      	movs	r5, #0
10003b9e:	e7ab      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003ba0:	2080      	movs	r0, #128	; 0x80
10003ba2:	03c1      	lsls	r1, r0, #15
10003ba4:	420d      	tst	r5, r1
10003ba6:	d011      	beq.n	10003bcc <__aeabi_fdiv+0x1f0>
10003ba8:	420e      	tst	r6, r1
10003baa:	d10f      	bne.n	10003bcc <__aeabi_fdiv+0x1f0>
10003bac:	430e      	orrs	r6, r1
10003bae:	0273      	lsls	r3, r6, #9
10003bb0:	0a5d      	lsrs	r5, r3, #9
10003bb2:	26ff      	movs	r6, #255	; 0xff
10003bb4:	465b      	mov	r3, fp
10003bb6:	e79f      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003bb8:	9701      	str	r7, [sp, #4]
10003bba:	4653      	mov	r3, sl
10003bbc:	e7d1      	b.n	10003b62 <__aeabi_fdiv+0x186>
10003bbe:	1b49      	subs	r1, r1, r5
10003bc0:	241a      	movs	r4, #26
10003bc2:	2601      	movs	r6, #1
10003bc4:	e74c      	b.n	10003a60 <__aeabi_fdiv+0x84>
10003bc6:	1b5b      	subs	r3, r3, r5
10003bc8:	433e      	orrs	r6, r7
10003bca:	e755      	b.n	10003a78 <__aeabi_fdiv+0x9c>
10003bcc:	430d      	orrs	r5, r1
10003bce:	026a      	lsls	r2, r5, #9
10003bd0:	0a55      	lsrs	r5, r2, #9
10003bd2:	1c3b      	adds	r3, r7, #0
10003bd4:	26ff      	movs	r6, #255	; 0xff
10003bd6:	e78f      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003bd8:	1c1d      	adds	r5, r3, #0
10003bda:	1e6b      	subs	r3, r5, #1
10003bdc:	419d      	sbcs	r5, r3
10003bde:	4335      	orrs	r5, r6
10003be0:	e7c5      	b.n	10003b6e <__aeabi_fdiv+0x192>
10003be2:	247e      	movs	r4, #126	; 0x7e
10003be4:	4267      	negs	r7, r4
10003be6:	464a      	mov	r2, r9
10003be8:	1ab9      	subs	r1, r7, r2
10003bea:	291b      	cmp	r1, #27
10003bec:	dd08      	ble.n	10003c00 <__aeabi_fdiv+0x224>
10003bee:	9b01      	ldr	r3, [sp, #4]
10003bf0:	2600      	movs	r6, #0
10003bf2:	2500      	movs	r5, #0
10003bf4:	e780      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003bf6:	9d01      	ldr	r5, [sp, #4]
10003bf8:	2600      	movs	r6, #0
10003bfa:	402b      	ands	r3, r5
10003bfc:	2500      	movs	r5, #0
10003bfe:	e77b      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003c00:	464e      	mov	r6, r9
10003c02:	369e      	adds	r6, #158	; 0x9e
10003c04:	1c28      	adds	r0, r5, #0
10003c06:	40b5      	lsls	r5, r6
10003c08:	1c2b      	adds	r3, r5, #0
10003c0a:	1e5d      	subs	r5, r3, #1
10003c0c:	41ab      	sbcs	r3, r5
10003c0e:	40c8      	lsrs	r0, r1
10003c10:	4303      	orrs	r3, r0
10003c12:	250f      	movs	r5, #15
10003c14:	401d      	ands	r5, r3
10003c16:	2d04      	cmp	r5, #4
10003c18:	d000      	beq.n	10003c1c <__aeabi_fdiv+0x240>
10003c1a:	3304      	adds	r3, #4
10003c1c:	015a      	lsls	r2, r3, #5
10003c1e:	d503      	bpl.n	10003c28 <__aeabi_fdiv+0x24c>
10003c20:	9b01      	ldr	r3, [sp, #4]
10003c22:	2601      	movs	r6, #1
10003c24:	2500      	movs	r5, #0
10003c26:	e767      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003c28:	019c      	lsls	r4, r3, #6
10003c2a:	0a65      	lsrs	r5, r4, #9
10003c2c:	9b01      	ldr	r3, [sp, #4]
10003c2e:	2600      	movs	r6, #0
10003c30:	e762      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003c32:	2780      	movs	r7, #128	; 0x80
10003c34:	03fc      	lsls	r4, r7, #15
10003c36:	4325      	orrs	r5, r4
10003c38:	026e      	lsls	r6, r5, #9
10003c3a:	0a75      	lsrs	r5, r6, #9
10003c3c:	9b01      	ldr	r3, [sp, #4]
10003c3e:	26ff      	movs	r6, #255	; 0xff
10003c40:	e75a      	b.n	10003af8 <__aeabi_fdiv+0x11c>
10003c42:	46c0      	nop			; (mov r8, r8)
10003c44:	1002d274 	.word	0x1002d274
10003c48:	007fffff 	.word	0x007fffff
10003c4c:	f7ffffff 	.word	0xf7ffffff

10003c50 <__eqsf2>:
10003c50:	0243      	lsls	r3, r0, #9
10003c52:	0042      	lsls	r2, r0, #1
10003c54:	b570      	push	{r4, r5, r6, lr}
10003c56:	0a5c      	lsrs	r4, r3, #9
10003c58:	0fc6      	lsrs	r6, r0, #31
10003c5a:	0e13      	lsrs	r3, r2, #24
10003c5c:	0248      	lsls	r0, r1, #9
10003c5e:	004a      	lsls	r2, r1, #1
10003c60:	0a45      	lsrs	r5, r0, #9
10003c62:	0e12      	lsrs	r2, r2, #24
10003c64:	0fc9      	lsrs	r1, r1, #31
10003c66:	2bff      	cmp	r3, #255	; 0xff
10003c68:	d005      	beq.n	10003c76 <__eqsf2+0x26>
10003c6a:	2aff      	cmp	r2, #255	; 0xff
10003c6c:	d008      	beq.n	10003c80 <__eqsf2+0x30>
10003c6e:	2001      	movs	r0, #1
10003c70:	4293      	cmp	r3, r2
10003c72:	d00b      	beq.n	10003c8c <__eqsf2+0x3c>
10003c74:	bd70      	pop	{r4, r5, r6, pc}
10003c76:	2001      	movs	r0, #1
10003c78:	2c00      	cmp	r4, #0
10003c7a:	d1fb      	bne.n	10003c74 <__eqsf2+0x24>
10003c7c:	2aff      	cmp	r2, #255	; 0xff
10003c7e:	d1f6      	bne.n	10003c6e <__eqsf2+0x1e>
10003c80:	2001      	movs	r0, #1
10003c82:	2d00      	cmp	r5, #0
10003c84:	d1f6      	bne.n	10003c74 <__eqsf2+0x24>
10003c86:	2001      	movs	r0, #1
10003c88:	4293      	cmp	r3, r2
10003c8a:	d1f3      	bne.n	10003c74 <__eqsf2+0x24>
10003c8c:	42ac      	cmp	r4, r5
10003c8e:	d1f1      	bne.n	10003c74 <__eqsf2+0x24>
10003c90:	428e      	cmp	r6, r1
10003c92:	d003      	beq.n	10003c9c <__eqsf2+0x4c>
10003c94:	2b00      	cmp	r3, #0
10003c96:	d1ed      	bne.n	10003c74 <__eqsf2+0x24>
10003c98:	2c00      	cmp	r4, #0
10003c9a:	d1eb      	bne.n	10003c74 <__eqsf2+0x24>
10003c9c:	2000      	movs	r0, #0
10003c9e:	e7e9      	b.n	10003c74 <__eqsf2+0x24>

10003ca0 <__gesf2>:
10003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003ca2:	0243      	lsls	r3, r0, #9
10003ca4:	0042      	lsls	r2, r0, #1
10003ca6:	004f      	lsls	r7, r1, #1
10003ca8:	0fc6      	lsrs	r6, r0, #31
10003caa:	0248      	lsls	r0, r1, #9
10003cac:	0a5c      	lsrs	r4, r3, #9
10003cae:	0a45      	lsrs	r5, r0, #9
10003cb0:	0e13      	lsrs	r3, r2, #24
10003cb2:	0fc9      	lsrs	r1, r1, #31
10003cb4:	0e3a      	lsrs	r2, r7, #24
10003cb6:	2bff      	cmp	r3, #255	; 0xff
10003cb8:	d026      	beq.n	10003d08 <__gesf2+0x68>
10003cba:	2aff      	cmp	r2, #255	; 0xff
10003cbc:	d029      	beq.n	10003d12 <__gesf2+0x72>
10003cbe:	2b00      	cmp	r3, #0
10003cc0:	d10c      	bne.n	10003cdc <__gesf2+0x3c>
10003cc2:	4260      	negs	r0, r4
10003cc4:	4160      	adcs	r0, r4
10003cc6:	4684      	mov	ip, r0
10003cc8:	2a00      	cmp	r2, #0
10003cca:	d00a      	beq.n	10003ce2 <__gesf2+0x42>
10003ccc:	2800      	cmp	r0, #0
10003cce:	d116      	bne.n	10003cfe <__gesf2+0x5e>
10003cd0:	428e      	cmp	r6, r1
10003cd2:	d021      	beq.n	10003d18 <__gesf2+0x78>
10003cd4:	2e00      	cmp	r6, #0
10003cd6:	d114      	bne.n	10003d02 <__gesf2+0x62>
10003cd8:	2001      	movs	r0, #1
10003cda:	e014      	b.n	10003d06 <__gesf2+0x66>
10003cdc:	2a00      	cmp	r2, #0
10003cde:	d1f7      	bne.n	10003cd0 <__gesf2+0x30>
10003ce0:	4694      	mov	ip, r2
10003ce2:	426f      	negs	r7, r5
10003ce4:	416f      	adcs	r7, r5
10003ce6:	4660      	mov	r0, ip
10003ce8:	2800      	cmp	r0, #0
10003cea:	d105      	bne.n	10003cf8 <__gesf2+0x58>
10003cec:	2f00      	cmp	r7, #0
10003cee:	d0ef      	beq.n	10003cd0 <__gesf2+0x30>
10003cf0:	2001      	movs	r0, #1
10003cf2:	2e00      	cmp	r6, #0
10003cf4:	d007      	beq.n	10003d06 <__gesf2+0x66>
10003cf6:	e004      	b.n	10003d02 <__gesf2+0x62>
10003cf8:	2000      	movs	r0, #0
10003cfa:	2f00      	cmp	r7, #0
10003cfc:	d103      	bne.n	10003d06 <__gesf2+0x66>
10003cfe:	2900      	cmp	r1, #0
10003d00:	d1ea      	bne.n	10003cd8 <__gesf2+0x38>
10003d02:	2101      	movs	r1, #1
10003d04:	4248      	negs	r0, r1
10003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003d08:	2c00      	cmp	r4, #0
10003d0a:	d0d6      	beq.n	10003cba <__gesf2+0x1a>
10003d0c:	2202      	movs	r2, #2
10003d0e:	4250      	negs	r0, r2
10003d10:	e7f9      	b.n	10003d06 <__gesf2+0x66>
10003d12:	2d00      	cmp	r5, #0
10003d14:	d0d3      	beq.n	10003cbe <__gesf2+0x1e>
10003d16:	e7f9      	b.n	10003d0c <__gesf2+0x6c>
10003d18:	4293      	cmp	r3, r2
10003d1a:	dcdb      	bgt.n	10003cd4 <__gesf2+0x34>
10003d1c:	db04      	blt.n	10003d28 <__gesf2+0x88>
10003d1e:	42ac      	cmp	r4, r5
10003d20:	d8d8      	bhi.n	10003cd4 <__gesf2+0x34>
10003d22:	2000      	movs	r0, #0
10003d24:	42ac      	cmp	r4, r5
10003d26:	d2ee      	bcs.n	10003d06 <__gesf2+0x66>
10003d28:	2e00      	cmp	r6, #0
10003d2a:	d0ea      	beq.n	10003d02 <__gesf2+0x62>
10003d2c:	2001      	movs	r0, #1
10003d2e:	e7ea      	b.n	10003d06 <__gesf2+0x66>

10003d30 <__lesf2>:
10003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d32:	0243      	lsls	r3, r0, #9
10003d34:	0042      	lsls	r2, r0, #1
10003d36:	004f      	lsls	r7, r1, #1
10003d38:	0fc6      	lsrs	r6, r0, #31
10003d3a:	0248      	lsls	r0, r1, #9
10003d3c:	0a5c      	lsrs	r4, r3, #9
10003d3e:	0a45      	lsrs	r5, r0, #9
10003d40:	0e13      	lsrs	r3, r2, #24
10003d42:	0fc9      	lsrs	r1, r1, #31
10003d44:	0e3a      	lsrs	r2, r7, #24
10003d46:	2bff      	cmp	r3, #255	; 0xff
10003d48:	d026      	beq.n	10003d98 <__lesf2+0x68>
10003d4a:	2aff      	cmp	r2, #255	; 0xff
10003d4c:	d028      	beq.n	10003da0 <__lesf2+0x70>
10003d4e:	2b00      	cmp	r3, #0
10003d50:	d00f      	beq.n	10003d72 <__lesf2+0x42>
10003d52:	2a00      	cmp	r2, #0
10003d54:	d114      	bne.n	10003d80 <__lesf2+0x50>
10003d56:	4694      	mov	ip, r2
10003d58:	426f      	negs	r7, r5
10003d5a:	416f      	adcs	r7, r5
10003d5c:	4660      	mov	r0, ip
10003d5e:	2800      	cmp	r0, #0
10003d60:	d014      	beq.n	10003d8c <__lesf2+0x5c>
10003d62:	2000      	movs	r0, #0
10003d64:	2f00      	cmp	r7, #0
10003d66:	d103      	bne.n	10003d70 <__lesf2+0x40>
10003d68:	2900      	cmp	r1, #0
10003d6a:	d10d      	bne.n	10003d88 <__lesf2+0x58>
10003d6c:	2101      	movs	r1, #1
10003d6e:	4248      	negs	r0, r1
10003d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003d72:	4260      	negs	r0, r4
10003d74:	4160      	adcs	r0, r4
10003d76:	4684      	mov	ip, r0
10003d78:	2a00      	cmp	r2, #0
10003d7a:	d0ed      	beq.n	10003d58 <__lesf2+0x28>
10003d7c:	2800      	cmp	r0, #0
10003d7e:	d1f3      	bne.n	10003d68 <__lesf2+0x38>
10003d80:	428e      	cmp	r6, r1
10003d82:	d011      	beq.n	10003da8 <__lesf2+0x78>
10003d84:	2e00      	cmp	r6, #0
10003d86:	d1f1      	bne.n	10003d6c <__lesf2+0x3c>
10003d88:	2001      	movs	r0, #1
10003d8a:	e7f1      	b.n	10003d70 <__lesf2+0x40>
10003d8c:	2f00      	cmp	r7, #0
10003d8e:	d0f7      	beq.n	10003d80 <__lesf2+0x50>
10003d90:	2001      	movs	r0, #1
10003d92:	2e00      	cmp	r6, #0
10003d94:	d0ec      	beq.n	10003d70 <__lesf2+0x40>
10003d96:	e7e9      	b.n	10003d6c <__lesf2+0x3c>
10003d98:	2002      	movs	r0, #2
10003d9a:	2c00      	cmp	r4, #0
10003d9c:	d1e8      	bne.n	10003d70 <__lesf2+0x40>
10003d9e:	e7d4      	b.n	10003d4a <__lesf2+0x1a>
10003da0:	2002      	movs	r0, #2
10003da2:	2d00      	cmp	r5, #0
10003da4:	d1e4      	bne.n	10003d70 <__lesf2+0x40>
10003da6:	e7d2      	b.n	10003d4e <__lesf2+0x1e>
10003da8:	4293      	cmp	r3, r2
10003daa:	dceb      	bgt.n	10003d84 <__lesf2+0x54>
10003dac:	db04      	blt.n	10003db8 <__lesf2+0x88>
10003dae:	42ac      	cmp	r4, r5
10003db0:	d8e8      	bhi.n	10003d84 <__lesf2+0x54>
10003db2:	2000      	movs	r0, #0
10003db4:	42ac      	cmp	r4, r5
10003db6:	d2db      	bcs.n	10003d70 <__lesf2+0x40>
10003db8:	2e00      	cmp	r6, #0
10003dba:	d0d7      	beq.n	10003d6c <__lesf2+0x3c>
10003dbc:	2001      	movs	r0, #1
10003dbe:	e7d7      	b.n	10003d70 <__lesf2+0x40>

10003dc0 <__aeabi_fmul>:
10003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003dc2:	465f      	mov	r7, fp
10003dc4:	4656      	mov	r6, sl
10003dc6:	464d      	mov	r5, r9
10003dc8:	4644      	mov	r4, r8
10003dca:	b4f0      	push	{r4, r5, r6, r7}
10003dcc:	0245      	lsls	r5, r0, #9
10003dce:	0046      	lsls	r6, r0, #1
10003dd0:	b083      	sub	sp, #12
10003dd2:	1c0f      	adds	r7, r1, #0
10003dd4:	0a6d      	lsrs	r5, r5, #9
10003dd6:	0e36      	lsrs	r6, r6, #24
10003dd8:	0fc4      	lsrs	r4, r0, #31
10003dda:	2e00      	cmp	r6, #0
10003ddc:	d106      	bne.n	10003dec <__aeabi_fmul+0x2c>
10003dde:	2d00      	cmp	r5, #0
10003de0:	d170      	bne.n	10003ec4 <__aeabi_fmul+0x104>
10003de2:	2104      	movs	r1, #4
10003de4:	2201      	movs	r2, #1
10003de6:	4688      	mov	r8, r1
10003de8:	4692      	mov	sl, r2
10003dea:	e009      	b.n	10003e00 <__aeabi_fmul+0x40>
10003dec:	2eff      	cmp	r6, #255	; 0xff
10003dee:	d043      	beq.n	10003e78 <__aeabi_fmul+0xb8>
10003df0:	2380      	movs	r3, #128	; 0x80
10003df2:	0418      	lsls	r0, r3, #16
10003df4:	2100      	movs	r1, #0
10003df6:	4305      	orrs	r5, r0
10003df8:	00ed      	lsls	r5, r5, #3
10003dfa:	3e7f      	subs	r6, #127	; 0x7f
10003dfc:	4688      	mov	r8, r1
10003dfe:	468a      	mov	sl, r1
10003e00:	1c38      	adds	r0, r7, #0
10003e02:	0043      	lsls	r3, r0, #1
10003e04:	027f      	lsls	r7, r7, #9
10003e06:	0fc1      	lsrs	r1, r0, #31
10003e08:	0a7f      	lsrs	r7, r7, #9
10003e0a:	0e1b      	lsrs	r3, r3, #24
10003e0c:	468b      	mov	fp, r1
10003e0e:	d13a      	bne.n	10003e86 <__aeabi_fmul+0xc6>
10003e10:	2101      	movs	r1, #1
10003e12:	2f00      	cmp	r7, #0
10003e14:	d162      	bne.n	10003edc <__aeabi_fmul+0x11c>
10003e16:	4658      	mov	r0, fp
10003e18:	4060      	eors	r0, r4
10003e1a:	4642      	mov	r2, r8
10003e1c:	9001      	str	r0, [sp, #4]
10003e1e:	430a      	orrs	r2, r1
10003e20:	2a0f      	cmp	r2, #15
10003e22:	d93f      	bls.n	10003ea4 <__aeabi_fmul+0xe4>
10003e24:	042c      	lsls	r4, r5, #16
10003e26:	18f0      	adds	r0, r6, r3
10003e28:	0c26      	lsrs	r6, r4, #16
10003e2a:	043b      	lsls	r3, r7, #16
10003e2c:	0c1a      	lsrs	r2, r3, #16
10003e2e:	1c31      	adds	r1, r6, #0
10003e30:	4351      	muls	r1, r2
10003e32:	0c3f      	lsrs	r7, r7, #16
10003e34:	0c2d      	lsrs	r5, r5, #16
10003e36:	437e      	muls	r6, r7
10003e38:	436a      	muls	r2, r5
10003e3a:	4681      	mov	r9, r0
10003e3c:	0c08      	lsrs	r0, r1, #16
10003e3e:	1836      	adds	r6, r6, r0
10003e40:	1c2c      	adds	r4, r5, #0
10003e42:	18b3      	adds	r3, r6, r2
10003e44:	437c      	muls	r4, r7
10003e46:	429a      	cmp	r2, r3
10003e48:	d900      	bls.n	10003e4c <__aeabi_fmul+0x8c>
10003e4a:	e09a      	b.n	10003f82 <__aeabi_fmul+0x1c2>
10003e4c:	0409      	lsls	r1, r1, #16
10003e4e:	041d      	lsls	r5, r3, #16
10003e50:	0c08      	lsrs	r0, r1, #16
10003e52:	182e      	adds	r6, r5, r0
10003e54:	01b5      	lsls	r5, r6, #6
10003e56:	0c1b      	lsrs	r3, r3, #16
10003e58:	1e69      	subs	r1, r5, #1
10003e5a:	418d      	sbcs	r5, r1
10003e5c:	0eb2      	lsrs	r2, r6, #26
10003e5e:	18e7      	adds	r7, r4, r3
10003e60:	4315      	orrs	r5, r2
10003e62:	01bc      	lsls	r4, r7, #6
10003e64:	4325      	orrs	r5, r4
10003e66:	012b      	lsls	r3, r5, #4
10003e68:	d54b      	bpl.n	10003f02 <__aeabi_fmul+0x142>
10003e6a:	2001      	movs	r0, #1
10003e6c:	4028      	ands	r0, r5
10003e6e:	2101      	movs	r1, #1
10003e70:	086d      	lsrs	r5, r5, #1
10003e72:	4489      	add	r9, r1
10003e74:	4305      	orrs	r5, r0
10003e76:	e044      	b.n	10003f02 <__aeabi_fmul+0x142>
10003e78:	2d00      	cmp	r5, #0
10003e7a:	d11e      	bne.n	10003eba <__aeabi_fmul+0xfa>
10003e7c:	2008      	movs	r0, #8
10003e7e:	2102      	movs	r1, #2
10003e80:	4680      	mov	r8, r0
10003e82:	468a      	mov	sl, r1
10003e84:	e7bc      	b.n	10003e00 <__aeabi_fmul+0x40>
10003e86:	2bff      	cmp	r3, #255	; 0xff
10003e88:	d012      	beq.n	10003eb0 <__aeabi_fmul+0xf0>
10003e8a:	2280      	movs	r2, #128	; 0x80
10003e8c:	0410      	lsls	r0, r2, #16
10003e8e:	4307      	orrs	r7, r0
10003e90:	4658      	mov	r0, fp
10003e92:	2100      	movs	r1, #0
10003e94:	4060      	eors	r0, r4
10003e96:	4642      	mov	r2, r8
10003e98:	00ff      	lsls	r7, r7, #3
10003e9a:	3b7f      	subs	r3, #127	; 0x7f
10003e9c:	9001      	str	r0, [sp, #4]
10003e9e:	430a      	orrs	r2, r1
10003ea0:	2a0f      	cmp	r2, #15
10003ea2:	d8bf      	bhi.n	10003e24 <__aeabi_fmul+0x64>
10003ea4:	0090      	lsls	r0, r2, #2
10003ea6:	4a5b      	ldr	r2, [pc, #364]	; (10004014 <__aeabi_fmul+0x254>)
10003ea8:	4684      	mov	ip, r0
10003eaa:	4462      	add	r2, ip
10003eac:	6810      	ldr	r0, [r2, #0]
10003eae:	4687      	mov	pc, r0
10003eb0:	1c39      	adds	r1, r7, #0
10003eb2:	1e4a      	subs	r2, r1, #1
10003eb4:	4191      	sbcs	r1, r2
10003eb6:	3102      	adds	r1, #2
10003eb8:	e7ad      	b.n	10003e16 <__aeabi_fmul+0x56>
10003eba:	220c      	movs	r2, #12
10003ebc:	2303      	movs	r3, #3
10003ebe:	4690      	mov	r8, r2
10003ec0:	469a      	mov	sl, r3
10003ec2:	e79d      	b.n	10003e00 <__aeabi_fmul+0x40>
10003ec4:	1c28      	adds	r0, r5, #0
10003ec6:	f002 f9fb 	bl	100062c0 <__clzsi2>
10003eca:	2276      	movs	r2, #118	; 0x76
10003ecc:	1f46      	subs	r6, r0, #5
10003ece:	4253      	negs	r3, r2
10003ed0:	40b5      	lsls	r5, r6
10003ed2:	1a1e      	subs	r6, r3, r0
10003ed4:	2000      	movs	r0, #0
10003ed6:	4680      	mov	r8, r0
10003ed8:	4682      	mov	sl, r0
10003eda:	e791      	b.n	10003e00 <__aeabi_fmul+0x40>
10003edc:	1c38      	adds	r0, r7, #0
10003ede:	f002 f9ef 	bl	100062c0 <__clzsi2>
10003ee2:	2176      	movs	r1, #118	; 0x76
10003ee4:	1f43      	subs	r3, r0, #5
10003ee6:	424a      	negs	r2, r1
10003ee8:	409f      	lsls	r7, r3
10003eea:	2100      	movs	r1, #0
10003eec:	1a13      	subs	r3, r2, r0
10003eee:	e792      	b.n	10003e16 <__aeabi_fmul+0x56>
10003ef0:	9401      	str	r4, [sp, #4]
10003ef2:	4651      	mov	r1, sl
10003ef4:	2902      	cmp	r1, #2
10003ef6:	d02c      	beq.n	10003f52 <__aeabi_fmul+0x192>
10003ef8:	2903      	cmp	r1, #3
10003efa:	d100      	bne.n	10003efe <__aeabi_fmul+0x13e>
10003efc:	e080      	b.n	10004000 <__aeabi_fmul+0x240>
10003efe:	2901      	cmp	r1, #1
10003f00:	d048      	beq.n	10003f94 <__aeabi_fmul+0x1d4>
10003f02:	464e      	mov	r6, r9
10003f04:	367f      	adds	r6, #127	; 0x7f
10003f06:	2e00      	cmp	r6, #0
10003f08:	dd51      	ble.n	10003fae <__aeabi_fmul+0x1ee>
10003f0a:	240f      	movs	r4, #15
10003f0c:	402c      	ands	r4, r5
10003f0e:	2c04      	cmp	r4, #4
10003f10:	d000      	beq.n	10003f14 <__aeabi_fmul+0x154>
10003f12:	3504      	adds	r5, #4
10003f14:	012a      	lsls	r2, r5, #4
10003f16:	d503      	bpl.n	10003f20 <__aeabi_fmul+0x160>
10003f18:	493f      	ldr	r1, [pc, #252]	; (10004018 <__aeabi_fmul+0x258>)
10003f1a:	464e      	mov	r6, r9
10003f1c:	400d      	ands	r5, r1
10003f1e:	3680      	adds	r6, #128	; 0x80
10003f20:	2efe      	cmp	r6, #254	; 0xfe
10003f22:	dd3d      	ble.n	10003fa0 <__aeabi_fmul+0x1e0>
10003f24:	9b01      	ldr	r3, [sp, #4]
10003f26:	2401      	movs	r4, #1
10003f28:	401c      	ands	r4, r3
10003f2a:	21ff      	movs	r1, #255	; 0xff
10003f2c:	2500      	movs	r5, #0
10003f2e:	05c8      	lsls	r0, r1, #23
10003f30:	07e2      	lsls	r2, r4, #31
10003f32:	4328      	orrs	r0, r5
10003f34:	4310      	orrs	r0, r2
10003f36:	b003      	add	sp, #12
10003f38:	bc3c      	pop	{r2, r3, r4, r5}
10003f3a:	4690      	mov	r8, r2
10003f3c:	4699      	mov	r9, r3
10003f3e:	46a2      	mov	sl, r4
10003f40:	46ab      	mov	fp, r5
10003f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003f44:	2400      	movs	r4, #0
10003f46:	4d35      	ldr	r5, [pc, #212]	; (1000401c <__aeabi_fmul+0x25c>)
10003f48:	21ff      	movs	r1, #255	; 0xff
10003f4a:	e7f0      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003f4c:	4651      	mov	r1, sl
10003f4e:	2902      	cmp	r1, #2
10003f50:	d1d2      	bne.n	10003ef8 <__aeabi_fmul+0x138>
10003f52:	9d01      	ldr	r5, [sp, #4]
10003f54:	2401      	movs	r4, #1
10003f56:	402c      	ands	r4, r5
10003f58:	21ff      	movs	r1, #255	; 0xff
10003f5a:	2500      	movs	r5, #0
10003f5c:	e7e7      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003f5e:	465e      	mov	r6, fp
10003f60:	1c3d      	adds	r5, r7, #0
10003f62:	9601      	str	r6, [sp, #4]
10003f64:	e7c6      	b.n	10003ef4 <__aeabi_fmul+0x134>
10003f66:	1c3d      	adds	r5, r7, #0
10003f68:	e7c4      	b.n	10003ef4 <__aeabi_fmul+0x134>
10003f6a:	2680      	movs	r6, #128	; 0x80
10003f6c:	03f3      	lsls	r3, r6, #15
10003f6e:	421d      	tst	r5, r3
10003f70:	d00b      	beq.n	10003f8a <__aeabi_fmul+0x1ca>
10003f72:	421f      	tst	r7, r3
10003f74:	d109      	bne.n	10003f8a <__aeabi_fmul+0x1ca>
10003f76:	431f      	orrs	r7, r3
10003f78:	027a      	lsls	r2, r7, #9
10003f7a:	0a55      	lsrs	r5, r2, #9
10003f7c:	465c      	mov	r4, fp
10003f7e:	21ff      	movs	r1, #255	; 0xff
10003f80:	e7d5      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003f82:	2280      	movs	r2, #128	; 0x80
10003f84:	0257      	lsls	r7, r2, #9
10003f86:	19e4      	adds	r4, r4, r7
10003f88:	e760      	b.n	10003e4c <__aeabi_fmul+0x8c>
10003f8a:	431d      	orrs	r5, r3
10003f8c:	026f      	lsls	r7, r5, #9
10003f8e:	0a7d      	lsrs	r5, r7, #9
10003f90:	21ff      	movs	r1, #255	; 0xff
10003f92:	e7cc      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003f94:	9b01      	ldr	r3, [sp, #4]
10003f96:	2500      	movs	r5, #0
10003f98:	4019      	ands	r1, r3
10003f9a:	b2cc      	uxtb	r4, r1
10003f9c:	2100      	movs	r1, #0
10003f9e:	e7c6      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003fa0:	9801      	ldr	r0, [sp, #4]
10003fa2:	01ad      	lsls	r5, r5, #6
10003fa4:	2401      	movs	r4, #1
10003fa6:	0a6d      	lsrs	r5, r5, #9
10003fa8:	b2f1      	uxtb	r1, r6
10003faa:	4004      	ands	r4, r0
10003fac:	e7bf      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003fae:	267e      	movs	r6, #126	; 0x7e
10003fb0:	4273      	negs	r3, r6
10003fb2:	464a      	mov	r2, r9
10003fb4:	1a9f      	subs	r7, r3, r2
10003fb6:	2f1b      	cmp	r7, #27
10003fb8:	dd05      	ble.n	10003fc6 <__aeabi_fmul+0x206>
10003fba:	9d01      	ldr	r5, [sp, #4]
10003fbc:	2401      	movs	r4, #1
10003fbe:	402c      	ands	r4, r5
10003fc0:	2100      	movs	r1, #0
10003fc2:	2500      	movs	r5, #0
10003fc4:	e7b3      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003fc6:	4649      	mov	r1, r9
10003fc8:	319e      	adds	r1, #158	; 0x9e
10003fca:	1c2c      	adds	r4, r5, #0
10003fcc:	408d      	lsls	r5, r1
10003fce:	1c2e      	adds	r6, r5, #0
10003fd0:	40fc      	lsrs	r4, r7
10003fd2:	1e75      	subs	r5, r6, #1
10003fd4:	41ae      	sbcs	r6, r5
10003fd6:	4326      	orrs	r6, r4
10003fd8:	200f      	movs	r0, #15
10003fda:	4030      	ands	r0, r6
10003fdc:	2804      	cmp	r0, #4
10003fde:	d000      	beq.n	10003fe2 <__aeabi_fmul+0x222>
10003fe0:	3604      	adds	r6, #4
10003fe2:	0170      	lsls	r0, r6, #5
10003fe4:	d505      	bpl.n	10003ff2 <__aeabi_fmul+0x232>
10003fe6:	9f01      	ldr	r7, [sp, #4]
10003fe8:	2401      	movs	r4, #1
10003fea:	403c      	ands	r4, r7
10003fec:	2101      	movs	r1, #1
10003fee:	2500      	movs	r5, #0
10003ff0:	e79d      	b.n	10003f2e <__aeabi_fmul+0x16e>
10003ff2:	9a01      	ldr	r2, [sp, #4]
10003ff4:	01b3      	lsls	r3, r6, #6
10003ff6:	2401      	movs	r4, #1
10003ff8:	0a5d      	lsrs	r5, r3, #9
10003ffa:	4014      	ands	r4, r2
10003ffc:	2100      	movs	r1, #0
10003ffe:	e796      	b.n	10003f2e <__aeabi_fmul+0x16e>
10004000:	2280      	movs	r2, #128	; 0x80
10004002:	03d0      	lsls	r0, r2, #15
10004004:	4305      	orrs	r5, r0
10004006:	026c      	lsls	r4, r5, #9
10004008:	9901      	ldr	r1, [sp, #4]
1000400a:	0a65      	lsrs	r5, r4, #9
1000400c:	2401      	movs	r4, #1
1000400e:	400c      	ands	r4, r1
10004010:	21ff      	movs	r1, #255	; 0xff
10004012:	e78c      	b.n	10003f2e <__aeabi_fmul+0x16e>
10004014:	1002d2b4 	.word	0x1002d2b4
10004018:	f7ffffff 	.word	0xf7ffffff
1000401c:	007fffff 	.word	0x007fffff

10004020 <__aeabi_fsub>:
10004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004022:	0243      	lsls	r3, r0, #9
10004024:	0045      	lsls	r5, r0, #1
10004026:	024f      	lsls	r7, r1, #9
10004028:	004c      	lsls	r4, r1, #1
1000402a:	0fc2      	lsrs	r2, r0, #31
1000402c:	0998      	lsrs	r0, r3, #6
1000402e:	4684      	mov	ip, r0
10004030:	0e2d      	lsrs	r5, r5, #24
10004032:	0e20      	lsrs	r0, r4, #24
10004034:	0fc9      	lsrs	r1, r1, #31
10004036:	09bf      	lsrs	r7, r7, #6
10004038:	28ff      	cmp	r0, #255	; 0xff
1000403a:	d054      	beq.n	100040e6 <__aeabi_fsub+0xc6>
1000403c:	2601      	movs	r6, #1
1000403e:	4071      	eors	r1, r6
10004040:	428a      	cmp	r2, r1
10004042:	d03b      	beq.n	100040bc <__aeabi_fsub+0x9c>
10004044:	1a2c      	subs	r4, r5, r0
10004046:	2c00      	cmp	r4, #0
10004048:	dc00      	bgt.n	1000404c <__aeabi_fsub+0x2c>
1000404a:	e089      	b.n	10004160 <__aeabi_fsub+0x140>
1000404c:	2800      	cmp	r0, #0
1000404e:	d125      	bne.n	1000409c <__aeabi_fsub+0x7c>
10004050:	2f00      	cmp	r7, #0
10004052:	d14b      	bne.n	100040ec <__aeabi_fsub+0xcc>
10004054:	1c6e      	adds	r6, r5, #1
10004056:	1c2c      	adds	r4, r5, #0
10004058:	4663      	mov	r3, ip
1000405a:	1c15      	adds	r5, r2, #0
1000405c:	220f      	movs	r2, #15
1000405e:	401a      	ands	r2, r3
10004060:	2a04      	cmp	r2, #4
10004062:	d000      	beq.n	10004066 <__aeabi_fsub+0x46>
10004064:	3304      	adds	r3, #4
10004066:	2780      	movs	r7, #128	; 0x80
10004068:	04f9      	lsls	r1, r7, #19
1000406a:	2201      	movs	r2, #1
1000406c:	4019      	ands	r1, r3
1000406e:	402a      	ands	r2, r5
10004070:	2900      	cmp	r1, #0
10004072:	d006      	beq.n	10004082 <__aeabi_fsub+0x62>
10004074:	2eff      	cmp	r6, #255	; 0xff
10004076:	d100      	bne.n	1000407a <__aeabi_fsub+0x5a>
10004078:	e081      	b.n	1000417e <__aeabi_fsub+0x15e>
1000407a:	4db1      	ldr	r5, [pc, #708]	; (10004340 <__aeabi_fsub+0x320>)
1000407c:	1c34      	adds	r4, r6, #0
1000407e:	402b      	ands	r3, r5
10004080:	3601      	adds	r6, #1
10004082:	b2f6      	uxtb	r6, r6
10004084:	08dd      	lsrs	r5, r3, #3
10004086:	2e01      	cmp	r6, #1
10004088:	dd62      	ble.n	10004150 <__aeabi_fsub+0x130>
1000408a:	026b      	lsls	r3, r5, #9
1000408c:	0a5d      	lsrs	r5, r3, #9
1000408e:	b2e4      	uxtb	r4, r4
10004090:	05e4      	lsls	r4, r4, #23
10004092:	4325      	orrs	r5, r4
10004094:	1c28      	adds	r0, r5, #0
10004096:	07d2      	lsls	r2, r2, #31
10004098:	4310      	orrs	r0, r2
1000409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000409c:	2dff      	cmp	r5, #255	; 0xff
1000409e:	d051      	beq.n	10004144 <__aeabi_fsub+0x124>
100040a0:	2180      	movs	r1, #128	; 0x80
100040a2:	04cb      	lsls	r3, r1, #19
100040a4:	431f      	orrs	r7, r3
100040a6:	2601      	movs	r6, #1
100040a8:	2c1b      	cmp	r4, #27
100040aa:	dd70      	ble.n	1000418e <__aeabi_fsub+0x16e>
100040ac:	4667      	mov	r7, ip
100040ae:	1c2c      	adds	r4, r5, #0
100040b0:	1bbb      	subs	r3, r7, r6
100040b2:	1c15      	adds	r5, r2, #0
100040b4:	0158      	lsls	r0, r3, #5
100040b6:	d422      	bmi.n	100040fe <__aeabi_fsub+0xde>
100040b8:	1c66      	adds	r6, r4, #1
100040ba:	e7cf      	b.n	1000405c <__aeabi_fsub+0x3c>
100040bc:	1a2e      	subs	r6, r5, r0
100040be:	2e00      	cmp	r6, #0
100040c0:	dd76      	ble.n	100041b0 <__aeabi_fsub+0x190>
100040c2:	2800      	cmp	r0, #0
100040c4:	d032      	beq.n	1000412c <__aeabi_fsub+0x10c>
100040c6:	2dff      	cmp	r5, #255	; 0xff
100040c8:	d03c      	beq.n	10004144 <__aeabi_fsub+0x124>
100040ca:	2480      	movs	r4, #128	; 0x80
100040cc:	04e1      	lsls	r1, r4, #19
100040ce:	430f      	orrs	r7, r1
100040d0:	2301      	movs	r3, #1
100040d2:	2e1b      	cmp	r6, #27
100040d4:	dc00      	bgt.n	100040d8 <__aeabi_fsub+0xb8>
100040d6:	e0d1      	b.n	1000427c <__aeabi_fsub+0x25c>
100040d8:	4463      	add	r3, ip
100040da:	1c2c      	adds	r4, r5, #0
100040dc:	0158      	lsls	r0, r3, #5
100040de:	d47a      	bmi.n	100041d6 <__aeabi_fsub+0x1b6>
100040e0:	1c66      	adds	r6, r4, #1
100040e2:	1c15      	adds	r5, r2, #0
100040e4:	e7ba      	b.n	1000405c <__aeabi_fsub+0x3c>
100040e6:	2f00      	cmp	r7, #0
100040e8:	d1aa      	bne.n	10004040 <__aeabi_fsub+0x20>
100040ea:	e7a7      	b.n	1000403c <__aeabi_fsub+0x1c>
100040ec:	3c01      	subs	r4, #1
100040ee:	2c00      	cmp	r4, #0
100040f0:	d16d      	bne.n	100041ce <__aeabi_fsub+0x1ae>
100040f2:	4663      	mov	r3, ip
100040f4:	1c2c      	adds	r4, r5, #0
100040f6:	1bdb      	subs	r3, r3, r7
100040f8:	1c15      	adds	r5, r2, #0
100040fa:	0158      	lsls	r0, r3, #5
100040fc:	d5dc      	bpl.n	100040b8 <__aeabi_fsub+0x98>
100040fe:	019a      	lsls	r2, r3, #6
10004100:	0996      	lsrs	r6, r2, #6
10004102:	1c30      	adds	r0, r6, #0
10004104:	f002 f8dc 	bl	100062c0 <__clzsi2>
10004108:	3805      	subs	r0, #5
1000410a:	4086      	lsls	r6, r0
1000410c:	4284      	cmp	r4, r0
1000410e:	dc39      	bgt.n	10004184 <__aeabi_fsub+0x164>
10004110:	1b00      	subs	r0, r0, r4
10004112:	231f      	movs	r3, #31
10004114:	1a1a      	subs	r2, r3, r0
10004116:	1c33      	adds	r3, r6, #0
10004118:	1c31      	adds	r1, r6, #0
1000411a:	1c44      	adds	r4, r0, #1
1000411c:	4093      	lsls	r3, r2
1000411e:	40e1      	lsrs	r1, r4
10004120:	1e5e      	subs	r6, r3, #1
10004122:	41b3      	sbcs	r3, r6
10004124:	430b      	orrs	r3, r1
10004126:	2601      	movs	r6, #1
10004128:	2400      	movs	r4, #0
1000412a:	e797      	b.n	1000405c <__aeabi_fsub+0x3c>
1000412c:	2f00      	cmp	r7, #0
1000412e:	d100      	bne.n	10004132 <__aeabi_fsub+0x112>
10004130:	e790      	b.n	10004054 <__aeabi_fsub+0x34>
10004132:	3e01      	subs	r6, #1
10004134:	2e00      	cmp	r6, #0
10004136:	d103      	bne.n	10004140 <__aeabi_fsub+0x120>
10004138:	4664      	mov	r4, ip
1000413a:	193b      	adds	r3, r7, r4
1000413c:	1c2c      	adds	r4, r5, #0
1000413e:	e7cd      	b.n	100040dc <__aeabi_fsub+0xbc>
10004140:	2dff      	cmp	r5, #255	; 0xff
10004142:	d1c5      	bne.n	100040d0 <__aeabi_fsub+0xb0>
10004144:	1c15      	adds	r5, r2, #0
10004146:	2280      	movs	r2, #128	; 0x80
10004148:	4663      	mov	r3, ip
1000414a:	0056      	lsls	r6, r2, #1
1000414c:	24ff      	movs	r4, #255	; 0xff
1000414e:	e785      	b.n	1000405c <__aeabi_fsub+0x3c>
10004150:	2d00      	cmp	r5, #0
10004152:	d09c      	beq.n	1000408e <__aeabi_fsub+0x6e>
10004154:	2c00      	cmp	r4, #0
10004156:	d028      	beq.n	100041aa <__aeabi_fsub+0x18a>
10004158:	2080      	movs	r0, #128	; 0x80
1000415a:	03c7      	lsls	r7, r0, #15
1000415c:	433d      	orrs	r5, r7
1000415e:	e794      	b.n	1000408a <__aeabi_fsub+0x6a>
10004160:	2c00      	cmp	r4, #0
10004162:	d145      	bne.n	100041f0 <__aeabi_fsub+0x1d0>
10004164:	1c6b      	adds	r3, r5, #1
10004166:	b2d8      	uxtb	r0, r3
10004168:	2801      	cmp	r0, #1
1000416a:	dc00      	bgt.n	1000416e <__aeabi_fsub+0x14e>
1000416c:	e090      	b.n	10004290 <__aeabi_fsub+0x270>
1000416e:	4664      	mov	r4, ip
10004170:	1be6      	subs	r6, r4, r7
10004172:	0173      	lsls	r3, r6, #5
10004174:	d557      	bpl.n	10004226 <__aeabi_fsub+0x206>
10004176:	1b3e      	subs	r6, r7, r4
10004178:	1c2c      	adds	r4, r5, #0
1000417a:	1c0d      	adds	r5, r1, #0
1000417c:	e7c1      	b.n	10004102 <__aeabi_fsub+0xe2>
1000417e:	24ff      	movs	r4, #255	; 0xff
10004180:	2500      	movs	r5, #0
10004182:	e785      	b.n	10004090 <__aeabi_fsub+0x70>
10004184:	4b6e      	ldr	r3, [pc, #440]	; (10004340 <__aeabi_fsub+0x320>)
10004186:	1a24      	subs	r4, r4, r0
10004188:	4033      	ands	r3, r6
1000418a:	1c66      	adds	r6, r4, #1
1000418c:	e766      	b.n	1000405c <__aeabi_fsub+0x3c>
1000418e:	1c38      	adds	r0, r7, #0
10004190:	2120      	movs	r1, #32
10004192:	40e0      	lsrs	r0, r4
10004194:	1b0c      	subs	r4, r1, r4
10004196:	40a7      	lsls	r7, r4
10004198:	1c3e      	adds	r6, r7, #0
1000419a:	1e77      	subs	r7, r6, #1
1000419c:	41be      	sbcs	r6, r7
1000419e:	4306      	orrs	r6, r0
100041a0:	4667      	mov	r7, ip
100041a2:	1c2c      	adds	r4, r5, #0
100041a4:	1bbb      	subs	r3, r7, r6
100041a6:	1c15      	adds	r5, r2, #0
100041a8:	e784      	b.n	100040b4 <__aeabi_fsub+0x94>
100041aa:	0269      	lsls	r1, r5, #9
100041ac:	0a4d      	lsrs	r5, r1, #9
100041ae:	e76f      	b.n	10004090 <__aeabi_fsub+0x70>
100041b0:	2e00      	cmp	r6, #0
100041b2:	d179      	bne.n	100042a8 <__aeabi_fsub+0x288>
100041b4:	1c6c      	adds	r4, r5, #1
100041b6:	b2e0      	uxtb	r0, r4
100041b8:	2801      	cmp	r0, #1
100041ba:	dd4b      	ble.n	10004254 <__aeabi_fsub+0x234>
100041bc:	2cff      	cmp	r4, #255	; 0xff
100041be:	d100      	bne.n	100041c2 <__aeabi_fsub+0x1a2>
100041c0:	e098      	b.n	100042f4 <__aeabi_fsub+0x2d4>
100041c2:	4661      	mov	r1, ip
100041c4:	187f      	adds	r7, r7, r1
100041c6:	1cae      	adds	r6, r5, #2
100041c8:	087b      	lsrs	r3, r7, #1
100041ca:	1c15      	adds	r5, r2, #0
100041cc:	e746      	b.n	1000405c <__aeabi_fsub+0x3c>
100041ce:	2dff      	cmp	r5, #255	; 0xff
100041d0:	d000      	beq.n	100041d4 <__aeabi_fsub+0x1b4>
100041d2:	e768      	b.n	100040a6 <__aeabi_fsub+0x86>
100041d4:	e7b6      	b.n	10004144 <__aeabi_fsub+0x124>
100041d6:	1c67      	adds	r7, r4, #1
100041d8:	2fff      	cmp	r7, #255	; 0xff
100041da:	d036      	beq.n	1000424a <__aeabi_fsub+0x22a>
100041dc:	4858      	ldr	r0, [pc, #352]	; (10004340 <__aeabi_fsub+0x320>)
100041de:	2101      	movs	r1, #1
100041e0:	4019      	ands	r1, r3
100041e2:	4003      	ands	r3, r0
100041e4:	085b      	lsrs	r3, r3, #1
100041e6:	1ca6      	adds	r6, r4, #2
100041e8:	430b      	orrs	r3, r1
100041ea:	1c3c      	adds	r4, r7, #0
100041ec:	1c15      	adds	r5, r2, #0
100041ee:	e735      	b.n	1000405c <__aeabi_fsub+0x3c>
100041f0:	4266      	negs	r6, r4
100041f2:	2d00      	cmp	r5, #0
100041f4:	d01e      	beq.n	10004234 <__aeabi_fsub+0x214>
100041f6:	28ff      	cmp	r0, #255	; 0xff
100041f8:	d06f      	beq.n	100042da <__aeabi_fsub+0x2ba>
100041fa:	2580      	movs	r5, #128	; 0x80
100041fc:	4662      	mov	r2, ip
100041fe:	04eb      	lsls	r3, r5, #19
10004200:	431a      	orrs	r2, r3
10004202:	4694      	mov	ip, r2
10004204:	2501      	movs	r5, #1
10004206:	2e1b      	cmp	r6, #27
10004208:	dc09      	bgt.n	1000421e <__aeabi_fsub+0x1fe>
1000420a:	4662      	mov	r2, ip
1000420c:	2320      	movs	r3, #32
1000420e:	40f2      	lsrs	r2, r6
10004210:	4664      	mov	r4, ip
10004212:	1b9e      	subs	r6, r3, r6
10004214:	40b4      	lsls	r4, r6
10004216:	1c25      	adds	r5, r4, #0
10004218:	1e6c      	subs	r4, r5, #1
1000421a:	41a5      	sbcs	r5, r4
1000421c:	4315      	orrs	r5, r2
1000421e:	1b7b      	subs	r3, r7, r5
10004220:	1c04      	adds	r4, r0, #0
10004222:	1c0d      	adds	r5, r1, #0
10004224:	e769      	b.n	100040fa <__aeabi_fsub+0xda>
10004226:	2e00      	cmp	r6, #0
10004228:	d10c      	bne.n	10004244 <__aeabi_fsub+0x224>
1000422a:	2200      	movs	r2, #0
1000422c:	2601      	movs	r6, #1
1000422e:	2304      	movs	r3, #4
10004230:	2400      	movs	r4, #0
10004232:	e726      	b.n	10004082 <__aeabi_fsub+0x62>
10004234:	4664      	mov	r4, ip
10004236:	2c00      	cmp	r4, #0
10004238:	d155      	bne.n	100042e6 <__aeabi_fsub+0x2c6>
1000423a:	1c46      	adds	r6, r0, #1
1000423c:	1c3b      	adds	r3, r7, #0
1000423e:	1c04      	adds	r4, r0, #0
10004240:	1c0d      	adds	r5, r1, #0
10004242:	e70b      	b.n	1000405c <__aeabi_fsub+0x3c>
10004244:	1c2c      	adds	r4, r5, #0
10004246:	1c15      	adds	r5, r2, #0
10004248:	e75b      	b.n	10004102 <__aeabi_fsub+0xe2>
1000424a:	2380      	movs	r3, #128	; 0x80
1000424c:	005e      	lsls	r6, r3, #1
1000424e:	24ff      	movs	r4, #255	; 0xff
10004250:	2304      	movs	r3, #4
10004252:	e716      	b.n	10004082 <__aeabi_fsub+0x62>
10004254:	2d00      	cmp	r5, #0
10004256:	d000      	beq.n	1000425a <__aeabi_fsub+0x23a>
10004258:	e08d      	b.n	10004376 <__aeabi_fsub+0x356>
1000425a:	4665      	mov	r5, ip
1000425c:	2d00      	cmp	r5, #0
1000425e:	d100      	bne.n	10004262 <__aeabi_fsub+0x242>
10004260:	e0ad      	b.n	100043be <__aeabi_fsub+0x39e>
10004262:	2f00      	cmp	r7, #0
10004264:	d100      	bne.n	10004268 <__aeabi_fsub+0x248>
10004266:	e081      	b.n	1000436c <__aeabi_fsub+0x34c>
10004268:	197b      	adds	r3, r7, r5
1000426a:	015c      	lsls	r4, r3, #5
1000426c:	d400      	bmi.n	10004270 <__aeabi_fsub+0x250>
1000426e:	e07e      	b.n	1000436e <__aeabi_fsub+0x34e>
10004270:	4f33      	ldr	r7, [pc, #204]	; (10004340 <__aeabi_fsub+0x320>)
10004272:	1c15      	adds	r5, r2, #0
10004274:	403b      	ands	r3, r7
10004276:	2602      	movs	r6, #2
10004278:	2401      	movs	r4, #1
1000427a:	e6ef      	b.n	1000405c <__aeabi_fsub+0x3c>
1000427c:	1c38      	adds	r0, r7, #0
1000427e:	2320      	movs	r3, #32
10004280:	40f0      	lsrs	r0, r6
10004282:	1b9e      	subs	r6, r3, r6
10004284:	40b7      	lsls	r7, r6
10004286:	1c3b      	adds	r3, r7, #0
10004288:	1e5f      	subs	r7, r3, #1
1000428a:	41bb      	sbcs	r3, r7
1000428c:	4303      	orrs	r3, r0
1000428e:	e723      	b.n	100040d8 <__aeabi_fsub+0xb8>
10004290:	2d00      	cmp	r5, #0
10004292:	d115      	bne.n	100042c0 <__aeabi_fsub+0x2a0>
10004294:	4665      	mov	r5, ip
10004296:	2d00      	cmp	r5, #0
10004298:	d147      	bne.n	1000432a <__aeabi_fsub+0x30a>
1000429a:	2f00      	cmp	r7, #0
1000429c:	d0c5      	beq.n	1000422a <__aeabi_fsub+0x20a>
1000429e:	1c3b      	adds	r3, r7, #0
100042a0:	1c0d      	adds	r5, r1, #0
100042a2:	2601      	movs	r6, #1
100042a4:	2400      	movs	r4, #0
100042a6:	e6d9      	b.n	1000405c <__aeabi_fsub+0x3c>
100042a8:	4276      	negs	r6, r6
100042aa:	2d00      	cmp	r5, #0
100042ac:	d126      	bne.n	100042fc <__aeabi_fsub+0x2dc>
100042ae:	4665      	mov	r5, ip
100042b0:	2d00      	cmp	r5, #0
100042b2:	d000      	beq.n	100042b6 <__aeabi_fsub+0x296>
100042b4:	e07d      	b.n	100043b2 <__aeabi_fsub+0x392>
100042b6:	1c46      	adds	r6, r0, #1
100042b8:	1c3b      	adds	r3, r7, #0
100042ba:	1c04      	adds	r4, r0, #0
100042bc:	1c15      	adds	r5, r2, #0
100042be:	e6cd      	b.n	1000405c <__aeabi_fsub+0x3c>
100042c0:	4665      	mov	r5, ip
100042c2:	2d00      	cmp	r5, #0
100042c4:	d140      	bne.n	10004348 <__aeabi_fsub+0x328>
100042c6:	2f00      	cmp	r7, #0
100042c8:	d107      	bne.n	100042da <__aeabi_fsub+0x2ba>
100042ca:	2180      	movs	r1, #128	; 0x80
100042cc:	2200      	movs	r2, #0
100042ce:	004e      	lsls	r6, r1, #1
100042d0:	4b1c      	ldr	r3, [pc, #112]	; (10004344 <__aeabi_fsub+0x324>)
100042d2:	24ff      	movs	r4, #255	; 0xff
100042d4:	e6d5      	b.n	10004082 <__aeabi_fsub+0x62>
100042d6:	28ff      	cmp	r0, #255	; 0xff
100042d8:	d194      	bne.n	10004204 <__aeabi_fsub+0x1e4>
100042da:	2080      	movs	r0, #128	; 0x80
100042dc:	1c3b      	adds	r3, r7, #0
100042de:	1c0d      	adds	r5, r1, #0
100042e0:	0046      	lsls	r6, r0, #1
100042e2:	24ff      	movs	r4, #255	; 0xff
100042e4:	e6ba      	b.n	1000405c <__aeabi_fsub+0x3c>
100042e6:	3e01      	subs	r6, #1
100042e8:	2e00      	cmp	r6, #0
100042ea:	d1f4      	bne.n	100042d6 <__aeabi_fsub+0x2b6>
100042ec:	1b3b      	subs	r3, r7, r4
100042ee:	1c0d      	adds	r5, r1, #0
100042f0:	1c04      	adds	r4, r0, #0
100042f2:	e702      	b.n	100040fa <__aeabi_fsub+0xda>
100042f4:	2580      	movs	r5, #128	; 0x80
100042f6:	006e      	lsls	r6, r5, #1
100042f8:	2304      	movs	r3, #4
100042fa:	e6c2      	b.n	10004082 <__aeabi_fsub+0x62>
100042fc:	28ff      	cmp	r0, #255	; 0xff
100042fe:	d052      	beq.n	100043a6 <__aeabi_fsub+0x386>
10004300:	2480      	movs	r4, #128	; 0x80
10004302:	4661      	mov	r1, ip
10004304:	04e3      	lsls	r3, r4, #19
10004306:	4319      	orrs	r1, r3
10004308:	468c      	mov	ip, r1
1000430a:	2301      	movs	r3, #1
1000430c:	2e1b      	cmp	r6, #27
1000430e:	dc09      	bgt.n	10004324 <__aeabi_fsub+0x304>
10004310:	2120      	movs	r1, #32
10004312:	4664      	mov	r4, ip
10004314:	40f4      	lsrs	r4, r6
10004316:	4665      	mov	r5, ip
10004318:	1b8e      	subs	r6, r1, r6
1000431a:	40b5      	lsls	r5, r6
1000431c:	1c2b      	adds	r3, r5, #0
1000431e:	1e59      	subs	r1, r3, #1
10004320:	418b      	sbcs	r3, r1
10004322:	4323      	orrs	r3, r4
10004324:	19db      	adds	r3, r3, r7
10004326:	1c04      	adds	r4, r0, #0
10004328:	e6d8      	b.n	100040dc <__aeabi_fsub+0xbc>
1000432a:	2f00      	cmp	r7, #0
1000432c:	d01e      	beq.n	1000436c <__aeabi_fsub+0x34c>
1000432e:	1beb      	subs	r3, r5, r7
10004330:	0158      	lsls	r0, r3, #5
10004332:	d54b      	bpl.n	100043cc <__aeabi_fsub+0x3ac>
10004334:	1b7b      	subs	r3, r7, r5
10004336:	2601      	movs	r6, #1
10004338:	1c0d      	adds	r5, r1, #0
1000433a:	2400      	movs	r4, #0
1000433c:	e68e      	b.n	1000405c <__aeabi_fsub+0x3c>
1000433e:	46c0      	nop			; (mov r8, r8)
10004340:	fbffffff 	.word	0xfbffffff
10004344:	03fffffc 	.word	0x03fffffc
10004348:	2f00      	cmp	r7, #0
1000434a:	d100      	bne.n	1000434e <__aeabi_fsub+0x32e>
1000434c:	e6fa      	b.n	10004144 <__aeabi_fsub+0x124>
1000434e:	2080      	movs	r0, #128	; 0x80
10004350:	08eb      	lsrs	r3, r5, #3
10004352:	03c4      	lsls	r4, r0, #15
10004354:	4223      	tst	r3, r4
10004356:	d037      	beq.n	100043c8 <__aeabi_fsub+0x3a8>
10004358:	08ff      	lsrs	r7, r7, #3
1000435a:	4227      	tst	r7, r4
1000435c:	d134      	bne.n	100043c8 <__aeabi_fsub+0x3a8>
1000435e:	1c3b      	adds	r3, r7, #0
10004360:	1c0d      	adds	r5, r1, #0
10004362:	2280      	movs	r2, #128	; 0x80
10004364:	00db      	lsls	r3, r3, #3
10004366:	0056      	lsls	r6, r2, #1
10004368:	24ff      	movs	r4, #255	; 0xff
1000436a:	e677      	b.n	1000405c <__aeabi_fsub+0x3c>
1000436c:	4663      	mov	r3, ip
1000436e:	1c15      	adds	r5, r2, #0
10004370:	2601      	movs	r6, #1
10004372:	2400      	movs	r4, #0
10004374:	e672      	b.n	1000405c <__aeabi_fsub+0x3c>
10004376:	4664      	mov	r4, ip
10004378:	2c00      	cmp	r4, #0
1000437a:	d014      	beq.n	100043a6 <__aeabi_fsub+0x386>
1000437c:	2f00      	cmp	r7, #0
1000437e:	d100      	bne.n	10004382 <__aeabi_fsub+0x362>
10004380:	e6e0      	b.n	10004144 <__aeabi_fsub+0x124>
10004382:	2380      	movs	r3, #128	; 0x80
10004384:	08e6      	lsrs	r6, r4, #3
10004386:	03d8      	lsls	r0, r3, #15
10004388:	1c31      	adds	r1, r6, #0
1000438a:	4206      	tst	r6, r0
1000438c:	d003      	beq.n	10004396 <__aeabi_fsub+0x376>
1000438e:	08f9      	lsrs	r1, r7, #3
10004390:	4201      	tst	r1, r0
10004392:	d000      	beq.n	10004396 <__aeabi_fsub+0x376>
10004394:	1c31      	adds	r1, r6, #0
10004396:	1c15      	adds	r5, r2, #0
10004398:	2280      	movs	r2, #128	; 0x80
1000439a:	00cb      	lsls	r3, r1, #3
1000439c:	0056      	lsls	r6, r2, #1
1000439e:	24ff      	movs	r4, #255	; 0xff
100043a0:	e65c      	b.n	1000405c <__aeabi_fsub+0x3c>
100043a2:	28ff      	cmp	r0, #255	; 0xff
100043a4:	d1b1      	bne.n	1000430a <__aeabi_fsub+0x2ea>
100043a6:	2080      	movs	r0, #128	; 0x80
100043a8:	1c3b      	adds	r3, r7, #0
100043aa:	1c15      	adds	r5, r2, #0
100043ac:	0046      	lsls	r6, r0, #1
100043ae:	24ff      	movs	r4, #255	; 0xff
100043b0:	e654      	b.n	1000405c <__aeabi_fsub+0x3c>
100043b2:	3e01      	subs	r6, #1
100043b4:	2e00      	cmp	r6, #0
100043b6:	d1f4      	bne.n	100043a2 <__aeabi_fsub+0x382>
100043b8:	197b      	adds	r3, r7, r5
100043ba:	1c04      	adds	r4, r0, #0
100043bc:	e68e      	b.n	100040dc <__aeabi_fsub+0xbc>
100043be:	1c3b      	adds	r3, r7, #0
100043c0:	1c15      	adds	r5, r2, #0
100043c2:	2601      	movs	r6, #1
100043c4:	2400      	movs	r4, #0
100043c6:	e649      	b.n	1000405c <__aeabi_fsub+0x3c>
100043c8:	1c15      	adds	r5, r2, #0
100043ca:	e7ca      	b.n	10004362 <__aeabi_fsub+0x342>
100043cc:	2b00      	cmp	r3, #0
100043ce:	d100      	bne.n	100043d2 <__aeabi_fsub+0x3b2>
100043d0:	e72b      	b.n	1000422a <__aeabi_fsub+0x20a>
100043d2:	e7cc      	b.n	1000436e <__aeabi_fsub+0x34e>

100043d4 <__aeabi_f2iz>:
100043d4:	0243      	lsls	r3, r0, #9
100043d6:	0042      	lsls	r2, r0, #1
100043d8:	0a59      	lsrs	r1, r3, #9
100043da:	0e13      	lsrs	r3, r2, #24
100043dc:	0fc2      	lsrs	r2, r0, #31
100043de:	2000      	movs	r0, #0
100043e0:	2b7e      	cmp	r3, #126	; 0x7e
100043e2:	dd0d      	ble.n	10004400 <__aeabi_f2iz+0x2c>
100043e4:	2b9d      	cmp	r3, #157	; 0x9d
100043e6:	dc0c      	bgt.n	10004402 <__aeabi_f2iz+0x2e>
100043e8:	2080      	movs	r0, #128	; 0x80
100043ea:	0400      	lsls	r0, r0, #16
100043ec:	4301      	orrs	r1, r0
100043ee:	2b95      	cmp	r3, #149	; 0x95
100043f0:	dc0a      	bgt.n	10004408 <__aeabi_f2iz+0x34>
100043f2:	2096      	movs	r0, #150	; 0x96
100043f4:	1ac3      	subs	r3, r0, r3
100043f6:	40d9      	lsrs	r1, r3
100043f8:	4248      	negs	r0, r1
100043fa:	2a00      	cmp	r2, #0
100043fc:	d100      	bne.n	10004400 <__aeabi_f2iz+0x2c>
100043fe:	1c08      	adds	r0, r1, #0
10004400:	4770      	bx	lr
10004402:	4903      	ldr	r1, [pc, #12]	; (10004410 <__aeabi_f2iz+0x3c>)
10004404:	1850      	adds	r0, r2, r1
10004406:	e7fb      	b.n	10004400 <__aeabi_f2iz+0x2c>
10004408:	3b96      	subs	r3, #150	; 0x96
1000440a:	4099      	lsls	r1, r3
1000440c:	e7f4      	b.n	100043f8 <__aeabi_f2iz+0x24>
1000440e:	46c0      	nop			; (mov r8, r8)
10004410:	7fffffff 	.word	0x7fffffff

10004414 <__aeabi_ui2f>:
10004414:	b510      	push	{r4, lr}
10004416:	1e04      	subs	r4, r0, #0
10004418:	d034      	beq.n	10004484 <__aeabi_ui2f+0x70>
1000441a:	f001 ff51 	bl	100062c0 <__clzsi2>
1000441e:	239e      	movs	r3, #158	; 0x9e
10004420:	1a1b      	subs	r3, r3, r0
10004422:	2b96      	cmp	r3, #150	; 0x96
10004424:	dc07      	bgt.n	10004436 <__aeabi_ui2f+0x22>
10004426:	3808      	subs	r0, #8
10004428:	4084      	lsls	r4, r0
1000442a:	0264      	lsls	r4, r4, #9
1000442c:	0a61      	lsrs	r1, r4, #9
1000442e:	b2db      	uxtb	r3, r3
10004430:	05d8      	lsls	r0, r3, #23
10004432:	4308      	orrs	r0, r1
10004434:	bd10      	pop	{r4, pc}
10004436:	2b99      	cmp	r3, #153	; 0x99
10004438:	dd0a      	ble.n	10004450 <__aeabi_ui2f+0x3c>
1000443a:	1c02      	adds	r2, r0, #0
1000443c:	321b      	adds	r2, #27
1000443e:	1c21      	adds	r1, r4, #0
10004440:	4091      	lsls	r1, r2
10004442:	1c0a      	adds	r2, r1, #0
10004444:	1e51      	subs	r1, r2, #1
10004446:	418a      	sbcs	r2, r1
10004448:	2105      	movs	r1, #5
1000444a:	1a09      	subs	r1, r1, r0
1000444c:	40cc      	lsrs	r4, r1
1000444e:	4314      	orrs	r4, r2
10004450:	2805      	cmp	r0, #5
10004452:	dc1a      	bgt.n	1000448a <__aeabi_ui2f+0x76>
10004454:	4a18      	ldr	r2, [pc, #96]	; (100044b8 <__aeabi_ui2f+0xa4>)
10004456:	210f      	movs	r1, #15
10004458:	4022      	ands	r2, r4
1000445a:	400c      	ands	r4, r1
1000445c:	2c04      	cmp	r4, #4
1000445e:	d000      	beq.n	10004462 <__aeabi_ui2f+0x4e>
10004460:	3204      	adds	r2, #4
10004462:	0151      	lsls	r1, r2, #5
10004464:	d505      	bpl.n	10004472 <__aeabi_ui2f+0x5e>
10004466:	249f      	movs	r4, #159	; 0x9f
10004468:	1a23      	subs	r3, r4, r0
1000446a:	2bff      	cmp	r3, #255	; 0xff
1000446c:	d021      	beq.n	100044b2 <__aeabi_ui2f+0x9e>
1000446e:	4812      	ldr	r0, [pc, #72]	; (100044b8 <__aeabi_ui2f+0xa4>)
10004470:	4002      	ands	r2, r0
10004472:	1c59      	adds	r1, r3, #1
10004474:	b2cc      	uxtb	r4, r1
10004476:	08d2      	lsrs	r2, r2, #3
10004478:	2c01      	cmp	r4, #1
1000447a:	dd09      	ble.n	10004490 <__aeabi_ui2f+0x7c>
1000447c:	0250      	lsls	r0, r2, #9
1000447e:	0a41      	lsrs	r1, r0, #9
10004480:	b2db      	uxtb	r3, r3
10004482:	e7d5      	b.n	10004430 <__aeabi_ui2f+0x1c>
10004484:	2300      	movs	r3, #0
10004486:	2100      	movs	r1, #0
10004488:	e7d2      	b.n	10004430 <__aeabi_ui2f+0x1c>
1000448a:	1f42      	subs	r2, r0, #5
1000448c:	4094      	lsls	r4, r2
1000448e:	e7e1      	b.n	10004454 <__aeabi_ui2f+0x40>
10004490:	2a00      	cmp	r2, #0
10004492:	d00b      	beq.n	100044ac <__aeabi_ui2f+0x98>
10004494:	2b00      	cmp	r3, #0
10004496:	d006      	beq.n	100044a6 <__aeabi_ui2f+0x92>
10004498:	2180      	movs	r1, #128	; 0x80
1000449a:	03cc      	lsls	r4, r1, #15
1000449c:	4322      	orrs	r2, r4
1000449e:	0252      	lsls	r2, r2, #9
100044a0:	0a51      	lsrs	r1, r2, #9
100044a2:	b2db      	uxtb	r3, r3
100044a4:	e7c4      	b.n	10004430 <__aeabi_ui2f+0x1c>
100044a6:	0250      	lsls	r0, r2, #9
100044a8:	0a41      	lsrs	r1, r0, #9
100044aa:	e7c1      	b.n	10004430 <__aeabi_ui2f+0x1c>
100044ac:	b2db      	uxtb	r3, r3
100044ae:	2100      	movs	r1, #0
100044b0:	e7be      	b.n	10004430 <__aeabi_ui2f+0x1c>
100044b2:	23ff      	movs	r3, #255	; 0xff
100044b4:	2100      	movs	r1, #0
100044b6:	e7bb      	b.n	10004430 <__aeabi_ui2f+0x1c>
100044b8:	fbffffff 	.word	0xfbffffff

100044bc <__aeabi_dadd>:
100044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100044be:	465f      	mov	r7, fp
100044c0:	4656      	mov	r6, sl
100044c2:	464d      	mov	r5, r9
100044c4:	4644      	mov	r4, r8
100044c6:	b4f0      	push	{r4, r5, r6, r7}
100044c8:	030c      	lsls	r4, r1, #12
100044ca:	0f46      	lsrs	r6, r0, #29
100044cc:	0a64      	lsrs	r4, r4, #9
100044ce:	4334      	orrs	r4, r6
100044d0:	46a3      	mov	fp, r4
100044d2:	005e      	lsls	r6, r3, #1
100044d4:	031c      	lsls	r4, r3, #12
100044d6:	0fdb      	lsrs	r3, r3, #31
100044d8:	469c      	mov	ip, r3
100044da:	0a63      	lsrs	r3, r4, #9
100044dc:	4698      	mov	r8, r3
100044de:	004d      	lsls	r5, r1, #1
100044e0:	0f53      	lsrs	r3, r2, #29
100044e2:	4644      	mov	r4, r8
100044e4:	431c      	orrs	r4, r3
100044e6:	0d6d      	lsrs	r5, r5, #21
100044e8:	0fc9      	lsrs	r1, r1, #31
100044ea:	0d76      	lsrs	r6, r6, #21
100044ec:	00d2      	lsls	r2, r2, #3
100044ee:	1c0f      	adds	r7, r1, #0
100044f0:	00c0      	lsls	r0, r0, #3
100044f2:	46a1      	mov	r9, r4
100044f4:	4692      	mov	sl, r2
100044f6:	1bab      	subs	r3, r5, r6
100044f8:	4561      	cmp	r1, ip
100044fa:	d100      	bne.n	100044fe <__aeabi_dadd+0x42>
100044fc:	e0a4      	b.n	10004648 <__aeabi_dadd+0x18c>
100044fe:	2b00      	cmp	r3, #0
10004500:	dc00      	bgt.n	10004504 <__aeabi_dadd+0x48>
10004502:	e0f5      	b.n	100046f0 <__aeabi_dadd+0x234>
10004504:	2e00      	cmp	r6, #0
10004506:	d10c      	bne.n	10004522 <__aeabi_dadd+0x66>
10004508:	1c26      	adds	r6, r4, #0
1000450a:	4316      	orrs	r6, r2
1000450c:	d100      	bne.n	10004510 <__aeabi_dadd+0x54>
1000450e:	e0c2      	b.n	10004696 <__aeabi_dadd+0x1da>
10004510:	3b01      	subs	r3, #1
10004512:	2b00      	cmp	r3, #0
10004514:	d000      	beq.n	10004518 <__aeabi_dadd+0x5c>
10004516:	e146      	b.n	100047a6 <__aeabi_dadd+0x2ea>
10004518:	465c      	mov	r4, fp
1000451a:	464b      	mov	r3, r9
1000451c:	1a82      	subs	r2, r0, r2
1000451e:	1ae7      	subs	r7, r4, r3
10004520:	e021      	b.n	10004566 <__aeabi_dadd+0xaa>
10004522:	4ed2      	ldr	r6, [pc, #840]	; (1000486c <__aeabi_dadd+0x3b0>)
10004524:	42b5      	cmp	r5, r6
10004526:	d100      	bne.n	1000452a <__aeabi_dadd+0x6e>
10004528:	e0cd      	b.n	100046c6 <__aeabi_dadd+0x20a>
1000452a:	2480      	movs	r4, #128	; 0x80
1000452c:	464a      	mov	r2, r9
1000452e:	0427      	lsls	r7, r4, #16
10004530:	433a      	orrs	r2, r7
10004532:	4691      	mov	r9, r2
10004534:	2b38      	cmp	r3, #56	; 0x38
10004536:	dd00      	ble.n	1000453a <__aeabi_dadd+0x7e>
10004538:	e10f      	b.n	1000475a <__aeabi_dadd+0x29e>
1000453a:	2b1f      	cmp	r3, #31
1000453c:	dd00      	ble.n	10004540 <__aeabi_dadd+0x84>
1000453e:	e150      	b.n	100047e2 <__aeabi_dadd+0x326>
10004540:	2620      	movs	r6, #32
10004542:	1af6      	subs	r6, r6, r3
10004544:	464c      	mov	r4, r9
10004546:	4652      	mov	r2, sl
10004548:	4657      	mov	r7, sl
1000454a:	40b4      	lsls	r4, r6
1000454c:	40b7      	lsls	r7, r6
1000454e:	40da      	lsrs	r2, r3
10004550:	4322      	orrs	r2, r4
10004552:	1c3e      	adds	r6, r7, #0
10004554:	464c      	mov	r4, r9
10004556:	1e77      	subs	r7, r6, #1
10004558:	41be      	sbcs	r6, r7
1000455a:	40dc      	lsrs	r4, r3
1000455c:	4332      	orrs	r2, r6
1000455e:	1c26      	adds	r6, r4, #0
10004560:	465b      	mov	r3, fp
10004562:	1a82      	subs	r2, r0, r2
10004564:	1b9f      	subs	r7, r3, r6
10004566:	4290      	cmp	r0, r2
10004568:	4180      	sbcs	r0, r0
1000456a:	4246      	negs	r6, r0
1000456c:	1bbb      	subs	r3, r7, r6
1000456e:	1c14      	adds	r4, r2, #0
10004570:	1c2e      	adds	r6, r5, #0
10004572:	1c0f      	adds	r7, r1, #0
10004574:	0218      	lsls	r0, r3, #8
10004576:	d400      	bmi.n	1000457a <__aeabi_dadd+0xbe>
10004578:	e0ae      	b.n	100046d8 <__aeabi_dadd+0x21c>
1000457a:	025d      	lsls	r5, r3, #9
1000457c:	0a69      	lsrs	r1, r5, #9
1000457e:	4688      	mov	r8, r1
10004580:	4642      	mov	r2, r8
10004582:	2a00      	cmp	r2, #0
10004584:	d100      	bne.n	10004588 <__aeabi_dadd+0xcc>
10004586:	e0d9      	b.n	1000473c <__aeabi_dadd+0x280>
10004588:	4640      	mov	r0, r8
1000458a:	f001 fe99 	bl	100062c0 <__clzsi2>
1000458e:	1c05      	adds	r5, r0, #0
10004590:	3d08      	subs	r5, #8
10004592:	2d1f      	cmp	r5, #31
10004594:	dd00      	ble.n	10004598 <__aeabi_dadd+0xdc>
10004596:	e0da      	b.n	1000474e <__aeabi_dadd+0x292>
10004598:	2228      	movs	r2, #40	; 0x28
1000459a:	1a13      	subs	r3, r2, r0
1000459c:	1c20      	adds	r0, r4, #0
1000459e:	4641      	mov	r1, r8
100045a0:	40d8      	lsrs	r0, r3
100045a2:	40a9      	lsls	r1, r5
100045a4:	1c03      	adds	r3, r0, #0
100045a6:	430b      	orrs	r3, r1
100045a8:	40ac      	lsls	r4, r5
100045aa:	42ae      	cmp	r6, r5
100045ac:	dd00      	ble.n	100045b0 <__aeabi_dadd+0xf4>
100045ae:	e090      	b.n	100046d2 <__aeabi_dadd+0x216>
100045b0:	1bae      	subs	r6, r5, r6
100045b2:	1c71      	adds	r1, r6, #1
100045b4:	291f      	cmp	r1, #31
100045b6:	dd00      	ble.n	100045ba <__aeabi_dadd+0xfe>
100045b8:	e100      	b.n	100047bc <__aeabi_dadd+0x300>
100045ba:	201f      	movs	r0, #31
100045bc:	1b85      	subs	r5, r0, r6
100045be:	1c1a      	adds	r2, r3, #0
100045c0:	1c20      	adds	r0, r4, #0
100045c2:	40aa      	lsls	r2, r5
100045c4:	40c8      	lsrs	r0, r1
100045c6:	40ac      	lsls	r4, r5
100045c8:	4310      	orrs	r0, r2
100045ca:	1e66      	subs	r6, r4, #1
100045cc:	41b4      	sbcs	r4, r6
100045ce:	4304      	orrs	r4, r0
100045d0:	40cb      	lsrs	r3, r1
100045d2:	2201      	movs	r2, #1
100045d4:	2600      	movs	r6, #0
100045d6:	200f      	movs	r0, #15
100045d8:	4020      	ands	r0, r4
100045da:	2804      	cmp	r0, #4
100045dc:	d064      	beq.n	100046a8 <__aeabi_dadd+0x1ec>
100045de:	1d20      	adds	r0, r4, #4
100045e0:	42a0      	cmp	r0, r4
100045e2:	41a4      	sbcs	r4, r4
100045e4:	4265      	negs	r5, r4
100045e6:	2180      	movs	r1, #128	; 0x80
100045e8:	195b      	adds	r3, r3, r5
100045ea:	2401      	movs	r4, #1
100045ec:	040d      	lsls	r5, r1, #16
100045ee:	401d      	ands	r5, r3
100045f0:	4027      	ands	r7, r4
100045f2:	2d00      	cmp	r5, #0
100045f4:	d007      	beq.n	10004606 <__aeabi_dadd+0x14a>
100045f6:	4e9d      	ldr	r6, [pc, #628]	; (1000486c <__aeabi_dadd+0x3b0>)
100045f8:	42b2      	cmp	r2, r6
100045fa:	d100      	bne.n	100045fe <__aeabi_dadd+0x142>
100045fc:	e09a      	b.n	10004734 <__aeabi_dadd+0x278>
100045fe:	499c      	ldr	r1, [pc, #624]	; (10004870 <__aeabi_dadd+0x3b4>)
10004600:	1c16      	adds	r6, r2, #0
10004602:	400b      	ands	r3, r1
10004604:	3201      	adds	r2, #1
10004606:	075c      	lsls	r4, r3, #29
10004608:	08c0      	lsrs	r0, r0, #3
1000460a:	0552      	lsls	r2, r2, #21
1000460c:	4304      	orrs	r4, r0
1000460e:	08db      	lsrs	r3, r3, #3
10004610:	0d55      	lsrs	r5, r2, #21
10004612:	2d01      	cmp	r5, #1
10004614:	dd62      	ble.n	100046dc <__aeabi_dadd+0x220>
10004616:	031b      	lsls	r3, r3, #12
10004618:	0576      	lsls	r6, r6, #21
1000461a:	0b1b      	lsrs	r3, r3, #12
1000461c:	0d76      	lsrs	r6, r6, #21
1000461e:	2000      	movs	r0, #0
10004620:	2100      	movs	r1, #0
10004622:	0d09      	lsrs	r1, r1, #20
10004624:	1c20      	adds	r0, r4, #0
10004626:	050a      	lsls	r2, r1, #20
10004628:	4c92      	ldr	r4, [pc, #584]	; (10004874 <__aeabi_dadd+0x3b8>)
1000462a:	4313      	orrs	r3, r2
1000462c:	0576      	lsls	r6, r6, #21
1000462e:	0875      	lsrs	r5, r6, #1
10004630:	401c      	ands	r4, r3
10004632:	432c      	orrs	r4, r5
10004634:	0063      	lsls	r3, r4, #1
10004636:	07ff      	lsls	r7, r7, #31
10004638:	0859      	lsrs	r1, r3, #1
1000463a:	4339      	orrs	r1, r7
1000463c:	bc3c      	pop	{r2, r3, r4, r5}
1000463e:	4690      	mov	r8, r2
10004640:	4699      	mov	r9, r3
10004642:	46a2      	mov	sl, r4
10004644:	46ab      	mov	fp, r5
10004646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10004648:	2b00      	cmp	r3, #0
1000464a:	dc00      	bgt.n	1000464e <__aeabi_dadd+0x192>
1000464c:	e091      	b.n	10004772 <__aeabi_dadd+0x2b6>
1000464e:	2e00      	cmp	r6, #0
10004650:	d031      	beq.n	100046b6 <__aeabi_dadd+0x1fa>
10004652:	4e86      	ldr	r6, [pc, #536]	; (1000486c <__aeabi_dadd+0x3b0>)
10004654:	42b5      	cmp	r5, r6
10004656:	d100      	bne.n	1000465a <__aeabi_dadd+0x19e>
10004658:	e0a9      	b.n	100047ae <__aeabi_dadd+0x2f2>
1000465a:	2480      	movs	r4, #128	; 0x80
1000465c:	464e      	mov	r6, r9
1000465e:	0422      	lsls	r2, r4, #16
10004660:	4316      	orrs	r6, r2
10004662:	46b1      	mov	r9, r6
10004664:	2b38      	cmp	r3, #56	; 0x38
10004666:	dd00      	ble.n	1000466a <__aeabi_dadd+0x1ae>
10004668:	e118      	b.n	1000489c <__aeabi_dadd+0x3e0>
1000466a:	2b1f      	cmp	r3, #31
1000466c:	dd00      	ble.n	10004670 <__aeabi_dadd+0x1b4>
1000466e:	e173      	b.n	10004958 <__aeabi_dadd+0x49c>
10004670:	2620      	movs	r6, #32
10004672:	1af6      	subs	r6, r6, r3
10004674:	464a      	mov	r2, r9
10004676:	40b2      	lsls	r2, r6
10004678:	4690      	mov	r8, r2
1000467a:	4652      	mov	r2, sl
1000467c:	4644      	mov	r4, r8
1000467e:	40da      	lsrs	r2, r3
10004680:	4322      	orrs	r2, r4
10004682:	4654      	mov	r4, sl
10004684:	40b4      	lsls	r4, r6
10004686:	1c26      	adds	r6, r4, #0
10004688:	1e74      	subs	r4, r6, #1
1000468a:	41a6      	sbcs	r6, r4
1000468c:	464c      	mov	r4, r9
1000468e:	4332      	orrs	r2, r6
10004690:	40dc      	lsrs	r4, r3
10004692:	1812      	adds	r2, r2, r0
10004694:	e0f6      	b.n	10004884 <__aeabi_dadd+0x3c8>
10004696:	1c04      	adds	r4, r0, #0
10004698:	200f      	movs	r0, #15
1000469a:	1c6a      	adds	r2, r5, #1
1000469c:	465b      	mov	r3, fp
1000469e:	1c2e      	adds	r6, r5, #0
100046a0:	1c0f      	adds	r7, r1, #0
100046a2:	4020      	ands	r0, r4
100046a4:	2804      	cmp	r0, #4
100046a6:	d19a      	bne.n	100045de <__aeabi_dadd+0x122>
100046a8:	2580      	movs	r5, #128	; 0x80
100046aa:	042d      	lsls	r5, r5, #16
100046ac:	2101      	movs	r1, #1
100046ae:	401d      	ands	r5, r3
100046b0:	400f      	ands	r7, r1
100046b2:	1c20      	adds	r0, r4, #0
100046b4:	e79d      	b.n	100045f2 <__aeabi_dadd+0x136>
100046b6:	4314      	orrs	r4, r2
100046b8:	d000      	beq.n	100046bc <__aeabi_dadd+0x200>
100046ba:	e0dd      	b.n	10004878 <__aeabi_dadd+0x3bc>
100046bc:	1c6a      	adds	r2, r5, #1
100046be:	465b      	mov	r3, fp
100046c0:	1c04      	adds	r4, r0, #0
100046c2:	1c2e      	adds	r6, r5, #0
100046c4:	e787      	b.n	100045d6 <__aeabi_dadd+0x11a>
100046c6:	2180      	movs	r1, #128	; 0x80
100046c8:	465b      	mov	r3, fp
100046ca:	1c04      	adds	r4, r0, #0
100046cc:	010a      	lsls	r2, r1, #4
100046ce:	1c2e      	adds	r6, r5, #0
100046d0:	e781      	b.n	100045d6 <__aeabi_dadd+0x11a>
100046d2:	1b76      	subs	r6, r6, r5
100046d4:	4d66      	ldr	r5, [pc, #408]	; (10004870 <__aeabi_dadd+0x3b4>)
100046d6:	402b      	ands	r3, r5
100046d8:	1c72      	adds	r2, r6, #1
100046da:	e77c      	b.n	100045d6 <__aeabi_dadd+0x11a>
100046dc:	1c21      	adds	r1, r4, #0
100046de:	4319      	orrs	r1, r3
100046e0:	d100      	bne.n	100046e4 <__aeabi_dadd+0x228>
100046e2:	e267      	b.n	10004bb4 <__aeabi_dadd+0x6f8>
100046e4:	2e00      	cmp	r6, #0
100046e6:	d041      	beq.n	1000476c <__aeabi_dadd+0x2b0>
100046e8:	2080      	movs	r0, #128	; 0x80
100046ea:	0302      	lsls	r2, r0, #12
100046ec:	4313      	orrs	r3, r2
100046ee:	e792      	b.n	10004616 <__aeabi_dadd+0x15a>
100046f0:	2b00      	cmp	r3, #0
100046f2:	d000      	beq.n	100046f6 <__aeabi_dadd+0x23a>
100046f4:	e088      	b.n	10004808 <__aeabi_dadd+0x34c>
100046f6:	1c69      	adds	r1, r5, #1
100046f8:	054e      	lsls	r6, r1, #21
100046fa:	0d74      	lsrs	r4, r6, #21
100046fc:	2c01      	cmp	r4, #1
100046fe:	dc00      	bgt.n	10004702 <__aeabi_dadd+0x246>
10004700:	e11a      	b.n	10004938 <__aeabi_dadd+0x47c>
10004702:	465b      	mov	r3, fp
10004704:	1c16      	adds	r6, r2, #0
10004706:	464c      	mov	r4, r9
10004708:	1a82      	subs	r2, r0, r2
1000470a:	1b19      	subs	r1, r3, r4
1000470c:	4290      	cmp	r0, r2
1000470e:	419b      	sbcs	r3, r3
10004710:	425b      	negs	r3, r3
10004712:	1ac9      	subs	r1, r1, r3
10004714:	4688      	mov	r8, r1
10004716:	020b      	lsls	r3, r1, #8
10004718:	d400      	bmi.n	1000471c <__aeabi_dadd+0x260>
1000471a:	e09e      	b.n	1000485a <__aeabi_dadd+0x39e>
1000471c:	1a37      	subs	r7, r6, r0
1000471e:	45ba      	cmp	sl, r7
10004720:	4192      	sbcs	r2, r2
10004722:	465e      	mov	r6, fp
10004724:	1ba4      	subs	r4, r4, r6
10004726:	4253      	negs	r3, r2
10004728:	1ae1      	subs	r1, r4, r3
1000472a:	4688      	mov	r8, r1
1000472c:	1c3c      	adds	r4, r7, #0
1000472e:	1c2e      	adds	r6, r5, #0
10004730:	4667      	mov	r7, ip
10004732:	e725      	b.n	10004580 <__aeabi_dadd+0xc4>
10004734:	1c16      	adds	r6, r2, #0
10004736:	2300      	movs	r3, #0
10004738:	2400      	movs	r4, #0
1000473a:	e770      	b.n	1000461e <__aeabi_dadd+0x162>
1000473c:	1c20      	adds	r0, r4, #0
1000473e:	f001 fdbf 	bl	100062c0 <__clzsi2>
10004742:	3020      	adds	r0, #32
10004744:	1c05      	adds	r5, r0, #0
10004746:	3d08      	subs	r5, #8
10004748:	2d1f      	cmp	r5, #31
1000474a:	dc00      	bgt.n	1000474e <__aeabi_dadd+0x292>
1000474c:	e724      	b.n	10004598 <__aeabi_dadd+0xdc>
1000474e:	1c03      	adds	r3, r0, #0
10004750:	3b28      	subs	r3, #40	; 0x28
10004752:	409c      	lsls	r4, r3
10004754:	1c23      	adds	r3, r4, #0
10004756:	2400      	movs	r4, #0
10004758:	e727      	b.n	100045aa <__aeabi_dadd+0xee>
1000475a:	464a      	mov	r2, r9
1000475c:	4653      	mov	r3, sl
1000475e:	431a      	orrs	r2, r3
10004760:	2600      	movs	r6, #0
10004762:	2a00      	cmp	r2, #0
10004764:	d100      	bne.n	10004768 <__aeabi_dadd+0x2ac>
10004766:	e6fb      	b.n	10004560 <__aeabi_dadd+0xa4>
10004768:	2201      	movs	r2, #1
1000476a:	e6f9      	b.n	10004560 <__aeabi_dadd+0xa4>
1000476c:	031d      	lsls	r5, r3, #12
1000476e:	0b2b      	lsrs	r3, r5, #12
10004770:	e755      	b.n	1000461e <__aeabi_dadd+0x162>
10004772:	2b00      	cmp	r3, #0
10004774:	d000      	beq.n	10004778 <__aeabi_dadd+0x2bc>
10004776:	e104      	b.n	10004982 <__aeabi_dadd+0x4c6>
10004778:	1c6e      	adds	r6, r5, #1
1000477a:	0574      	lsls	r4, r6, #21
1000477c:	0d63      	lsrs	r3, r4, #21
1000477e:	2b01      	cmp	r3, #1
10004780:	dc00      	bgt.n	10004784 <__aeabi_dadd+0x2c8>
10004782:	e0aa      	b.n	100048da <__aeabi_dadd+0x41e>
10004784:	4939      	ldr	r1, [pc, #228]	; (1000486c <__aeabi_dadd+0x3b0>)
10004786:	428e      	cmp	r6, r1
10004788:	d100      	bne.n	1000478c <__aeabi_dadd+0x2d0>
1000478a:	e130      	b.n	100049ee <__aeabi_dadd+0x532>
1000478c:	1811      	adds	r1, r2, r0
1000478e:	4281      	cmp	r1, r0
10004790:	4180      	sbcs	r0, r0
10004792:	464b      	mov	r3, r9
10004794:	4242      	negs	r2, r0
10004796:	445b      	add	r3, fp
10004798:	189b      	adds	r3, r3, r2
1000479a:	07dc      	lsls	r4, r3, #31
1000479c:	0849      	lsrs	r1, r1, #1
1000479e:	430c      	orrs	r4, r1
100047a0:	085b      	lsrs	r3, r3, #1
100047a2:	1caa      	adds	r2, r5, #2
100047a4:	e717      	b.n	100045d6 <__aeabi_dadd+0x11a>
100047a6:	4f31      	ldr	r7, [pc, #196]	; (1000486c <__aeabi_dadd+0x3b0>)
100047a8:	42bd      	cmp	r5, r7
100047aa:	d000      	beq.n	100047ae <__aeabi_dadd+0x2f2>
100047ac:	e6c2      	b.n	10004534 <__aeabi_dadd+0x78>
100047ae:	1c04      	adds	r4, r0, #0
100047b0:	2080      	movs	r0, #128	; 0x80
100047b2:	465b      	mov	r3, fp
100047b4:	1c0f      	adds	r7, r1, #0
100047b6:	0102      	lsls	r2, r0, #4
100047b8:	1c2e      	adds	r6, r5, #0
100047ba:	e70c      	b.n	100045d6 <__aeabi_dadd+0x11a>
100047bc:	1c30      	adds	r0, r6, #0
100047be:	381f      	subs	r0, #31
100047c0:	1c1a      	adds	r2, r3, #0
100047c2:	40c2      	lsrs	r2, r0
100047c4:	1c15      	adds	r5, r2, #0
100047c6:	2920      	cmp	r1, #32
100047c8:	d100      	bne.n	100047cc <__aeabi_dadd+0x310>
100047ca:	e082      	b.n	100048d2 <__aeabi_dadd+0x416>
100047cc:	213f      	movs	r1, #63	; 0x3f
100047ce:	1b8e      	subs	r6, r1, r6
100047d0:	40b3      	lsls	r3, r6
100047d2:	431c      	orrs	r4, r3
100047d4:	1e63      	subs	r3, r4, #1
100047d6:	419c      	sbcs	r4, r3
100047d8:	432c      	orrs	r4, r5
100047da:	2201      	movs	r2, #1
100047dc:	2300      	movs	r3, #0
100047de:	2600      	movs	r6, #0
100047e0:	e6f9      	b.n	100045d6 <__aeabi_dadd+0x11a>
100047e2:	1c1c      	adds	r4, r3, #0
100047e4:	3c20      	subs	r4, #32
100047e6:	464f      	mov	r7, r9
100047e8:	40e7      	lsrs	r7, r4
100047ea:	1c3e      	adds	r6, r7, #0
100047ec:	2b20      	cmp	r3, #32
100047ee:	d072      	beq.n	100048d6 <__aeabi_dadd+0x41a>
100047f0:	2240      	movs	r2, #64	; 0x40
100047f2:	1ad4      	subs	r4, r2, r3
100047f4:	464b      	mov	r3, r9
100047f6:	40a3      	lsls	r3, r4
100047f8:	1c1a      	adds	r2, r3, #0
100047fa:	4657      	mov	r7, sl
100047fc:	433a      	orrs	r2, r7
100047fe:	1e53      	subs	r3, r2, #1
10004800:	419a      	sbcs	r2, r3
10004802:	4332      	orrs	r2, r6
10004804:	2600      	movs	r6, #0
10004806:	e6ab      	b.n	10004560 <__aeabi_dadd+0xa4>
10004808:	425f      	negs	r7, r3
1000480a:	2d00      	cmp	r5, #0
1000480c:	d050      	beq.n	100048b0 <__aeabi_dadd+0x3f4>
1000480e:	4d17      	ldr	r5, [pc, #92]	; (1000486c <__aeabi_dadd+0x3b0>)
10004810:	42ae      	cmp	r6, r5
10004812:	d100      	bne.n	10004816 <__aeabi_dadd+0x35a>
10004814:	e155      	b.n	10004ac2 <__aeabi_dadd+0x606>
10004816:	2480      	movs	r4, #128	; 0x80
10004818:	465a      	mov	r2, fp
1000481a:	0421      	lsls	r1, r4, #16
1000481c:	430a      	orrs	r2, r1
1000481e:	4693      	mov	fp, r2
10004820:	2f38      	cmp	r7, #56	; 0x38
10004822:	dd00      	ble.n	10004826 <__aeabi_dadd+0x36a>
10004824:	e0da      	b.n	100049dc <__aeabi_dadd+0x520>
10004826:	2f1f      	cmp	r7, #31
10004828:	dd00      	ble.n	1000482c <__aeabi_dadd+0x370>
1000482a:	e178      	b.n	10004b1e <__aeabi_dadd+0x662>
1000482c:	2120      	movs	r1, #32
1000482e:	1bcc      	subs	r4, r1, r7
10004830:	1c05      	adds	r5, r0, #0
10004832:	465a      	mov	r2, fp
10004834:	40a2      	lsls	r2, r4
10004836:	40fd      	lsrs	r5, r7
10004838:	40a0      	lsls	r0, r4
1000483a:	4315      	orrs	r5, r2
1000483c:	465b      	mov	r3, fp
1000483e:	1e42      	subs	r2, r0, #1
10004840:	4190      	sbcs	r0, r2
10004842:	4328      	orrs	r0, r5
10004844:	40fb      	lsrs	r3, r7
10004846:	4657      	mov	r7, sl
10004848:	1a3c      	subs	r4, r7, r0
1000484a:	45a2      	cmp	sl, r4
1000484c:	4192      	sbcs	r2, r2
1000484e:	4648      	mov	r0, r9
10004850:	1ac1      	subs	r1, r0, r3
10004852:	4255      	negs	r5, r2
10004854:	1b4b      	subs	r3, r1, r5
10004856:	4667      	mov	r7, ip
10004858:	e68c      	b.n	10004574 <__aeabi_dadd+0xb8>
1000485a:	1c08      	adds	r0, r1, #0
1000485c:	4310      	orrs	r0, r2
1000485e:	d130      	bne.n	100048c2 <__aeabi_dadd+0x406>
10004860:	2700      	movs	r7, #0
10004862:	2201      	movs	r2, #1
10004864:	2300      	movs	r3, #0
10004866:	2004      	movs	r0, #4
10004868:	2600      	movs	r6, #0
1000486a:	e6cc      	b.n	10004606 <__aeabi_dadd+0x14a>
1000486c:	000007ff 	.word	0x000007ff
10004870:	ff7fffff 	.word	0xff7fffff
10004874:	800fffff 	.word	0x800fffff
10004878:	3b01      	subs	r3, #1
1000487a:	2b00      	cmp	r3, #0
1000487c:	d124      	bne.n	100048c8 <__aeabi_dadd+0x40c>
1000487e:	4653      	mov	r3, sl
10004880:	181a      	adds	r2, r3, r0
10004882:	464c      	mov	r4, r9
10004884:	4282      	cmp	r2, r0
10004886:	4180      	sbcs	r0, r0
10004888:	445c      	add	r4, fp
1000488a:	4243      	negs	r3, r0
1000488c:	18e3      	adds	r3, r4, r3
1000488e:	1c2e      	adds	r6, r5, #0
10004890:	1c14      	adds	r4, r2, #0
10004892:	0218      	lsls	r0, r3, #8
10004894:	d43e      	bmi.n	10004914 <__aeabi_dadd+0x458>
10004896:	1c72      	adds	r2, r6, #1
10004898:	1c0f      	adds	r7, r1, #0
1000489a:	e69c      	b.n	100045d6 <__aeabi_dadd+0x11a>
1000489c:	464a      	mov	r2, r9
1000489e:	4653      	mov	r3, sl
100048a0:	431a      	orrs	r2, r3
100048a2:	2400      	movs	r4, #0
100048a4:	2a00      	cmp	r2, #0
100048a6:	d100      	bne.n	100048aa <__aeabi_dadd+0x3ee>
100048a8:	e6f3      	b.n	10004692 <__aeabi_dadd+0x1d6>
100048aa:	2201      	movs	r2, #1
100048ac:	1812      	adds	r2, r2, r0
100048ae:	e7e9      	b.n	10004884 <__aeabi_dadd+0x3c8>
100048b0:	465b      	mov	r3, fp
100048b2:	4303      	orrs	r3, r0
100048b4:	d000      	beq.n	100048b8 <__aeabi_dadd+0x3fc>
100048b6:	e083      	b.n	100049c0 <__aeabi_dadd+0x504>
100048b8:	1c23      	adds	r3, r4, #0
100048ba:	1c72      	adds	r2, r6, #1
100048bc:	4654      	mov	r4, sl
100048be:	4667      	mov	r7, ip
100048c0:	e689      	b.n	100045d6 <__aeabi_dadd+0x11a>
100048c2:	1c14      	adds	r4, r2, #0
100048c4:	1c2e      	adds	r6, r5, #0
100048c6:	e65b      	b.n	10004580 <__aeabi_dadd+0xc4>
100048c8:	4ecd      	ldr	r6, [pc, #820]	; (10004c00 <__aeabi_dadd+0x744>)
100048ca:	42b5      	cmp	r5, r6
100048cc:	d000      	beq.n	100048d0 <__aeabi_dadd+0x414>
100048ce:	e6c9      	b.n	10004664 <__aeabi_dadd+0x1a8>
100048d0:	e76d      	b.n	100047ae <__aeabi_dadd+0x2f2>
100048d2:	2300      	movs	r3, #0
100048d4:	e77d      	b.n	100047d2 <__aeabi_dadd+0x316>
100048d6:	2200      	movs	r2, #0
100048d8:	e78f      	b.n	100047fa <__aeabi_dadd+0x33e>
100048da:	465e      	mov	r6, fp
100048dc:	4306      	orrs	r6, r0
100048de:	2d00      	cmp	r5, #0
100048e0:	d000      	beq.n	100048e4 <__aeabi_dadd+0x428>
100048e2:	e0f4      	b.n	10004ace <__aeabi_dadd+0x612>
100048e4:	2e00      	cmp	r6, #0
100048e6:	d100      	bne.n	100048ea <__aeabi_dadd+0x42e>
100048e8:	e14c      	b.n	10004b84 <__aeabi_dadd+0x6c8>
100048ea:	464b      	mov	r3, r9
100048ec:	4313      	orrs	r3, r2
100048ee:	d100      	bne.n	100048f2 <__aeabi_dadd+0x436>
100048f0:	e17e      	b.n	10004bf0 <__aeabi_dadd+0x734>
100048f2:	1815      	adds	r5, r2, r0
100048f4:	464e      	mov	r6, r9
100048f6:	4285      	cmp	r5, r0
100048f8:	4180      	sbcs	r0, r0
100048fa:	445e      	add	r6, fp
100048fc:	4242      	negs	r2, r0
100048fe:	18b3      	adds	r3, r6, r2
10004900:	021e      	lsls	r6, r3, #8
10004902:	d400      	bmi.n	10004906 <__aeabi_dadd+0x44a>
10004904:	e182      	b.n	10004c0c <__aeabi_dadd+0x750>
10004906:	4fbf      	ldr	r7, [pc, #764]	; (10004c04 <__aeabi_dadd+0x748>)
10004908:	1c2c      	adds	r4, r5, #0
1000490a:	403b      	ands	r3, r7
1000490c:	2202      	movs	r2, #2
1000490e:	1c0f      	adds	r7, r1, #0
10004910:	2601      	movs	r6, #1
10004912:	e660      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004914:	4dba      	ldr	r5, [pc, #744]	; (10004c00 <__aeabi_dadd+0x744>)
10004916:	1c70      	adds	r0, r6, #1
10004918:	42a8      	cmp	r0, r5
1000491a:	d04b      	beq.n	100049b4 <__aeabi_dadd+0x4f8>
1000491c:	4fb9      	ldr	r7, [pc, #740]	; (10004c04 <__aeabi_dadd+0x748>)
1000491e:	2501      	movs	r5, #1
10004920:	4025      	ands	r5, r4
10004922:	0862      	lsrs	r2, r4, #1
10004924:	403b      	ands	r3, r7
10004926:	1c2c      	adds	r4, r5, #0
10004928:	07df      	lsls	r7, r3, #31
1000492a:	4314      	orrs	r4, r2
1000492c:	433c      	orrs	r4, r7
1000492e:	1cb2      	adds	r2, r6, #2
10004930:	085b      	lsrs	r3, r3, #1
10004932:	1c06      	adds	r6, r0, #0
10004934:	1c0f      	adds	r7, r1, #0
10004936:	e64e      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004938:	465e      	mov	r6, fp
1000493a:	4306      	orrs	r6, r0
1000493c:	2d00      	cmp	r5, #0
1000493e:	d12c      	bne.n	1000499a <__aeabi_dadd+0x4de>
10004940:	2e00      	cmp	r6, #0
10004942:	d000      	beq.n	10004946 <__aeabi_dadd+0x48a>
10004944:	e07d      	b.n	10004a42 <__aeabi_dadd+0x586>
10004946:	464e      	mov	r6, r9
10004948:	1c14      	adds	r4, r2, #0
1000494a:	4316      	orrs	r6, r2
1000494c:	d088      	beq.n	10004860 <__aeabi_dadd+0x3a4>
1000494e:	464b      	mov	r3, r9
10004950:	4667      	mov	r7, ip
10004952:	2201      	movs	r2, #1
10004954:	2600      	movs	r6, #0
10004956:	e63e      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004958:	1c1e      	adds	r6, r3, #0
1000495a:	3e20      	subs	r6, #32
1000495c:	464c      	mov	r4, r9
1000495e:	40f4      	lsrs	r4, r6
10004960:	1c26      	adds	r6, r4, #0
10004962:	2b20      	cmp	r3, #32
10004964:	d100      	bne.n	10004968 <__aeabi_dadd+0x4ac>
10004966:	e0d8      	b.n	10004b1a <__aeabi_dadd+0x65e>
10004968:	2240      	movs	r2, #64	; 0x40
1000496a:	1ad4      	subs	r4, r2, r3
1000496c:	464b      	mov	r3, r9
1000496e:	40a3      	lsls	r3, r4
10004970:	1c1a      	adds	r2, r3, #0
10004972:	4654      	mov	r4, sl
10004974:	4322      	orrs	r2, r4
10004976:	1e53      	subs	r3, r2, #1
10004978:	419a      	sbcs	r2, r3
1000497a:	4332      	orrs	r2, r6
1000497c:	2400      	movs	r4, #0
1000497e:	1812      	adds	r2, r2, r0
10004980:	e780      	b.n	10004884 <__aeabi_dadd+0x3c8>
10004982:	425b      	negs	r3, r3
10004984:	2d00      	cmp	r5, #0
10004986:	d137      	bne.n	100049f8 <__aeabi_dadd+0x53c>
10004988:	465c      	mov	r4, fp
1000498a:	4304      	orrs	r4, r0
1000498c:	d000      	beq.n	10004990 <__aeabi_dadd+0x4d4>
1000498e:	e0d7      	b.n	10004b40 <__aeabi_dadd+0x684>
10004990:	1c72      	adds	r2, r6, #1
10004992:	464b      	mov	r3, r9
10004994:	4654      	mov	r4, sl
10004996:	1c0f      	adds	r7, r1, #0
10004998:	e61d      	b.n	100045d6 <__aeabi_dadd+0x11a>
1000499a:	2e00      	cmp	r6, #0
1000499c:	d16e      	bne.n	10004a7c <__aeabi_dadd+0x5c0>
1000499e:	464b      	mov	r3, r9
100049a0:	1c14      	adds	r4, r2, #0
100049a2:	4313      	orrs	r3, r2
100049a4:	d100      	bne.n	100049a8 <__aeabi_dadd+0x4ec>
100049a6:	e0dc      	b.n	10004b62 <__aeabi_dadd+0x6a6>
100049a8:	2580      	movs	r5, #128	; 0x80
100049aa:	464b      	mov	r3, r9
100049ac:	4667      	mov	r7, ip
100049ae:	012a      	lsls	r2, r5, #4
100049b0:	4e93      	ldr	r6, [pc, #588]	; (10004c00 <__aeabi_dadd+0x744>)
100049b2:	e610      	b.n	100045d6 <__aeabi_dadd+0x11a>
100049b4:	2180      	movs	r1, #128	; 0x80
100049b6:	1c06      	adds	r6, r0, #0
100049b8:	010a      	lsls	r2, r1, #4
100049ba:	2300      	movs	r3, #0
100049bc:	2004      	movs	r0, #4
100049be:	e622      	b.n	10004606 <__aeabi_dadd+0x14a>
100049c0:	3f01      	subs	r7, #1
100049c2:	2f00      	cmp	r7, #0
100049c4:	d179      	bne.n	10004aba <__aeabi_dadd+0x5fe>
100049c6:	1a17      	subs	r7, r2, r0
100049c8:	465b      	mov	r3, fp
100049ca:	45ba      	cmp	sl, r7
100049cc:	41ad      	sbcs	r5, r5
100049ce:	4649      	mov	r1, r9
100049d0:	1aca      	subs	r2, r1, r3
100049d2:	4268      	negs	r0, r5
100049d4:	1c3c      	adds	r4, r7, #0
100049d6:	1a13      	subs	r3, r2, r0
100049d8:	4667      	mov	r7, ip
100049da:	e5cb      	b.n	10004574 <__aeabi_dadd+0xb8>
100049dc:	465f      	mov	r7, fp
100049de:	4307      	orrs	r7, r0
100049e0:	2300      	movs	r3, #0
100049e2:	2000      	movs	r0, #0
100049e4:	2f00      	cmp	r7, #0
100049e6:	d100      	bne.n	100049ea <__aeabi_dadd+0x52e>
100049e8:	e72d      	b.n	10004846 <__aeabi_dadd+0x38a>
100049ea:	2001      	movs	r0, #1
100049ec:	e72b      	b.n	10004846 <__aeabi_dadd+0x38a>
100049ee:	2580      	movs	r5, #128	; 0x80
100049f0:	012a      	lsls	r2, r5, #4
100049f2:	2300      	movs	r3, #0
100049f4:	2004      	movs	r0, #4
100049f6:	e606      	b.n	10004606 <__aeabi_dadd+0x14a>
100049f8:	4d81      	ldr	r5, [pc, #516]	; (10004c00 <__aeabi_dadd+0x744>)
100049fa:	42ae      	cmp	r6, r5
100049fc:	d100      	bne.n	10004a00 <__aeabi_dadd+0x544>
100049fe:	e0d3      	b.n	10004ba8 <__aeabi_dadd+0x6ec>
10004a00:	2480      	movs	r4, #128	; 0x80
10004a02:	465d      	mov	r5, fp
10004a04:	0422      	lsls	r2, r4, #16
10004a06:	4315      	orrs	r5, r2
10004a08:	46ab      	mov	fp, r5
10004a0a:	2b38      	cmp	r3, #56	; 0x38
10004a0c:	dd00      	ble.n	10004a10 <__aeabi_dadd+0x554>
10004a0e:	e0b0      	b.n	10004b72 <__aeabi_dadd+0x6b6>
10004a10:	2b1f      	cmp	r3, #31
10004a12:	dd00      	ble.n	10004a16 <__aeabi_dadd+0x55a>
10004a14:	e0db      	b.n	10004bce <__aeabi_dadd+0x712>
10004a16:	2520      	movs	r5, #32
10004a18:	1aed      	subs	r5, r5, r3
10004a1a:	1c02      	adds	r2, r0, #0
10004a1c:	465c      	mov	r4, fp
10004a1e:	40ac      	lsls	r4, r5
10004a20:	40da      	lsrs	r2, r3
10004a22:	40a8      	lsls	r0, r5
10004a24:	1e45      	subs	r5, r0, #1
10004a26:	41a8      	sbcs	r0, r5
10004a28:	4322      	orrs	r2, r4
10004a2a:	4302      	orrs	r2, r0
10004a2c:	4658      	mov	r0, fp
10004a2e:	40d8      	lsrs	r0, r3
10004a30:	1c03      	adds	r3, r0, #0
10004a32:	4655      	mov	r5, sl
10004a34:	1954      	adds	r4, r2, r5
10004a36:	4554      	cmp	r4, sl
10004a38:	4192      	sbcs	r2, r2
10004a3a:	444b      	add	r3, r9
10004a3c:	4250      	negs	r0, r2
10004a3e:	181b      	adds	r3, r3, r0
10004a40:	e727      	b.n	10004892 <__aeabi_dadd+0x3d6>
10004a42:	464a      	mov	r2, r9
10004a44:	4656      	mov	r6, sl
10004a46:	4332      	orrs	r2, r6
10004a48:	d100      	bne.n	10004a4c <__aeabi_dadd+0x590>
10004a4a:	e085      	b.n	10004b58 <__aeabi_dadd+0x69c>
10004a4c:	1b85      	subs	r5, r0, r6
10004a4e:	465b      	mov	r3, fp
10004a50:	464c      	mov	r4, r9
10004a52:	42a8      	cmp	r0, r5
10004a54:	4192      	sbcs	r2, r2
10004a56:	1b19      	subs	r1, r3, r4
10004a58:	4256      	negs	r6, r2
10004a5a:	1b8b      	subs	r3, r1, r6
10004a5c:	021e      	lsls	r6, r3, #8
10004a5e:	d400      	bmi.n	10004a62 <__aeabi_dadd+0x5a6>
10004a60:	e0ad      	b.n	10004bbe <__aeabi_dadd+0x702>
10004a62:	4657      	mov	r7, sl
10004a64:	1a3d      	subs	r5, r7, r0
10004a66:	465b      	mov	r3, fp
10004a68:	45aa      	cmp	sl, r5
10004a6a:	4189      	sbcs	r1, r1
10004a6c:	1ae4      	subs	r4, r4, r3
10004a6e:	424a      	negs	r2, r1
10004a70:	1aa3      	subs	r3, r4, r2
10004a72:	4667      	mov	r7, ip
10004a74:	1c2c      	adds	r4, r5, #0
10004a76:	2201      	movs	r2, #1
10004a78:	2600      	movs	r6, #0
10004a7a:	e5ac      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004a7c:	464d      	mov	r5, r9
10004a7e:	1c16      	adds	r6, r2, #0
10004a80:	4315      	orrs	r5, r2
10004a82:	d044      	beq.n	10004b0e <__aeabi_dadd+0x652>
10004a84:	465c      	mov	r4, fp
10004a86:	2180      	movs	r1, #128	; 0x80
10004a88:	08c0      	lsrs	r0, r0, #3
10004a8a:	0762      	lsls	r2, r4, #29
10004a8c:	08e3      	lsrs	r3, r4, #3
10004a8e:	030d      	lsls	r5, r1, #12
10004a90:	4310      	orrs	r0, r2
10004a92:	422b      	tst	r3, r5
10004a94:	d100      	bne.n	10004a98 <__aeabi_dadd+0x5dc>
10004a96:	e081      	b.n	10004b9c <__aeabi_dadd+0x6e0>
10004a98:	464c      	mov	r4, r9
10004a9a:	08e1      	lsrs	r1, r4, #3
10004a9c:	4229      	tst	r1, r5
10004a9e:	d17d      	bne.n	10004b9c <__aeabi_dadd+0x6e0>
10004aa0:	08f7      	lsrs	r7, r6, #3
10004aa2:	0766      	lsls	r6, r4, #29
10004aa4:	433e      	orrs	r6, r7
10004aa6:	1c0b      	adds	r3, r1, #0
10004aa8:	4667      	mov	r7, ip
10004aaa:	0f70      	lsrs	r0, r6, #29
10004aac:	00db      	lsls	r3, r3, #3
10004aae:	2280      	movs	r2, #128	; 0x80
10004ab0:	00f4      	lsls	r4, r6, #3
10004ab2:	4303      	orrs	r3, r0
10004ab4:	0112      	lsls	r2, r2, #4
10004ab6:	4e52      	ldr	r6, [pc, #328]	; (10004c00 <__aeabi_dadd+0x744>)
10004ab8:	e58d      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004aba:	4d51      	ldr	r5, [pc, #324]	; (10004c00 <__aeabi_dadd+0x744>)
10004abc:	42ae      	cmp	r6, r5
10004abe:	d000      	beq.n	10004ac2 <__aeabi_dadd+0x606>
10004ac0:	e6ae      	b.n	10004820 <__aeabi_dadd+0x364>
10004ac2:	2080      	movs	r0, #128	; 0x80
10004ac4:	464b      	mov	r3, r9
10004ac6:	4654      	mov	r4, sl
10004ac8:	4667      	mov	r7, ip
10004aca:	0102      	lsls	r2, r0, #4
10004acc:	e583      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004ace:	2e00      	cmp	r6, #0
10004ad0:	d05e      	beq.n	10004b90 <__aeabi_dadd+0x6d4>
10004ad2:	464c      	mov	r4, r9
10004ad4:	4314      	orrs	r4, r2
10004ad6:	d01a      	beq.n	10004b0e <__aeabi_dadd+0x652>
10004ad8:	08c7      	lsrs	r7, r0, #3
10004ada:	2580      	movs	r5, #128	; 0x80
10004adc:	4658      	mov	r0, fp
10004ade:	0743      	lsls	r3, r0, #29
10004ae0:	032c      	lsls	r4, r5, #12
10004ae2:	08c0      	lsrs	r0, r0, #3
10004ae4:	431f      	orrs	r7, r3
10004ae6:	4220      	tst	r0, r4
10004ae8:	d008      	beq.n	10004afc <__aeabi_dadd+0x640>
10004aea:	464e      	mov	r6, r9
10004aec:	08f3      	lsrs	r3, r6, #3
10004aee:	4223      	tst	r3, r4
10004af0:	d104      	bne.n	10004afc <__aeabi_dadd+0x640>
10004af2:	4652      	mov	r2, sl
10004af4:	08d5      	lsrs	r5, r2, #3
10004af6:	0777      	lsls	r7, r6, #29
10004af8:	1c18      	adds	r0, r3, #0
10004afa:	432f      	orrs	r7, r5
10004afc:	00c3      	lsls	r3, r0, #3
10004afe:	00fc      	lsls	r4, r7, #3
10004b00:	0f78      	lsrs	r0, r7, #29
10004b02:	1c0f      	adds	r7, r1, #0
10004b04:	2180      	movs	r1, #128	; 0x80
10004b06:	4303      	orrs	r3, r0
10004b08:	010a      	lsls	r2, r1, #4
10004b0a:	4e3d      	ldr	r6, [pc, #244]	; (10004c00 <__aeabi_dadd+0x744>)
10004b0c:	e563      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004b0e:	2680      	movs	r6, #128	; 0x80
10004b10:	0132      	lsls	r2, r6, #4
10004b12:	465b      	mov	r3, fp
10004b14:	1c04      	adds	r4, r0, #0
10004b16:	4e3a      	ldr	r6, [pc, #232]	; (10004c00 <__aeabi_dadd+0x744>)
10004b18:	e55d      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004b1a:	2200      	movs	r2, #0
10004b1c:	e729      	b.n	10004972 <__aeabi_dadd+0x4b6>
10004b1e:	1c39      	adds	r1, r7, #0
10004b20:	3920      	subs	r1, #32
10004b22:	465c      	mov	r4, fp
10004b24:	40cc      	lsrs	r4, r1
10004b26:	1c22      	adds	r2, r4, #0
10004b28:	2f20      	cmp	r7, #32
10004b2a:	d067      	beq.n	10004bfc <__aeabi_dadd+0x740>
10004b2c:	2340      	movs	r3, #64	; 0x40
10004b2e:	1bdf      	subs	r7, r3, r7
10004b30:	465d      	mov	r5, fp
10004b32:	40bd      	lsls	r5, r7
10004b34:	4328      	orrs	r0, r5
10004b36:	1e43      	subs	r3, r0, #1
10004b38:	4198      	sbcs	r0, r3
10004b3a:	4310      	orrs	r0, r2
10004b3c:	2300      	movs	r3, #0
10004b3e:	e682      	b.n	10004846 <__aeabi_dadd+0x38a>
10004b40:	3b01      	subs	r3, #1
10004b42:	2b00      	cmp	r3, #0
10004b44:	d12c      	bne.n	10004ba0 <__aeabi_dadd+0x6e4>
10004b46:	4450      	add	r0, sl
10004b48:	465c      	mov	r4, fp
10004b4a:	4290      	cmp	r0, r2
10004b4c:	41ad      	sbcs	r5, r5
10004b4e:	444c      	add	r4, r9
10004b50:	426a      	negs	r2, r5
10004b52:	18a3      	adds	r3, r4, r2
10004b54:	1c04      	adds	r4, r0, #0
10004b56:	e69c      	b.n	10004892 <__aeabi_dadd+0x3d6>
10004b58:	465b      	mov	r3, fp
10004b5a:	1c04      	adds	r4, r0, #0
10004b5c:	2201      	movs	r2, #1
10004b5e:	2600      	movs	r6, #0
10004b60:	e539      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004b62:	2480      	movs	r4, #128	; 0x80
10004b64:	2104      	movs	r1, #4
10004b66:	2700      	movs	r7, #0
10004b68:	0122      	lsls	r2, r4, #4
10004b6a:	4b27      	ldr	r3, [pc, #156]	; (10004c08 <__aeabi_dadd+0x74c>)
10004b6c:	4248      	negs	r0, r1
10004b6e:	4e24      	ldr	r6, [pc, #144]	; (10004c00 <__aeabi_dadd+0x744>)
10004b70:	e549      	b.n	10004606 <__aeabi_dadd+0x14a>
10004b72:	465d      	mov	r5, fp
10004b74:	4305      	orrs	r5, r0
10004b76:	2300      	movs	r3, #0
10004b78:	2200      	movs	r2, #0
10004b7a:	2d00      	cmp	r5, #0
10004b7c:	d100      	bne.n	10004b80 <__aeabi_dadd+0x6c4>
10004b7e:	e758      	b.n	10004a32 <__aeabi_dadd+0x576>
10004b80:	2201      	movs	r2, #1
10004b82:	e756      	b.n	10004a32 <__aeabi_dadd+0x576>
10004b84:	1c14      	adds	r4, r2, #0
10004b86:	464b      	mov	r3, r9
10004b88:	1c0f      	adds	r7, r1, #0
10004b8a:	2201      	movs	r2, #1
10004b8c:	2600      	movs	r6, #0
10004b8e:	e522      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004b90:	1c14      	adds	r4, r2, #0
10004b92:	2280      	movs	r2, #128	; 0x80
10004b94:	464b      	mov	r3, r9
10004b96:	0112      	lsls	r2, r2, #4
10004b98:	4e19      	ldr	r6, [pc, #100]	; (10004c00 <__aeabi_dadd+0x744>)
10004b9a:	e51c      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004b9c:	1c06      	adds	r6, r0, #0
10004b9e:	e784      	b.n	10004aaa <__aeabi_dadd+0x5ee>
10004ba0:	4a17      	ldr	r2, [pc, #92]	; (10004c00 <__aeabi_dadd+0x744>)
10004ba2:	4296      	cmp	r6, r2
10004ba4:	d000      	beq.n	10004ba8 <__aeabi_dadd+0x6ec>
10004ba6:	e730      	b.n	10004a0a <__aeabi_dadd+0x54e>
10004ba8:	1c0f      	adds	r7, r1, #0
10004baa:	2180      	movs	r1, #128	; 0x80
10004bac:	464b      	mov	r3, r9
10004bae:	4654      	mov	r4, sl
10004bb0:	010a      	lsls	r2, r1, #4
10004bb2:	e510      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004bb4:	0574      	lsls	r4, r6, #21
10004bb6:	0d66      	lsrs	r6, r4, #21
10004bb8:	2300      	movs	r3, #0
10004bba:	2400      	movs	r4, #0
10004bbc:	e52f      	b.n	1000461e <__aeabi_dadd+0x162>
10004bbe:	1c18      	adds	r0, r3, #0
10004bc0:	4328      	orrs	r0, r5
10004bc2:	d100      	bne.n	10004bc6 <__aeabi_dadd+0x70a>
10004bc4:	e64c      	b.n	10004860 <__aeabi_dadd+0x3a4>
10004bc6:	1c2c      	adds	r4, r5, #0
10004bc8:	2201      	movs	r2, #1
10004bca:	2600      	movs	r6, #0
10004bcc:	e503      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004bce:	1c1c      	adds	r4, r3, #0
10004bd0:	3c20      	subs	r4, #32
10004bd2:	465d      	mov	r5, fp
10004bd4:	40e5      	lsrs	r5, r4
10004bd6:	1c2c      	adds	r4, r5, #0
10004bd8:	2b20      	cmp	r3, #32
10004bda:	d01c      	beq.n	10004c16 <__aeabi_dadd+0x75a>
10004bdc:	2240      	movs	r2, #64	; 0x40
10004bde:	1ad3      	subs	r3, r2, r3
10004be0:	465a      	mov	r2, fp
10004be2:	409a      	lsls	r2, r3
10004be4:	4302      	orrs	r2, r0
10004be6:	1e50      	subs	r0, r2, #1
10004be8:	4182      	sbcs	r2, r0
10004bea:	4322      	orrs	r2, r4
10004bec:	2300      	movs	r3, #0
10004bee:	e720      	b.n	10004a32 <__aeabi_dadd+0x576>
10004bf0:	465b      	mov	r3, fp
10004bf2:	1c04      	adds	r4, r0, #0
10004bf4:	1c0f      	adds	r7, r1, #0
10004bf6:	2201      	movs	r2, #1
10004bf8:	2600      	movs	r6, #0
10004bfa:	e4ec      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004bfc:	2500      	movs	r5, #0
10004bfe:	e799      	b.n	10004b34 <__aeabi_dadd+0x678>
10004c00:	000007ff 	.word	0x000007ff
10004c04:	ff7fffff 	.word	0xff7fffff
10004c08:	007fffff 	.word	0x007fffff
10004c0c:	1c2c      	adds	r4, r5, #0
10004c0e:	1c0f      	adds	r7, r1, #0
10004c10:	2201      	movs	r2, #1
10004c12:	2600      	movs	r6, #0
10004c14:	e4df      	b.n	100045d6 <__aeabi_dadd+0x11a>
10004c16:	2200      	movs	r2, #0
10004c18:	e7e4      	b.n	10004be4 <__aeabi_dadd+0x728>
10004c1a:	46c0      	nop			; (mov r8, r8)

10004c1c <__aeabi_ddiv>:
10004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10004c1e:	464d      	mov	r5, r9
10004c20:	4644      	mov	r4, r8
10004c22:	465f      	mov	r7, fp
10004c24:	4656      	mov	r6, sl
10004c26:	b4f0      	push	{r4, r5, r6, r7}
10004c28:	1c1d      	adds	r5, r3, #0
10004c2a:	004b      	lsls	r3, r1, #1
10004c2c:	1c14      	adds	r4, r2, #0
10004c2e:	030e      	lsls	r6, r1, #12
10004c30:	0d5b      	lsrs	r3, r3, #21
10004c32:	0fca      	lsrs	r2, r1, #31
10004c34:	b087      	sub	sp, #28
10004c36:	1c07      	adds	r7, r0, #0
10004c38:	0b36      	lsrs	r6, r6, #12
10004c3a:	4698      	mov	r8, r3
10004c3c:	4691      	mov	r9, r2
10004c3e:	2b00      	cmp	r3, #0
10004c40:	d11d      	bne.n	10004c7e <__aeabi_ddiv+0x62>
10004c42:	1c32      	adds	r2, r6, #0
10004c44:	4302      	orrs	r2, r0
10004c46:	d100      	bne.n	10004c4a <__aeabi_ddiv+0x2e>
10004c48:	e181      	b.n	10004f4e <__aeabi_ddiv+0x332>
10004c4a:	2e00      	cmp	r6, #0
10004c4c:	d100      	bne.n	10004c50 <__aeabi_ddiv+0x34>
10004c4e:	e204      	b.n	1000505a <__aeabi_ddiv+0x43e>
10004c50:	1c30      	adds	r0, r6, #0
10004c52:	f001 fb35 	bl	100062c0 <__clzsi2>
10004c56:	2827      	cmp	r0, #39	; 0x27
10004c58:	dd00      	ble.n	10004c5c <__aeabi_ddiv+0x40>
10004c5a:	e1f8      	b.n	1000504e <__aeabi_ddiv+0x432>
10004c5c:	2128      	movs	r1, #40	; 0x28
10004c5e:	1c03      	adds	r3, r0, #0
10004c60:	3b08      	subs	r3, #8
10004c62:	1a0a      	subs	r2, r1, r0
10004c64:	1c39      	adds	r1, r7, #0
10004c66:	409e      	lsls	r6, r3
10004c68:	40d1      	lsrs	r1, r2
10004c6a:	430e      	orrs	r6, r1
10004c6c:	409f      	lsls	r7, r3
10004c6e:	4bc1      	ldr	r3, [pc, #772]	; (10004f74 <__aeabi_ddiv+0x358>)
10004c70:	2100      	movs	r1, #0
10004c72:	1a18      	subs	r0, r3, r0
10004c74:	2200      	movs	r2, #0
10004c76:	4680      	mov	r8, r0
10004c78:	468a      	mov	sl, r1
10004c7a:	9200      	str	r2, [sp, #0]
10004c7c:	e00f      	b.n	10004c9e <__aeabi_ddiv+0x82>
10004c7e:	48be      	ldr	r0, [pc, #760]	; (10004f78 <__aeabi_ddiv+0x35c>)
10004c80:	4283      	cmp	r3, r0
10004c82:	d031      	beq.n	10004ce8 <__aeabi_ddiv+0xcc>
10004c84:	2180      	movs	r1, #128	; 0x80
10004c86:	034b      	lsls	r3, r1, #13
10004c88:	431e      	orrs	r6, r3
10004c8a:	48bc      	ldr	r0, [pc, #752]	; (10004f7c <__aeabi_ddiv+0x360>)
10004c8c:	0f7a      	lsrs	r2, r7, #29
10004c8e:	00f6      	lsls	r6, r6, #3
10004c90:	2100      	movs	r1, #0
10004c92:	2300      	movs	r3, #0
10004c94:	4316      	orrs	r6, r2
10004c96:	00ff      	lsls	r7, r7, #3
10004c98:	4480      	add	r8, r0
10004c9a:	468a      	mov	sl, r1
10004c9c:	9300      	str	r3, [sp, #0]
10004c9e:	1c29      	adds	r1, r5, #0
10004ca0:	1c20      	adds	r0, r4, #0
10004ca2:	1c25      	adds	r5, r4, #0
10004ca4:	004a      	lsls	r2, r1, #1
10004ca6:	030c      	lsls	r4, r1, #12
10004ca8:	0fcb      	lsrs	r3, r1, #31
10004caa:	0b24      	lsrs	r4, r4, #12
10004cac:	0d52      	lsrs	r2, r2, #21
10004cae:	469b      	mov	fp, r3
10004cb0:	d125      	bne.n	10004cfe <__aeabi_ddiv+0xe2>
10004cb2:	1c21      	adds	r1, r4, #0
10004cb4:	4301      	orrs	r1, r0
10004cb6:	d100      	bne.n	10004cba <__aeabi_ddiv+0x9e>
10004cb8:	e150      	b.n	10004f5c <__aeabi_ddiv+0x340>
10004cba:	2c00      	cmp	r4, #0
10004cbc:	d100      	bne.n	10004cc0 <__aeabi_ddiv+0xa4>
10004cbe:	e1c2      	b.n	10005046 <__aeabi_ddiv+0x42a>
10004cc0:	1c20      	adds	r0, r4, #0
10004cc2:	f001 fafd 	bl	100062c0 <__clzsi2>
10004cc6:	2827      	cmp	r0, #39	; 0x27
10004cc8:	dd00      	ble.n	10004ccc <__aeabi_ddiv+0xb0>
10004cca:	e1b6      	b.n	1000503a <__aeabi_ddiv+0x41e>
10004ccc:	1c03      	adds	r3, r0, #0
10004cce:	2228      	movs	r2, #40	; 0x28
10004cd0:	3b08      	subs	r3, #8
10004cd2:	1c29      	adds	r1, r5, #0
10004cd4:	1a12      	subs	r2, r2, r0
10004cd6:	409c      	lsls	r4, r3
10004cd8:	40d1      	lsrs	r1, r2
10004cda:	430c      	orrs	r4, r1
10004cdc:	409d      	lsls	r5, r3
10004cde:	4ba5      	ldr	r3, [pc, #660]	; (10004f74 <__aeabi_ddiv+0x358>)
10004ce0:	1a1a      	subs	r2, r3, r0
10004ce2:	2000      	movs	r0, #0
10004ce4:	9002      	str	r0, [sp, #8]
10004ce6:	e019      	b.n	10004d1c <__aeabi_ddiv+0x100>
10004ce8:	1c32      	adds	r2, r6, #0
10004cea:	433a      	orrs	r2, r7
10004cec:	d000      	beq.n	10004cf0 <__aeabi_ddiv+0xd4>
10004cee:	e129      	b.n	10004f44 <__aeabi_ddiv+0x328>
10004cf0:	2708      	movs	r7, #8
10004cf2:	2302      	movs	r3, #2
10004cf4:	46ba      	mov	sl, r7
10004cf6:	2600      	movs	r6, #0
10004cf8:	2700      	movs	r7, #0
10004cfa:	9300      	str	r3, [sp, #0]
10004cfc:	e7cf      	b.n	10004c9e <__aeabi_ddiv+0x82>
10004cfe:	489e      	ldr	r0, [pc, #632]	; (10004f78 <__aeabi_ddiv+0x35c>)
10004d00:	4282      	cmp	r2, r0
10004d02:	d100      	bne.n	10004d06 <__aeabi_ddiv+0xea>
10004d04:	e113      	b.n	10004f2e <__aeabi_ddiv+0x312>
10004d06:	2180      	movs	r1, #128	; 0x80
10004d08:	034b      	lsls	r3, r1, #13
10004d0a:	431c      	orrs	r4, r3
10004d0c:	499b      	ldr	r1, [pc, #620]	; (10004f7c <__aeabi_ddiv+0x360>)
10004d0e:	0f68      	lsrs	r0, r5, #29
10004d10:	00e4      	lsls	r4, r4, #3
10004d12:	2300      	movs	r3, #0
10004d14:	4304      	orrs	r4, r0
10004d16:	00ed      	lsls	r5, r5, #3
10004d18:	1852      	adds	r2, r2, r1
10004d1a:	9302      	str	r3, [sp, #8]
10004d1c:	4648      	mov	r0, r9
10004d1e:	465b      	mov	r3, fp
10004d20:	4043      	eors	r3, r0
10004d22:	9802      	ldr	r0, [sp, #8]
10004d24:	4651      	mov	r1, sl
10004d26:	9301      	str	r3, [sp, #4]
10004d28:	4301      	orrs	r1, r0
10004d2a:	290f      	cmp	r1, #15
10004d2c:	d800      	bhi.n	10004d30 <__aeabi_ddiv+0x114>
10004d2e:	e0df      	b.n	10004ef0 <__aeabi_ddiv+0x2d4>
10004d30:	4643      	mov	r3, r8
10004d32:	1a9a      	subs	r2, r3, r2
10004d34:	9204      	str	r2, [sp, #16]
10004d36:	42a6      	cmp	r6, r4
10004d38:	d800      	bhi.n	10004d3c <__aeabi_ddiv+0x120>
10004d3a:	e16e      	b.n	1000501a <__aeabi_ddiv+0x3fe>
10004d3c:	0871      	lsrs	r1, r6, #1
10004d3e:	087b      	lsrs	r3, r7, #1
10004d40:	07f6      	lsls	r6, r6, #31
10004d42:	4333      	orrs	r3, r6
10004d44:	07fa      	lsls	r2, r7, #31
10004d46:	4689      	mov	r9, r1
10004d48:	4698      	mov	r8, r3
10004d4a:	9202      	str	r2, [sp, #8]
10004d4c:	0e28      	lsrs	r0, r5, #24
10004d4e:	0224      	lsls	r4, r4, #8
10004d50:	4304      	orrs	r4, r0
10004d52:	022d      	lsls	r5, r5, #8
10004d54:	0427      	lsls	r7, r4, #16
10004d56:	0c39      	lsrs	r1, r7, #16
10004d58:	46ab      	mov	fp, r5
10004d5a:	0c25      	lsrs	r5, r4, #16
10004d5c:	9100      	str	r1, [sp, #0]
10004d5e:	4648      	mov	r0, r9
10004d60:	1c29      	adds	r1, r5, #0
10004d62:	f7fe fb9d 	bl	100034a0 <__aeabi_uidiv>
10004d66:	9f00      	ldr	r7, [sp, #0]
10004d68:	1c06      	adds	r6, r0, #0
10004d6a:	4347      	muls	r7, r0
10004d6c:	1c29      	adds	r1, r5, #0
10004d6e:	4648      	mov	r0, r9
10004d70:	f7fe fbda 	bl	10003528 <__aeabi_uidivmod>
10004d74:	4643      	mov	r3, r8
10004d76:	0408      	lsls	r0, r1, #16
10004d78:	0c1a      	lsrs	r2, r3, #16
10004d7a:	4310      	orrs	r0, r2
10004d7c:	4287      	cmp	r7, r0
10004d7e:	d907      	bls.n	10004d90 <__aeabi_ddiv+0x174>
10004d80:	1900      	adds	r0, r0, r4
10004d82:	3e01      	subs	r6, #1
10004d84:	4284      	cmp	r4, r0
10004d86:	d803      	bhi.n	10004d90 <__aeabi_ddiv+0x174>
10004d88:	4287      	cmp	r7, r0
10004d8a:	d901      	bls.n	10004d90 <__aeabi_ddiv+0x174>
10004d8c:	3e01      	subs	r6, #1
10004d8e:	1900      	adds	r0, r0, r4
10004d90:	1bc1      	subs	r1, r0, r7
10004d92:	468a      	mov	sl, r1
10004d94:	1c08      	adds	r0, r1, #0
10004d96:	1c29      	adds	r1, r5, #0
10004d98:	f7fe fb82 	bl	100034a0 <__aeabi_uidiv>
10004d9c:	9b00      	ldr	r3, [sp, #0]
10004d9e:	1c07      	adds	r7, r0, #0
10004da0:	4343      	muls	r3, r0
10004da2:	1c29      	adds	r1, r5, #0
10004da4:	4650      	mov	r0, sl
10004da6:	4699      	mov	r9, r3
10004da8:	f7fe fbbe 	bl	10003528 <__aeabi_uidivmod>
10004dac:	4642      	mov	r2, r8
10004dae:	0410      	lsls	r0, r2, #16
10004db0:	040b      	lsls	r3, r1, #16
10004db2:	0c01      	lsrs	r1, r0, #16
10004db4:	430b      	orrs	r3, r1
10004db6:	4599      	cmp	r9, r3
10004db8:	d904      	bls.n	10004dc4 <__aeabi_ddiv+0x1a8>
10004dba:	191b      	adds	r3, r3, r4
10004dbc:	3f01      	subs	r7, #1
10004dbe:	429c      	cmp	r4, r3
10004dc0:	d800      	bhi.n	10004dc4 <__aeabi_ddiv+0x1a8>
10004dc2:	e164      	b.n	1000508e <__aeabi_ddiv+0x472>
10004dc4:	0436      	lsls	r6, r6, #16
10004dc6:	433e      	orrs	r6, r7
10004dc8:	465f      	mov	r7, fp
10004dca:	464a      	mov	r2, r9
10004dcc:	0c39      	lsrs	r1, r7, #16
10004dce:	4689      	mov	r9, r1
10004dd0:	1a9b      	subs	r3, r3, r2
10004dd2:	4659      	mov	r1, fp
10004dd4:	0432      	lsls	r2, r6, #16
10004dd6:	0c17      	lsrs	r7, r2, #16
10004dd8:	040a      	lsls	r2, r1, #16
10004dda:	4649      	mov	r1, r9
10004ddc:	4379      	muls	r1, r7
10004dde:	0c12      	lsrs	r2, r2, #16
10004de0:	9203      	str	r2, [sp, #12]
10004de2:	468c      	mov	ip, r1
10004de4:	9903      	ldr	r1, [sp, #12]
10004de6:	0c30      	lsrs	r0, r6, #16
10004de8:	437a      	muls	r2, r7
10004dea:	4341      	muls	r1, r0
10004dec:	464f      	mov	r7, r9
10004dee:	4378      	muls	r0, r7
10004df0:	448c      	add	ip, r1
10004df2:	0c17      	lsrs	r7, r2, #16
10004df4:	4467      	add	r7, ip
10004df6:	42b9      	cmp	r1, r7
10004df8:	d902      	bls.n	10004e00 <__aeabi_ddiv+0x1e4>
10004dfa:	2180      	movs	r1, #128	; 0x80
10004dfc:	0249      	lsls	r1, r1, #9
10004dfe:	1840      	adds	r0, r0, r1
10004e00:	0c39      	lsrs	r1, r7, #16
10004e02:	0412      	lsls	r2, r2, #16
10004e04:	1840      	adds	r0, r0, r1
10004e06:	043f      	lsls	r7, r7, #16
10004e08:	0c11      	lsrs	r1, r2, #16
10004e0a:	187f      	adds	r7, r7, r1
10004e0c:	4283      	cmp	r3, r0
10004e0e:	d200      	bcs.n	10004e12 <__aeabi_ddiv+0x1f6>
10004e10:	e127      	b.n	10005062 <__aeabi_ddiv+0x446>
10004e12:	d100      	bne.n	10004e16 <__aeabi_ddiv+0x1fa>
10004e14:	e141      	b.n	1000509a <__aeabi_ddiv+0x47e>
10004e16:	9902      	ldr	r1, [sp, #8]
10004e18:	1a1b      	subs	r3, r3, r0
10004e1a:	1bcf      	subs	r7, r1, r7
10004e1c:	42b9      	cmp	r1, r7
10004e1e:	4180      	sbcs	r0, r0
10004e20:	4241      	negs	r1, r0
10004e22:	1a5a      	subs	r2, r3, r1
10004e24:	4690      	mov	r8, r2
10004e26:	42a2      	cmp	r2, r4
10004e28:	d100      	bne.n	10004e2c <__aeabi_ddiv+0x210>
10004e2a:	e15f      	b.n	100050ec <__aeabi_ddiv+0x4d0>
10004e2c:	1c10      	adds	r0, r2, #0
10004e2e:	1c29      	adds	r1, r5, #0
10004e30:	f7fe fb36 	bl	100034a0 <__aeabi_uidiv>
10004e34:	9b00      	ldr	r3, [sp, #0]
10004e36:	9002      	str	r0, [sp, #8]
10004e38:	4343      	muls	r3, r0
10004e3a:	1c29      	adds	r1, r5, #0
10004e3c:	4640      	mov	r0, r8
10004e3e:	469a      	mov	sl, r3
10004e40:	f7fe fb72 	bl	10003528 <__aeabi_uidivmod>
10004e44:	0c38      	lsrs	r0, r7, #16
10004e46:	0409      	lsls	r1, r1, #16
10004e48:	4301      	orrs	r1, r0
10004e4a:	458a      	cmp	sl, r1
10004e4c:	d90a      	bls.n	10004e64 <__aeabi_ddiv+0x248>
10004e4e:	9a02      	ldr	r2, [sp, #8]
10004e50:	1909      	adds	r1, r1, r4
10004e52:	3a01      	subs	r2, #1
10004e54:	9202      	str	r2, [sp, #8]
10004e56:	428c      	cmp	r4, r1
10004e58:	d804      	bhi.n	10004e64 <__aeabi_ddiv+0x248>
10004e5a:	458a      	cmp	sl, r1
10004e5c:	d902      	bls.n	10004e64 <__aeabi_ddiv+0x248>
10004e5e:	3a01      	subs	r2, #1
10004e60:	9202      	str	r2, [sp, #8]
10004e62:	1909      	adds	r1, r1, r4
10004e64:	4653      	mov	r3, sl
10004e66:	1ac8      	subs	r0, r1, r3
10004e68:	1c29      	adds	r1, r5, #0
10004e6a:	9005      	str	r0, [sp, #20]
10004e6c:	f7fe fb18 	bl	100034a0 <__aeabi_uidiv>
10004e70:	9a00      	ldr	r2, [sp, #0]
10004e72:	1c29      	adds	r1, r5, #0
10004e74:	4342      	muls	r2, r0
10004e76:	4680      	mov	r8, r0
10004e78:	9805      	ldr	r0, [sp, #20]
10004e7a:	4692      	mov	sl, r2
10004e7c:	f7fe fb54 	bl	10003528 <__aeabi_uidivmod>
10004e80:	043f      	lsls	r7, r7, #16
10004e82:	040d      	lsls	r5, r1, #16
10004e84:	0c3a      	lsrs	r2, r7, #16
10004e86:	432a      	orrs	r2, r5
10004e88:	4592      	cmp	sl, r2
10004e8a:	d909      	bls.n	10004ea0 <__aeabi_ddiv+0x284>
10004e8c:	2101      	movs	r1, #1
10004e8e:	424b      	negs	r3, r1
10004e90:	1912      	adds	r2, r2, r4
10004e92:	4498      	add	r8, r3
10004e94:	4294      	cmp	r4, r2
10004e96:	d803      	bhi.n	10004ea0 <__aeabi_ddiv+0x284>
10004e98:	4592      	cmp	sl, r2
10004e9a:	d901      	bls.n	10004ea0 <__aeabi_ddiv+0x284>
10004e9c:	4498      	add	r8, r3
10004e9e:	1912      	adds	r2, r2, r4
10004ea0:	9d02      	ldr	r5, [sp, #8]
10004ea2:	4643      	mov	r3, r8
10004ea4:	042f      	lsls	r7, r5, #16
10004ea6:	431f      	orrs	r7, r3
10004ea8:	4650      	mov	r0, sl
10004eaa:	1a11      	subs	r1, r2, r0
10004eac:	0438      	lsls	r0, r7, #16
10004eae:	0c03      	lsrs	r3, r0, #16
10004eb0:	464d      	mov	r5, r9
10004eb2:	435d      	muls	r5, r3
10004eb4:	9803      	ldr	r0, [sp, #12]
10004eb6:	46ac      	mov	ip, r5
10004eb8:	9d03      	ldr	r5, [sp, #12]
10004eba:	0c3a      	lsrs	r2, r7, #16
10004ebc:	4358      	muls	r0, r3
10004ebe:	4355      	muls	r5, r2
10004ec0:	464b      	mov	r3, r9
10004ec2:	435a      	muls	r2, r3
10004ec4:	44ac      	add	ip, r5
10004ec6:	0c03      	lsrs	r3, r0, #16
10004ec8:	4463      	add	r3, ip
10004eca:	429d      	cmp	r5, r3
10004ecc:	d902      	bls.n	10004ed4 <__aeabi_ddiv+0x2b8>
10004ece:	2580      	movs	r5, #128	; 0x80
10004ed0:	026d      	lsls	r5, r5, #9
10004ed2:	1952      	adds	r2, r2, r5
10004ed4:	0c1d      	lsrs	r5, r3, #16
10004ed6:	0400      	lsls	r0, r0, #16
10004ed8:	1952      	adds	r2, r2, r5
10004eda:	041b      	lsls	r3, r3, #16
10004edc:	0c05      	lsrs	r5, r0, #16
10004ede:	195b      	adds	r3, r3, r5
10004ee0:	4291      	cmp	r1, r2
10004ee2:	d200      	bcs.n	10004ee6 <__aeabi_ddiv+0x2ca>
10004ee4:	e0e6      	b.n	100050b4 <__aeabi_ddiv+0x498>
10004ee6:	d100      	bne.n	10004eea <__aeabi_ddiv+0x2ce>
10004ee8:	e13d      	b.n	10005166 <__aeabi_ddiv+0x54a>
10004eea:	2201      	movs	r2, #1
10004eec:	4317      	orrs	r7, r2
10004eee:	e05a      	b.n	10004fa6 <__aeabi_ddiv+0x38a>
10004ef0:	0089      	lsls	r1, r1, #2
10004ef2:	4823      	ldr	r0, [pc, #140]	; (10004f80 <__aeabi_ddiv+0x364>)
10004ef4:	468c      	mov	ip, r1
10004ef6:	4460      	add	r0, ip
10004ef8:	6801      	ldr	r1, [r0, #0]
10004efa:	468f      	mov	pc, r1
10004efc:	9b01      	ldr	r3, [sp, #4]
10004efe:	4a1e      	ldr	r2, [pc, #120]	; (10004f78 <__aeabi_ddiv+0x35c>)
10004f00:	2600      	movs	r6, #0
10004f02:	2700      	movs	r7, #0
10004f04:	2000      	movs	r0, #0
10004f06:	2100      	movs	r1, #0
10004f08:	1c38      	adds	r0, r7, #0
10004f0a:	0d0f      	lsrs	r7, r1, #20
10004f0c:	053c      	lsls	r4, r7, #20
10004f0e:	4d1d      	ldr	r5, [pc, #116]	; (10004f84 <__aeabi_ddiv+0x368>)
10004f10:	4334      	orrs	r4, r6
10004f12:	0512      	lsls	r2, r2, #20
10004f14:	4025      	ands	r5, r4
10004f16:	4315      	orrs	r5, r2
10004f18:	006e      	lsls	r6, r5, #1
10004f1a:	07db      	lsls	r3, r3, #31
10004f1c:	0871      	lsrs	r1, r6, #1
10004f1e:	4319      	orrs	r1, r3
10004f20:	b007      	add	sp, #28
10004f22:	bc3c      	pop	{r2, r3, r4, r5}
10004f24:	4690      	mov	r8, r2
10004f26:	4699      	mov	r9, r3
10004f28:	46a2      	mov	sl, r4
10004f2a:	46ab      	mov	fp, r5
10004f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004f2e:	1c21      	adds	r1, r4, #0
10004f30:	2003      	movs	r0, #3
10004f32:	4329      	orrs	r1, r5
10004f34:	9002      	str	r0, [sp, #8]
10004f36:	d000      	beq.n	10004f3a <__aeabi_ddiv+0x31e>
10004f38:	e6f0      	b.n	10004d1c <__aeabi_ddiv+0x100>
10004f3a:	2302      	movs	r3, #2
10004f3c:	2400      	movs	r4, #0
10004f3e:	2500      	movs	r5, #0
10004f40:	9302      	str	r3, [sp, #8]
10004f42:	e6eb      	b.n	10004d1c <__aeabi_ddiv+0x100>
10004f44:	200c      	movs	r0, #12
10004f46:	2103      	movs	r1, #3
10004f48:	4682      	mov	sl, r0
10004f4a:	9100      	str	r1, [sp, #0]
10004f4c:	e6a7      	b.n	10004c9e <__aeabi_ddiv+0x82>
10004f4e:	2704      	movs	r7, #4
10004f50:	2301      	movs	r3, #1
10004f52:	46ba      	mov	sl, r7
10004f54:	2600      	movs	r6, #0
10004f56:	2700      	movs	r7, #0
10004f58:	9300      	str	r3, [sp, #0]
10004f5a:	e6a0      	b.n	10004c9e <__aeabi_ddiv+0x82>
10004f5c:	2101      	movs	r1, #1
10004f5e:	2400      	movs	r4, #0
10004f60:	2500      	movs	r5, #0
10004f62:	9102      	str	r1, [sp, #8]
10004f64:	e6da      	b.n	10004d1c <__aeabi_ddiv+0x100>
10004f66:	2701      	movs	r7, #1
10004f68:	2300      	movs	r3, #0
10004f6a:	4e07      	ldr	r6, [pc, #28]	; (10004f88 <__aeabi_ddiv+0x36c>)
10004f6c:	427f      	negs	r7, r7
10004f6e:	4a02      	ldr	r2, [pc, #8]	; (10004f78 <__aeabi_ddiv+0x35c>)
10004f70:	e7c8      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
10004f72:	46c0      	nop			; (mov r8, r8)
10004f74:	fffffc0d 	.word	0xfffffc0d
10004f78:	000007ff 	.word	0x000007ff
10004f7c:	fffffc01 	.word	0xfffffc01
10004f80:	1002d2f4 	.word	0x1002d2f4
10004f84:	800fffff 	.word	0x800fffff
10004f88:	000fffff 	.word	0x000fffff
10004f8c:	1c2f      	adds	r7, r5, #0
10004f8e:	465a      	mov	r2, fp
10004f90:	9d02      	ldr	r5, [sp, #8]
10004f92:	1c26      	adds	r6, r4, #0
10004f94:	9201      	str	r2, [sp, #4]
10004f96:	2d02      	cmp	r5, #2
10004f98:	d0b0      	beq.n	10004efc <__aeabi_ddiv+0x2e0>
10004f9a:	2d03      	cmp	r5, #3
10004f9c:	d100      	bne.n	10004fa0 <__aeabi_ddiv+0x384>
10004f9e:	e101      	b.n	100051a4 <__aeabi_ddiv+0x588>
10004fa0:	2d01      	cmp	r5, #1
10004fa2:	d100      	bne.n	10004fa6 <__aeabi_ddiv+0x38a>
10004fa4:	e09c      	b.n	100050e0 <__aeabi_ddiv+0x4c4>
10004fa6:	9b04      	ldr	r3, [sp, #16]
10004fa8:	4882      	ldr	r0, [pc, #520]	; (100051b4 <__aeabi_ddiv+0x598>)
10004faa:	181a      	adds	r2, r3, r0
10004fac:	2a00      	cmp	r2, #0
10004fae:	dc00      	bgt.n	10004fb2 <__aeabi_ddiv+0x396>
10004fb0:	e08c      	b.n	100050cc <__aeabi_ddiv+0x4b0>
10004fb2:	240f      	movs	r4, #15
10004fb4:	403c      	ands	r4, r7
10004fb6:	2c04      	cmp	r4, #4
10004fb8:	d005      	beq.n	10004fc6 <__aeabi_ddiv+0x3aa>
10004fba:	1d3b      	adds	r3, r7, #4
10004fbc:	42bb      	cmp	r3, r7
10004fbe:	41bf      	sbcs	r7, r7
10004fc0:	427d      	negs	r5, r7
10004fc2:	1976      	adds	r6, r6, r5
10004fc4:	1c1f      	adds	r7, r3, #0
10004fc6:	01f1      	lsls	r1, r6, #7
10004fc8:	d505      	bpl.n	10004fd6 <__aeabi_ddiv+0x3ba>
10004fca:	4a7b      	ldr	r2, [pc, #492]	; (100051b8 <__aeabi_ddiv+0x59c>)
10004fcc:	9904      	ldr	r1, [sp, #16]
10004fce:	2080      	movs	r0, #128	; 0x80
10004fd0:	00c4      	lsls	r4, r0, #3
10004fd2:	4016      	ands	r6, r2
10004fd4:	190a      	adds	r2, r1, r4
10004fd6:	4b79      	ldr	r3, [pc, #484]	; (100051bc <__aeabi_ddiv+0x5a0>)
10004fd8:	429a      	cmp	r2, r3
10004fda:	dd00      	ble.n	10004fde <__aeabi_ddiv+0x3c2>
10004fdc:	e78e      	b.n	10004efc <__aeabi_ddiv+0x2e0>
10004fde:	0775      	lsls	r5, r6, #29
10004fe0:	08ff      	lsrs	r7, r7, #3
10004fe2:	0276      	lsls	r6, r6, #9
10004fe4:	0551      	lsls	r1, r2, #21
10004fe6:	432f      	orrs	r7, r5
10004fe8:	0b36      	lsrs	r6, r6, #12
10004fea:	0d4a      	lsrs	r2, r1, #21
10004fec:	9b01      	ldr	r3, [sp, #4]
10004fee:	e789      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
10004ff0:	2200      	movs	r2, #0
10004ff2:	2600      	movs	r6, #0
10004ff4:	2700      	movs	r7, #0
10004ff6:	e785      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
10004ff8:	2080      	movs	r0, #128	; 0x80
10004ffa:	0301      	lsls	r1, r0, #12
10004ffc:	420e      	tst	r6, r1
10004ffe:	d016      	beq.n	1000502e <__aeabi_ddiv+0x412>
10005000:	420c      	tst	r4, r1
10005002:	d114      	bne.n	1000502e <__aeabi_ddiv+0x412>
10005004:	430c      	orrs	r4, r1
10005006:	0326      	lsls	r6, r4, #12
10005008:	0b36      	lsrs	r6, r6, #12
1000500a:	465b      	mov	r3, fp
1000500c:	1c2f      	adds	r7, r5, #0
1000500e:	4a6c      	ldr	r2, [pc, #432]	; (100051c0 <__aeabi_ddiv+0x5a4>)
10005010:	e778      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
10005012:	464c      	mov	r4, r9
10005014:	9401      	str	r4, [sp, #4]
10005016:	9d00      	ldr	r5, [sp, #0]
10005018:	e7bd      	b.n	10004f96 <__aeabi_ddiv+0x37a>
1000501a:	42a6      	cmp	r6, r4
1000501c:	d043      	beq.n	100050a6 <__aeabi_ddiv+0x48a>
1000501e:	9804      	ldr	r0, [sp, #16]
10005020:	46b8      	mov	r8, r7
10005022:	3801      	subs	r0, #1
10005024:	2700      	movs	r7, #0
10005026:	9004      	str	r0, [sp, #16]
10005028:	46b1      	mov	r9, r6
1000502a:	9702      	str	r7, [sp, #8]
1000502c:	e68e      	b.n	10004d4c <__aeabi_ddiv+0x130>
1000502e:	430e      	orrs	r6, r1
10005030:	0333      	lsls	r3, r6, #12
10005032:	0b1e      	lsrs	r6, r3, #12
10005034:	4a62      	ldr	r2, [pc, #392]	; (100051c0 <__aeabi_ddiv+0x5a4>)
10005036:	464b      	mov	r3, r9
10005038:	e764      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
1000503a:	1c04      	adds	r4, r0, #0
1000503c:	3c28      	subs	r4, #40	; 0x28
1000503e:	40a5      	lsls	r5, r4
10005040:	1c2c      	adds	r4, r5, #0
10005042:	2500      	movs	r5, #0
10005044:	e64b      	b.n	10004cde <__aeabi_ddiv+0xc2>
10005046:	f001 f93b 	bl	100062c0 <__clzsi2>
1000504a:	3020      	adds	r0, #32
1000504c:	e63b      	b.n	10004cc6 <__aeabi_ddiv+0xaa>
1000504e:	1c06      	adds	r6, r0, #0
10005050:	3e28      	subs	r6, #40	; 0x28
10005052:	40b7      	lsls	r7, r6
10005054:	1c3e      	adds	r6, r7, #0
10005056:	2700      	movs	r7, #0
10005058:	e609      	b.n	10004c6e <__aeabi_ddiv+0x52>
1000505a:	f001 f931 	bl	100062c0 <__clzsi2>
1000505e:	3020      	adds	r0, #32
10005060:	e5f9      	b.n	10004c56 <__aeabi_ddiv+0x3a>
10005062:	9a02      	ldr	r2, [sp, #8]
10005064:	3e01      	subs	r6, #1
10005066:	1c11      	adds	r1, r2, #0
10005068:	4459      	add	r1, fp
1000506a:	4559      	cmp	r1, fp
1000506c:	4192      	sbcs	r2, r2
1000506e:	4252      	negs	r2, r2
10005070:	1912      	adds	r2, r2, r4
10005072:	18d3      	adds	r3, r2, r3
10005074:	429c      	cmp	r4, r3
10005076:	d204      	bcs.n	10005082 <__aeabi_ddiv+0x466>
10005078:	4298      	cmp	r0, r3
1000507a:	d86b      	bhi.n	10005154 <__aeabi_ddiv+0x538>
1000507c:	d016      	beq.n	100050ac <__aeabi_ddiv+0x490>
1000507e:	1a1b      	subs	r3, r3, r0
10005080:	e6cb      	b.n	10004e1a <__aeabi_ddiv+0x1fe>
10005082:	42a3      	cmp	r3, r4
10005084:	d1fb      	bne.n	1000507e <__aeabi_ddiv+0x462>
10005086:	458b      	cmp	fp, r1
10005088:	d9f6      	bls.n	10005078 <__aeabi_ddiv+0x45c>
1000508a:	1a23      	subs	r3, r4, r0
1000508c:	e6c5      	b.n	10004e1a <__aeabi_ddiv+0x1fe>
1000508e:	4599      	cmp	r9, r3
10005090:	d800      	bhi.n	10005094 <__aeabi_ddiv+0x478>
10005092:	e697      	b.n	10004dc4 <__aeabi_ddiv+0x1a8>
10005094:	3f01      	subs	r7, #1
10005096:	191b      	adds	r3, r3, r4
10005098:	e694      	b.n	10004dc4 <__aeabi_ddiv+0x1a8>
1000509a:	9a02      	ldr	r2, [sp, #8]
1000509c:	42ba      	cmp	r2, r7
1000509e:	d3e0      	bcc.n	10005062 <__aeabi_ddiv+0x446>
100050a0:	9902      	ldr	r1, [sp, #8]
100050a2:	2300      	movs	r3, #0
100050a4:	e6b9      	b.n	10004e1a <__aeabi_ddiv+0x1fe>
100050a6:	42af      	cmp	r7, r5
100050a8:	d9b9      	bls.n	1000501e <__aeabi_ddiv+0x402>
100050aa:	e647      	b.n	10004d3c <__aeabi_ddiv+0x120>
100050ac:	428f      	cmp	r7, r1
100050ae:	d851      	bhi.n	10005154 <__aeabi_ddiv+0x538>
100050b0:	2300      	movs	r3, #0
100050b2:	e6b2      	b.n	10004e1a <__aeabi_ddiv+0x1fe>
100050b4:	1909      	adds	r1, r1, r4
100050b6:	3f01      	subs	r7, #1
100050b8:	4658      	mov	r0, fp
100050ba:	428c      	cmp	r4, r1
100050bc:	d919      	bls.n	100050f2 <__aeabi_ddiv+0x4d6>
100050be:	4291      	cmp	r1, r2
100050c0:	d000      	beq.n	100050c4 <__aeabi_ddiv+0x4a8>
100050c2:	e712      	b.n	10004eea <__aeabi_ddiv+0x2ce>
100050c4:	4298      	cmp	r0, r3
100050c6:	d000      	beq.n	100050ca <__aeabi_ddiv+0x4ae>
100050c8:	e70f      	b.n	10004eea <__aeabi_ddiv+0x2ce>
100050ca:	e76c      	b.n	10004fa6 <__aeabi_ddiv+0x38a>
100050cc:	4c3d      	ldr	r4, [pc, #244]	; (100051c4 <__aeabi_ddiv+0x5a8>)
100050ce:	9d04      	ldr	r5, [sp, #16]
100050d0:	1b63      	subs	r3, r4, r5
100050d2:	2b38      	cmp	r3, #56	; 0x38
100050d4:	dd1c      	ble.n	10005110 <__aeabi_ddiv+0x4f4>
100050d6:	9b01      	ldr	r3, [sp, #4]
100050d8:	2200      	movs	r2, #0
100050da:	2600      	movs	r6, #0
100050dc:	2700      	movs	r7, #0
100050de:	e711      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
100050e0:	9b01      	ldr	r3, [sp, #4]
100050e2:	2200      	movs	r2, #0
100050e4:	402b      	ands	r3, r5
100050e6:	2600      	movs	r6, #0
100050e8:	2700      	movs	r7, #0
100050ea:	e70b      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
100050ec:	2701      	movs	r7, #1
100050ee:	427f      	negs	r7, r7
100050f0:	e759      	b.n	10004fa6 <__aeabi_ddiv+0x38a>
100050f2:	428a      	cmp	r2, r1
100050f4:	d803      	bhi.n	100050fe <__aeabi_ddiv+0x4e2>
100050f6:	d000      	beq.n	100050fa <__aeabi_ddiv+0x4de>
100050f8:	e6f7      	b.n	10004eea <__aeabi_ddiv+0x2ce>
100050fa:	4298      	cmp	r0, r3
100050fc:	d2e2      	bcs.n	100050c4 <__aeabi_ddiv+0x4a8>
100050fe:	465d      	mov	r5, fp
10005100:	0068      	lsls	r0, r5, #1
10005102:	4558      	cmp	r0, fp
10005104:	41ad      	sbcs	r5, r5
10005106:	426d      	negs	r5, r5
10005108:	192c      	adds	r4, r5, r4
1000510a:	3f01      	subs	r7, #1
1000510c:	1909      	adds	r1, r1, r4
1000510e:	e7d6      	b.n	100050be <__aeabi_ddiv+0x4a2>
10005110:	2b1f      	cmp	r3, #31
10005112:	dc34      	bgt.n	1000517e <__aeabi_ddiv+0x562>
10005114:	9c04      	ldr	r4, [sp, #16]
10005116:	4a2c      	ldr	r2, [pc, #176]	; (100051c8 <__aeabi_ddiv+0x5ac>)
10005118:	1c38      	adds	r0, r7, #0
1000511a:	18a5      	adds	r5, r4, r2
1000511c:	1c31      	adds	r1, r6, #0
1000511e:	40af      	lsls	r7, r5
10005120:	40d8      	lsrs	r0, r3
10005122:	40a9      	lsls	r1, r5
10005124:	1c3c      	adds	r4, r7, #0
10005126:	4301      	orrs	r1, r0
10005128:	1e67      	subs	r7, r4, #1
1000512a:	41bc      	sbcs	r4, r7
1000512c:	1c0f      	adds	r7, r1, #0
1000512e:	4327      	orrs	r7, r4
10005130:	40de      	lsrs	r6, r3
10005132:	230f      	movs	r3, #15
10005134:	403b      	ands	r3, r7
10005136:	2b04      	cmp	r3, #4
10005138:	d005      	beq.n	10005146 <__aeabi_ddiv+0x52a>
1000513a:	1d3a      	adds	r2, r7, #4
1000513c:	42ba      	cmp	r2, r7
1000513e:	41bf      	sbcs	r7, r7
10005140:	427d      	negs	r5, r7
10005142:	1976      	adds	r6, r6, r5
10005144:	1c17      	adds	r7, r2, #0
10005146:	0232      	lsls	r2, r6, #8
10005148:	d511      	bpl.n	1000516e <__aeabi_ddiv+0x552>
1000514a:	9b01      	ldr	r3, [sp, #4]
1000514c:	2201      	movs	r2, #1
1000514e:	2600      	movs	r6, #0
10005150:	2700      	movs	r7, #0
10005152:	e6d7      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
10005154:	4459      	add	r1, fp
10005156:	4559      	cmp	r1, fp
10005158:	4192      	sbcs	r2, r2
1000515a:	4252      	negs	r2, r2
1000515c:	1912      	adds	r2, r2, r4
1000515e:	18d3      	adds	r3, r2, r3
10005160:	3e01      	subs	r6, #1
10005162:	1a1b      	subs	r3, r3, r0
10005164:	e659      	b.n	10004e1a <__aeabi_ddiv+0x1fe>
10005166:	2b00      	cmp	r3, #0
10005168:	d1a4      	bne.n	100050b4 <__aeabi_ddiv+0x498>
1000516a:	2000      	movs	r0, #0
1000516c:	e7aa      	b.n	100050c4 <__aeabi_ddiv+0x4a8>
1000516e:	0770      	lsls	r0, r6, #29
10005170:	08ff      	lsrs	r7, r7, #3
10005172:	0271      	lsls	r1, r6, #9
10005174:	4307      	orrs	r7, r0
10005176:	0b0e      	lsrs	r6, r1, #12
10005178:	9b01      	ldr	r3, [sp, #4]
1000517a:	2200      	movs	r2, #0
1000517c:	e6c2      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
1000517e:	4913      	ldr	r1, [pc, #76]	; (100051cc <__aeabi_ddiv+0x5b0>)
10005180:	9c04      	ldr	r4, [sp, #16]
10005182:	1c30      	adds	r0, r6, #0
10005184:	1b0a      	subs	r2, r1, r4
10005186:	40d0      	lsrs	r0, r2
10005188:	1c05      	adds	r5, r0, #0
1000518a:	2b20      	cmp	r3, #32
1000518c:	d008      	beq.n	100051a0 <__aeabi_ddiv+0x584>
1000518e:	4b10      	ldr	r3, [pc, #64]	; (100051d0 <__aeabi_ddiv+0x5b4>)
10005190:	18e1      	adds	r1, r4, r3
10005192:	408e      	lsls	r6, r1
10005194:	4337      	orrs	r7, r6
10005196:	1e7b      	subs	r3, r7, #1
10005198:	419f      	sbcs	r7, r3
1000519a:	432f      	orrs	r7, r5
1000519c:	2600      	movs	r6, #0
1000519e:	e7c8      	b.n	10005132 <__aeabi_ddiv+0x516>
100051a0:	2600      	movs	r6, #0
100051a2:	e7f7      	b.n	10005194 <__aeabi_ddiv+0x578>
100051a4:	2280      	movs	r2, #128	; 0x80
100051a6:	0310      	lsls	r0, r2, #12
100051a8:	4306      	orrs	r6, r0
100051aa:	0331      	lsls	r1, r6, #12
100051ac:	0b0e      	lsrs	r6, r1, #12
100051ae:	9b01      	ldr	r3, [sp, #4]
100051b0:	4a03      	ldr	r2, [pc, #12]	; (100051c0 <__aeabi_ddiv+0x5a4>)
100051b2:	e6a7      	b.n	10004f04 <__aeabi_ddiv+0x2e8>
100051b4:	000003ff 	.word	0x000003ff
100051b8:	feffffff 	.word	0xfeffffff
100051bc:	000007fe 	.word	0x000007fe
100051c0:	000007ff 	.word	0x000007ff
100051c4:	fffffc02 	.word	0xfffffc02
100051c8:	0000041e 	.word	0x0000041e
100051cc:	fffffbe2 	.word	0xfffffbe2
100051d0:	0000043e 	.word	0x0000043e

100051d4 <__eqdf2>:
100051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100051d6:	4694      	mov	ip, r2
100051d8:	4647      	mov	r7, r8
100051da:	031a      	lsls	r2, r3, #12
100051dc:	1c06      	adds	r6, r0, #0
100051de:	0058      	lsls	r0, r3, #1
100051e0:	b480      	push	{r7}
100051e2:	0b17      	lsrs	r7, r2, #12
100051e4:	0d42      	lsrs	r2, r0, #21
100051e6:	4819      	ldr	r0, [pc, #100]	; (1000524c <__eqdf2+0x78>)
100051e8:	030d      	lsls	r5, r1, #12
100051ea:	004c      	lsls	r4, r1, #1
100051ec:	0fdb      	lsrs	r3, r3, #31
100051ee:	0b2d      	lsrs	r5, r5, #12
100051f0:	0d64      	lsrs	r4, r4, #21
100051f2:	0fc9      	lsrs	r1, r1, #31
100051f4:	4698      	mov	r8, r3
100051f6:	4284      	cmp	r4, r0
100051f8:	d008      	beq.n	1000520c <__eqdf2+0x38>
100051fa:	4814      	ldr	r0, [pc, #80]	; (1000524c <__eqdf2+0x78>)
100051fc:	4282      	cmp	r2, r0
100051fe:	d00d      	beq.n	1000521c <__eqdf2+0x48>
10005200:	2001      	movs	r0, #1
10005202:	4294      	cmp	r4, r2
10005204:	d012      	beq.n	1000522c <__eqdf2+0x58>
10005206:	bc04      	pop	{r2}
10005208:	4690      	mov	r8, r2
1000520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000520c:	1c2b      	adds	r3, r5, #0
1000520e:	4333      	orrs	r3, r6
10005210:	2001      	movs	r0, #1
10005212:	2b00      	cmp	r3, #0
10005214:	d1f7      	bne.n	10005206 <__eqdf2+0x32>
10005216:	480d      	ldr	r0, [pc, #52]	; (1000524c <__eqdf2+0x78>)
10005218:	4282      	cmp	r2, r0
1000521a:	d1f1      	bne.n	10005200 <__eqdf2+0x2c>
1000521c:	4663      	mov	r3, ip
1000521e:	433b      	orrs	r3, r7
10005220:	2001      	movs	r0, #1
10005222:	2b00      	cmp	r3, #0
10005224:	d1ef      	bne.n	10005206 <__eqdf2+0x32>
10005226:	2001      	movs	r0, #1
10005228:	4294      	cmp	r4, r2
1000522a:	d1ec      	bne.n	10005206 <__eqdf2+0x32>
1000522c:	42bd      	cmp	r5, r7
1000522e:	d1ea      	bne.n	10005206 <__eqdf2+0x32>
10005230:	4566      	cmp	r6, ip
10005232:	d1e8      	bne.n	10005206 <__eqdf2+0x32>
10005234:	4541      	cmp	r1, r8
10005236:	d006      	beq.n	10005246 <__eqdf2+0x72>
10005238:	2c00      	cmp	r4, #0
1000523a:	d1e4      	bne.n	10005206 <__eqdf2+0x32>
1000523c:	1c28      	adds	r0, r5, #0
1000523e:	4330      	orrs	r0, r6
10005240:	1e45      	subs	r5, r0, #1
10005242:	41a8      	sbcs	r0, r5
10005244:	e7df      	b.n	10005206 <__eqdf2+0x32>
10005246:	2000      	movs	r0, #0
10005248:	e7dd      	b.n	10005206 <__eqdf2+0x32>
1000524a:	46c0      	nop			; (mov r8, r8)
1000524c:	000007ff 	.word	0x000007ff

10005250 <__gedf2>:
10005250:	b5f0      	push	{r4, r5, r6, r7, lr}
10005252:	4657      	mov	r7, sl
10005254:	464e      	mov	r6, r9
10005256:	4645      	mov	r5, r8
10005258:	b4e0      	push	{r5, r6, r7}
1000525a:	1c04      	adds	r4, r0, #0
1000525c:	004e      	lsls	r6, r1, #1
1000525e:	0308      	lsls	r0, r1, #12
10005260:	0fc9      	lsrs	r1, r1, #31
10005262:	468a      	mov	sl, r1
10005264:	1c17      	adds	r7, r2, #0
10005266:	0059      	lsls	r1, r3, #1
10005268:	031a      	lsls	r2, r3, #12
1000526a:	0b05      	lsrs	r5, r0, #12
1000526c:	0d70      	lsrs	r0, r6, #21
1000526e:	0b16      	lsrs	r6, r2, #12
10005270:	0d4a      	lsrs	r2, r1, #21
10005272:	4930      	ldr	r1, [pc, #192]	; (10005334 <__gedf2+0xe4>)
10005274:	0fdb      	lsrs	r3, r3, #31
10005276:	469c      	mov	ip, r3
10005278:	4288      	cmp	r0, r1
1000527a:	d032      	beq.n	100052e2 <__gedf2+0x92>
1000527c:	492d      	ldr	r1, [pc, #180]	; (10005334 <__gedf2+0xe4>)
1000527e:	428a      	cmp	r2, r1
10005280:	d035      	beq.n	100052ee <__gedf2+0x9e>
10005282:	2800      	cmp	r0, #0
10005284:	d10f      	bne.n	100052a6 <__gedf2+0x56>
10005286:	1c29      	adds	r1, r5, #0
10005288:	4321      	orrs	r1, r4
1000528a:	424b      	negs	r3, r1
1000528c:	414b      	adcs	r3, r1
1000528e:	4698      	mov	r8, r3
10005290:	2a00      	cmp	r2, #0
10005292:	d00b      	beq.n	100052ac <__gedf2+0x5c>
10005294:	2b00      	cmp	r3, #0
10005296:	d11a      	bne.n	100052ce <__gedf2+0x7e>
10005298:	45e2      	cmp	sl, ip
1000529a:	d02c      	beq.n	100052f6 <__gedf2+0xa6>
1000529c:	4655      	mov	r5, sl
1000529e:	2d00      	cmp	r5, #0
100052a0:	d118      	bne.n	100052d4 <__gedf2+0x84>
100052a2:	2001      	movs	r0, #1
100052a4:	e018      	b.n	100052d8 <__gedf2+0x88>
100052a6:	2a00      	cmp	r2, #0
100052a8:	d1f6      	bne.n	10005298 <__gedf2+0x48>
100052aa:	4690      	mov	r8, r2
100052ac:	1c31      	adds	r1, r6, #0
100052ae:	4339      	orrs	r1, r7
100052b0:	424b      	negs	r3, r1
100052b2:	414b      	adcs	r3, r1
100052b4:	4641      	mov	r1, r8
100052b6:	2900      	cmp	r1, #0
100052b8:	d106      	bne.n	100052c8 <__gedf2+0x78>
100052ba:	2b00      	cmp	r3, #0
100052bc:	d0ec      	beq.n	10005298 <__gedf2+0x48>
100052be:	4656      	mov	r6, sl
100052c0:	2001      	movs	r0, #1
100052c2:	2e00      	cmp	r6, #0
100052c4:	d008      	beq.n	100052d8 <__gedf2+0x88>
100052c6:	e005      	b.n	100052d4 <__gedf2+0x84>
100052c8:	2000      	movs	r0, #0
100052ca:	2b00      	cmp	r3, #0
100052cc:	d104      	bne.n	100052d8 <__gedf2+0x88>
100052ce:	4667      	mov	r7, ip
100052d0:	2f00      	cmp	r7, #0
100052d2:	d1e6      	bne.n	100052a2 <__gedf2+0x52>
100052d4:	2301      	movs	r3, #1
100052d6:	4258      	negs	r0, r3
100052d8:	bc1c      	pop	{r2, r3, r4}
100052da:	4690      	mov	r8, r2
100052dc:	4699      	mov	r9, r3
100052de:	46a2      	mov	sl, r4
100052e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100052e2:	1c2b      	adds	r3, r5, #0
100052e4:	4323      	orrs	r3, r4
100052e6:	d0c9      	beq.n	1000527c <__gedf2+0x2c>
100052e8:	2102      	movs	r1, #2
100052ea:	4248      	negs	r0, r1
100052ec:	e7f4      	b.n	100052d8 <__gedf2+0x88>
100052ee:	1c33      	adds	r3, r6, #0
100052f0:	433b      	orrs	r3, r7
100052f2:	d0c6      	beq.n	10005282 <__gedf2+0x32>
100052f4:	e7f8      	b.n	100052e8 <__gedf2+0x98>
100052f6:	4290      	cmp	r0, r2
100052f8:	dc05      	bgt.n	10005306 <__gedf2+0xb6>
100052fa:	da09      	bge.n	10005310 <__gedf2+0xc0>
100052fc:	4652      	mov	r2, sl
100052fe:	2a00      	cmp	r2, #0
10005300:	d0e8      	beq.n	100052d4 <__gedf2+0x84>
10005302:	2001      	movs	r0, #1
10005304:	e7e8      	b.n	100052d8 <__gedf2+0x88>
10005306:	4654      	mov	r4, sl
10005308:	2c00      	cmp	r4, #0
1000530a:	d1e3      	bne.n	100052d4 <__gedf2+0x84>
1000530c:	2001      	movs	r0, #1
1000530e:	e7e3      	b.n	100052d8 <__gedf2+0x88>
10005310:	42b5      	cmp	r5, r6
10005312:	d8c3      	bhi.n	1000529c <__gedf2+0x4c>
10005314:	d007      	beq.n	10005326 <__gedf2+0xd6>
10005316:	2000      	movs	r0, #0
10005318:	42b5      	cmp	r5, r6
1000531a:	d2dd      	bcs.n	100052d8 <__gedf2+0x88>
1000531c:	4650      	mov	r0, sl
1000531e:	2800      	cmp	r0, #0
10005320:	d0d8      	beq.n	100052d4 <__gedf2+0x84>
10005322:	2001      	movs	r0, #1
10005324:	e7d8      	b.n	100052d8 <__gedf2+0x88>
10005326:	42bc      	cmp	r4, r7
10005328:	d8b8      	bhi.n	1000529c <__gedf2+0x4c>
1000532a:	2000      	movs	r0, #0
1000532c:	42bc      	cmp	r4, r7
1000532e:	d3f5      	bcc.n	1000531c <__gedf2+0xcc>
10005330:	e7d2      	b.n	100052d8 <__gedf2+0x88>
10005332:	46c0      	nop			; (mov r8, r8)
10005334:	000007ff 	.word	0x000007ff

10005338 <__ledf2>:
10005338:	b5f0      	push	{r4, r5, r6, r7, lr}
1000533a:	4644      	mov	r4, r8
1000533c:	465f      	mov	r7, fp
1000533e:	4656      	mov	r6, sl
10005340:	464d      	mov	r5, r9
10005342:	b4f0      	push	{r4, r5, r6, r7}
10005344:	4694      	mov	ip, r2
10005346:	1c06      	adds	r6, r0, #0
10005348:	031a      	lsls	r2, r3, #12
1000534a:	0058      	lsls	r0, r3, #1
1000534c:	0b17      	lsrs	r7, r2, #12
1000534e:	0d42      	lsrs	r2, r0, #21
10005350:	482e      	ldr	r0, [pc, #184]	; (1000540c <__ledf2+0xd4>)
10005352:	030d      	lsls	r5, r1, #12
10005354:	004c      	lsls	r4, r1, #1
10005356:	0fdb      	lsrs	r3, r3, #31
10005358:	0b2d      	lsrs	r5, r5, #12
1000535a:	0d64      	lsrs	r4, r4, #21
1000535c:	0fc9      	lsrs	r1, r1, #31
1000535e:	4698      	mov	r8, r3
10005360:	4284      	cmp	r4, r0
10005362:	d033      	beq.n	100053cc <__ledf2+0x94>
10005364:	4829      	ldr	r0, [pc, #164]	; (1000540c <__ledf2+0xd4>)
10005366:	4282      	cmp	r2, r0
10005368:	d036      	beq.n	100053d8 <__ledf2+0xa0>
1000536a:	2c00      	cmp	r4, #0
1000536c:	d019      	beq.n	100053a2 <__ledf2+0x6a>
1000536e:	2a00      	cmp	r2, #0
10005370:	d120      	bne.n	100053b4 <__ledf2+0x7c>
10005372:	4693      	mov	fp, r2
10005374:	4663      	mov	r3, ip
10005376:	433b      	orrs	r3, r7
10005378:	4258      	negs	r0, r3
1000537a:	4158      	adcs	r0, r3
1000537c:	465b      	mov	r3, fp
1000537e:	4682      	mov	sl, r0
10005380:	2b00      	cmp	r3, #0
10005382:	d01d      	beq.n	100053c0 <__ledf2+0x88>
10005384:	4651      	mov	r1, sl
10005386:	2000      	movs	r0, #0
10005388:	2900      	cmp	r1, #0
1000538a:	d104      	bne.n	10005396 <__ledf2+0x5e>
1000538c:	4642      	mov	r2, r8
1000538e:	2a00      	cmp	r2, #0
10005390:	d114      	bne.n	100053bc <__ledf2+0x84>
10005392:	2401      	movs	r4, #1
10005394:	4260      	negs	r0, r4
10005396:	bc3c      	pop	{r2, r3, r4, r5}
10005398:	4690      	mov	r8, r2
1000539a:	4699      	mov	r9, r3
1000539c:	46a2      	mov	sl, r4
1000539e:	46ab      	mov	fp, r5
100053a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100053a2:	1c2b      	adds	r3, r5, #0
100053a4:	4333      	orrs	r3, r6
100053a6:	4258      	negs	r0, r3
100053a8:	4143      	adcs	r3, r0
100053aa:	469b      	mov	fp, r3
100053ac:	2a00      	cmp	r2, #0
100053ae:	d0e1      	beq.n	10005374 <__ledf2+0x3c>
100053b0:	2b00      	cmp	r3, #0
100053b2:	d1eb      	bne.n	1000538c <__ledf2+0x54>
100053b4:	4541      	cmp	r1, r8
100053b6:	d015      	beq.n	100053e4 <__ledf2+0xac>
100053b8:	2900      	cmp	r1, #0
100053ba:	d1ea      	bne.n	10005392 <__ledf2+0x5a>
100053bc:	2001      	movs	r0, #1
100053be:	e7ea      	b.n	10005396 <__ledf2+0x5e>
100053c0:	2800      	cmp	r0, #0
100053c2:	d0f7      	beq.n	100053b4 <__ledf2+0x7c>
100053c4:	2001      	movs	r0, #1
100053c6:	2900      	cmp	r1, #0
100053c8:	d0e5      	beq.n	10005396 <__ledf2+0x5e>
100053ca:	e7e2      	b.n	10005392 <__ledf2+0x5a>
100053cc:	1c2b      	adds	r3, r5, #0
100053ce:	4333      	orrs	r3, r6
100053d0:	2002      	movs	r0, #2
100053d2:	2b00      	cmp	r3, #0
100053d4:	d1df      	bne.n	10005396 <__ledf2+0x5e>
100053d6:	e7c5      	b.n	10005364 <__ledf2+0x2c>
100053d8:	4663      	mov	r3, ip
100053da:	433b      	orrs	r3, r7
100053dc:	2002      	movs	r0, #2
100053de:	2b00      	cmp	r3, #0
100053e0:	d1d9      	bne.n	10005396 <__ledf2+0x5e>
100053e2:	e7c2      	b.n	1000536a <__ledf2+0x32>
100053e4:	4294      	cmp	r4, r2
100053e6:	dce7      	bgt.n	100053b8 <__ledf2+0x80>
100053e8:	db05      	blt.n	100053f6 <__ledf2+0xbe>
100053ea:	42bd      	cmp	r5, r7
100053ec:	d8e4      	bhi.n	100053b8 <__ledf2+0x80>
100053ee:	d006      	beq.n	100053fe <__ledf2+0xc6>
100053f0:	2000      	movs	r0, #0
100053f2:	42bd      	cmp	r5, r7
100053f4:	d2cf      	bcs.n	10005396 <__ledf2+0x5e>
100053f6:	2900      	cmp	r1, #0
100053f8:	d0cb      	beq.n	10005392 <__ledf2+0x5a>
100053fa:	2001      	movs	r0, #1
100053fc:	e7cb      	b.n	10005396 <__ledf2+0x5e>
100053fe:	4566      	cmp	r6, ip
10005400:	d8da      	bhi.n	100053b8 <__ledf2+0x80>
10005402:	2000      	movs	r0, #0
10005404:	4566      	cmp	r6, ip
10005406:	d3f6      	bcc.n	100053f6 <__ledf2+0xbe>
10005408:	e7c5      	b.n	10005396 <__ledf2+0x5e>
1000540a:	46c0      	nop			; (mov r8, r8)
1000540c:	000007ff 	.word	0x000007ff

10005410 <__aeabi_dmul>:
10005410:	b5f0      	push	{r4, r5, r6, r7, lr}
10005412:	4656      	mov	r6, sl
10005414:	4644      	mov	r4, r8
10005416:	465f      	mov	r7, fp
10005418:	464d      	mov	r5, r9
1000541a:	b4f0      	push	{r4, r5, r6, r7}
1000541c:	004f      	lsls	r7, r1, #1
1000541e:	1c1d      	adds	r5, r3, #0
10005420:	030b      	lsls	r3, r1, #12
10005422:	1c14      	adds	r4, r2, #0
10005424:	0b1a      	lsrs	r2, r3, #12
10005426:	0d7b      	lsrs	r3, r7, #21
10005428:	b087      	sub	sp, #28
1000542a:	1c06      	adds	r6, r0, #0
1000542c:	4692      	mov	sl, r2
1000542e:	4698      	mov	r8, r3
10005430:	0fcf      	lsrs	r7, r1, #31
10005432:	2b00      	cmp	r3, #0
10005434:	d121      	bne.n	1000547a <__aeabi_dmul+0x6a>
10005436:	4302      	orrs	r2, r0
10005438:	d100      	bne.n	1000543c <__aeabi_dmul+0x2c>
1000543a:	e149      	b.n	100056d0 <__aeabi_dmul+0x2c0>
1000543c:	4653      	mov	r3, sl
1000543e:	2b00      	cmp	r3, #0
10005440:	d100      	bne.n	10005444 <__aeabi_dmul+0x34>
10005442:	e1e4      	b.n	1000580e <__aeabi_dmul+0x3fe>
10005444:	4650      	mov	r0, sl
10005446:	f000 ff3b 	bl	100062c0 <__clzsi2>
1000544a:	1e03      	subs	r3, r0, #0
1000544c:	2b27      	cmp	r3, #39	; 0x27
1000544e:	dd00      	ble.n	10005452 <__aeabi_dmul+0x42>
10005450:	e1d8      	b.n	10005804 <__aeabi_dmul+0x3f4>
10005452:	3b08      	subs	r3, #8
10005454:	4651      	mov	r1, sl
10005456:	4099      	lsls	r1, r3
10005458:	2228      	movs	r2, #40	; 0x28
1000545a:	4688      	mov	r8, r1
1000545c:	1a11      	subs	r1, r2, r0
1000545e:	1c32      	adds	r2, r6, #0
10005460:	40ca      	lsrs	r2, r1
10005462:	4641      	mov	r1, r8
10005464:	430a      	orrs	r2, r1
10005466:	4692      	mov	sl, r2
10005468:	409e      	lsls	r6, r3
1000546a:	4bd8      	ldr	r3, [pc, #864]	; (100057cc <__aeabi_dmul+0x3bc>)
1000546c:	2200      	movs	r2, #0
1000546e:	1a18      	subs	r0, r3, r0
10005470:	2100      	movs	r1, #0
10005472:	4680      	mov	r8, r0
10005474:	4691      	mov	r9, r2
10005476:	9103      	str	r1, [sp, #12]
10005478:	e011      	b.n	1000549e <__aeabi_dmul+0x8e>
1000547a:	48d5      	ldr	r0, [pc, #852]	; (100057d0 <__aeabi_dmul+0x3c0>)
1000547c:	4283      	cmp	r3, r0
1000547e:	d03e      	beq.n	100054fe <__aeabi_dmul+0xee>
10005480:	2180      	movs	r1, #128	; 0x80
10005482:	4653      	mov	r3, sl
10005484:	034a      	lsls	r2, r1, #13
10005486:	431a      	orrs	r2, r3
10005488:	00d0      	lsls	r0, r2, #3
1000548a:	0f71      	lsrs	r1, r6, #29
1000548c:	4308      	orrs	r0, r1
1000548e:	4ad1      	ldr	r2, [pc, #836]	; (100057d4 <__aeabi_dmul+0x3c4>)
10005490:	4682      	mov	sl, r0
10005492:	2300      	movs	r3, #0
10005494:	2000      	movs	r0, #0
10005496:	00f6      	lsls	r6, r6, #3
10005498:	4490      	add	r8, r2
1000549a:	4699      	mov	r9, r3
1000549c:	9003      	str	r0, [sp, #12]
1000549e:	1c29      	adds	r1, r5, #0
100054a0:	1c20      	adds	r0, r4, #0
100054a2:	1c25      	adds	r5, r4, #0
100054a4:	004a      	lsls	r2, r1, #1
100054a6:	030c      	lsls	r4, r1, #12
100054a8:	0fcb      	lsrs	r3, r1, #31
100054aa:	0b24      	lsrs	r4, r4, #12
100054ac:	0d52      	lsrs	r2, r2, #21
100054ae:	469b      	mov	fp, r3
100054b0:	d131      	bne.n	10005516 <__aeabi_dmul+0x106>
100054b2:	1c21      	adds	r1, r4, #0
100054b4:	4301      	orrs	r1, r0
100054b6:	d100      	bne.n	100054ba <__aeabi_dmul+0xaa>
100054b8:	e112      	b.n	100056e0 <__aeabi_dmul+0x2d0>
100054ba:	2c00      	cmp	r4, #0
100054bc:	d100      	bne.n	100054c0 <__aeabi_dmul+0xb0>
100054be:	e19d      	b.n	100057fc <__aeabi_dmul+0x3ec>
100054c0:	1c20      	adds	r0, r4, #0
100054c2:	f000 fefd 	bl	100062c0 <__clzsi2>
100054c6:	2827      	cmp	r0, #39	; 0x27
100054c8:	dd00      	ble.n	100054cc <__aeabi_dmul+0xbc>
100054ca:	e191      	b.n	100057f0 <__aeabi_dmul+0x3e0>
100054cc:	1c03      	adds	r3, r0, #0
100054ce:	2228      	movs	r2, #40	; 0x28
100054d0:	3b08      	subs	r3, #8
100054d2:	1c29      	adds	r1, r5, #0
100054d4:	1a12      	subs	r2, r2, r0
100054d6:	409c      	lsls	r4, r3
100054d8:	40d1      	lsrs	r1, r2
100054da:	430c      	orrs	r4, r1
100054dc:	409d      	lsls	r5, r3
100054de:	4bbb      	ldr	r3, [pc, #748]	; (100057cc <__aeabi_dmul+0x3bc>)
100054e0:	4659      	mov	r1, fp
100054e2:	1a1a      	subs	r2, r3, r0
100054e4:	4079      	eors	r1, r7
100054e6:	2000      	movs	r0, #0
100054e8:	464b      	mov	r3, r9
100054ea:	9101      	str	r1, [sp, #4]
100054ec:	4303      	orrs	r3, r0
100054ee:	2b0f      	cmp	r3, #15
100054f0:	d826      	bhi.n	10005540 <__aeabi_dmul+0x130>
100054f2:	0099      	lsls	r1, r3, #2
100054f4:	4bb8      	ldr	r3, [pc, #736]	; (100057d8 <__aeabi_dmul+0x3c8>)
100054f6:	468c      	mov	ip, r1
100054f8:	4463      	add	r3, ip
100054fa:	6819      	ldr	r1, [r3, #0]
100054fc:	468f      	mov	pc, r1
100054fe:	1c11      	adds	r1, r2, #0
10005500:	4331      	orrs	r1, r6
10005502:	d000      	beq.n	10005506 <__aeabi_dmul+0xf6>
10005504:	e0df      	b.n	100056c6 <__aeabi_dmul+0x2b6>
10005506:	2608      	movs	r6, #8
10005508:	2000      	movs	r0, #0
1000550a:	2102      	movs	r1, #2
1000550c:	46b1      	mov	r9, r6
1000550e:	4682      	mov	sl, r0
10005510:	2600      	movs	r6, #0
10005512:	9103      	str	r1, [sp, #12]
10005514:	e7c3      	b.n	1000549e <__aeabi_dmul+0x8e>
10005516:	48ae      	ldr	r0, [pc, #696]	; (100057d0 <__aeabi_dmul+0x3c0>)
10005518:	4282      	cmp	r2, r0
1000551a:	d100      	bne.n	1000551e <__aeabi_dmul+0x10e>
1000551c:	e0c9      	b.n	100056b2 <__aeabi_dmul+0x2a2>
1000551e:	2180      	movs	r1, #128	; 0x80
10005520:	034b      	lsls	r3, r1, #13
10005522:	431c      	orrs	r4, r3
10005524:	49ab      	ldr	r1, [pc, #684]	; (100057d4 <__aeabi_dmul+0x3c4>)
10005526:	0f68      	lsrs	r0, r5, #29
10005528:	00e4      	lsls	r4, r4, #3
1000552a:	4304      	orrs	r4, r0
1000552c:	00ed      	lsls	r5, r5, #3
1000552e:	1852      	adds	r2, r2, r1
10005530:	2000      	movs	r0, #0
10005532:	4659      	mov	r1, fp
10005534:	4079      	eors	r1, r7
10005536:	464b      	mov	r3, r9
10005538:	9101      	str	r1, [sp, #4]
1000553a:	4303      	orrs	r3, r0
1000553c:	2b0f      	cmp	r3, #15
1000553e:	d9d8      	bls.n	100054f2 <__aeabi_dmul+0xe2>
10005540:	4442      	add	r2, r8
10005542:	0433      	lsls	r3, r6, #16
10005544:	0429      	lsls	r1, r5, #16
10005546:	9204      	str	r2, [sp, #16]
10005548:	0c1a      	lsrs	r2, r3, #16
1000554a:	0c0f      	lsrs	r7, r1, #16
1000554c:	1c10      	adds	r0, r2, #0
1000554e:	4378      	muls	r0, r7
10005550:	0c36      	lsrs	r6, r6, #16
10005552:	1c33      	adds	r3, r6, #0
10005554:	4680      	mov	r8, r0
10005556:	0c2d      	lsrs	r5, r5, #16
10005558:	437b      	muls	r3, r7
1000555a:	1c30      	adds	r0, r6, #0
1000555c:	4368      	muls	r0, r5
1000555e:	1c11      	adds	r1, r2, #0
10005560:	4369      	muls	r1, r5
10005562:	469c      	mov	ip, r3
10005564:	4643      	mov	r3, r8
10005566:	4683      	mov	fp, r0
10005568:	0c18      	lsrs	r0, r3, #16
1000556a:	1808      	adds	r0, r1, r0
1000556c:	4460      	add	r0, ip
1000556e:	4584      	cmp	ip, r0
10005570:	d900      	bls.n	10005574 <__aeabi_dmul+0x164>
10005572:	e11f      	b.n	100057b4 <__aeabi_dmul+0x3a4>
10005574:	0c01      	lsrs	r1, r0, #16
10005576:	4643      	mov	r3, r8
10005578:	9103      	str	r1, [sp, #12]
1000557a:	0419      	lsls	r1, r3, #16
1000557c:	0c0b      	lsrs	r3, r1, #16
1000557e:	0400      	lsls	r0, r0, #16
10005580:	18c0      	adds	r0, r0, r3
10005582:	0421      	lsls	r1, r4, #16
10005584:	0c24      	lsrs	r4, r4, #16
10005586:	9005      	str	r0, [sp, #20]
10005588:	1c10      	adds	r0, r2, #0
1000558a:	4362      	muls	r2, r4
1000558c:	0c09      	lsrs	r1, r1, #16
1000558e:	9202      	str	r2, [sp, #8]
10005590:	4348      	muls	r0, r1
10005592:	1c32      	adds	r2, r6, #0
10005594:	4366      	muls	r6, r4
10005596:	434a      	muls	r2, r1
10005598:	9b02      	ldr	r3, [sp, #8]
1000559a:	46b1      	mov	r9, r6
1000559c:	0c06      	lsrs	r6, r0, #16
1000559e:	4690      	mov	r8, r2
100055a0:	46b4      	mov	ip, r6
100055a2:	1c1a      	adds	r2, r3, #0
100055a4:	4462      	add	r2, ip
100055a6:	4442      	add	r2, r8
100055a8:	4590      	cmp	r8, r2
100055aa:	d902      	bls.n	100055b2 <__aeabi_dmul+0x1a2>
100055ac:	2680      	movs	r6, #128	; 0x80
100055ae:	0273      	lsls	r3, r6, #9
100055b0:	4499      	add	r9, r3
100055b2:	0c16      	lsrs	r6, r2, #16
100055b4:	46b0      	mov	r8, r6
100055b6:	44c1      	add	r9, r8
100055b8:	0400      	lsls	r0, r0, #16
100055ba:	464b      	mov	r3, r9
100055bc:	0c06      	lsrs	r6, r0, #16
100055be:	0412      	lsls	r2, r2, #16
100055c0:	9302      	str	r3, [sp, #8]
100055c2:	1993      	adds	r3, r2, r6
100055c4:	4656      	mov	r6, sl
100055c6:	0432      	lsls	r2, r6, #16
100055c8:	0c10      	lsrs	r0, r2, #16
100055ca:	1c02      	adds	r2, r0, #0
100055cc:	436a      	muls	r2, r5
100055ce:	469c      	mov	ip, r3
100055d0:	1c03      	adds	r3, r0, #0
100055d2:	437b      	muls	r3, r7
100055d4:	4691      	mov	r9, r2
100055d6:	0c32      	lsrs	r2, r6, #16
100055d8:	4357      	muls	r7, r2
100055da:	4698      	mov	r8, r3
100055dc:	0c1b      	lsrs	r3, r3, #16
100055de:	469a      	mov	sl, r3
100055e0:	44d1      	add	r9, sl
100055e2:	44b9      	add	r9, r7
100055e4:	4355      	muls	r5, r2
100055e6:	454f      	cmp	r7, r9
100055e8:	d902      	bls.n	100055f0 <__aeabi_dmul+0x1e0>
100055ea:	2780      	movs	r7, #128	; 0x80
100055ec:	027e      	lsls	r6, r7, #9
100055ee:	19ad      	adds	r5, r5, r6
100055f0:	464b      	mov	r3, r9
100055f2:	0c1f      	lsrs	r7, r3, #16
100055f4:	4646      	mov	r6, r8
100055f6:	19ed      	adds	r5, r5, r7
100055f8:	041f      	lsls	r7, r3, #16
100055fa:	0433      	lsls	r3, r6, #16
100055fc:	0c1e      	lsrs	r6, r3, #16
100055fe:	1c03      	adds	r3, r0, #0
10005600:	434b      	muls	r3, r1
10005602:	4360      	muls	r0, r4
10005604:	4351      	muls	r1, r2
10005606:	4354      	muls	r4, r2
10005608:	0c1a      	lsrs	r2, r3, #16
1000560a:	1880      	adds	r0, r0, r2
1000560c:	46b0      	mov	r8, r6
1000560e:	1840      	adds	r0, r0, r1
10005610:	4447      	add	r7, r8
10005612:	469a      	mov	sl, r3
10005614:	4281      	cmp	r1, r0
10005616:	d902      	bls.n	1000561e <__aeabi_dmul+0x20e>
10005618:	2180      	movs	r1, #128	; 0x80
1000561a:	024e      	lsls	r6, r1, #9
1000561c:	19a4      	adds	r4, r4, r6
1000561e:	9b03      	ldr	r3, [sp, #12]
10005620:	1c1a      	adds	r2, r3, #0
10005622:	4462      	add	r2, ip
10005624:	445a      	add	r2, fp
10005626:	4562      	cmp	r2, ip
10005628:	4189      	sbcs	r1, r1
1000562a:	424e      	negs	r6, r1
1000562c:	4651      	mov	r1, sl
1000562e:	46b3      	mov	fp, r6
10005630:	0403      	lsls	r3, r0, #16
10005632:	040e      	lsls	r6, r1, #16
10005634:	469c      	mov	ip, r3
10005636:	9902      	ldr	r1, [sp, #8]
10005638:	0c33      	lsrs	r3, r6, #16
1000563a:	4463      	add	r3, ip
1000563c:	18ce      	adds	r6, r1, r3
1000563e:	46b0      	mov	r8, r6
10005640:	46c2      	mov	sl, r8
10005642:	44da      	add	sl, fp
10005644:	19d2      	adds	r2, r2, r7
10005646:	42ba      	cmp	r2, r7
10005648:	41bf      	sbcs	r7, r7
1000564a:	4651      	mov	r1, sl
1000564c:	427b      	negs	r3, r7
1000564e:	186f      	adds	r7, r5, r1
10005650:	18f9      	adds	r1, r7, r3
10005652:	4699      	mov	r9, r3
10005654:	45da      	cmp	sl, fp
10005656:	419b      	sbcs	r3, r3
10005658:	425e      	negs	r6, r3
1000565a:	9b02      	ldr	r3, [sp, #8]
1000565c:	46b3      	mov	fp, r6
1000565e:	4598      	cmp	r8, r3
10005660:	41b6      	sbcs	r6, r6
10005662:	4276      	negs	r6, r6
10005664:	465b      	mov	r3, fp
10005666:	431e      	orrs	r6, r3
10005668:	0c00      	lsrs	r0, r0, #16
1000566a:	4549      	cmp	r1, r9
1000566c:	419b      	sbcs	r3, r3
1000566e:	42af      	cmp	r7, r5
10005670:	41ad      	sbcs	r5, r5
10005672:	1836      	adds	r6, r6, r0
10005674:	426f      	negs	r7, r5
10005676:	4258      	negs	r0, r3
10005678:	4338      	orrs	r0, r7
1000567a:	1836      	adds	r6, r6, r0
1000567c:	9805      	ldr	r0, [sp, #20]
1000567e:	1934      	adds	r4, r6, r4
10005680:	0256      	lsls	r6, r2, #9
10005682:	4306      	orrs	r6, r0
10005684:	0dcb      	lsrs	r3, r1, #23
10005686:	0264      	lsls	r4, r4, #9
10005688:	1e70      	subs	r0, r6, #1
1000568a:	4186      	sbcs	r6, r0
1000568c:	0dd2      	lsrs	r2, r2, #23
1000568e:	4316      	orrs	r6, r2
10005690:	0249      	lsls	r1, r1, #9
10005692:	431c      	orrs	r4, r3
10005694:	430e      	orrs	r6, r1
10005696:	01e0      	lsls	r0, r4, #7
10005698:	d52f      	bpl.n	100056fa <__aeabi_dmul+0x2ea>
1000569a:	2701      	movs	r7, #1
1000569c:	9d04      	ldr	r5, [sp, #16]
1000569e:	4037      	ands	r7, r6
100056a0:	0873      	lsrs	r3, r6, #1
100056a2:	1c3e      	adds	r6, r7, #0
100056a4:	07e0      	lsls	r0, r4, #31
100056a6:	3501      	adds	r5, #1
100056a8:	431e      	orrs	r6, r3
100056aa:	9504      	str	r5, [sp, #16]
100056ac:	4306      	orrs	r6, r0
100056ae:	0864      	lsrs	r4, r4, #1
100056b0:	e023      	b.n	100056fa <__aeabi_dmul+0x2ea>
100056b2:	1c23      	adds	r3, r4, #0
100056b4:	432b      	orrs	r3, r5
100056b6:	2003      	movs	r0, #3
100056b8:	2b00      	cmp	r3, #0
100056ba:	d000      	beq.n	100056be <__aeabi_dmul+0x2ae>
100056bc:	e739      	b.n	10005532 <__aeabi_dmul+0x122>
100056be:	2400      	movs	r4, #0
100056c0:	2500      	movs	r5, #0
100056c2:	2002      	movs	r0, #2
100056c4:	e735      	b.n	10005532 <__aeabi_dmul+0x122>
100056c6:	220c      	movs	r2, #12
100056c8:	2303      	movs	r3, #3
100056ca:	4691      	mov	r9, r2
100056cc:	9303      	str	r3, [sp, #12]
100056ce:	e6e6      	b.n	1000549e <__aeabi_dmul+0x8e>
100056d0:	2604      	movs	r6, #4
100056d2:	2300      	movs	r3, #0
100056d4:	2001      	movs	r0, #1
100056d6:	46b1      	mov	r9, r6
100056d8:	469a      	mov	sl, r3
100056da:	2600      	movs	r6, #0
100056dc:	9003      	str	r0, [sp, #12]
100056de:	e6de      	b.n	1000549e <__aeabi_dmul+0x8e>
100056e0:	2400      	movs	r4, #0
100056e2:	2500      	movs	r5, #0
100056e4:	2001      	movs	r0, #1
100056e6:	e724      	b.n	10005532 <__aeabi_dmul+0x122>
100056e8:	9803      	ldr	r0, [sp, #12]
100056ea:	4654      	mov	r4, sl
100056ec:	2802      	cmp	r0, #2
100056ee:	d044      	beq.n	1000577a <__aeabi_dmul+0x36a>
100056f0:	2803      	cmp	r0, #3
100056f2:	d100      	bne.n	100056f6 <__aeabi_dmul+0x2e6>
100056f4:	e0ea      	b.n	100058cc <__aeabi_dmul+0x4bc>
100056f6:	2801      	cmp	r0, #1
100056f8:	d060      	beq.n	100057bc <__aeabi_dmul+0x3ac>
100056fa:	9a04      	ldr	r2, [sp, #16]
100056fc:	4937      	ldr	r1, [pc, #220]	; (100057dc <__aeabi_dmul+0x3cc>)
100056fe:	1850      	adds	r0, r2, r1
10005700:	2800      	cmp	r0, #0
10005702:	dc00      	bgt.n	10005706 <__aeabi_dmul+0x2f6>
10005704:	e095      	b.n	10005832 <__aeabi_dmul+0x422>
10005706:	270f      	movs	r7, #15
10005708:	4037      	ands	r7, r6
1000570a:	2f04      	cmp	r7, #4
1000570c:	d005      	beq.n	1000571a <__aeabi_dmul+0x30a>
1000570e:	1d31      	adds	r1, r6, #4
10005710:	42b1      	cmp	r1, r6
10005712:	41b6      	sbcs	r6, r6
10005714:	4275      	negs	r5, r6
10005716:	1964      	adds	r4, r4, r5
10005718:	1c0e      	adds	r6, r1, #0
1000571a:	01e1      	lsls	r1, r4, #7
1000571c:	d505      	bpl.n	1000572a <__aeabi_dmul+0x31a>
1000571e:	4830      	ldr	r0, [pc, #192]	; (100057e0 <__aeabi_dmul+0x3d0>)
10005720:	9a04      	ldr	r2, [sp, #16]
10005722:	2380      	movs	r3, #128	; 0x80
10005724:	00df      	lsls	r7, r3, #3
10005726:	4004      	ands	r4, r0
10005728:	19d0      	adds	r0, r2, r7
1000572a:	492e      	ldr	r1, [pc, #184]	; (100057e4 <__aeabi_dmul+0x3d4>)
1000572c:	4288      	cmp	r0, r1
1000572e:	dc24      	bgt.n	1000577a <__aeabi_dmul+0x36a>
10005730:	9b01      	ldr	r3, [sp, #4]
10005732:	0765      	lsls	r5, r4, #29
10005734:	08f6      	lsrs	r6, r6, #3
10005736:	0264      	lsls	r4, r4, #9
10005738:	0542      	lsls	r2, r0, #21
1000573a:	2701      	movs	r7, #1
1000573c:	432e      	orrs	r6, r5
1000573e:	0b24      	lsrs	r4, r4, #12
10005740:	0d52      	lsrs	r2, r2, #21
10005742:	401f      	ands	r7, r3
10005744:	2000      	movs	r0, #0
10005746:	2100      	movs	r1, #0
10005748:	0d09      	lsrs	r1, r1, #20
1000574a:	050d      	lsls	r5, r1, #20
1000574c:	4325      	orrs	r5, r4
1000574e:	4c26      	ldr	r4, [pc, #152]	; (100057e8 <__aeabi_dmul+0x3d8>)
10005750:	0512      	lsls	r2, r2, #20
10005752:	402c      	ands	r4, r5
10005754:	4314      	orrs	r4, r2
10005756:	0063      	lsls	r3, r4, #1
10005758:	1c30      	adds	r0, r6, #0
1000575a:	085e      	lsrs	r6, r3, #1
1000575c:	07ff      	lsls	r7, r7, #31
1000575e:	1c31      	adds	r1, r6, #0
10005760:	4339      	orrs	r1, r7
10005762:	b007      	add	sp, #28
10005764:	bc3c      	pop	{r2, r3, r4, r5}
10005766:	4690      	mov	r8, r2
10005768:	4699      	mov	r9, r3
1000576a:	46a2      	mov	sl, r4
1000576c:	46ab      	mov	fp, r5
1000576e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005770:	465a      	mov	r2, fp
10005772:	1c2e      	adds	r6, r5, #0
10005774:	9201      	str	r2, [sp, #4]
10005776:	2802      	cmp	r0, #2
10005778:	d1ba      	bne.n	100056f0 <__aeabi_dmul+0x2e0>
1000577a:	9e01      	ldr	r6, [sp, #4]
1000577c:	2701      	movs	r7, #1
1000577e:	4037      	ands	r7, r6
10005780:	4a13      	ldr	r2, [pc, #76]	; (100057d0 <__aeabi_dmul+0x3c0>)
10005782:	2400      	movs	r4, #0
10005784:	2600      	movs	r6, #0
10005786:	e7dd      	b.n	10005744 <__aeabi_dmul+0x334>
10005788:	4654      	mov	r4, sl
1000578a:	9701      	str	r7, [sp, #4]
1000578c:	9803      	ldr	r0, [sp, #12]
1000578e:	e7ad      	b.n	100056ec <__aeabi_dmul+0x2dc>
10005790:	2601      	movs	r6, #1
10005792:	2700      	movs	r7, #0
10005794:	4c15      	ldr	r4, [pc, #84]	; (100057ec <__aeabi_dmul+0x3dc>)
10005796:	4276      	negs	r6, r6
10005798:	4a0d      	ldr	r2, [pc, #52]	; (100057d0 <__aeabi_dmul+0x3c0>)
1000579a:	e7d3      	b.n	10005744 <__aeabi_dmul+0x334>
1000579c:	1c2e      	adds	r6, r5, #0
1000579e:	e7a5      	b.n	100056ec <__aeabi_dmul+0x2dc>
100057a0:	2280      	movs	r2, #128	; 0x80
100057a2:	0313      	lsls	r3, r2, #12
100057a4:	4651      	mov	r1, sl
100057a6:	4219      	tst	r1, r3
100057a8:	d135      	bne.n	10005816 <__aeabi_dmul+0x406>
100057aa:	430b      	orrs	r3, r1
100057ac:	031d      	lsls	r5, r3, #12
100057ae:	0b2c      	lsrs	r4, r5, #12
100057b0:	4a07      	ldr	r2, [pc, #28]	; (100057d0 <__aeabi_dmul+0x3c0>)
100057b2:	e7c7      	b.n	10005744 <__aeabi_dmul+0x334>
100057b4:	2180      	movs	r1, #128	; 0x80
100057b6:	024b      	lsls	r3, r1, #9
100057b8:	449b      	add	fp, r3
100057ba:	e6db      	b.n	10005574 <__aeabi_dmul+0x164>
100057bc:	9b01      	ldr	r3, [sp, #4]
100057be:	2200      	movs	r2, #0
100057c0:	4018      	ands	r0, r3
100057c2:	b2c7      	uxtb	r7, r0
100057c4:	2400      	movs	r4, #0
100057c6:	2600      	movs	r6, #0
100057c8:	e7bc      	b.n	10005744 <__aeabi_dmul+0x334>
100057ca:	46c0      	nop			; (mov r8, r8)
100057cc:	fffffc0d 	.word	0xfffffc0d
100057d0:	000007ff 	.word	0x000007ff
100057d4:	fffffc01 	.word	0xfffffc01
100057d8:	1002d334 	.word	0x1002d334
100057dc:	000003ff 	.word	0x000003ff
100057e0:	feffffff 	.word	0xfeffffff
100057e4:	000007fe 	.word	0x000007fe
100057e8:	800fffff 	.word	0x800fffff
100057ec:	000fffff 	.word	0x000fffff
100057f0:	1c04      	adds	r4, r0, #0
100057f2:	3c28      	subs	r4, #40	; 0x28
100057f4:	40a5      	lsls	r5, r4
100057f6:	1c2c      	adds	r4, r5, #0
100057f8:	2500      	movs	r5, #0
100057fa:	e670      	b.n	100054de <__aeabi_dmul+0xce>
100057fc:	f000 fd60 	bl	100062c0 <__clzsi2>
10005800:	3020      	adds	r0, #32
10005802:	e660      	b.n	100054c6 <__aeabi_dmul+0xb6>
10005804:	3b28      	subs	r3, #40	; 0x28
10005806:	409e      	lsls	r6, r3
10005808:	46b2      	mov	sl, r6
1000580a:	2600      	movs	r6, #0
1000580c:	e62d      	b.n	1000546a <__aeabi_dmul+0x5a>
1000580e:	f000 fd57 	bl	100062c0 <__clzsi2>
10005812:	3020      	adds	r0, #32
10005814:	e619      	b.n	1000544a <__aeabi_dmul+0x3a>
10005816:	421c      	tst	r4, r3
10005818:	d106      	bne.n	10005828 <__aeabi_dmul+0x418>
1000581a:	431c      	orrs	r4, r3
1000581c:	0326      	lsls	r6, r4, #12
1000581e:	0b34      	lsrs	r4, r6, #12
10005820:	465f      	mov	r7, fp
10005822:	1c2e      	adds	r6, r5, #0
10005824:	4a2e      	ldr	r2, [pc, #184]	; (100058e0 <__aeabi_dmul+0x4d0>)
10005826:	e78d      	b.n	10005744 <__aeabi_dmul+0x334>
10005828:	430b      	orrs	r3, r1
1000582a:	0318      	lsls	r0, r3, #12
1000582c:	0b04      	lsrs	r4, r0, #12
1000582e:	4a2c      	ldr	r2, [pc, #176]	; (100058e0 <__aeabi_dmul+0x4d0>)
10005830:	e788      	b.n	10005744 <__aeabi_dmul+0x334>
10005832:	4f2c      	ldr	r7, [pc, #176]	; (100058e4 <__aeabi_dmul+0x4d4>)
10005834:	9d04      	ldr	r5, [sp, #16]
10005836:	1b7b      	subs	r3, r7, r5
10005838:	2b38      	cmp	r3, #56	; 0x38
1000583a:	dd06      	ble.n	1000584a <__aeabi_dmul+0x43a>
1000583c:	9e01      	ldr	r6, [sp, #4]
1000583e:	2701      	movs	r7, #1
10005840:	4037      	ands	r7, r6
10005842:	2200      	movs	r2, #0
10005844:	2400      	movs	r4, #0
10005846:	2600      	movs	r6, #0
10005848:	e77c      	b.n	10005744 <__aeabi_dmul+0x334>
1000584a:	2b1f      	cmp	r3, #31
1000584c:	dc21      	bgt.n	10005892 <__aeabi_dmul+0x482>
1000584e:	9a04      	ldr	r2, [sp, #16]
10005850:	4f25      	ldr	r7, [pc, #148]	; (100058e8 <__aeabi_dmul+0x4d8>)
10005852:	1c35      	adds	r5, r6, #0
10005854:	19d1      	adds	r1, r2, r7
10005856:	1c20      	adds	r0, r4, #0
10005858:	408e      	lsls	r6, r1
1000585a:	40dd      	lsrs	r5, r3
1000585c:	4088      	lsls	r0, r1
1000585e:	1c32      	adds	r2, r6, #0
10005860:	4328      	orrs	r0, r5
10005862:	1e56      	subs	r6, r2, #1
10005864:	41b2      	sbcs	r2, r6
10005866:	1c06      	adds	r6, r0, #0
10005868:	4316      	orrs	r6, r2
1000586a:	40dc      	lsrs	r4, r3
1000586c:	230f      	movs	r3, #15
1000586e:	4033      	ands	r3, r6
10005870:	2b04      	cmp	r3, #4
10005872:	d005      	beq.n	10005880 <__aeabi_dmul+0x470>
10005874:	1d37      	adds	r7, r6, #4
10005876:	42b7      	cmp	r7, r6
10005878:	41b6      	sbcs	r6, r6
1000587a:	4271      	negs	r1, r6
1000587c:	1864      	adds	r4, r4, r1
1000587e:	1c3e      	adds	r6, r7, #0
10005880:	0225      	lsls	r5, r4, #8
10005882:	d517      	bpl.n	100058b4 <__aeabi_dmul+0x4a4>
10005884:	9b01      	ldr	r3, [sp, #4]
10005886:	2701      	movs	r7, #1
10005888:	401f      	ands	r7, r3
1000588a:	2201      	movs	r2, #1
1000588c:	2400      	movs	r4, #0
1000588e:	2600      	movs	r6, #0
10005890:	e758      	b.n	10005744 <__aeabi_dmul+0x334>
10005892:	4816      	ldr	r0, [pc, #88]	; (100058ec <__aeabi_dmul+0x4dc>)
10005894:	9a04      	ldr	r2, [sp, #16]
10005896:	1c21      	adds	r1, r4, #0
10005898:	1a87      	subs	r7, r0, r2
1000589a:	40f9      	lsrs	r1, r7
1000589c:	1c0d      	adds	r5, r1, #0
1000589e:	2b20      	cmp	r3, #32
100058a0:	d012      	beq.n	100058c8 <__aeabi_dmul+0x4b8>
100058a2:	4b13      	ldr	r3, [pc, #76]	; (100058f0 <__aeabi_dmul+0x4e0>)
100058a4:	18d0      	adds	r0, r2, r3
100058a6:	4084      	lsls	r4, r0
100058a8:	4326      	orrs	r6, r4
100058aa:	1e72      	subs	r2, r6, #1
100058ac:	4196      	sbcs	r6, r2
100058ae:	432e      	orrs	r6, r5
100058b0:	2400      	movs	r4, #0
100058b2:	e7db      	b.n	1000586c <__aeabi_dmul+0x45c>
100058b4:	9a01      	ldr	r2, [sp, #4]
100058b6:	0765      	lsls	r5, r4, #29
100058b8:	08f6      	lsrs	r6, r6, #3
100058ba:	0260      	lsls	r0, r4, #9
100058bc:	2701      	movs	r7, #1
100058be:	4017      	ands	r7, r2
100058c0:	432e      	orrs	r6, r5
100058c2:	0b04      	lsrs	r4, r0, #12
100058c4:	2200      	movs	r2, #0
100058c6:	e73d      	b.n	10005744 <__aeabi_dmul+0x334>
100058c8:	2400      	movs	r4, #0
100058ca:	e7ed      	b.n	100058a8 <__aeabi_dmul+0x498>
100058cc:	2180      	movs	r1, #128	; 0x80
100058ce:	030f      	lsls	r7, r1, #12
100058d0:	433c      	orrs	r4, r7
100058d2:	9801      	ldr	r0, [sp, #4]
100058d4:	0324      	lsls	r4, r4, #12
100058d6:	2701      	movs	r7, #1
100058d8:	0b24      	lsrs	r4, r4, #12
100058da:	4007      	ands	r7, r0
100058dc:	4a00      	ldr	r2, [pc, #0]	; (100058e0 <__aeabi_dmul+0x4d0>)
100058de:	e731      	b.n	10005744 <__aeabi_dmul+0x334>
100058e0:	000007ff 	.word	0x000007ff
100058e4:	fffffc02 	.word	0xfffffc02
100058e8:	0000041e 	.word	0x0000041e
100058ec:	fffffbe2 	.word	0xfffffbe2
100058f0:	0000043e 	.word	0x0000043e

100058f4 <__aeabi_dsub>:
100058f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100058f6:	4657      	mov	r7, sl
100058f8:	464e      	mov	r6, r9
100058fa:	4645      	mov	r5, r8
100058fc:	b4e0      	push	{r5, r6, r7}
100058fe:	1c07      	adds	r7, r0, #0
10005900:	030d      	lsls	r5, r1, #12
10005902:	004e      	lsls	r6, r1, #1
10005904:	0a68      	lsrs	r0, r5, #9
10005906:	0fcc      	lsrs	r4, r1, #31
10005908:	0f79      	lsrs	r1, r7, #29
1000590a:	4308      	orrs	r0, r1
1000590c:	4684      	mov	ip, r0
1000590e:	1c11      	adds	r1, r2, #0
10005910:	0318      	lsls	r0, r3, #12
10005912:	005a      	lsls	r2, r3, #1
10005914:	00fd      	lsls	r5, r7, #3
10005916:	0a40      	lsrs	r0, r0, #9
10005918:	0fdf      	lsrs	r7, r3, #31
1000591a:	0f4b      	lsrs	r3, r1, #29
1000591c:	4318      	orrs	r0, r3
1000591e:	4bca      	ldr	r3, [pc, #808]	; (10005c48 <__aeabi_dsub+0x354>)
10005920:	00c9      	lsls	r1, r1, #3
10005922:	0d76      	lsrs	r6, r6, #21
10005924:	0d52      	lsrs	r2, r2, #21
10005926:	468a      	mov	sl, r1
10005928:	429a      	cmp	r2, r3
1000592a:	d100      	bne.n	1000592e <__aeabi_dsub+0x3a>
1000592c:	e0e0      	b.n	10005af0 <__aeabi_dsub+0x1fc>
1000592e:	2301      	movs	r3, #1
10005930:	405f      	eors	r7, r3
10005932:	46b9      	mov	r9, r7
10005934:	42bc      	cmp	r4, r7
10005936:	d100      	bne.n	1000593a <__aeabi_dsub+0x46>
10005938:	e0a8      	b.n	10005a8c <__aeabi_dsub+0x198>
1000593a:	1ab7      	subs	r7, r6, r2
1000593c:	2f00      	cmp	r7, #0
1000593e:	dc00      	bgt.n	10005942 <__aeabi_dsub+0x4e>
10005940:	e110      	b.n	10005b64 <__aeabi_dsub+0x270>
10005942:	2a00      	cmp	r2, #0
10005944:	d112      	bne.n	1000596c <__aeabi_dsub+0x78>
10005946:	4652      	mov	r2, sl
10005948:	4302      	orrs	r2, r0
1000594a:	d100      	bne.n	1000594e <__aeabi_dsub+0x5a>
1000594c:	e0d4      	b.n	10005af8 <__aeabi_dsub+0x204>
1000594e:	3f01      	subs	r7, #1
10005950:	2f00      	cmp	r7, #0
10005952:	d000      	beq.n	10005956 <__aeabi_dsub+0x62>
10005954:	e160      	b.n	10005c18 <__aeabi_dsub+0x324>
10005956:	4651      	mov	r1, sl
10005958:	1a6f      	subs	r7, r5, r1
1000595a:	42bd      	cmp	r5, r7
1000595c:	41ad      	sbcs	r5, r5
1000595e:	4662      	mov	r2, ip
10005960:	426b      	negs	r3, r5
10005962:	1a10      	subs	r0, r2, r0
10005964:	1c3d      	adds	r5, r7, #0
10005966:	1ac3      	subs	r3, r0, r3
10005968:	1c37      	adds	r7, r6, #0
1000596a:	e024      	b.n	100059b6 <__aeabi_dsub+0xc2>
1000596c:	4ab6      	ldr	r2, [pc, #728]	; (10005c48 <__aeabi_dsub+0x354>)
1000596e:	4296      	cmp	r6, r2
10005970:	d100      	bne.n	10005974 <__aeabi_dsub+0x80>
10005972:	e0e3      	b.n	10005b3c <__aeabi_dsub+0x248>
10005974:	2180      	movs	r1, #128	; 0x80
10005976:	040b      	lsls	r3, r1, #16
10005978:	4318      	orrs	r0, r3
1000597a:	2f38      	cmp	r7, #56	; 0x38
1000597c:	dd00      	ble.n	10005980 <__aeabi_dsub+0x8c>
1000597e:	e123      	b.n	10005bc8 <__aeabi_dsub+0x2d4>
10005980:	2f1f      	cmp	r7, #31
10005982:	dd00      	ble.n	10005986 <__aeabi_dsub+0x92>
10005984:	e166      	b.n	10005c54 <__aeabi_dsub+0x360>
10005986:	2120      	movs	r1, #32
10005988:	1bc9      	subs	r1, r1, r7
1000598a:	1c02      	adds	r2, r0, #0
1000598c:	4653      	mov	r3, sl
1000598e:	408a      	lsls	r2, r1
10005990:	40fb      	lsrs	r3, r7
10005992:	431a      	orrs	r2, r3
10005994:	4653      	mov	r3, sl
10005996:	408b      	lsls	r3, r1
10005998:	1c19      	adds	r1, r3, #0
1000599a:	1e4b      	subs	r3, r1, #1
1000599c:	4199      	sbcs	r1, r3
1000599e:	1c03      	adds	r3, r0, #0
100059a0:	430a      	orrs	r2, r1
100059a2:	40fb      	lsrs	r3, r7
100059a4:	1aaa      	subs	r2, r5, r2
100059a6:	4667      	mov	r7, ip
100059a8:	4295      	cmp	r5, r2
100059aa:	41ad      	sbcs	r5, r5
100059ac:	1af8      	subs	r0, r7, r3
100059ae:	426b      	negs	r3, r5
100059b0:	1ac3      	subs	r3, r0, r3
100059b2:	1c15      	adds	r5, r2, #0
100059b4:	1c37      	adds	r7, r6, #0
100059b6:	021a      	lsls	r2, r3, #8
100059b8:	d400      	bmi.n	100059bc <__aeabi_dsub+0xc8>
100059ba:	e0c7      	b.n	10005b4c <__aeabi_dsub+0x258>
100059bc:	025e      	lsls	r6, r3, #9
100059be:	0a71      	lsrs	r1, r6, #9
100059c0:	4688      	mov	r8, r1
100059c2:	4642      	mov	r2, r8
100059c4:	2a00      	cmp	r2, #0
100059c6:	d100      	bne.n	100059ca <__aeabi_dsub+0xd6>
100059c8:	e0f0      	b.n	10005bac <__aeabi_dsub+0x2b8>
100059ca:	4640      	mov	r0, r8
100059cc:	f000 fc78 	bl	100062c0 <__clzsi2>
100059d0:	1c02      	adds	r2, r0, #0
100059d2:	3a08      	subs	r2, #8
100059d4:	2a1f      	cmp	r2, #31
100059d6:	dd00      	ble.n	100059da <__aeabi_dsub+0xe6>
100059d8:	e0f1      	b.n	10005bbe <__aeabi_dsub+0x2ca>
100059da:	2328      	movs	r3, #40	; 0x28
100059dc:	1a18      	subs	r0, r3, r0
100059de:	1c2e      	adds	r6, r5, #0
100059e0:	4641      	mov	r1, r8
100059e2:	40c6      	lsrs	r6, r0
100059e4:	4091      	lsls	r1, r2
100059e6:	1c33      	adds	r3, r6, #0
100059e8:	430b      	orrs	r3, r1
100059ea:	4095      	lsls	r5, r2
100059ec:	4297      	cmp	r7, r2
100059ee:	dd00      	ble.n	100059f2 <__aeabi_dsub+0xfe>
100059f0:	e0a9      	b.n	10005b46 <__aeabi_dsub+0x252>
100059f2:	1bd0      	subs	r0, r2, r7
100059f4:	1c41      	adds	r1, r0, #1
100059f6:	291f      	cmp	r1, #31
100059f8:	dd00      	ble.n	100059fc <__aeabi_dsub+0x108>
100059fa:	e112      	b.n	10005c22 <__aeabi_dsub+0x32e>
100059fc:	271f      	movs	r7, #31
100059fe:	1a3a      	subs	r2, r7, r0
10005a00:	1c2e      	adds	r6, r5, #0
10005a02:	1c18      	adds	r0, r3, #0
10005a04:	40ce      	lsrs	r6, r1
10005a06:	4090      	lsls	r0, r2
10005a08:	4095      	lsls	r5, r2
10005a0a:	4330      	orrs	r0, r6
10005a0c:	1e6a      	subs	r2, r5, #1
10005a0e:	4195      	sbcs	r5, r2
10005a10:	40cb      	lsrs	r3, r1
10005a12:	4305      	orrs	r5, r0
10005a14:	2101      	movs	r1, #1
10005a16:	2700      	movs	r7, #0
10005a18:	260f      	movs	r6, #15
10005a1a:	402e      	ands	r6, r5
10005a1c:	2e04      	cmp	r6, #4
10005a1e:	d100      	bne.n	10005a22 <__aeabi_dsub+0x12e>
10005a20:	e072      	b.n	10005b08 <__aeabi_dsub+0x214>
10005a22:	1d2e      	adds	r6, r5, #4
10005a24:	42ae      	cmp	r6, r5
10005a26:	41ad      	sbcs	r5, r5
10005a28:	4268      	negs	r0, r5
10005a2a:	2280      	movs	r2, #128	; 0x80
10005a2c:	181b      	adds	r3, r3, r0
10005a2e:	2501      	movs	r5, #1
10005a30:	0410      	lsls	r0, r2, #16
10005a32:	4018      	ands	r0, r3
10005a34:	402c      	ands	r4, r5
10005a36:	2800      	cmp	r0, #0
10005a38:	d007      	beq.n	10005a4a <__aeabi_dsub+0x156>
10005a3a:	4f83      	ldr	r7, [pc, #524]	; (10005c48 <__aeabi_dsub+0x354>)
10005a3c:	42b9      	cmp	r1, r7
10005a3e:	d100      	bne.n	10005a42 <__aeabi_dsub+0x14e>
10005a40:	e0b0      	b.n	10005ba4 <__aeabi_dsub+0x2b0>
10005a42:	4a82      	ldr	r2, [pc, #520]	; (10005c4c <__aeabi_dsub+0x358>)
10005a44:	1c0f      	adds	r7, r1, #0
10005a46:	4013      	ands	r3, r2
10005a48:	3101      	adds	r1, #1
10005a4a:	08f2      	lsrs	r2, r6, #3
10005a4c:	0549      	lsls	r1, r1, #21
10005a4e:	075e      	lsls	r6, r3, #29
10005a50:	4332      	orrs	r2, r6
10005a52:	08db      	lsrs	r3, r3, #3
10005a54:	0d48      	lsrs	r0, r1, #21
10005a56:	2801      	cmp	r0, #1
10005a58:	dc00      	bgt.n	10005a5c <__aeabi_dsub+0x168>
10005a5a:	e079      	b.n	10005b50 <__aeabi_dsub+0x25c>
10005a5c:	031b      	lsls	r3, r3, #12
10005a5e:	0578      	lsls	r0, r7, #21
10005a60:	0b1e      	lsrs	r6, r3, #12
10005a62:	0d47      	lsrs	r7, r0, #21
10005a64:	2000      	movs	r0, #0
10005a66:	2100      	movs	r1, #0
10005a68:	0d09      	lsrs	r1, r1, #20
10005a6a:	057d      	lsls	r5, r7, #21
10005a6c:	050b      	lsls	r3, r1, #20
10005a6e:	4f78      	ldr	r7, [pc, #480]	; (10005c50 <__aeabi_dsub+0x35c>)
10005a70:	431e      	orrs	r6, r3
10005a72:	1c10      	adds	r0, r2, #0
10005a74:	4037      	ands	r7, r6
10005a76:	086a      	lsrs	r2, r5, #1
10005a78:	4317      	orrs	r7, r2
10005a7a:	007e      	lsls	r6, r7, #1
10005a7c:	0871      	lsrs	r1, r6, #1
10005a7e:	07e4      	lsls	r4, r4, #31
10005a80:	4321      	orrs	r1, r4
10005a82:	bc1c      	pop	{r2, r3, r4}
10005a84:	4690      	mov	r8, r2
10005a86:	4699      	mov	r9, r3
10005a88:	46a2      	mov	sl, r4
10005a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005a8c:	1ab3      	subs	r3, r6, r2
10005a8e:	2b00      	cmp	r3, #0
10005a90:	dc00      	bgt.n	10005a94 <__aeabi_dsub+0x1a0>
10005a92:	e0a6      	b.n	10005be2 <__aeabi_dsub+0x2ee>
10005a94:	2a00      	cmp	r2, #0
10005a96:	d03e      	beq.n	10005b16 <__aeabi_dsub+0x222>
10005a98:	4a6b      	ldr	r2, [pc, #428]	; (10005c48 <__aeabi_dsub+0x354>)
10005a9a:	4296      	cmp	r6, r2
10005a9c:	d04e      	beq.n	10005b3c <__aeabi_dsub+0x248>
10005a9e:	2180      	movs	r1, #128	; 0x80
10005aa0:	040f      	lsls	r7, r1, #16
10005aa2:	4338      	orrs	r0, r7
10005aa4:	2b38      	cmp	r3, #56	; 0x38
10005aa6:	dc00      	bgt.n	10005aaa <__aeabi_dsub+0x1b6>
10005aa8:	e118      	b.n	10005cdc <__aeabi_dsub+0x3e8>
10005aaa:	4653      	mov	r3, sl
10005aac:	4318      	orrs	r0, r3
10005aae:	2700      	movs	r7, #0
10005ab0:	2200      	movs	r2, #0
10005ab2:	2800      	cmp	r0, #0
10005ab4:	d000      	beq.n	10005ab8 <__aeabi_dsub+0x1c4>
10005ab6:	2201      	movs	r2, #1
10005ab8:	1952      	adds	r2, r2, r5
10005aba:	42aa      	cmp	r2, r5
10005abc:	41ad      	sbcs	r5, r5
10005abe:	4467      	add	r7, ip
10005ac0:	426b      	negs	r3, r5
10005ac2:	18fb      	adds	r3, r7, r3
10005ac4:	1c15      	adds	r5, r2, #0
10005ac6:	1c37      	adds	r7, r6, #0
10005ac8:	021e      	lsls	r6, r3, #8
10005aca:	d53f      	bpl.n	10005b4c <__aeabi_dsub+0x258>
10005acc:	485e      	ldr	r0, [pc, #376]	; (10005c48 <__aeabi_dsub+0x354>)
10005ace:	1c7e      	adds	r6, r7, #1
10005ad0:	4286      	cmp	r6, r0
10005ad2:	d100      	bne.n	10005ad6 <__aeabi_dsub+0x1e2>
10005ad4:	e17b      	b.n	10005dce <__aeabi_dsub+0x4da>
10005ad6:	495d      	ldr	r1, [pc, #372]	; (10005c4c <__aeabi_dsub+0x358>)
10005ad8:	2201      	movs	r2, #1
10005ada:	402a      	ands	r2, r5
10005adc:	400b      	ands	r3, r1
10005ade:	0868      	lsrs	r0, r5, #1
10005ae0:	1c15      	adds	r5, r2, #0
10005ae2:	07d9      	lsls	r1, r3, #31
10005ae4:	4305      	orrs	r5, r0
10005ae6:	430d      	orrs	r5, r1
10005ae8:	085b      	lsrs	r3, r3, #1
10005aea:	1cb9      	adds	r1, r7, #2
10005aec:	1c37      	adds	r7, r6, #0
10005aee:	e793      	b.n	10005a18 <__aeabi_dsub+0x124>
10005af0:	4301      	orrs	r1, r0
10005af2:	d100      	bne.n	10005af6 <__aeabi_dsub+0x202>
10005af4:	e71b      	b.n	1000592e <__aeabi_dsub+0x3a>
10005af6:	e71c      	b.n	10005932 <__aeabi_dsub+0x3e>
10005af8:	1c71      	adds	r1, r6, #1
10005afa:	1c37      	adds	r7, r6, #0
10005afc:	260f      	movs	r6, #15
10005afe:	4663      	mov	r3, ip
10005b00:	402e      	ands	r6, r5
10005b02:	2e04      	cmp	r6, #4
10005b04:	d000      	beq.n	10005b08 <__aeabi_dsub+0x214>
10005b06:	e78c      	b.n	10005a22 <__aeabi_dsub+0x12e>
10005b08:	2280      	movs	r2, #128	; 0x80
10005b0a:	2601      	movs	r6, #1
10005b0c:	0410      	lsls	r0, r2, #16
10005b0e:	4034      	ands	r4, r6
10005b10:	4018      	ands	r0, r3
10005b12:	1c2e      	adds	r6, r5, #0
10005b14:	e78f      	b.n	10005a36 <__aeabi_dsub+0x142>
10005b16:	4652      	mov	r2, sl
10005b18:	4302      	orrs	r2, r0
10005b1a:	d0ed      	beq.n	10005af8 <__aeabi_dsub+0x204>
10005b1c:	3b01      	subs	r3, #1
10005b1e:	2b00      	cmp	r3, #0
10005b20:	d109      	bne.n	10005b36 <__aeabi_dsub+0x242>
10005b22:	4657      	mov	r7, sl
10005b24:	1979      	adds	r1, r7, r5
10005b26:	42a9      	cmp	r1, r5
10005b28:	4192      	sbcs	r2, r2
10005b2a:	4255      	negs	r5, r2
10005b2c:	4460      	add	r0, ip
10005b2e:	1943      	adds	r3, r0, r5
10005b30:	1c37      	adds	r7, r6, #0
10005b32:	1c0d      	adds	r5, r1, #0
10005b34:	e7c8      	b.n	10005ac8 <__aeabi_dsub+0x1d4>
10005b36:	4944      	ldr	r1, [pc, #272]	; (10005c48 <__aeabi_dsub+0x354>)
10005b38:	428e      	cmp	r6, r1
10005b3a:	d1b3      	bne.n	10005aa4 <__aeabi_dsub+0x1b0>
10005b3c:	2080      	movs	r0, #128	; 0x80
10005b3e:	4663      	mov	r3, ip
10005b40:	0101      	lsls	r1, r0, #4
10005b42:	1c37      	adds	r7, r6, #0
10005b44:	e768      	b.n	10005a18 <__aeabi_dsub+0x124>
10005b46:	1abf      	subs	r7, r7, r2
10005b48:	4a40      	ldr	r2, [pc, #256]	; (10005c4c <__aeabi_dsub+0x358>)
10005b4a:	4013      	ands	r3, r2
10005b4c:	1c79      	adds	r1, r7, #1
10005b4e:	e763      	b.n	10005a18 <__aeabi_dsub+0x124>
10005b50:	1c15      	adds	r5, r2, #0
10005b52:	431d      	orrs	r5, r3
10005b54:	d100      	bne.n	10005b58 <__aeabi_dsub+0x264>
10005b56:	e221      	b.n	10005f9c <__aeabi_dsub+0x6a8>
10005b58:	2f00      	cmp	r7, #0
10005b5a:	d03e      	beq.n	10005bda <__aeabi_dsub+0x2e6>
10005b5c:	2680      	movs	r6, #128	; 0x80
10005b5e:	0331      	lsls	r1, r6, #12
10005b60:	430b      	orrs	r3, r1
10005b62:	e77b      	b.n	10005a5c <__aeabi_dsub+0x168>
10005b64:	2f00      	cmp	r7, #0
10005b66:	d000      	beq.n	10005b6a <__aeabi_dsub+0x276>
10005b68:	e086      	b.n	10005c78 <__aeabi_dsub+0x384>
10005b6a:	1c72      	adds	r2, r6, #1
10005b6c:	0551      	lsls	r1, r2, #21
10005b6e:	0d4b      	lsrs	r3, r1, #21
10005b70:	2b01      	cmp	r3, #1
10005b72:	dc00      	bgt.n	10005b76 <__aeabi_dsub+0x282>
10005b74:	e0f0      	b.n	10005d58 <__aeabi_dsub+0x464>
10005b76:	4657      	mov	r7, sl
10005b78:	1bea      	subs	r2, r5, r7
10005b7a:	4295      	cmp	r5, r2
10005b7c:	419b      	sbcs	r3, r3
10005b7e:	4667      	mov	r7, ip
10005b80:	1a39      	subs	r1, r7, r0
10005b82:	425b      	negs	r3, r3
10005b84:	1ac9      	subs	r1, r1, r3
10005b86:	4688      	mov	r8, r1
10005b88:	020b      	lsls	r3, r1, #8
10005b8a:	d400      	bmi.n	10005b8e <__aeabi_dsub+0x29a>
10005b8c:	e09d      	b.n	10005cca <__aeabi_dsub+0x3d6>
10005b8e:	4654      	mov	r4, sl
10005b90:	1b65      	subs	r5, r4, r5
10005b92:	45aa      	cmp	sl, r5
10005b94:	4192      	sbcs	r2, r2
10005b96:	1bc0      	subs	r0, r0, r7
10005b98:	4257      	negs	r7, r2
10005b9a:	1bc3      	subs	r3, r0, r7
10005b9c:	4698      	mov	r8, r3
10005b9e:	1c37      	adds	r7, r6, #0
10005ba0:	464c      	mov	r4, r9
10005ba2:	e70e      	b.n	100059c2 <__aeabi_dsub+0xce>
10005ba4:	1c0f      	adds	r7, r1, #0
10005ba6:	2600      	movs	r6, #0
10005ba8:	2200      	movs	r2, #0
10005baa:	e75b      	b.n	10005a64 <__aeabi_dsub+0x170>
10005bac:	1c28      	adds	r0, r5, #0
10005bae:	f000 fb87 	bl	100062c0 <__clzsi2>
10005bb2:	3020      	adds	r0, #32
10005bb4:	1c02      	adds	r2, r0, #0
10005bb6:	3a08      	subs	r2, #8
10005bb8:	2a1f      	cmp	r2, #31
10005bba:	dc00      	bgt.n	10005bbe <__aeabi_dsub+0x2ca>
10005bbc:	e70d      	b.n	100059da <__aeabi_dsub+0xe6>
10005bbe:	3828      	subs	r0, #40	; 0x28
10005bc0:	4085      	lsls	r5, r0
10005bc2:	1c2b      	adds	r3, r5, #0
10005bc4:	2500      	movs	r5, #0
10005bc6:	e711      	b.n	100059ec <__aeabi_dsub+0xf8>
10005bc8:	4657      	mov	r7, sl
10005bca:	4338      	orrs	r0, r7
10005bcc:	2300      	movs	r3, #0
10005bce:	2200      	movs	r2, #0
10005bd0:	2800      	cmp	r0, #0
10005bd2:	d100      	bne.n	10005bd6 <__aeabi_dsub+0x2e2>
10005bd4:	e6e6      	b.n	100059a4 <__aeabi_dsub+0xb0>
10005bd6:	2201      	movs	r2, #1
10005bd8:	e6e4      	b.n	100059a4 <__aeabi_dsub+0xb0>
10005bda:	031d      	lsls	r5, r3, #12
10005bdc:	0b2e      	lsrs	r6, r5, #12
10005bde:	2700      	movs	r7, #0
10005be0:	e740      	b.n	10005a64 <__aeabi_dsub+0x170>
10005be2:	2b00      	cmp	r3, #0
10005be4:	d000      	beq.n	10005be8 <__aeabi_dsub+0x2f4>
10005be6:	e0d9      	b.n	10005d9c <__aeabi_dsub+0x4a8>
10005be8:	1c77      	adds	r7, r6, #1
10005bea:	0579      	lsls	r1, r7, #21
10005bec:	0d4a      	lsrs	r2, r1, #21
10005bee:	2a01      	cmp	r2, #1
10005bf0:	dc00      	bgt.n	10005bf4 <__aeabi_dsub+0x300>
10005bf2:	e095      	b.n	10005d20 <__aeabi_dsub+0x42c>
10005bf4:	4b14      	ldr	r3, [pc, #80]	; (10005c48 <__aeabi_dsub+0x354>)
10005bf6:	429f      	cmp	r7, r3
10005bf8:	d100      	bne.n	10005bfc <__aeabi_dsub+0x308>
10005bfa:	e0fe      	b.n	10005dfa <__aeabi_dsub+0x506>
10005bfc:	4651      	mov	r1, sl
10005bfe:	1949      	adds	r1, r1, r5
10005c00:	42a9      	cmp	r1, r5
10005c02:	41ad      	sbcs	r5, r5
10005c04:	4662      	mov	r2, ip
10005c06:	426b      	negs	r3, r5
10005c08:	1880      	adds	r0, r0, r2
10005c0a:	18c2      	adds	r2, r0, r3
10005c0c:	0849      	lsrs	r1, r1, #1
10005c0e:	07d5      	lsls	r5, r2, #31
10005c10:	430d      	orrs	r5, r1
10005c12:	0853      	lsrs	r3, r2, #1
10005c14:	1cb1      	adds	r1, r6, #2
10005c16:	e6ff      	b.n	10005a18 <__aeabi_dsub+0x124>
10005c18:	490b      	ldr	r1, [pc, #44]	; (10005c48 <__aeabi_dsub+0x354>)
10005c1a:	428e      	cmp	r6, r1
10005c1c:	d000      	beq.n	10005c20 <__aeabi_dsub+0x32c>
10005c1e:	e6ac      	b.n	1000597a <__aeabi_dsub+0x86>
10005c20:	e78c      	b.n	10005b3c <__aeabi_dsub+0x248>
10005c22:	1c06      	adds	r6, r0, #0
10005c24:	3e1f      	subs	r6, #31
10005c26:	1c1f      	adds	r7, r3, #0
10005c28:	40f7      	lsrs	r7, r6
10005c2a:	1c3e      	adds	r6, r7, #0
10005c2c:	2920      	cmp	r1, #32
10005c2e:	d073      	beq.n	10005d18 <__aeabi_dsub+0x424>
10005c30:	223f      	movs	r2, #63	; 0x3f
10005c32:	1a10      	subs	r0, r2, r0
10005c34:	4083      	lsls	r3, r0
10005c36:	431d      	orrs	r5, r3
10005c38:	1e6b      	subs	r3, r5, #1
10005c3a:	419d      	sbcs	r5, r3
10005c3c:	4335      	orrs	r5, r6
10005c3e:	2101      	movs	r1, #1
10005c40:	2300      	movs	r3, #0
10005c42:	2700      	movs	r7, #0
10005c44:	e6e8      	b.n	10005a18 <__aeabi_dsub+0x124>
10005c46:	46c0      	nop			; (mov r8, r8)
10005c48:	000007ff 	.word	0x000007ff
10005c4c:	ff7fffff 	.word	0xff7fffff
10005c50:	800fffff 	.word	0x800fffff
10005c54:	1c3b      	adds	r3, r7, #0
10005c56:	3b20      	subs	r3, #32
10005c58:	1c01      	adds	r1, r0, #0
10005c5a:	40d9      	lsrs	r1, r3
10005c5c:	1c0b      	adds	r3, r1, #0
10005c5e:	2f20      	cmp	r7, #32
10005c60:	d05c      	beq.n	10005d1c <__aeabi_dsub+0x428>
10005c62:	2240      	movs	r2, #64	; 0x40
10005c64:	1bd7      	subs	r7, r2, r7
10005c66:	40b8      	lsls	r0, r7
10005c68:	1c02      	adds	r2, r0, #0
10005c6a:	4650      	mov	r0, sl
10005c6c:	4302      	orrs	r2, r0
10005c6e:	1e51      	subs	r1, r2, #1
10005c70:	418a      	sbcs	r2, r1
10005c72:	431a      	orrs	r2, r3
10005c74:	2300      	movs	r3, #0
10005c76:	e695      	b.n	100059a4 <__aeabi_dsub+0xb0>
10005c78:	427f      	negs	r7, r7
10005c7a:	2e00      	cmp	r6, #0
10005c7c:	d040      	beq.n	10005d00 <__aeabi_dsub+0x40c>
10005c7e:	4cca      	ldr	r4, [pc, #808]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005c80:	42a2      	cmp	r2, r4
10005c82:	d100      	bne.n	10005c86 <__aeabi_dsub+0x392>
10005c84:	e11f      	b.n	10005ec6 <__aeabi_dsub+0x5d2>
10005c86:	2180      	movs	r1, #128	; 0x80
10005c88:	4666      	mov	r6, ip
10005c8a:	040b      	lsls	r3, r1, #16
10005c8c:	431e      	orrs	r6, r3
10005c8e:	46b4      	mov	ip, r6
10005c90:	2f38      	cmp	r7, #56	; 0x38
10005c92:	dd00      	ble.n	10005c96 <__aeabi_dsub+0x3a2>
10005c94:	e0a9      	b.n	10005dea <__aeabi_dsub+0x4f6>
10005c96:	2f1f      	cmp	r7, #31
10005c98:	dd00      	ble.n	10005c9c <__aeabi_dsub+0x3a8>
10005c9a:	e13d      	b.n	10005f18 <__aeabi_dsub+0x624>
10005c9c:	2320      	movs	r3, #32
10005c9e:	1bde      	subs	r6, r3, r7
10005ca0:	1c29      	adds	r1, r5, #0
10005ca2:	4664      	mov	r4, ip
10005ca4:	40b4      	lsls	r4, r6
10005ca6:	40f9      	lsrs	r1, r7
10005ca8:	40b5      	lsls	r5, r6
10005caa:	1e6b      	subs	r3, r5, #1
10005cac:	419d      	sbcs	r5, r3
10005cae:	4321      	orrs	r1, r4
10005cb0:	4663      	mov	r3, ip
10005cb2:	430d      	orrs	r5, r1
10005cb4:	40fb      	lsrs	r3, r7
10005cb6:	4657      	mov	r7, sl
10005cb8:	1b7d      	subs	r5, r7, r5
10005cba:	1ac0      	subs	r0, r0, r3
10005cbc:	45aa      	cmp	sl, r5
10005cbe:	419b      	sbcs	r3, r3
10005cc0:	425f      	negs	r7, r3
10005cc2:	1bc3      	subs	r3, r0, r7
10005cc4:	464c      	mov	r4, r9
10005cc6:	1c17      	adds	r7, r2, #0
10005cc8:	e675      	b.n	100059b6 <__aeabi_dsub+0xc2>
10005cca:	1c0d      	adds	r5, r1, #0
10005ccc:	4315      	orrs	r5, r2
10005cce:	d120      	bne.n	10005d12 <__aeabi_dsub+0x41e>
10005cd0:	2400      	movs	r4, #0
10005cd2:	2101      	movs	r1, #1
10005cd4:	2300      	movs	r3, #0
10005cd6:	2604      	movs	r6, #4
10005cd8:	2700      	movs	r7, #0
10005cda:	e6b6      	b.n	10005a4a <__aeabi_dsub+0x156>
10005cdc:	2b1f      	cmp	r3, #31
10005cde:	dc4a      	bgt.n	10005d76 <__aeabi_dsub+0x482>
10005ce0:	2120      	movs	r1, #32
10005ce2:	1ac9      	subs	r1, r1, r3
10005ce4:	1c07      	adds	r7, r0, #0
10005ce6:	4652      	mov	r2, sl
10005ce8:	408f      	lsls	r7, r1
10005cea:	40da      	lsrs	r2, r3
10005cec:	433a      	orrs	r2, r7
10005cee:	4657      	mov	r7, sl
10005cf0:	408f      	lsls	r7, r1
10005cf2:	1c39      	adds	r1, r7, #0
10005cf4:	1e4f      	subs	r7, r1, #1
10005cf6:	41b9      	sbcs	r1, r7
10005cf8:	40d8      	lsrs	r0, r3
10005cfa:	430a      	orrs	r2, r1
10005cfc:	1c07      	adds	r7, r0, #0
10005cfe:	e6db      	b.n	10005ab8 <__aeabi_dsub+0x1c4>
10005d00:	4664      	mov	r4, ip
10005d02:	432c      	orrs	r4, r5
10005d04:	d169      	bne.n	10005dda <__aeabi_dsub+0x4e6>
10005d06:	1c51      	adds	r1, r2, #1
10005d08:	1c03      	adds	r3, r0, #0
10005d0a:	4655      	mov	r5, sl
10005d0c:	1c17      	adds	r7, r2, #0
10005d0e:	464c      	mov	r4, r9
10005d10:	e682      	b.n	10005a18 <__aeabi_dsub+0x124>
10005d12:	1c15      	adds	r5, r2, #0
10005d14:	1c37      	adds	r7, r6, #0
10005d16:	e654      	b.n	100059c2 <__aeabi_dsub+0xce>
10005d18:	2300      	movs	r3, #0
10005d1a:	e78c      	b.n	10005c36 <__aeabi_dsub+0x342>
10005d1c:	2200      	movs	r2, #0
10005d1e:	e7a4      	b.n	10005c6a <__aeabi_dsub+0x376>
10005d20:	4667      	mov	r7, ip
10005d22:	432f      	orrs	r7, r5
10005d24:	2e00      	cmp	r6, #0
10005d26:	d000      	beq.n	10005d2a <__aeabi_dsub+0x436>
10005d28:	e0d4      	b.n	10005ed4 <__aeabi_dsub+0x5e0>
10005d2a:	2f00      	cmp	r7, #0
10005d2c:	d100      	bne.n	10005d30 <__aeabi_dsub+0x43c>
10005d2e:	e126      	b.n	10005f7e <__aeabi_dsub+0x68a>
10005d30:	4653      	mov	r3, sl
10005d32:	4303      	orrs	r3, r0
10005d34:	d100      	bne.n	10005d38 <__aeabi_dsub+0x444>
10005d36:	e0e4      	b.n	10005f02 <__aeabi_dsub+0x60e>
10005d38:	4651      	mov	r1, sl
10005d3a:	194f      	adds	r7, r1, r5
10005d3c:	42af      	cmp	r7, r5
10005d3e:	41ad      	sbcs	r5, r5
10005d40:	4460      	add	r0, ip
10005d42:	426e      	negs	r6, r5
10005d44:	1983      	adds	r3, r0, r6
10005d46:	021e      	lsls	r6, r3, #8
10005d48:	d400      	bmi.n	10005d4c <__aeabi_dsub+0x458>
10005d4a:	e14e      	b.n	10005fea <__aeabi_dsub+0x6f6>
10005d4c:	4897      	ldr	r0, [pc, #604]	; (10005fac <__aeabi_dsub+0x6b8>)
10005d4e:	1c3d      	adds	r5, r7, #0
10005d50:	4003      	ands	r3, r0
10005d52:	2102      	movs	r1, #2
10005d54:	2701      	movs	r7, #1
10005d56:	e65f      	b.n	10005a18 <__aeabi_dsub+0x124>
10005d58:	4661      	mov	r1, ip
10005d5a:	4329      	orrs	r1, r5
10005d5c:	2e00      	cmp	r6, #0
10005d5e:	d129      	bne.n	10005db4 <__aeabi_dsub+0x4c0>
10005d60:	2900      	cmp	r1, #0
10005d62:	d176      	bne.n	10005e52 <__aeabi_dsub+0x55e>
10005d64:	4651      	mov	r1, sl
10005d66:	4301      	orrs	r1, r0
10005d68:	d0b2      	beq.n	10005cd0 <__aeabi_dsub+0x3dc>
10005d6a:	1c03      	adds	r3, r0, #0
10005d6c:	4655      	mov	r5, sl
10005d6e:	464c      	mov	r4, r9
10005d70:	2101      	movs	r1, #1
10005d72:	2700      	movs	r7, #0
10005d74:	e650      	b.n	10005a18 <__aeabi_dsub+0x124>
10005d76:	1c1f      	adds	r7, r3, #0
10005d78:	3f20      	subs	r7, #32
10005d7a:	1c01      	adds	r1, r0, #0
10005d7c:	40f9      	lsrs	r1, r7
10005d7e:	1c0f      	adds	r7, r1, #0
10005d80:	2b20      	cmp	r3, #32
10005d82:	d100      	bne.n	10005d86 <__aeabi_dsub+0x492>
10005d84:	e0c6      	b.n	10005f14 <__aeabi_dsub+0x620>
10005d86:	2240      	movs	r2, #64	; 0x40
10005d88:	1ad3      	subs	r3, r2, r3
10005d8a:	4098      	lsls	r0, r3
10005d8c:	1c02      	adds	r2, r0, #0
10005d8e:	4650      	mov	r0, sl
10005d90:	4302      	orrs	r2, r0
10005d92:	1e53      	subs	r3, r2, #1
10005d94:	419a      	sbcs	r2, r3
10005d96:	433a      	orrs	r2, r7
10005d98:	2700      	movs	r7, #0
10005d9a:	e68d      	b.n	10005ab8 <__aeabi_dsub+0x1c4>
10005d9c:	425b      	negs	r3, r3
10005d9e:	2e00      	cmp	r6, #0
10005da0:	d130      	bne.n	10005e04 <__aeabi_dsub+0x510>
10005da2:	4667      	mov	r7, ip
10005da4:	432f      	orrs	r7, r5
10005da6:	d000      	beq.n	10005daa <__aeabi_dsub+0x4b6>
10005da8:	e0c8      	b.n	10005f3c <__aeabi_dsub+0x648>
10005daa:	1c51      	adds	r1, r2, #1
10005dac:	1c03      	adds	r3, r0, #0
10005dae:	4655      	mov	r5, sl
10005db0:	1c17      	adds	r7, r2, #0
10005db2:	e631      	b.n	10005a18 <__aeabi_dsub+0x124>
10005db4:	2900      	cmp	r1, #0
10005db6:	d165      	bne.n	10005e84 <__aeabi_dsub+0x590>
10005db8:	4657      	mov	r7, sl
10005dba:	4307      	orrs	r7, r0
10005dbc:	d100      	bne.n	10005dc0 <__aeabi_dsub+0x4cc>
10005dbe:	e0c8      	b.n	10005f52 <__aeabi_dsub+0x65e>
10005dc0:	1c03      	adds	r3, r0, #0
10005dc2:	2080      	movs	r0, #128	; 0x80
10005dc4:	4655      	mov	r5, sl
10005dc6:	464c      	mov	r4, r9
10005dc8:	0101      	lsls	r1, r0, #4
10005dca:	4f77      	ldr	r7, [pc, #476]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005dcc:	e624      	b.n	10005a18 <__aeabi_dsub+0x124>
10005dce:	2380      	movs	r3, #128	; 0x80
10005dd0:	1c37      	adds	r7, r6, #0
10005dd2:	0119      	lsls	r1, r3, #4
10005dd4:	2604      	movs	r6, #4
10005dd6:	2300      	movs	r3, #0
10005dd8:	e637      	b.n	10005a4a <__aeabi_dsub+0x156>
10005dda:	3f01      	subs	r7, #1
10005ddc:	2f00      	cmp	r7, #0
10005dde:	d16e      	bne.n	10005ebe <__aeabi_dsub+0x5ca>
10005de0:	4654      	mov	r4, sl
10005de2:	4661      	mov	r1, ip
10005de4:	1b65      	subs	r5, r4, r5
10005de6:	1a40      	subs	r0, r0, r1
10005de8:	e768      	b.n	10005cbc <__aeabi_dsub+0x3c8>
10005dea:	4667      	mov	r7, ip
10005dec:	433d      	orrs	r5, r7
10005dee:	2300      	movs	r3, #0
10005df0:	2d00      	cmp	r5, #0
10005df2:	d100      	bne.n	10005df6 <__aeabi_dsub+0x502>
10005df4:	e75f      	b.n	10005cb6 <__aeabi_dsub+0x3c2>
10005df6:	2501      	movs	r5, #1
10005df8:	e75d      	b.n	10005cb6 <__aeabi_dsub+0x3c2>
10005dfa:	2680      	movs	r6, #128	; 0x80
10005dfc:	0131      	lsls	r1, r6, #4
10005dfe:	2300      	movs	r3, #0
10005e00:	2604      	movs	r6, #4
10005e02:	e622      	b.n	10005a4a <__aeabi_dsub+0x156>
10005e04:	4968      	ldr	r1, [pc, #416]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005e06:	428a      	cmp	r2, r1
10005e08:	d100      	bne.n	10005e0c <__aeabi_dsub+0x518>
10005e0a:	e0c1      	b.n	10005f90 <__aeabi_dsub+0x69c>
10005e0c:	2780      	movs	r7, #128	; 0x80
10005e0e:	4666      	mov	r6, ip
10005e10:	0439      	lsls	r1, r7, #16
10005e12:	430e      	orrs	r6, r1
10005e14:	46b4      	mov	ip, r6
10005e16:	2b38      	cmp	r3, #56	; 0x38
10005e18:	dd00      	ble.n	10005e1c <__aeabi_dsub+0x528>
10005e1a:	e0a2      	b.n	10005f62 <__aeabi_dsub+0x66e>
10005e1c:	2b1f      	cmp	r3, #31
10005e1e:	dd00      	ble.n	10005e22 <__aeabi_dsub+0x52e>
10005e20:	e0d0      	b.n	10005fc4 <__aeabi_dsub+0x6d0>
10005e22:	2120      	movs	r1, #32
10005e24:	1ac9      	subs	r1, r1, r3
10005e26:	1c2e      	adds	r6, r5, #0
10005e28:	4667      	mov	r7, ip
10005e2a:	408f      	lsls	r7, r1
10005e2c:	408d      	lsls	r5, r1
10005e2e:	40de      	lsrs	r6, r3
10005e30:	433e      	orrs	r6, r7
10005e32:	1c29      	adds	r1, r5, #0
10005e34:	4667      	mov	r7, ip
10005e36:	1e4d      	subs	r5, r1, #1
10005e38:	41a9      	sbcs	r1, r5
10005e3a:	40df      	lsrs	r7, r3
10005e3c:	1c35      	adds	r5, r6, #0
10005e3e:	430d      	orrs	r5, r1
10005e40:	1c3e      	adds	r6, r7, #0
10005e42:	4455      	add	r5, sl
10005e44:	4555      	cmp	r5, sl
10005e46:	419b      	sbcs	r3, r3
10005e48:	1830      	adds	r0, r6, r0
10005e4a:	425e      	negs	r6, r3
10005e4c:	1983      	adds	r3, r0, r6
10005e4e:	1c17      	adds	r7, r2, #0
10005e50:	e63a      	b.n	10005ac8 <__aeabi_dsub+0x1d4>
10005e52:	4656      	mov	r6, sl
10005e54:	4306      	orrs	r6, r0
10005e56:	d054      	beq.n	10005f02 <__aeabi_dsub+0x60e>
10005e58:	4657      	mov	r7, sl
10005e5a:	1bea      	subs	r2, r5, r7
10005e5c:	4663      	mov	r3, ip
10005e5e:	4295      	cmp	r5, r2
10005e60:	41b6      	sbcs	r6, r6
10005e62:	1a19      	subs	r1, r3, r0
10005e64:	4273      	negs	r3, r6
10005e66:	1acb      	subs	r3, r1, r3
10005e68:	021e      	lsls	r6, r3, #8
10005e6a:	d400      	bmi.n	10005e6e <__aeabi_dsub+0x57a>
10005e6c:	e0a2      	b.n	10005fb4 <__aeabi_dsub+0x6c0>
10005e6e:	1b7d      	subs	r5, r7, r5
10005e70:	4664      	mov	r4, ip
10005e72:	45aa      	cmp	sl, r5
10005e74:	41bf      	sbcs	r7, r7
10005e76:	1b00      	subs	r0, r0, r4
10005e78:	427a      	negs	r2, r7
10005e7a:	1a83      	subs	r3, r0, r2
10005e7c:	464c      	mov	r4, r9
10005e7e:	2101      	movs	r1, #1
10005e80:	2700      	movs	r7, #0
10005e82:	e5c9      	b.n	10005a18 <__aeabi_dsub+0x124>
10005e84:	4656      	mov	r6, sl
10005e86:	4306      	orrs	r6, r0
10005e88:	d03f      	beq.n	10005f0a <__aeabi_dsub+0x616>
10005e8a:	4662      	mov	r2, ip
10005e8c:	2180      	movs	r1, #128	; 0x80
10005e8e:	0757      	lsls	r7, r2, #29
10005e90:	08ed      	lsrs	r5, r5, #3
10005e92:	08d3      	lsrs	r3, r2, #3
10005e94:	030a      	lsls	r2, r1, #12
10005e96:	433d      	orrs	r5, r7
10005e98:	4213      	tst	r3, r2
10005e9a:	d008      	beq.n	10005eae <__aeabi_dsub+0x5ba>
10005e9c:	08c6      	lsrs	r6, r0, #3
10005e9e:	4216      	tst	r6, r2
10005ea0:	d105      	bne.n	10005eae <__aeabi_dsub+0x5ba>
10005ea2:	4655      	mov	r5, sl
10005ea4:	08ec      	lsrs	r4, r5, #3
10005ea6:	0745      	lsls	r5, r0, #29
10005ea8:	4325      	orrs	r5, r4
10005eaa:	1c33      	adds	r3, r6, #0
10005eac:	464c      	mov	r4, r9
10005eae:	0f68      	lsrs	r0, r5, #29
10005eb0:	00db      	lsls	r3, r3, #3
10005eb2:	2680      	movs	r6, #128	; 0x80
10005eb4:	4303      	orrs	r3, r0
10005eb6:	00ed      	lsls	r5, r5, #3
10005eb8:	0131      	lsls	r1, r6, #4
10005eba:	4f3b      	ldr	r7, [pc, #236]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005ebc:	e5ac      	b.n	10005a18 <__aeabi_dsub+0x124>
10005ebe:	493a      	ldr	r1, [pc, #232]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005ec0:	428a      	cmp	r2, r1
10005ec2:	d000      	beq.n	10005ec6 <__aeabi_dsub+0x5d2>
10005ec4:	e6e4      	b.n	10005c90 <__aeabi_dsub+0x39c>
10005ec6:	2680      	movs	r6, #128	; 0x80
10005ec8:	1c03      	adds	r3, r0, #0
10005eca:	4655      	mov	r5, sl
10005ecc:	464c      	mov	r4, r9
10005ece:	0131      	lsls	r1, r6, #4
10005ed0:	1c17      	adds	r7, r2, #0
10005ed2:	e5a1      	b.n	10005a18 <__aeabi_dsub+0x124>
10005ed4:	2f00      	cmp	r7, #0
10005ed6:	d04c      	beq.n	10005f72 <__aeabi_dsub+0x67e>
10005ed8:	4653      	mov	r3, sl
10005eda:	4303      	orrs	r3, r0
10005edc:	d015      	beq.n	10005f0a <__aeabi_dsub+0x616>
10005ede:	4662      	mov	r2, ip
10005ee0:	2680      	movs	r6, #128	; 0x80
10005ee2:	08ed      	lsrs	r5, r5, #3
10005ee4:	0751      	lsls	r1, r2, #29
10005ee6:	08d3      	lsrs	r3, r2, #3
10005ee8:	0337      	lsls	r7, r6, #12
10005eea:	430d      	orrs	r5, r1
10005eec:	423b      	tst	r3, r7
10005eee:	d0de      	beq.n	10005eae <__aeabi_dsub+0x5ba>
10005ef0:	08c2      	lsrs	r2, r0, #3
10005ef2:	423a      	tst	r2, r7
10005ef4:	d1db      	bne.n	10005eae <__aeabi_dsub+0x5ba>
10005ef6:	4655      	mov	r5, sl
10005ef8:	08e9      	lsrs	r1, r5, #3
10005efa:	0745      	lsls	r5, r0, #29
10005efc:	1c13      	adds	r3, r2, #0
10005efe:	430d      	orrs	r5, r1
10005f00:	e7d5      	b.n	10005eae <__aeabi_dsub+0x5ba>
10005f02:	4663      	mov	r3, ip
10005f04:	2101      	movs	r1, #1
10005f06:	2700      	movs	r7, #0
10005f08:	e586      	b.n	10005a18 <__aeabi_dsub+0x124>
10005f0a:	2780      	movs	r7, #128	; 0x80
10005f0c:	0139      	lsls	r1, r7, #4
10005f0e:	4663      	mov	r3, ip
10005f10:	4f25      	ldr	r7, [pc, #148]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005f12:	e581      	b.n	10005a18 <__aeabi_dsub+0x124>
10005f14:	2200      	movs	r2, #0
10005f16:	e73a      	b.n	10005d8e <__aeabi_dsub+0x49a>
10005f18:	1c3c      	adds	r4, r7, #0
10005f1a:	3c20      	subs	r4, #32
10005f1c:	4666      	mov	r6, ip
10005f1e:	40e6      	lsrs	r6, r4
10005f20:	1c33      	adds	r3, r6, #0
10005f22:	2f20      	cmp	r7, #32
10005f24:	d05f      	beq.n	10005fe6 <__aeabi_dsub+0x6f2>
10005f26:	2440      	movs	r4, #64	; 0x40
10005f28:	1be7      	subs	r7, r4, r7
10005f2a:	4666      	mov	r6, ip
10005f2c:	40be      	lsls	r6, r7
10005f2e:	1c31      	adds	r1, r6, #0
10005f30:	430d      	orrs	r5, r1
10005f32:	1e69      	subs	r1, r5, #1
10005f34:	418d      	sbcs	r5, r1
10005f36:	431d      	orrs	r5, r3
10005f38:	2300      	movs	r3, #0
10005f3a:	e6bc      	b.n	10005cb6 <__aeabi_dsub+0x3c2>
10005f3c:	3b01      	subs	r3, #1
10005f3e:	2b00      	cmp	r3, #0
10005f40:	d122      	bne.n	10005f88 <__aeabi_dsub+0x694>
10005f42:	4455      	add	r5, sl
10005f44:	4555      	cmp	r5, sl
10005f46:	41bf      	sbcs	r7, r7
10005f48:	427b      	negs	r3, r7
10005f4a:	4460      	add	r0, ip
10005f4c:	18c3      	adds	r3, r0, r3
10005f4e:	1c17      	adds	r7, r2, #0
10005f50:	e5ba      	b.n	10005ac8 <__aeabi_dsub+0x1d4>
10005f52:	2180      	movs	r1, #128	; 0x80
10005f54:	2204      	movs	r2, #4
10005f56:	2400      	movs	r4, #0
10005f58:	0109      	lsls	r1, r1, #4
10005f5a:	4b15      	ldr	r3, [pc, #84]	; (10005fb0 <__aeabi_dsub+0x6bc>)
10005f5c:	4256      	negs	r6, r2
10005f5e:	4f12      	ldr	r7, [pc, #72]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005f60:	e573      	b.n	10005a4a <__aeabi_dsub+0x156>
10005f62:	4663      	mov	r3, ip
10005f64:	431d      	orrs	r5, r3
10005f66:	2600      	movs	r6, #0
10005f68:	2d00      	cmp	r5, #0
10005f6a:	d100      	bne.n	10005f6e <__aeabi_dsub+0x67a>
10005f6c:	e769      	b.n	10005e42 <__aeabi_dsub+0x54e>
10005f6e:	2501      	movs	r5, #1
10005f70:	e767      	b.n	10005e42 <__aeabi_dsub+0x54e>
10005f72:	2280      	movs	r2, #128	; 0x80
10005f74:	1c03      	adds	r3, r0, #0
10005f76:	4655      	mov	r5, sl
10005f78:	0111      	lsls	r1, r2, #4
10005f7a:	4f0b      	ldr	r7, [pc, #44]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005f7c:	e54c      	b.n	10005a18 <__aeabi_dsub+0x124>
10005f7e:	1c03      	adds	r3, r0, #0
10005f80:	4655      	mov	r5, sl
10005f82:	2101      	movs	r1, #1
10005f84:	2700      	movs	r7, #0
10005f86:	e547      	b.n	10005a18 <__aeabi_dsub+0x124>
10005f88:	4907      	ldr	r1, [pc, #28]	; (10005fa8 <__aeabi_dsub+0x6b4>)
10005f8a:	428a      	cmp	r2, r1
10005f8c:	d000      	beq.n	10005f90 <__aeabi_dsub+0x69c>
10005f8e:	e742      	b.n	10005e16 <__aeabi_dsub+0x522>
10005f90:	2180      	movs	r1, #128	; 0x80
10005f92:	1c03      	adds	r3, r0, #0
10005f94:	4655      	mov	r5, sl
10005f96:	0109      	lsls	r1, r1, #4
10005f98:	1c17      	adds	r7, r2, #0
10005f9a:	e53d      	b.n	10005a18 <__aeabi_dsub+0x124>
10005f9c:	057f      	lsls	r7, r7, #21
10005f9e:	0d7f      	lsrs	r7, r7, #21
10005fa0:	2600      	movs	r6, #0
10005fa2:	2200      	movs	r2, #0
10005fa4:	e55e      	b.n	10005a64 <__aeabi_dsub+0x170>
10005fa6:	46c0      	nop			; (mov r8, r8)
10005fa8:	000007ff 	.word	0x000007ff
10005fac:	ff7fffff 	.word	0xff7fffff
10005fb0:	007fffff 	.word	0x007fffff
10005fb4:	1c1d      	adds	r5, r3, #0
10005fb6:	4315      	orrs	r5, r2
10005fb8:	d100      	bne.n	10005fbc <__aeabi_dsub+0x6c8>
10005fba:	e689      	b.n	10005cd0 <__aeabi_dsub+0x3dc>
10005fbc:	1c15      	adds	r5, r2, #0
10005fbe:	2101      	movs	r1, #1
10005fc0:	2700      	movs	r7, #0
10005fc2:	e529      	b.n	10005a18 <__aeabi_dsub+0x124>
10005fc4:	1c1f      	adds	r7, r3, #0
10005fc6:	3f20      	subs	r7, #32
10005fc8:	4661      	mov	r1, ip
10005fca:	40f9      	lsrs	r1, r7
10005fcc:	2b20      	cmp	r3, #32
10005fce:	d010      	beq.n	10005ff2 <__aeabi_dsub+0x6fe>
10005fd0:	2640      	movs	r6, #64	; 0x40
10005fd2:	1af3      	subs	r3, r6, r3
10005fd4:	4667      	mov	r7, ip
10005fd6:	409f      	lsls	r7, r3
10005fd8:	1c3b      	adds	r3, r7, #0
10005fda:	431d      	orrs	r5, r3
10005fdc:	1e6b      	subs	r3, r5, #1
10005fde:	419d      	sbcs	r5, r3
10005fe0:	430d      	orrs	r5, r1
10005fe2:	2600      	movs	r6, #0
10005fe4:	e72d      	b.n	10005e42 <__aeabi_dsub+0x54e>
10005fe6:	2100      	movs	r1, #0
10005fe8:	e7a2      	b.n	10005f30 <__aeabi_dsub+0x63c>
10005fea:	1c3d      	adds	r5, r7, #0
10005fec:	2101      	movs	r1, #1
10005fee:	2700      	movs	r7, #0
10005ff0:	e512      	b.n	10005a18 <__aeabi_dsub+0x124>
10005ff2:	2300      	movs	r3, #0
10005ff4:	e7f1      	b.n	10005fda <__aeabi_dsub+0x6e6>
10005ff6:	46c0      	nop			; (mov r8, r8)

10005ff8 <__aeabi_d2iz>:
10005ff8:	4a13      	ldr	r2, [pc, #76]	; (10006048 <__aeabi_d2iz+0x50>)
10005ffa:	030b      	lsls	r3, r1, #12
10005ffc:	b530      	push	{r4, r5, lr}
10005ffe:	1c05      	adds	r5, r0, #0
10006000:	0048      	lsls	r0, r1, #1
10006002:	0b1c      	lsrs	r4, r3, #12
10006004:	0fc9      	lsrs	r1, r1, #31
10006006:	0d43      	lsrs	r3, r0, #21
10006008:	2000      	movs	r0, #0
1000600a:	4293      	cmp	r3, r2
1000600c:	dd11      	ble.n	10006032 <__aeabi_d2iz+0x3a>
1000600e:	480f      	ldr	r0, [pc, #60]	; (1000604c <__aeabi_d2iz+0x54>)
10006010:	4283      	cmp	r3, r0
10006012:	dc0f      	bgt.n	10006034 <__aeabi_d2iz+0x3c>
10006014:	2280      	movs	r2, #128	; 0x80
10006016:	0350      	lsls	r0, r2, #13
10006018:	4a0d      	ldr	r2, [pc, #52]	; (10006050 <__aeabi_d2iz+0x58>)
1000601a:	4304      	orrs	r4, r0
1000601c:	1ad0      	subs	r0, r2, r3
1000601e:	281f      	cmp	r0, #31
10006020:	dd0b      	ble.n	1000603a <__aeabi_d2iz+0x42>
10006022:	4d0c      	ldr	r5, [pc, #48]	; (10006054 <__aeabi_d2iz+0x5c>)
10006024:	1aeb      	subs	r3, r5, r3
10006026:	40dc      	lsrs	r4, r3
10006028:	1c22      	adds	r2, r4, #0
1000602a:	4250      	negs	r0, r2
1000602c:	2900      	cmp	r1, #0
1000602e:	d100      	bne.n	10006032 <__aeabi_d2iz+0x3a>
10006030:	1c10      	adds	r0, r2, #0
10006032:	bd30      	pop	{r4, r5, pc}
10006034:	4c08      	ldr	r4, [pc, #32]	; (10006058 <__aeabi_d2iz+0x60>)
10006036:	1908      	adds	r0, r1, r4
10006038:	e7fb      	b.n	10006032 <__aeabi_d2iz+0x3a>
1000603a:	40c5      	lsrs	r5, r0
1000603c:	4807      	ldr	r0, [pc, #28]	; (1000605c <__aeabi_d2iz+0x64>)
1000603e:	1c2a      	adds	r2, r5, #0
10006040:	181d      	adds	r5, r3, r0
10006042:	40ac      	lsls	r4, r5
10006044:	4322      	orrs	r2, r4
10006046:	e7f0      	b.n	1000602a <__aeabi_d2iz+0x32>
10006048:	000003fe 	.word	0x000003fe
1000604c:	0000041d 	.word	0x0000041d
10006050:	00000433 	.word	0x00000433
10006054:	00000413 	.word	0x00000413
10006058:	7fffffff 	.word	0x7fffffff
1000605c:	fffffbed 	.word	0xfffffbed

10006060 <__aeabi_i2d>:
10006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006062:	1e04      	subs	r4, r0, #0
10006064:	d02d      	beq.n	100060c2 <__aeabi_i2d+0x62>
10006066:	0fc5      	lsrs	r5, r0, #31
10006068:	d000      	beq.n	1000606c <__aeabi_i2d+0xc>
1000606a:	4244      	negs	r4, r0
1000606c:	1c20      	adds	r0, r4, #0
1000606e:	f000 f927 	bl	100062c0 <__clzsi2>
10006072:	4916      	ldr	r1, [pc, #88]	; (100060cc <__aeabi_i2d+0x6c>)
10006074:	1a0a      	subs	r2, r1, r0
10006076:	280a      	cmp	r0, #10
10006078:	dd16      	ble.n	100060a8 <__aeabi_i2d+0x48>
1000607a:	380b      	subs	r0, #11
1000607c:	4084      	lsls	r4, r0
1000607e:	0557      	lsls	r7, r2, #21
10006080:	0326      	lsls	r6, r4, #12
10006082:	0d7a      	lsrs	r2, r7, #21
10006084:	0b36      	lsrs	r6, r6, #12
10006086:	2700      	movs	r7, #0
10006088:	2000      	movs	r0, #0
1000608a:	2100      	movs	r1, #0
1000608c:	1c38      	adds	r0, r7, #0
1000608e:	0d0f      	lsrs	r7, r1, #20
10006090:	053b      	lsls	r3, r7, #20
10006092:	4c0f      	ldr	r4, [pc, #60]	; (100060d0 <__aeabi_i2d+0x70>)
10006094:	4333      	orrs	r3, r6
10006096:	401c      	ands	r4, r3
10006098:	0516      	lsls	r6, r2, #20
1000609a:	4334      	orrs	r4, r6
1000609c:	0061      	lsls	r1, r4, #1
1000609e:	084a      	lsrs	r2, r1, #1
100060a0:	07ed      	lsls	r5, r5, #31
100060a2:	1c11      	adds	r1, r2, #0
100060a4:	4329      	orrs	r1, r5
100060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100060a8:	260b      	movs	r6, #11
100060aa:	1c01      	adds	r1, r0, #0
100060ac:	1a30      	subs	r0, r6, r0
100060ae:	3115      	adds	r1, #21
100060b0:	1c23      	adds	r3, r4, #0
100060b2:	40c4      	lsrs	r4, r0
100060b4:	408b      	lsls	r3, r1
100060b6:	0552      	lsls	r2, r2, #21
100060b8:	0321      	lsls	r1, r4, #12
100060ba:	1c1f      	adds	r7, r3, #0
100060bc:	0b0e      	lsrs	r6, r1, #12
100060be:	0d52      	lsrs	r2, r2, #21
100060c0:	e7e2      	b.n	10006088 <__aeabi_i2d+0x28>
100060c2:	2500      	movs	r5, #0
100060c4:	2200      	movs	r2, #0
100060c6:	2600      	movs	r6, #0
100060c8:	2700      	movs	r7, #0
100060ca:	e7dd      	b.n	10006088 <__aeabi_i2d+0x28>
100060cc:	0000041e 	.word	0x0000041e
100060d0:	800fffff 	.word	0x800fffff

100060d4 <__aeabi_f2d>:
100060d4:	0041      	lsls	r1, r0, #1
100060d6:	b570      	push	{r4, r5, r6, lr}
100060d8:	0e0e      	lsrs	r6, r1, #24
100060da:	1c73      	adds	r3, r6, #1
100060dc:	0242      	lsls	r2, r0, #9
100060de:	0fc5      	lsrs	r5, r0, #31
100060e0:	b2d8      	uxtb	r0, r3
100060e2:	0a54      	lsrs	r4, r2, #9
100060e4:	2801      	cmp	r0, #1
100060e6:	dd15      	ble.n	10006114 <__aeabi_f2d+0x40>
100060e8:	0763      	lsls	r3, r4, #29
100060ea:	24e0      	movs	r4, #224	; 0xe0
100060ec:	00a0      	lsls	r0, r4, #2
100060ee:	0b12      	lsrs	r2, r2, #12
100060f0:	1834      	adds	r4, r6, r0
100060f2:	2000      	movs	r0, #0
100060f4:	2100      	movs	r1, #0
100060f6:	1c18      	adds	r0, r3, #0
100060f8:	0d0b      	lsrs	r3, r1, #20
100060fa:	051e      	lsls	r6, r3, #20
100060fc:	4b1c      	ldr	r3, [pc, #112]	; (10006170 <__aeabi_f2d+0x9c>)
100060fe:	4332      	orrs	r2, r6
10006100:	0561      	lsls	r1, r4, #21
10006102:	084c      	lsrs	r4, r1, #1
10006104:	4013      	ands	r3, r2
10006106:	4323      	orrs	r3, r4
10006108:	005a      	lsls	r2, r3, #1
1000610a:	0856      	lsrs	r6, r2, #1
1000610c:	07ed      	lsls	r5, r5, #31
1000610e:	1c31      	adds	r1, r6, #0
10006110:	4329      	orrs	r1, r5
10006112:	bd70      	pop	{r4, r5, r6, pc}
10006114:	2e00      	cmp	r6, #0
10006116:	d116      	bne.n	10006146 <__aeabi_f2d+0x72>
10006118:	2c00      	cmp	r4, #0
1000611a:	d01e      	beq.n	1000615a <__aeabi_f2d+0x86>
1000611c:	1c20      	adds	r0, r4, #0
1000611e:	f000 f8cf 	bl	100062c0 <__clzsi2>
10006122:	280a      	cmp	r0, #10
10006124:	dc1d      	bgt.n	10006162 <__aeabi_f2d+0x8e>
10006126:	220b      	movs	r2, #11
10006128:	1a11      	subs	r1, r2, r0
1000612a:	1c02      	adds	r2, r0, #0
1000612c:	1c23      	adds	r3, r4, #0
1000612e:	3215      	adds	r2, #21
10006130:	40cb      	lsrs	r3, r1
10006132:	4094      	lsls	r4, r2
10006134:	1c1e      	adds	r6, r3, #0
10006136:	1c23      	adds	r3, r4, #0
10006138:	0334      	lsls	r4, r6, #12
1000613a:	4e0e      	ldr	r6, [pc, #56]	; (10006174 <__aeabi_f2d+0xa0>)
1000613c:	0b22      	lsrs	r2, r4, #12
1000613e:	1a30      	subs	r0, r6, r0
10006140:	0541      	lsls	r1, r0, #21
10006142:	0d4c      	lsrs	r4, r1, #21
10006144:	e7d5      	b.n	100060f2 <__aeabi_f2d+0x1e>
10006146:	2c00      	cmp	r4, #0
10006148:	d003      	beq.n	10006152 <__aeabi_f2d+0x7e>
1000614a:	0763      	lsls	r3, r4, #29
1000614c:	0b12      	lsrs	r2, r2, #12
1000614e:	4c0a      	ldr	r4, [pc, #40]	; (10006178 <__aeabi_f2d+0xa4>)
10006150:	e7cf      	b.n	100060f2 <__aeabi_f2d+0x1e>
10006152:	4c09      	ldr	r4, [pc, #36]	; (10006178 <__aeabi_f2d+0xa4>)
10006154:	2200      	movs	r2, #0
10006156:	2300      	movs	r3, #0
10006158:	e7cb      	b.n	100060f2 <__aeabi_f2d+0x1e>
1000615a:	2400      	movs	r4, #0
1000615c:	2200      	movs	r2, #0
1000615e:	2300      	movs	r3, #0
10006160:	e7c7      	b.n	100060f2 <__aeabi_f2d+0x1e>
10006162:	1c01      	adds	r1, r0, #0
10006164:	390b      	subs	r1, #11
10006166:	408c      	lsls	r4, r1
10006168:	1c26      	adds	r6, r4, #0
1000616a:	2300      	movs	r3, #0
1000616c:	e7e4      	b.n	10006138 <__aeabi_f2d+0x64>
1000616e:	46c0      	nop			; (mov r8, r8)
10006170:	800fffff 	.word	0x800fffff
10006174:	00000389 	.word	0x00000389
10006178:	000007ff 	.word	0x000007ff

1000617c <__aeabi_d2f>:
1000617c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000617e:	1c04      	adds	r4, r0, #0
10006180:	0048      	lsls	r0, r1, #1
10006182:	0d40      	lsrs	r0, r0, #21
10006184:	030a      	lsls	r2, r1, #12
10006186:	0fcd      	lsrs	r5, r1, #31
10006188:	1c41      	adds	r1, r0, #1
1000618a:	0f63      	lsrs	r3, r4, #29
1000618c:	0a52      	lsrs	r2, r2, #9
1000618e:	054f      	lsls	r7, r1, #21
10006190:	431a      	orrs	r2, r3
10006192:	00e6      	lsls	r6, r4, #3
10006194:	0d7b      	lsrs	r3, r7, #21
10006196:	2b01      	cmp	r3, #1
10006198:	dd3b      	ble.n	10006212 <__aeabi_d2f+0x96>
1000619a:	4942      	ldr	r1, [pc, #264]	; (100062a4 <__aeabi_d2f+0x128>)
1000619c:	1843      	adds	r3, r0, r1
1000619e:	2bfe      	cmp	r3, #254	; 0xfe
100061a0:	dc2c      	bgt.n	100061fc <__aeabi_d2f+0x80>
100061a2:	2b00      	cmp	r3, #0
100061a4:	dd4e      	ble.n	10006244 <__aeabi_d2f+0xc8>
100061a6:	01a4      	lsls	r4, r4, #6
100061a8:	0f77      	lsrs	r7, r6, #29
100061aa:	00d2      	lsls	r2, r2, #3
100061ac:	1e61      	subs	r1, r4, #1
100061ae:	418c      	sbcs	r4, r1
100061b0:	4e3d      	ldr	r6, [pc, #244]	; (100062a8 <__aeabi_d2f+0x12c>)
100061b2:	4322      	orrs	r2, r4
100061b4:	1980      	adds	r0, r0, r6
100061b6:	433a      	orrs	r2, r7
100061b8:	260f      	movs	r6, #15
100061ba:	4016      	ands	r6, r2
100061bc:	2e04      	cmp	r6, #4
100061be:	d147      	bne.n	10006250 <__aeabi_d2f+0xd4>
100061c0:	2780      	movs	r7, #128	; 0x80
100061c2:	04fc      	lsls	r4, r7, #19
100061c4:	4014      	ands	r4, r2
100061c6:	d01d      	beq.n	10006204 <__aeabi_d2f+0x88>
100061c8:	28ff      	cmp	r0, #255	; 0xff
100061ca:	d038      	beq.n	1000623e <__aeabi_d2f+0xc2>
100061cc:	4b37      	ldr	r3, [pc, #220]	; (100062ac <__aeabi_d2f+0x130>)
100061ce:	401a      	ands	r2, r3
100061d0:	1c03      	adds	r3, r0, #0
100061d2:	3001      	adds	r0, #1
100061d4:	b2c6      	uxtb	r6, r0
100061d6:	08d2      	lsrs	r2, r2, #3
100061d8:	2e01      	cmp	r6, #1
100061da:	dc17      	bgt.n	1000620c <__aeabi_d2f+0x90>
100061dc:	2a00      	cmp	r2, #0
100061de:	d006      	beq.n	100061ee <__aeabi_d2f+0x72>
100061e0:	2b00      	cmp	r3, #0
100061e2:	d029      	beq.n	10006238 <__aeabi_d2f+0xbc>
100061e4:	2780      	movs	r7, #128	; 0x80
100061e6:	03fc      	lsls	r4, r7, #15
100061e8:	4322      	orrs	r2, r4
100061ea:	0251      	lsls	r1, r2, #9
100061ec:	0a4a      	lsrs	r2, r1, #9
100061ee:	b2db      	uxtb	r3, r3
100061f0:	05db      	lsls	r3, r3, #23
100061f2:	431a      	orrs	r2, r3
100061f4:	07ed      	lsls	r5, r5, #31
100061f6:	1c10      	adds	r0, r2, #0
100061f8:	4328      	orrs	r0, r5
100061fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100061fc:	2180      	movs	r1, #128	; 0x80
100061fe:	0048      	lsls	r0, r1, #1
10006200:	2204      	movs	r2, #4
10006202:	23ff      	movs	r3, #255	; 0xff
10006204:	b2c6      	uxtb	r6, r0
10006206:	08d2      	lsrs	r2, r2, #3
10006208:	2e01      	cmp	r6, #1
1000620a:	dde7      	ble.n	100061dc <__aeabi_d2f+0x60>
1000620c:	0251      	lsls	r1, r2, #9
1000620e:	0a4a      	lsrs	r2, r1, #9
10006210:	e7ed      	b.n	100061ee <__aeabi_d2f+0x72>
10006212:	2800      	cmp	r0, #0
10006214:	d106      	bne.n	10006224 <__aeabi_d2f+0xa8>
10006216:	4332      	orrs	r2, r6
10006218:	2001      	movs	r0, #1
1000621a:	2a00      	cmp	r2, #0
1000621c:	d115      	bne.n	1000624a <__aeabi_d2f+0xce>
1000621e:	2204      	movs	r2, #4
10006220:	2300      	movs	r3, #0
10006222:	e7ef      	b.n	10006204 <__aeabi_d2f+0x88>
10006224:	4316      	orrs	r6, r2
10006226:	d0e9      	beq.n	100061fc <__aeabi_d2f+0x80>
10006228:	2480      	movs	r4, #128	; 0x80
1000622a:	04a0      	lsls	r0, r4, #18
1000622c:	00d2      	lsls	r2, r2, #3
1000622e:	2680      	movs	r6, #128	; 0x80
10006230:	4302      	orrs	r2, r0
10006232:	23ff      	movs	r3, #255	; 0xff
10006234:	0070      	lsls	r0, r6, #1
10006236:	e7bf      	b.n	100061b8 <__aeabi_d2f+0x3c>
10006238:	0250      	lsls	r0, r2, #9
1000623a:	0a42      	lsrs	r2, r0, #9
1000623c:	e7d8      	b.n	100061f0 <__aeabi_d2f+0x74>
1000623e:	23ff      	movs	r3, #255	; 0xff
10006240:	2200      	movs	r2, #0
10006242:	e7d5      	b.n	100061f0 <__aeabi_d2f+0x74>
10006244:	3317      	adds	r3, #23
10006246:	da05      	bge.n	10006254 <__aeabi_d2f+0xd8>
10006248:	2001      	movs	r0, #1
1000624a:	2205      	movs	r2, #5
1000624c:	2300      	movs	r3, #0
1000624e:	e7d9      	b.n	10006204 <__aeabi_d2f+0x88>
10006250:	3204      	adds	r2, #4
10006252:	e7b5      	b.n	100061c0 <__aeabi_d2f+0x44>
10006254:	2380      	movs	r3, #128	; 0x80
10006256:	4f16      	ldr	r7, [pc, #88]	; (100062b0 <__aeabi_d2f+0x134>)
10006258:	0419      	lsls	r1, r3, #16
1000625a:	430a      	orrs	r2, r1
1000625c:	1a3c      	subs	r4, r7, r0
1000625e:	2c1f      	cmp	r4, #31
10006260:	dc0d      	bgt.n	1000627e <__aeabi_d2f+0x102>
10006262:	4914      	ldr	r1, [pc, #80]	; (100062b4 <__aeabi_d2f+0x138>)
10006264:	1c33      	adds	r3, r6, #0
10006266:	1847      	adds	r7, r0, r1
10006268:	40be      	lsls	r6, r7
1000626a:	1c30      	adds	r0, r6, #0
1000626c:	1e46      	subs	r6, r0, #1
1000626e:	41b0      	sbcs	r0, r6
10006270:	40ba      	lsls	r2, r7
10006272:	40e3      	lsrs	r3, r4
10006274:	4302      	orrs	r2, r0
10006276:	431a      	orrs	r2, r3
10006278:	2001      	movs	r0, #1
1000627a:	2300      	movs	r3, #0
1000627c:	e79c      	b.n	100061b8 <__aeabi_d2f+0x3c>
1000627e:	4b0e      	ldr	r3, [pc, #56]	; (100062b8 <__aeabi_d2f+0x13c>)
10006280:	1c17      	adds	r7, r2, #0
10006282:	1a19      	subs	r1, r3, r0
10006284:	40cf      	lsrs	r7, r1
10006286:	1c3b      	adds	r3, r7, #0
10006288:	2c20      	cmp	r4, #32
1000628a:	d009      	beq.n	100062a0 <__aeabi_d2f+0x124>
1000628c:	4c0b      	ldr	r4, [pc, #44]	; (100062bc <__aeabi_d2f+0x140>)
1000628e:	1900      	adds	r0, r0, r4
10006290:	4082      	lsls	r2, r0
10006292:	4332      	orrs	r2, r6
10006294:	1e56      	subs	r6, r2, #1
10006296:	41b2      	sbcs	r2, r6
10006298:	431a      	orrs	r2, r3
1000629a:	2001      	movs	r0, #1
1000629c:	2300      	movs	r3, #0
1000629e:	e78b      	b.n	100061b8 <__aeabi_d2f+0x3c>
100062a0:	2200      	movs	r2, #0
100062a2:	e7f6      	b.n	10006292 <__aeabi_d2f+0x116>
100062a4:	fffffc80 	.word	0xfffffc80
100062a8:	fffffc81 	.word	0xfffffc81
100062ac:	fbffffff 	.word	0xfbffffff
100062b0:	0000039e 	.word	0x0000039e
100062b4:	fffffc82 	.word	0xfffffc82
100062b8:	0000037e 	.word	0x0000037e
100062bc:	fffffca2 	.word	0xfffffca2

100062c0 <__clzsi2>:
100062c0:	211c      	movs	r1, #28
100062c2:	2301      	movs	r3, #1
100062c4:	041b      	lsls	r3, r3, #16
100062c6:	4298      	cmp	r0, r3
100062c8:	d301      	bcc.n	100062ce <__clzsi2+0xe>
100062ca:	0c00      	lsrs	r0, r0, #16
100062cc:	3910      	subs	r1, #16
100062ce:	0a1b      	lsrs	r3, r3, #8
100062d0:	4298      	cmp	r0, r3
100062d2:	d301      	bcc.n	100062d8 <__clzsi2+0x18>
100062d4:	0a00      	lsrs	r0, r0, #8
100062d6:	3908      	subs	r1, #8
100062d8:	091b      	lsrs	r3, r3, #4
100062da:	4298      	cmp	r0, r3
100062dc:	d301      	bcc.n	100062e2 <__clzsi2+0x22>
100062de:	0900      	lsrs	r0, r0, #4
100062e0:	3904      	subs	r1, #4
100062e2:	a202      	add	r2, pc, #8	; (adr r2, 100062ec <__clzsi2+0x2c>)
100062e4:	5c10      	ldrb	r0, [r2, r0]
100062e6:	1840      	adds	r0, r0, r1
100062e8:	4770      	bx	lr
100062ea:	46c0      	nop			; (mov r8, r8)
100062ec:	02020304 	.word	0x02020304
100062f0:	01010101 	.word	0x01010101
	...

100062fc <__errno>:
100062fc:	4b01      	ldr	r3, [pc, #4]	; (10006304 <__errno+0x8>)
100062fe:	6818      	ldr	r0, [r3, #0]
10006300:	4770      	bx	lr
10006302:	46c0      	nop			; (mov r8, r8)
10006304:	20001798 	.word	0x20001798

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	100011fb 	.word	0x100011fb
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100011fd 	.word	0x100011fd
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100011ff 	.word	0x100011ff
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001201 	.word	0x10001201
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001203 	.word	0x10001203
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001205 	.word	0x10001205
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001207 	.word	0x10001207
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001209 	.word	0x10001209
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	1000120b 	.word	0x1000120b
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	1000120d 	.word	0x1000120d
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	1000120f 	.word	0x1000120f
    MOV PC,R0
/* ======================================================================== */
.globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001211 	.word	0x10001211
    MOV PC,R0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	1000122f 	.word	0x1000122f
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001231 	.word	0x10001231
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	10001233 	.word	0x10001233
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001235 	.word	0x10001235
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001237 	.word	0x10001237
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001239 	.word	0x10001239
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	10001213 	.word	0x10001213
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001215 	.word	0x10001215
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001217 	.word	0x10001217
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001219 	.word	0x10001219
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	1000121b 	.word	0x1000121b
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	1000121d 	.word	0x1000121d
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	1000121f 	.word	0x1000121f
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001221 	.word	0x10001221
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10001223 	.word	0x10001223
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001225 	.word	0x10001225
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001227 	.word	0x10001227
    MOV PC,R0
/* ======================================================================== */
.globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001229 	.word	0x10001229
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	1000122b 	.word	0x1000122b
    MOV PC,R0
/* ======================================================================== */
.globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	1000122d 	.word	0x1000122d
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	1000123b 	.word	0x1000123b
