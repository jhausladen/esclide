   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"arm_fir_example_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	testOutput:
  22 0000 00000000 		.space	1280
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.align	2
  24              	firStateF32:
  25 0500 00000000 		.space	240
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	firCoeffs32
  27              		.section	.rodata
  28              		.align	2
  31              	firCoeffs32:
  32 0000 B9E1EEBA 		.word	-1158749767
  33 0004 1222D0BA 		.word	-1160764910
  34 0008 00000000 		.word	0
  35 000c F755723B 		.word	997348855
  36 0010 CF4E043C 		.word	1006915279
  37 0014 58C20B3C 		.word	1007403608
  38 0018 00000080 		.word	-2147483648
  39 001c 9E858EBC 		.word	-1131510370
  40 0020 88DC0BBD 		.word	-1123296120
  41 0024 9CA308BD 		.word	-1123507300
  42 0028 00000000 		.word	0
  43 002c 0A828A3D 		.word	1032487434
  44 0030 F0DB1B3E 		.word	1042013168
  45 0034 5F46643E 		.word	1046759007
  46 0038 0641803E 		.word	1048592646
  47 003c 5F46643E 		.word	1046759007
  48 0040 F0DB1B3E 		.word	1042013168
  49 0044 0A828A3D 		.word	1032487434
  50 0048 00000000 		.word	0
  51 004c 9CA308BD 		.word	-1123507300
  52 0050 88DC0BBD 		.word	-1123296120
  53 0054 9E858EBC 		.word	-1131510370
  54 0058 00000080 		.word	-2147483648
  55 005c 58C20B3C 		.word	1007403608
  56 0060 CF4E043C 		.word	1006915279
  57 0064 F755723B 		.word	997348855
  58 0068 00000000 		.word	0
  59 006c 1222D0BA 		.word	-1160764910
  60 0070 B9E1EEBA 		.word	-1158749767
  61              		.global	blockSize
  62              		.data
  63              		.align	2
  66              	blockSize:
  67 0000 20000000 		.word	32
  68              		.global	numBlocks
  69              		.align	2
  72              	numBlocks:
  73 0004 0A000000 		.word	10
  74              		.comm	snr,4,4
  75              		.section	.text.main,"ax",%progbits
  76              		.align	2
  77              		.global	main
  78              		.thumb
  79              		.thumb_func
  81              	main:
  82              	.LFB128:
  83              		.file 1 "../arm_fir_example_f32.c"
   1:../arm_fir_example_f32.c **** /* ----------------------------------------------------------------------
   2:../arm_fir_example_f32.c ****  * Copyright (C) 2010-2012 ARM Limited. All rights reserved.
   3:../arm_fir_example_f32.c ****  *
   4:../arm_fir_example_f32.c **** * $Date:         17. January 2013
   5:../arm_fir_example_f32.c **** * $Revision:     V1.4.0
   6:../arm_fir_example_f32.c **** *
   7:../arm_fir_example_f32.c **** * Project:       CMSIS DSP Library
   8:../arm_fir_example_f32.c ****  * Title:        arm_fir_example_f32.c
   9:../arm_fir_example_f32.c ****  *
  10:../arm_fir_example_f32.c ****  * Description:  Example code demonstrating how an FIR filter can be used
  11:../arm_fir_example_f32.c ****  *               as a low pass filter.
  12:../arm_fir_example_f32.c ****  *
  13:../arm_fir_example_f32.c ****  * Target Processor: Cortex-M4/Cortex-M3
  14:../arm_fir_example_f32.c ****  *
  15:../arm_fir_example_f32.c **** * Redistribution and use in source and binary forms, with or without
  16:../arm_fir_example_f32.c **** * modification, are permitted provided that the following conditions
  17:../arm_fir_example_f32.c **** * are met:
  18:../arm_fir_example_f32.c **** *   - Redistributions of source code must retain the above copyright
  19:../arm_fir_example_f32.c **** *     notice, this list of conditions and the following disclaimer.
  20:../arm_fir_example_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  21:../arm_fir_example_f32.c **** *     notice, this list of conditions and the following disclaimer in
  22:../arm_fir_example_f32.c **** *     the documentation and/or other materials provided with the
  23:../arm_fir_example_f32.c **** *     distribution.
  24:../arm_fir_example_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  25:../arm_fir_example_f32.c **** *     may be used to endorse or promote products derived from this
  26:../arm_fir_example_f32.c **** *     software without specific prior written permission.
  27:../arm_fir_example_f32.c **** *
  28:../arm_fir_example_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  29:../arm_fir_example_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  30:../arm_fir_example_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  31:../arm_fir_example_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  32:../arm_fir_example_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  33:../arm_fir_example_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  34:../arm_fir_example_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  35:../arm_fir_example_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:../arm_fir_example_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  37:../arm_fir_example_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../arm_fir_example_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../arm_fir_example_f32.c **** * POSSIBILITY OF SUCH DAMAGE.
  40:../arm_fir_example_f32.c ****  * -------------------------------------------------------------------- */
  41:../arm_fir_example_f32.c **** 
  42:../arm_fir_example_f32.c **** /**
  43:../arm_fir_example_f32.c ****  * @ingroup groupExamples
  44:../arm_fir_example_f32.c ****  */
  45:../arm_fir_example_f32.c **** 
  46:../arm_fir_example_f32.c **** /**
  47:../arm_fir_example_f32.c ****  * @defgroup FIRLPF FIR Lowpass Filter Example
  48:../arm_fir_example_f32.c ****  *
  49:../arm_fir_example_f32.c ****  * \par Description:
  50:../arm_fir_example_f32.c ****  * \par
  51:../arm_fir_example_f32.c ****  * Removes high frequency signal components from the input using an FIR lowpass filter.
  52:../arm_fir_example_f32.c ****  * The example demonstrates how to configure an FIR filter and then pass data through
  53:../arm_fir_example_f32.c ****  * it in a block-by-block fashion.
  54:../arm_fir_example_f32.c ****  * \image html FIRLPF_signalflow.gif
  55:../arm_fir_example_f32.c ****  *
  56:../arm_fir_example_f32.c ****  * \par Algorithm:
  57:../arm_fir_example_f32.c ****  * \par
  58:../arm_fir_example_f32.c ****  * The input signal is a sum of two sine waves:  1 kHz and 15 kHz.
  59:../arm_fir_example_f32.c ****  * This is processed by an FIR lowpass filter with cutoff frequency 6 kHz.
  60:../arm_fir_example_f32.c ****  * The lowpass filter eliminates the 15 kHz signal leaving only the 1 kHz sine wave at the output.
  61:../arm_fir_example_f32.c ****  * \par
  62:../arm_fir_example_f32.c ****  * The lowpass filter was designed using MATLAB with a sample rate of 48 kHz and
  63:../arm_fir_example_f32.c ****  * a length of 29 points.
  64:../arm_fir_example_f32.c ****  * The MATLAB code to generate the filter coefficients is shown below:
  65:../arm_fir_example_f32.c ****  * <pre>
  66:../arm_fir_example_f32.c ****  *     h = fir1(28, 6/24);
  67:../arm_fir_example_f32.c ****  * </pre>
  68:../arm_fir_example_f32.c ****  * The first argument is the "order" of the filter and is always one less than the desired length.
  69:../arm_fir_example_f32.c ****  * The second argument is the normalized cutoff frequency.  This is in the range 0 (DC) to 1.0 (Nyq
  70:../arm_fir_example_f32.c ****  * A 6 kHz cutoff with a Nyquist frequency of 24 kHz lies at a normalized frequency of 6/24 = 0.25.
  71:../arm_fir_example_f32.c ****  * The CMSIS FIR filter function requires the coefficients to be in time reversed order.
  72:../arm_fir_example_f32.c ****  * <pre>
  73:../arm_fir_example_f32.c ****  *     fliplr(h)
  74:../arm_fir_example_f32.c ****  * </pre>
  75:../arm_fir_example_f32.c ****  * The resulting filter coefficients and are shown below.
  76:../arm_fir_example_f32.c ****  * Note that the filter is symmetric (a property of linear phase FIR filters)
  77:../arm_fir_example_f32.c ****  * and the point of symmetry is sample 14.  Thus the filter will have a delay of
  78:../arm_fir_example_f32.c ****  * 14 samples for all frequencies.
  79:../arm_fir_example_f32.c ****  * \par
  80:../arm_fir_example_f32.c ****  * \image html FIRLPF_coeffs.gif
  81:../arm_fir_example_f32.c ****  * \par
  82:../arm_fir_example_f32.c ****  * The frequency response of the filter is shown next.
  83:../arm_fir_example_f32.c ****  * The passband gain of the filter is 1.0 and it reaches 0.5 at the cutoff frequency 6 kHz.
  84:../arm_fir_example_f32.c ****  * \par
  85:../arm_fir_example_f32.c ****  * \image html FIRLPF_response.gif
  86:../arm_fir_example_f32.c ****  * \par
  87:../arm_fir_example_f32.c ****  * The input signal is shown below.
  88:../arm_fir_example_f32.c ****  * The left hand side shows the signal in the time domain while the right hand side is a frequency 
  89:../arm_fir_example_f32.c ****  * The two sine wave components can be clearly seen.
  90:../arm_fir_example_f32.c ****  * \par
  91:../arm_fir_example_f32.c ****  * \image html FIRLPF_input.gif
  92:../arm_fir_example_f32.c ****  * \par
  93:../arm_fir_example_f32.c ****  * The output of the filter is shown below.  The 15 kHz component has been eliminated.
  94:../arm_fir_example_f32.c ****  * \par
  95:../arm_fir_example_f32.c ****  * \image html FIRLPF_output.gif
  96:../arm_fir_example_f32.c ****  *
  97:../arm_fir_example_f32.c ****  * \par Variables Description:
  98:../arm_fir_example_f32.c ****  * \par
  99:../arm_fir_example_f32.c ****  * \li \c testInput_f32_1kHz_15kHz points to the input data
 100:../arm_fir_example_f32.c ****  * \li \c refOutput points to the reference output data
 101:../arm_fir_example_f32.c ****  * \li \c testOutput points to the test output data
 102:../arm_fir_example_f32.c ****  * \li \c firStateF32 points to state buffer
 103:../arm_fir_example_f32.c ****  * \li \c firCoeffs32 points to coefficient buffer
 104:../arm_fir_example_f32.c ****  * \li \c blockSize number of samples processed at a time
 105:../arm_fir_example_f32.c ****  * \li \c numBlocks number of frames
 106:../arm_fir_example_f32.c ****  *
 107:../arm_fir_example_f32.c ****  * \par CMSIS DSP Software Library Functions Used:
 108:../arm_fir_example_f32.c ****  * \par
 109:../arm_fir_example_f32.c ****  * - arm_fir_init_f32()
 110:../arm_fir_example_f32.c ****  * - arm_fir_f32()
 111:../arm_fir_example_f32.c ****  *
 112:../arm_fir_example_f32.c ****  * <b> Refer  </b>
 113:../arm_fir_example_f32.c ****  * \link arm_fir_example_f32.c \endlink
 114:../arm_fir_example_f32.c ****  *
 115:../arm_fir_example_f32.c ****  */
 116:../arm_fir_example_f32.c **** 
 117:../arm_fir_example_f32.c **** 
 118:../arm_fir_example_f32.c **** /** \example arm_fir_example_f32.c
 119:../arm_fir_example_f32.c ****  */
 120:../arm_fir_example_f32.c **** 
 121:../arm_fir_example_f32.c **** /* ----------------------------------------------------------------------
 122:../arm_fir_example_f32.c **** ** Include Files
 123:../arm_fir_example_f32.c **** ** ------------------------------------------------------------------- */
 124:../arm_fir_example_f32.c **** 
 125:../arm_fir_example_f32.c **** #include "arm_math.h"
 126:../arm_fir_example_f32.c **** #include "math_helper.h"
 127:../arm_fir_example_f32.c **** 
 128:../arm_fir_example_f32.c **** /* ----------------------------------------------------------------------
 129:../arm_fir_example_f32.c **** ** Macro Defines
 130:../arm_fir_example_f32.c **** ** ------------------------------------------------------------------- */
 131:../arm_fir_example_f32.c **** 
 132:../arm_fir_example_f32.c **** #define TEST_LENGTH_SAMPLES  320
 133:../arm_fir_example_f32.c **** #define SNR_THRESHOLD_F32    140.0f
 134:../arm_fir_example_f32.c **** #define BLOCK_SIZE            32
 135:../arm_fir_example_f32.c **** #define NUM_TAPS              29
 136:../arm_fir_example_f32.c **** 
 137:../arm_fir_example_f32.c **** /* -------------------------------------------------------------------
 138:../arm_fir_example_f32.c ****  * The input signal and reference output (computed with MATLAB)
 139:../arm_fir_example_f32.c ****  * are defined externally in arm_fir_lpf_data.c.
 140:../arm_fir_example_f32.c ****  * ------------------------------------------------------------------- */
 141:../arm_fir_example_f32.c **** 
 142:../arm_fir_example_f32.c **** extern float32_t testInput_f32_1kHz_15kHz[TEST_LENGTH_SAMPLES];
 143:../arm_fir_example_f32.c **** extern float32_t refOutput[TEST_LENGTH_SAMPLES];
 144:../arm_fir_example_f32.c **** 
 145:../arm_fir_example_f32.c **** /* -------------------------------------------------------------------
 146:../arm_fir_example_f32.c ****  * Declare Test output buffer
 147:../arm_fir_example_f32.c ****  * ------------------------------------------------------------------- */
 148:../arm_fir_example_f32.c **** 
 149:../arm_fir_example_f32.c **** static float32_t testOutput[TEST_LENGTH_SAMPLES];
 150:../arm_fir_example_f32.c **** 
 151:../arm_fir_example_f32.c **** /* -------------------------------------------------------------------
 152:../arm_fir_example_f32.c ****  * Declare State buffer of size (numTaps + blockSize - 1)
 153:../arm_fir_example_f32.c ****  * ------------------------------------------------------------------- */
 154:../arm_fir_example_f32.c **** 
 155:../arm_fir_example_f32.c **** static float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];
 156:../arm_fir_example_f32.c **** 
 157:../arm_fir_example_f32.c **** /* ----------------------------------------------------------------------
 158:../arm_fir_example_f32.c **** ** FIR Coefficients buffer generated using fir1() MATLAB function.
 159:../arm_fir_example_f32.c **** ** fir1(28, 6/24)
 160:../arm_fir_example_f32.c **** ** ------------------------------------------------------------------- */
 161:../arm_fir_example_f32.c **** 
 162:../arm_fir_example_f32.c **** const float32_t firCoeffs32[NUM_TAPS] = {
 163:../arm_fir_example_f32.c ****   -0.0018225230f, -0.0015879294f, +0.0000000000f, +0.0036977508f, +0.0080754303f, +0.0085302217f, -
 164:../arm_fir_example_f32.c ****   -0.0341458607f, -0.0333591565f, +0.0000000000f, +0.0676308395f, +0.1522061835f, +0.2229246956f, +
 165:../arm_fir_example_f32.c ****   +0.1522061835f, +0.0676308395f, +0.0000000000f, -0.0333591565f, -0.0341458607f, -0.0173976984f, -
 166:../arm_fir_example_f32.c ****   +0.0080754303f, +0.0036977508f, +0.0000000000f, -0.0015879294f, -0.0018225230f
 167:../arm_fir_example_f32.c **** };
 168:../arm_fir_example_f32.c **** 
 169:../arm_fir_example_f32.c **** /* ------------------------------------------------------------------
 170:../arm_fir_example_f32.c ****  * Global variables for FIR LPF Example
 171:../arm_fir_example_f32.c ****  * ------------------------------------------------------------------- */
 172:../arm_fir_example_f32.c **** 
 173:../arm_fir_example_f32.c **** uint32_t blockSize = BLOCK_SIZE;
 174:../arm_fir_example_f32.c **** uint32_t numBlocks = TEST_LENGTH_SAMPLES/BLOCK_SIZE;
 175:../arm_fir_example_f32.c **** 
 176:../arm_fir_example_f32.c **** float32_t  snr;
 177:../arm_fir_example_f32.c **** 
 178:../arm_fir_example_f32.c **** /* ----------------------------------------------------------------------
 179:../arm_fir_example_f32.c ****  * FIR LPF Example
 180:../arm_fir_example_f32.c ****  * ------------------------------------------------------------------- */
 181:../arm_fir_example_f32.c **** 
 182:../arm_fir_example_f32.c **** int32_t main(void)
 183:../arm_fir_example_f32.c **** {
  84              		.loc 1 183 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 32
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0000 80B5     		push	{r7, lr}
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0002 8AB0     		sub	sp, sp, #40
  94              	.LCFI1:
  95              		.cfi_def_cfa_offset 48
  96 0004 02AF     		add	r7, sp, #8
  97              	.LCFI2:
  98              		.cfi_def_cfa 7, 40
 184:../arm_fir_example_f32.c ****   uint32_t i;
 185:../arm_fir_example_f32.c ****   arm_fir_instance_f32 S;
 186:../arm_fir_example_f32.c ****   arm_status status;
 187:../arm_fir_example_f32.c ****   float32_t  *inputF32, *outputF32;
 188:../arm_fir_example_f32.c **** 
 189:../arm_fir_example_f32.c ****   /* Initialize input and output buffer pointers */
 190:../arm_fir_example_f32.c ****   inputF32 = &testInput_f32_1kHz_15kHz[0];
  99              		.loc 1 190 0
 100 0006 40F20003 		movw	r3, #:lower16:testInput_f32_1kHz_15kHz
 101 000a C0F20003 		movt	r3, #:upper16:testInput_f32_1kHz_15kHz
 102 000e 7B61     		str	r3, [r7, #20]
 191:../arm_fir_example_f32.c ****   outputF32 = &testOutput[0];
 103              		.loc 1 191 0
 104 0010 40F20003 		movw	r3, #:lower16:testOutput
 105 0014 C0F20003 		movt	r3, #:upper16:testOutput
 106 0018 3B61     		str	r3, [r7, #16]
 192:../arm_fir_example_f32.c **** 
 193:../arm_fir_example_f32.c ****   /* Call FIR init function to initialize the instance structure. */
 194:../arm_fir_example_f32.c ****   arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 107              		.loc 1 194 0
 108 001a 40F20003 		movw	r3, #:lower16:blockSize
 109 001e C0F20003 		movt	r3, #:upper16:blockSize
 110 0022 1A68     		ldr	r2, [r3, #0]
 111 0024 07F10403 		add	r3, r7, #4
 112 0028 0092     		str	r2, [sp, #0]
 113 002a 1846     		mov	r0, r3
 114 002c 4FF01D01 		mov	r1, #29
 115 0030 40F20002 		movw	r2, #:lower16:firCoeffs32
 116 0034 C0F20002 		movt	r2, #:upper16:firCoeffs32
 117 0038 40F20003 		movw	r3, #:lower16:firStateF32
 118 003c C0F20003 		movt	r3, #:upper16:firStateF32
 119 0040 FFF7FEFF 		bl	arm_fir_init_f32
 195:../arm_fir_example_f32.c **** 
 196:../arm_fir_example_f32.c ****   /* ----------------------------------------------------------------------
 197:../arm_fir_example_f32.c ****   ** Call the FIR process function for every blockSize samples
 198:../arm_fir_example_f32.c ****   ** ------------------------------------------------------------------- */
 199:../arm_fir_example_f32.c **** 
 200:../arm_fir_example_f32.c ****   for(i=0; i < numBlocks; i++)
 120              		.loc 1 200 0
 121 0044 4FF00003 		mov	r3, #0
 122 0048 FB61     		str	r3, [r7, #28]
 123 004a 24E0     		b	.L2
 124              	.L3:
 201:../arm_fir_example_f32.c ****   {
 202:../arm_fir_example_f32.c ****     arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 125              		.loc 1 202 0 discriminator 2
 126 004c 40F20003 		movw	r3, #:lower16:blockSize
 127 0050 C0F20003 		movt	r3, #:upper16:blockSize
 128 0054 1B68     		ldr	r3, [r3, #0]
 129 0056 FA69     		ldr	r2, [r7, #28]
 130 0058 02FB03F3 		mul	r3, r2, r3
 131 005c 4FEA8303 		lsl	r3, r3, #2
 132 0060 7A69     		ldr	r2, [r7, #20]
 133 0062 D118     		adds	r1, r2, r3
 134 0064 40F20003 		movw	r3, #:lower16:blockSize
 135 0068 C0F20003 		movt	r3, #:upper16:blockSize
 136 006c 1B68     		ldr	r3, [r3, #0]
 137 006e FA69     		ldr	r2, [r7, #28]
 138 0070 02FB03F3 		mul	r3, r2, r3
 139 0074 4FEA8303 		lsl	r3, r3, #2
 140 0078 3A69     		ldr	r2, [r7, #16]
 141 007a D218     		adds	r2, r2, r3
 142 007c 40F20003 		movw	r3, #:lower16:blockSize
 143 0080 C0F20003 		movt	r3, #:upper16:blockSize
 144 0084 1B68     		ldr	r3, [r3, #0]
 145 0086 07F10400 		add	r0, r7, #4
 146 008a FFF7FEFF 		bl	arm_fir_f32
 200:../arm_fir_example_f32.c ****   for(i=0; i < numBlocks; i++)
 147              		.loc 1 200 0 discriminator 2
 148 008e FB69     		ldr	r3, [r7, #28]
 149 0090 03F10103 		add	r3, r3, #1
 150 0094 FB61     		str	r3, [r7, #28]
 151              	.L2:
 200:../arm_fir_example_f32.c ****   for(i=0; i < numBlocks; i++)
 152              		.loc 1 200 0 is_stmt 0 discriminator 1
 153 0096 40F20003 		movw	r3, #:lower16:numBlocks
 154 009a C0F20003 		movt	r3, #:upper16:numBlocks
 155 009e 1B68     		ldr	r3, [r3, #0]
 156 00a0 FA69     		ldr	r2, [r7, #28]
 157 00a2 9A42     		cmp	r2, r3
 158 00a4 D2D3     		bcc	.L3
 203:../arm_fir_example_f32.c ****   }
 204:../arm_fir_example_f32.c **** 
 205:../arm_fir_example_f32.c ****   /* ----------------------------------------------------------------------
 206:../arm_fir_example_f32.c ****   ** Compare the generated output against the reference output computed
 207:../arm_fir_example_f32.c ****   ** in MATLAB.
 208:../arm_fir_example_f32.c ****   ** ------------------------------------------------------------------- */
 209:../arm_fir_example_f32.c **** 
 210:../arm_fir_example_f32.c ****   snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 159              		.loc 1 210 0 is_stmt 1
 160 00a6 40F20000 		movw	r0, #:lower16:refOutput
 161 00aa C0F20000 		movt	r0, #:upper16:refOutput
 162 00ae 40F20001 		movw	r1, #:lower16:testOutput
 163 00b2 C0F20001 		movt	r1, #:upper16:testOutput
 164 00b6 4FF4A072 		mov	r2, #320
 165 00ba FFF7FEFF 		bl	arm_snr_f32
 166 00be 0246     		mov	r2, r0	@ float
 167 00c0 40F20003 		movw	r3, #:lower16:snr
 168 00c4 C0F20003 		movt	r3, #:upper16:snr
 169 00c8 1A60     		str	r2, [r3, #0]	@ float
 211:../arm_fir_example_f32.c **** 
 212:../arm_fir_example_f32.c ****   if (snr < SNR_THRESHOLD_F32)
 170              		.loc 1 212 0
 171 00ca 40F20003 		movw	r3, #:lower16:snr
 172 00ce C0F20003 		movt	r3, #:upper16:snr
 173 00d2 93ED007A 		flds	s14, [r3, #0]
 174 00d6 DFED0A7A 		flds	s15, .L11
 175 00da B4EEE77A 		fcmpes	s14, s15
 176 00de F1EE10FA 		fmstat
 177 00e2 03D5     		bpl	.L10
 178              	.L9:
 213:../arm_fir_example_f32.c ****   {
 214:../arm_fir_example_f32.c ****     status = ARM_MATH_TEST_FAILURE;
 179              		.loc 1 214 0
 180 00e4 4FF0FA03 		mov	r3, #250
 181 00e8 FB76     		strb	r3, [r7, #27]
 182 00ea 02E0     		b	.L6
 183              	.L10:
 215:../arm_fir_example_f32.c ****   }
 216:../arm_fir_example_f32.c ****   else
 217:../arm_fir_example_f32.c ****   {
 218:../arm_fir_example_f32.c ****     status = ARM_MATH_SUCCESS;
 184              		.loc 1 218 0
 185 00ec 4FF00003 		mov	r3, #0
 186 00f0 FB76     		strb	r3, [r7, #27]
 187              	.L6:
 219:../arm_fir_example_f32.c ****   }
 220:../arm_fir_example_f32.c **** 
 221:../arm_fir_example_f32.c ****   /* ----------------------------------------------------------------------
 222:../arm_fir_example_f32.c ****   ** Loop here if the signal does not match the reference output.
 223:../arm_fir_example_f32.c ****   ** ------------------------------------------------------------------- */
 224:../arm_fir_example_f32.c **** 
 225:../arm_fir_example_f32.c ****   if( status != ARM_MATH_SUCCESS)
 188              		.loc 1 225 0
 189 00f2 97F91B30 		ldrsb	r3, [r7, #27]
 190 00f6 002B     		cmp	r3, #0
 191 00f8 00D0     		beq	.L7
 192              	.L8:
 226:../arm_fir_example_f32.c ****   {
 227:../arm_fir_example_f32.c ****     while(1);
 193              		.loc 1 227 0 discriminator 1
 194 00fa FEE7     		b	.L8
 195              	.L7:
 228:../arm_fir_example_f32.c ****   }
 229:../arm_fir_example_f32.c **** 
 230:../arm_fir_example_f32.c ****   while(1);                             /* main function does not return */
 196              		.loc 1 230 0 discriminator 1
 197 00fc FEE7     		b	.L7
 198              	.L12:
 199 00fe 00BF     		.align	2
 200              	.L11:
 201 0100 00000C43 		.word	1124859904
 202              		.cfi_endproc
 203              	.LFE128:
 205              		.text
 206              	.Letext0:
 207              		.file 2 "c:\\dave-3.1\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/incl
 208              		.file 3 "C:\\DAVE-3.1\\eclipse\\/../CMSIS/Include/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_fir_example_f32.c
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:20     .bss:00000000 $d
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:21     .bss:00000000 testOutput
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:24     .bss:00000500 firStateF32
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:31     .rodata:00000000 firCoeffs32
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:28     .rodata:00000000 $d
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:66     .data:00000000 blockSize
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:63     .data:00000000 $d
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:72     .data:00000004 numBlocks
                            *COM*:00000004 snr
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:76     .text.main:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:81     .text.main:00000000 main
C:\Users\wangguan\AppData\Local\Temp\cc5dShgT.s:201    .text.main:00000100 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
testInput_f32_1kHz_15kHz
arm_fir_init_f32
arm_fir_f32
refOutput
arm_snr_f32
