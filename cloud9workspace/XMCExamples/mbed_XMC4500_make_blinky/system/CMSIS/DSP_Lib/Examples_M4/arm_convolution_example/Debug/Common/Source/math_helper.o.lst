   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"math_helper.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_f2d
  20              		.global	__aeabi_dmul
  21              		.global	__aeabi_d2f
  22              		.section	.text.arm_snr_f32,"ax",%progbits
  23              		.align	2
  24              		.global	arm_snr_f32
  25              		.thumb
  26              		.thumb_func
  28              	arm_snr_f32:
  29              	.LFB128:
  30              		.file 1 "../Common/Source/math_helper.c"
   1:../Common/Source/math_helper.c **** /* ----------------------------------------------------------------------
   2:../Common/Source/math_helper.c **** * Copyright (C) 2010 ARM Limited. All rights reserved.  
   3:../Common/Source/math_helper.c **** *  
   4:../Common/Source/math_helper.c **** * $Date:        29. November 2010  
   5:../Common/Source/math_helper.c **** * $Revision: 	V1.0.3  
   6:../Common/Source/math_helper.c **** *  
   7:../Common/Source/math_helper.c **** * Project: 	    CMSIS DSP Library 
   8:../Common/Source/math_helper.c **** *
   9:../Common/Source/math_helper.c **** * Title:	    math_helper.c
  10:../Common/Source/math_helper.c **** *
  11:../Common/Source/math_helper.c **** * Description:	Definition of all helper functions required.  
  12:../Common/Source/math_helper.c **** *  
  13:../Common/Source/math_helper.c **** * Target Processor: Cortex-M4/Cortex-M3
  14:../Common/Source/math_helper.c **** *  
  15:../Common/Source/math_helper.c **** * Version 1.0.3 2010/11/29 
  16:../Common/Source/math_helper.c **** *    Re-organized the CMSIS folders and updated documentation.  
  17:../Common/Source/math_helper.c **** *   
  18:../Common/Source/math_helper.c **** * Version 1.0.2 2010/11/11  
  19:../Common/Source/math_helper.c **** *    Documentation updated.   
  20:../Common/Source/math_helper.c **** *  
  21:../Common/Source/math_helper.c **** * Version 1.0.1 2010/10/05   
  22:../Common/Source/math_helper.c **** *    Production release and review comments incorporated.  
  23:../Common/Source/math_helper.c **** *  
  24:../Common/Source/math_helper.c **** * Version 1.0.0 2010/09/20   
  25:../Common/Source/math_helper.c **** *    Production release and review comments incorporated.  
  26:../Common/Source/math_helper.c **** *  
  27:../Common/Source/math_helper.c **** * Version 0.0.7  2010/06/10   
  28:../Common/Source/math_helper.c **** *    Misra-C changes done 
  29:../Common/Source/math_helper.c **** * -------------------------------------------------------------------- */
  30:../Common/Source/math_helper.c **** 
  31:../Common/Source/math_helper.c **** /* ----------------------------------------------------------------------
  32:../Common/Source/math_helper.c **** *		Include standard header files  
  33:../Common/Source/math_helper.c **** * -------------------------------------------------------------------- */
  34:../Common/Source/math_helper.c **** #include<math.h>
  35:../Common/Source/math_helper.c **** 
  36:../Common/Source/math_helper.c **** /* ----------------------------------------------------------------------
  37:../Common/Source/math_helper.c **** *		Include project header files  
  38:../Common/Source/math_helper.c **** * -------------------------------------------------------------------- */
  39:../Common/Source/math_helper.c **** #include "math_helper.h"
  40:../Common/Source/math_helper.c **** 
  41:../Common/Source/math_helper.c **** /** 
  42:../Common/Source/math_helper.c ****  * @brief  Caluclation of SNR
  43:../Common/Source/math_helper.c ****  * @param  float* 	Pointer to the reference buffer
  44:../Common/Source/math_helper.c ****  * @param  float*	Pointer to the test buffer
  45:../Common/Source/math_helper.c ****  * @param  uint32_t	total number of samples
  46:../Common/Source/math_helper.c ****  * @return float	SNR
  47:../Common/Source/math_helper.c ****  * The function Caluclates signal to noise ratio for the reference output 
  48:../Common/Source/math_helper.c ****  * and test output 
  49:../Common/Source/math_helper.c ****  */
  50:../Common/Source/math_helper.c **** 
  51:../Common/Source/math_helper.c **** float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
  52:../Common/Source/math_helper.c **** {
  31              		.loc 1 52 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 40
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 F860     		str	r0, [r7, #12]
  47 0008 B960     		str	r1, [r7, #8]
  48 000a 7A60     		str	r2, [r7, #4]
  53:../Common/Source/math_helper.c ****   float EnergySignal = 0.0, EnergyError = 0.0;
  49              		.loc 1 53 0
  50 000c 4FF00003 		mov	r3, #0
  51 0010 7B62     		str	r3, [r7, #36]	@ float
  52 0012 4FF00003 		mov	r3, #0
  53 0016 3B61     		str	r3, [r7, #16]	@ float
  54:../Common/Source/math_helper.c ****   uint32_t i;
  55:../Common/Source/math_helper.c ****   float SNR;
  56:../Common/Source/math_helper.c ****   int temp;
  57:../Common/Source/math_helper.c ****   int *test;
  58:../Common/Source/math_helper.c **** 
  59:../Common/Source/math_helper.c ****   for (i = 0; i < buffSize; i++)
  54              		.loc 1 59 0
  55 0018 4FF00003 		mov	r3, #0
  56 001c 3B62     		str	r3, [r7, #32]
  57 001e 67E0     		b	.L2
  58              	.L6:
  60:../Common/Source/math_helper.c ****     {
  61:../Common/Source/math_helper.c ****  	  /* Checking for a NAN value in pRef array */
  62:../Common/Source/math_helper.c **** 	  test =   (int *)(&pRef[i]);
  59              		.loc 1 62 0
  60 0020 3B6A     		ldr	r3, [r7, #32]
  61 0022 4FEA8303 		lsl	r3, r3, #2
  62 0026 FA68     		ldr	r2, [r7, #12]
  63 0028 D318     		adds	r3, r2, r3
  64 002a FB61     		str	r3, [r7, #28]
  63:../Common/Source/math_helper.c ****       temp =  *test;
  65              		.loc 1 63 0
  66 002c FB69     		ldr	r3, [r7, #28]
  67 002e 1B68     		ldr	r3, [r3, #0]
  68 0030 BB61     		str	r3, [r7, #24]
  64:../Common/Source/math_helper.c **** 
  65:../Common/Source/math_helper.c **** 	  if(temp == 0x7FC00000)
  69              		.loc 1 65 0
  70 0032 BA69     		ldr	r2, [r7, #24]
  71 0034 4FF00003 		mov	r3, #0
  72 0038 C7F6C073 		movt	r3, 32704
  73 003c 9A42     		cmp	r2, r3
  74 003e 02D1     		bne	.L3
  66:../Common/Source/math_helper.c **** 	  {
  67:../Common/Source/math_helper.c **** 	  		return(0);
  75              		.loc 1 67 0
  76 0040 4FF00003 		mov	r3, #0
  77 0044 8DE0     		b	.L8
  78              	.L3:
  68:../Common/Source/math_helper.c **** 	  }
  69:../Common/Source/math_helper.c **** 
  70:../Common/Source/math_helper.c **** 	  /* Checking for a NAN value in pTest array */
  71:../Common/Source/math_helper.c **** 	  test =   (int *)(&pTest[i]);
  79              		.loc 1 71 0
  80 0046 3B6A     		ldr	r3, [r7, #32]
  81 0048 4FEA8303 		lsl	r3, r3, #2
  82 004c BA68     		ldr	r2, [r7, #8]
  83 004e D318     		adds	r3, r2, r3
  84 0050 FB61     		str	r3, [r7, #28]
  72:../Common/Source/math_helper.c ****       temp =  *test;
  85              		.loc 1 72 0
  86 0052 FB69     		ldr	r3, [r7, #28]
  87 0054 1B68     		ldr	r3, [r3, #0]
  88 0056 BB61     		str	r3, [r7, #24]
  73:../Common/Source/math_helper.c **** 
  74:../Common/Source/math_helper.c **** 	  if(temp == 0x7FC00000)
  89              		.loc 1 74 0
  90 0058 BA69     		ldr	r2, [r7, #24]
  91 005a 4FF00003 		mov	r3, #0
  92 005e C7F6C073 		movt	r3, 32704
  93 0062 9A42     		cmp	r2, r3
  94 0064 02D1     		bne	.L5
  75:../Common/Source/math_helper.c **** 	  {
  76:../Common/Source/math_helper.c **** 	  		return(0);
  95              		.loc 1 76 0
  96 0066 4FF00003 		mov	r3, #0
  97 006a 7AE0     		b	.L8
  98              	.L5:
  77:../Common/Source/math_helper.c **** 	  }
  78:../Common/Source/math_helper.c ****       EnergySignal += pRef[i] * pRef[i];
  99              		.loc 1 78 0
 100 006c 3B6A     		ldr	r3, [r7, #32]
 101 006e 4FEA8303 		lsl	r3, r3, #2
 102 0072 FA68     		ldr	r2, [r7, #12]
 103 0074 D318     		adds	r3, r2, r3
 104 0076 93ED007A 		flds	s14, [r3, #0]
 105 007a 3B6A     		ldr	r3, [r7, #32]
 106 007c 4FEA8303 		lsl	r3, r3, #2
 107 0080 FA68     		ldr	r2, [r7, #12]
 108 0082 D318     		adds	r3, r2, r3
 109 0084 D3ED007A 		flds	s15, [r3, #0]
 110 0088 67EE277A 		fmuls	s15, s14, s15
 111 008c 97ED097A 		flds	s14, [r7, #36]
 112 0090 77EE277A 		fadds	s15, s14, s15
 113 0094 C7ED097A 		fsts	s15, [r7, #36]
  79:../Common/Source/math_helper.c ****       EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
 114              		.loc 1 79 0
 115 0098 3B6A     		ldr	r3, [r7, #32]
 116 009a 4FEA8303 		lsl	r3, r3, #2
 117 009e FA68     		ldr	r2, [r7, #12]
 118 00a0 D318     		adds	r3, r2, r3
 119 00a2 93ED007A 		flds	s14, [r3, #0]
 120 00a6 3B6A     		ldr	r3, [r7, #32]
 121 00a8 4FEA8303 		lsl	r3, r3, #2
 122 00ac BA68     		ldr	r2, [r7, #8]
 123 00ae D318     		adds	r3, r2, r3
 124 00b0 D3ED007A 		flds	s15, [r3, #0]
 125 00b4 37EE677A 		fsubs	s14, s14, s15
 126 00b8 3B6A     		ldr	r3, [r7, #32]
 127 00ba 4FEA8303 		lsl	r3, r3, #2
 128 00be FA68     		ldr	r2, [r7, #12]
 129 00c0 D318     		adds	r3, r2, r3
 130 00c2 D3ED006A 		flds	s13, [r3, #0]
 131 00c6 3B6A     		ldr	r3, [r7, #32]
 132 00c8 4FEA8303 		lsl	r3, r3, #2
 133 00cc BA68     		ldr	r2, [r7, #8]
 134 00ce D318     		adds	r3, r2, r3
 135 00d0 D3ED007A 		flds	s15, [r3, #0]
 136 00d4 76EEE77A 		fsubs	s15, s13, s15
 137 00d8 27EE277A 		fmuls	s14, s14, s15
 138 00dc D7ED047A 		flds	s15, [r7, #16]
 139 00e0 77EE277A 		fadds	s15, s14, s15
 140 00e4 C7ED047A 		fsts	s15, [r7, #16]
  59:../Common/Source/math_helper.c ****   for (i = 0; i < buffSize; i++)
 141              		.loc 1 59 0
 142 00e8 3B6A     		ldr	r3, [r7, #32]
 143 00ea 03F10103 		add	r3, r3, #1
 144 00ee 3B62     		str	r3, [r7, #32]
 145              	.L2:
  59:../Common/Source/math_helper.c ****   for (i = 0; i < buffSize; i++)
 146              		.loc 1 59 0 is_stmt 0 discriminator 1
 147 00f0 3A6A     		ldr	r2, [r7, #32]
 148 00f2 7B68     		ldr	r3, [r7, #4]
 149 00f4 9A42     		cmp	r2, r3
 150 00f6 93D3     		bcc	.L6
  80:../Common/Source/math_helper.c ****     }
  81:../Common/Source/math_helper.c **** 
  82:../Common/Source/math_helper.c **** 	/* Checking for a NAN value in EnergyError */
  83:../Common/Source/math_helper.c **** 	test =   (int *)(&EnergyError);
 151              		.loc 1 83 0 is_stmt 1
 152 00f8 07F11003 		add	r3, r7, #16
 153 00fc FB61     		str	r3, [r7, #28]
  84:../Common/Source/math_helper.c ****     temp =  *test;
 154              		.loc 1 84 0
 155 00fe FB69     		ldr	r3, [r7, #28]
 156 0100 1B68     		ldr	r3, [r3, #0]
 157 0102 BB61     		str	r3, [r7, #24]
  85:../Common/Source/math_helper.c **** 
  86:../Common/Source/math_helper.c ****     if(temp == 0x7FC00000)
 158              		.loc 1 86 0
 159 0104 BA69     		ldr	r2, [r7, #24]
 160 0106 4FF00003 		mov	r3, #0
 161 010a C7F6C073 		movt	r3, 32704
 162 010e 9A42     		cmp	r2, r3
 163 0110 02D1     		bne	.L7
  87:../Common/Source/math_helper.c ****     {
  88:../Common/Source/math_helper.c ****   		return(0);
 164              		.loc 1 88 0
 165 0112 4FF00003 		mov	r3, #0
 166 0116 24E0     		b	.L8
 167              	.L7:
  89:../Common/Source/math_helper.c ****     }
  90:../Common/Source/math_helper.c **** 	
  91:../Common/Source/math_helper.c **** 
  92:../Common/Source/math_helper.c ****   SNR = 10 * log10 (EnergySignal / EnergyError);
 168              		.loc 1 92 0
 169 0118 D7ED047A 		flds	s15, [r7, #16]
 170 011c 97ED097A 		flds	s14, [r7, #36]
 171 0120 C7EE277A 		fdivs	s15, s14, s15
 172 0124 17EE900A 		fmrs	r0, s15
 173 0128 FFF7FEFF 		bl	__aeabi_f2d
 174 012c 0246     		mov	r2, r0
 175 012e 0B46     		mov	r3, r1
 176 0130 1046     		mov	r0, r2
 177 0132 1946     		mov	r1, r3
 178 0134 FFF7FEFF 		bl	log10
 179 0138 0246     		mov	r2, r0
 180 013a 0B46     		mov	r3, r1
 181 013c 1046     		mov	r0, r2
 182 013e 1946     		mov	r1, r3
 183 0140 4FF00002 		mov	r2, #0
 184 0144 4FF00003 		mov	r3, #0
 185 0148 C4F22403 		movt	r3, 16420
 186 014c FFF7FEFF 		bl	__aeabi_dmul
 187 0150 0246     		mov	r2, r0
 188 0152 0B46     		mov	r3, r1
 189 0154 1046     		mov	r0, r2
 190 0156 1946     		mov	r1, r3
 191 0158 FFF7FEFF 		bl	__aeabi_d2f
 192 015c 0346     		mov	r3, r0	@ float
 193 015e 7B61     		str	r3, [r7, #20]	@ float
  93:../Common/Source/math_helper.c **** 
  94:../Common/Source/math_helper.c ****   return (SNR);
 194              		.loc 1 94 0
 195 0160 7B69     		ldr	r3, [r7, #20]	@ float
 196              	.L8:
  95:../Common/Source/math_helper.c **** 
  96:../Common/Source/math_helper.c **** }
 197              		.loc 1 96 0
 198 0162 1846     		mov	r0, r3	@ float
 199 0164 07F12807 		add	r7, r7, #40
 200 0168 BD46     		mov	sp, r7
 201 016a 80BD     		pop	{r7, pc}
 202              		.cfi_endproc
 203              	.LFE128:
 205              		.section	.text.arm_provide_guard_bits_q15,"ax",%progbits
 206              		.align	2
 207              		.global	arm_provide_guard_bits_q15
 208              		.thumb
 209              		.thumb_func
 211              	arm_provide_guard_bits_q15:
 212              	.LFB129:
  97:../Common/Source/math_helper.c **** 
  98:../Common/Source/math_helper.c **** 
  99:../Common/Source/math_helper.c **** /** 
 100:../Common/Source/math_helper.c ****  * @brief  Provide guard bits for Input buffer
 101:../Common/Source/math_helper.c ****  * @param  q15_t* 	    Pointer to input buffer
 102:../Common/Source/math_helper.c ****  * @param  uint32_t 	blockSize
 103:../Common/Source/math_helper.c ****  * @param  uint32_t 	guard_bits
 104:../Common/Source/math_helper.c ****  * @return none
 105:../Common/Source/math_helper.c ****  * The function Provides the guard bits for the buffer 
 106:../Common/Source/math_helper.c ****  * to avoid overflow 
 107:../Common/Source/math_helper.c ****  */
 108:../Common/Source/math_helper.c **** 
 109:../Common/Source/math_helper.c **** void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
 110:../Common/Source/math_helper.c ****                             uint32_t guard_bits)
 111:../Common/Source/math_helper.c **** {
 213              		.loc 1 111 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 24
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 0000 80B4     		push	{r7}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 7, -4
 222 0002 87B0     		sub	sp, sp, #28
 223              	.LCFI4:
 224              		.cfi_def_cfa_offset 32
 225 0004 00AF     		add	r7, sp, #0
 226              	.LCFI5:
 227              		.cfi_def_cfa_register 7
 228 0006 F860     		str	r0, [r7, #12]
 229 0008 B960     		str	r1, [r7, #8]
 230 000a 7A60     		str	r2, [r7, #4]
 112:../Common/Source/math_helper.c ****   uint32_t i;
 113:../Common/Source/math_helper.c **** 
 114:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 231              		.loc 1 114 0
 232 000c 4FF00003 		mov	r3, #0
 233 0010 7B61     		str	r3, [r7, #20]
 234 0012 14E0     		b	.L10
 235              	.L11:
 115:../Common/Source/math_helper.c ****     {
 116:../Common/Source/math_helper.c ****       input_buf[i] = input_buf[i] >> guard_bits;
 236              		.loc 1 116 0 discriminator 2
 237 0014 7B69     		ldr	r3, [r7, #20]
 238 0016 4FEA4303 		lsl	r3, r3, #1
 239 001a FA68     		ldr	r2, [r7, #12]
 240 001c D318     		adds	r3, r2, r3
 241 001e 7A69     		ldr	r2, [r7, #20]
 242 0020 4FEA4202 		lsl	r2, r2, #1
 243 0024 F968     		ldr	r1, [r7, #12]
 244 0026 8A18     		adds	r2, r1, r2
 245 0028 1288     		ldrh	r2, [r2, #0]
 246 002a 11B2     		sxth	r1, r2
 247 002c 7A68     		ldr	r2, [r7, #4]
 248 002e 41FA02F2 		asr	r2, r1, r2
 249 0032 92B2     		uxth	r2, r2
 250 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 114:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 251              		.loc 1 114 0 discriminator 2
 252 0036 7B69     		ldr	r3, [r7, #20]
 253 0038 03F10103 		add	r3, r3, #1
 254 003c 7B61     		str	r3, [r7, #20]
 255              	.L10:
 114:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 256              		.loc 1 114 0 is_stmt 0 discriminator 1
 257 003e 7A69     		ldr	r2, [r7, #20]
 258 0040 BB68     		ldr	r3, [r7, #8]
 259 0042 9A42     		cmp	r2, r3
 260 0044 E6D3     		bcc	.L11
 117:../Common/Source/math_helper.c ****     }
 118:../Common/Source/math_helper.c **** }
 261              		.loc 1 118 0 is_stmt 1
 262 0046 07F11C07 		add	r7, r7, #28
 263 004a BD46     		mov	sp, r7
 264 004c 80BC     		pop	{r7}
 265 004e 7047     		bx	lr
 266              		.cfi_endproc
 267              	.LFE129:
 269              		.global	__aeabi_i2d
 270              		.global	__aeabi_dadd
 271              		.global	__aeabi_d2iz
 272              		.section	.text.arm_float_to_q12_20,"ax",%progbits
 273              		.align	2
 274              		.global	arm_float_to_q12_20
 275              		.thumb
 276              		.thumb_func
 278              	arm_float_to_q12_20:
 279              	.LFB130:
 119:../Common/Source/math_helper.c **** 
 120:../Common/Source/math_helper.c **** /** 
 121:../Common/Source/math_helper.c ****  * @brief  Converts float to fixed in q12.20 format
 122:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 123:../Common/Source/math_helper.c ****  * @return none
 124:../Common/Source/math_helper.c ****  * The function converts floating point values to fixed point(q12.20) values 
 125:../Common/Source/math_helper.c ****  */
 126:../Common/Source/math_helper.c **** 
 127:../Common/Source/math_helper.c **** void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
 128:../Common/Source/math_helper.c **** {
 280              		.loc 1 128 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 90B5     		push	{r4, r7, lr}
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 12
 287              		.cfi_offset 4, -12
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0002 87B0     		sub	sp, sp, #28
 291              	.LCFI7:
 292              		.cfi_def_cfa_offset 40
 293 0004 00AF     		add	r7, sp, #0
 294              	.LCFI8:
 295              		.cfi_def_cfa_register 7
 296 0006 F860     		str	r0, [r7, #12]
 297 0008 B960     		str	r1, [r7, #8]
 298 000a 7A60     		str	r2, [r7, #4]
 129:../Common/Source/math_helper.c ****   uint32_t i;
 130:../Common/Source/math_helper.c **** 
 131:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 299              		.loc 1 131 0
 300 000c 4FF00003 		mov	r3, #0
 301 0010 7B61     		str	r3, [r7, #20]
 302 0012 60E0     		b	.L13
 303              	.L18:
 132:../Common/Source/math_helper.c ****     {
 133:../Common/Source/math_helper.c **** 	  /* 1048576.0f corresponds to pow(2, 20) */
 134:../Common/Source/math_helper.c ****       pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
 304              		.loc 1 134 0
 305 0014 7B69     		ldr	r3, [r7, #20]
 306 0016 4FEA8303 		lsl	r3, r3, #2
 307 001a BA68     		ldr	r2, [r7, #8]
 308 001c D318     		adds	r3, r2, r3
 309 001e 7A69     		ldr	r2, [r7, #20]
 310 0020 4FEA8202 		lsl	r2, r2, #2
 311 0024 F968     		ldr	r1, [r7, #12]
 312 0026 8A18     		adds	r2, r1, r2
 313 0028 92ED007A 		flds	s14, [r2, #0]
 314 002c DFED2E7A 		flds	s15, .L21
 315 0030 67EE277A 		fmuls	s15, s14, s15
 316 0034 FDEEE77A 		ftosizs	s15, s15
 317 0038 C3ED007A 		fsts	s15, [r3, #0]	@ int
 135:../Common/Source/math_helper.c **** 
 136:../Common/Source/math_helper.c ****       pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
 318              		.loc 1 136 0
 319 003c 7B69     		ldr	r3, [r7, #20]
 320 003e 4FEA8303 		lsl	r3, r3, #2
 321 0042 BA68     		ldr	r2, [r7, #8]
 322 0044 D418     		adds	r4, r2, r3
 323 0046 7B69     		ldr	r3, [r7, #20]
 324 0048 4FEA8303 		lsl	r3, r3, #2
 325 004c BA68     		ldr	r2, [r7, #8]
 326 004e D318     		adds	r3, r2, r3
 327 0050 1B68     		ldr	r3, [r3, #0]
 328 0052 1846     		mov	r0, r3
 329 0054 FFF7FEFF 		bl	__aeabi_i2d
 330 0058 7B69     		ldr	r3, [r7, #20]
 331 005a 4FEA8303 		lsl	r3, r3, #2
 332 005e FA68     		ldr	r2, [r7, #12]
 333 0060 D318     		adds	r3, r2, r3
 334 0062 D3ED007A 		flds	s15, [r3, #0]
 335 0066 F5EEC07A 		fcmpezs	s15
 336 006a F1EE10FA 		fmstat
 337 006e 06DD     		ble	.L20
 338              	.L19:
 339              		.loc 1 136 0 is_stmt 0 discriminator 1
 340 0070 4FF00002 		mov	r2, #0
 341 0074 4FF00003 		mov	r3, #0
 342 0078 C3F6E073 		movt	r3, 16352
 343 007c 05E0     		b	.L16
 344              	.L20:
 345              		.loc 1 136 0 discriminator 2
 346 007e 4FF00002 		mov	r2, #0
 347 0082 4FF00003 		mov	r3, #0
 348 0086 CBF6E073 		movt	r3, 49120
 349              	.L16:
 350              		.loc 1 136 0 discriminator 3
 351 008a FFF7FEFF 		bl	__aeabi_dadd
 352 008e 0246     		mov	r2, r0
 353 0090 0B46     		mov	r3, r1
 354 0092 1046     		mov	r0, r2
 355 0094 1946     		mov	r1, r3
 356 0096 FFF7FEFF 		bl	__aeabi_d2iz
 357 009a 0346     		mov	r3, r0
 358 009c 2360     		str	r3, [r4, #0]
 137:../Common/Source/math_helper.c **** 
 138:../Common/Source/math_helper.c ****       if (pIn[i] == (float) 1.0)
 359              		.loc 1 138 0 is_stmt 1 discriminator 3
 360 009e 7B69     		ldr	r3, [r7, #20]
 361 00a0 4FEA8303 		lsl	r3, r3, #2
 362 00a4 FA68     		ldr	r2, [r7, #12]
 363 00a6 D318     		adds	r3, r2, r3
 364 00a8 93ED007A 		flds	s14, [r3, #0]
 365 00ac F7EE007A 		fconsts	s15, #112
 366 00b0 B4EE677A 		fcmps	s14, s15
 367 00b4 F1EE10FA 		fmstat
 368 00b8 09D1     		bne	.L17
 139:../Common/Source/math_helper.c ****         {
 140:../Common/Source/math_helper.c ****           pOut[i] = 0x000FFFFF;
 369              		.loc 1 140 0
 370 00ba 7B69     		ldr	r3, [r7, #20]
 371 00bc 4FEA8303 		lsl	r3, r3, #2
 372 00c0 BA68     		ldr	r2, [r7, #8]
 373 00c2 D218     		adds	r2, r2, r3
 374 00c4 4FF6FF73 		movw	r3, #65535
 375 00c8 C0F20F03 		movt	r3, 15
 376 00cc 1360     		str	r3, [r2, #0]
 377              	.L17:
 131:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 378              		.loc 1 131 0
 379 00ce 7B69     		ldr	r3, [r7, #20]
 380 00d0 03F10103 		add	r3, r3, #1
 381 00d4 7B61     		str	r3, [r7, #20]
 382              	.L13:
 131:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 383              		.loc 1 131 0 is_stmt 0 discriminator 1
 384 00d6 7A69     		ldr	r2, [r7, #20]
 385 00d8 7B68     		ldr	r3, [r7, #4]
 386 00da 9A42     		cmp	r2, r3
 387 00dc 9AD3     		bcc	.L18
 141:../Common/Source/math_helper.c ****         }
 142:../Common/Source/math_helper.c ****     }
 143:../Common/Source/math_helper.c **** }
 388              		.loc 1 143 0 is_stmt 1
 389 00de 07F11C07 		add	r7, r7, #28
 390 00e2 BD46     		mov	sp, r7
 391 00e4 90BD     		pop	{r4, r7, pc}
 392              	.L22:
 393 00e6 00BF     		.align	2
 394              	.L21:
 395 00e8 00008049 		.word	1233125376
 396              		.cfi_endproc
 397              	.LFE130:
 399              		.section	.text.arm_compare_fixed_q15,"ax",%progbits
 400              		.align	2
 401              		.global	arm_compare_fixed_q15
 402              		.thumb
 403              		.thumb_func
 405              	arm_compare_fixed_q15:
 406              	.LFB131:
 144:../Common/Source/math_helper.c **** 
 145:../Common/Source/math_helper.c **** /** 
 146:../Common/Source/math_helper.c ****  * @brief  Compare MATLAB Reference Output and ARM Test output
 147:../Common/Source/math_helper.c ****  * @param  q15_t* 	Pointer to Ref buffer
 148:../Common/Source/math_helper.c ****  * @param  q15_t* 	Pointer to Test buffer
 149:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 150:../Common/Source/math_helper.c ****  * @return none 
 151:../Common/Source/math_helper.c ****  */
 152:../Common/Source/math_helper.c **** 
 153:../Common/Source/math_helper.c **** uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
 154:../Common/Source/math_helper.c **** {
 407              		.loc 1 154 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 32
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412 0000 80B4     		push	{r7}
 413              	.LCFI9:
 414              		.cfi_def_cfa_offset 4
 415              		.cfi_offset 7, -4
 416 0002 89B0     		sub	sp, sp, #36
 417              	.LCFI10:
 418              		.cfi_def_cfa_offset 40
 419 0004 00AF     		add	r7, sp, #0
 420              	.LCFI11:
 421              		.cfi_def_cfa_register 7
 422 0006 F860     		str	r0, [r7, #12]
 423 0008 B960     		str	r1, [r7, #8]
 424 000a 7A60     		str	r2, [r7, #4]
 155:../Common/Source/math_helper.c ****   uint32_t i; 
 156:../Common/Source/math_helper.c ****   int32_t diff, diffCrnt = 0;
 425              		.loc 1 156 0
 426 000c 4FF00003 		mov	r3, #0
 427 0010 7B61     		str	r3, [r7, #20]
 157:../Common/Source/math_helper.c ****   uint32_t maxDiff = 0;
 428              		.loc 1 157 0
 429 0012 4FF00003 		mov	r3, #0
 430 0016 BB61     		str	r3, [r7, #24]
 158:../Common/Source/math_helper.c **** 
 159:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 431              		.loc 1 159 0
 432 0018 4FF00003 		mov	r3, #0
 433 001c FB61     		str	r3, [r7, #28]
 434 001e 1EE0     		b	.L24
 435              	.L26:
 160:../Common/Source/math_helper.c ****   {
 161:../Common/Source/math_helper.c ****   	diff = pIn[i] - pOut[i];
 436              		.loc 1 161 0
 437 0020 FB69     		ldr	r3, [r7, #28]
 438 0022 4FEA4303 		lsl	r3, r3, #1
 439 0026 FA68     		ldr	r2, [r7, #12]
 440 0028 D318     		adds	r3, r2, r3
 441 002a 1B88     		ldrh	r3, [r3, #0]
 442 002c 1AB2     		sxth	r2, r3
 443 002e FB69     		ldr	r3, [r7, #28]
 444 0030 4FEA4303 		lsl	r3, r3, #1
 445 0034 B968     		ldr	r1, [r7, #8]
 446 0036 CB18     		adds	r3, r1, r3
 447 0038 1B88     		ldrh	r3, [r3, #0]
 448 003a 1BB2     		sxth	r3, r3
 449 003c D31A     		subs	r3, r2, r3
 450 003e 3B61     		str	r3, [r7, #16]
 162:../Common/Source/math_helper.c ****   	diffCrnt = (diff > 0) ? diff : -diff;
 451              		.loc 1 162 0
 452 0040 3B69     		ldr	r3, [r7, #16]
 453 0042 002B     		cmp	r3, #0
 454 0044 B8BF     		it	lt
 455 0046 5B42     		rsblt	r3, r3, #0
 456 0048 7B61     		str	r3, [r7, #20]
 163:../Common/Source/math_helper.c **** 
 164:../Common/Source/math_helper.c **** 	if(diffCrnt > maxDiff)
 457              		.loc 1 164 0
 458 004a 7A69     		ldr	r2, [r7, #20]
 459 004c BB69     		ldr	r3, [r7, #24]
 460 004e 9A42     		cmp	r2, r3
 461 0050 01D9     		bls	.L25
 165:../Common/Source/math_helper.c **** 	{
 166:../Common/Source/math_helper.c **** 		maxDiff = diffCrnt;
 462              		.loc 1 166 0
 463 0052 7B69     		ldr	r3, [r7, #20]
 464 0054 BB61     		str	r3, [r7, #24]
 465              	.L25:
 159:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 466              		.loc 1 159 0
 467 0056 FB69     		ldr	r3, [r7, #28]
 468 0058 03F10103 		add	r3, r3, #1
 469 005c FB61     		str	r3, [r7, #28]
 470              	.L24:
 159:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 471              		.loc 1 159 0 is_stmt 0 discriminator 1
 472 005e FA69     		ldr	r2, [r7, #28]
 473 0060 7B68     		ldr	r3, [r7, #4]
 474 0062 9A42     		cmp	r2, r3
 475 0064 DCD3     		bcc	.L26
 167:../Common/Source/math_helper.c **** 	}	
 168:../Common/Source/math_helper.c ****   }
 169:../Common/Source/math_helper.c **** 
 170:../Common/Source/math_helper.c ****   return(maxDiff);
 476              		.loc 1 170 0 is_stmt 1
 477 0066 BB69     		ldr	r3, [r7, #24]
 171:../Common/Source/math_helper.c **** }
 478              		.loc 1 171 0
 479 0068 1846     		mov	r0, r3
 480 006a 07F12407 		add	r7, r7, #36
 481 006e BD46     		mov	sp, r7
 482 0070 80BC     		pop	{r7}
 483 0072 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE131:
 487              		.section	.text.arm_compare_fixed_q31,"ax",%progbits
 488              		.align	2
 489              		.global	arm_compare_fixed_q31
 490              		.thumb
 491              		.thumb_func
 493              	arm_compare_fixed_q31:
 494              	.LFB132:
 172:../Common/Source/math_helper.c **** 
 173:../Common/Source/math_helper.c **** /** 
 174:../Common/Source/math_helper.c ****  * @brief  Compare MATLAB Reference Output and ARM Test output
 175:../Common/Source/math_helper.c ****  * @param  q31_t* 	Pointer to Ref buffer
 176:../Common/Source/math_helper.c ****  * @param  q31_t* 	Pointer to Test buffer
 177:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 178:../Common/Source/math_helper.c ****  * @return none 
 179:../Common/Source/math_helper.c ****  */
 180:../Common/Source/math_helper.c **** 
 181:../Common/Source/math_helper.c **** uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
 182:../Common/Source/math_helper.c **** {
 495              		.loc 1 182 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 32
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500 0000 80B4     		push	{r7}
 501              	.LCFI12:
 502              		.cfi_def_cfa_offset 4
 503              		.cfi_offset 7, -4
 504 0002 89B0     		sub	sp, sp, #36
 505              	.LCFI13:
 506              		.cfi_def_cfa_offset 40
 507 0004 00AF     		add	r7, sp, #0
 508              	.LCFI14:
 509              		.cfi_def_cfa_register 7
 510 0006 F860     		str	r0, [r7, #12]
 511 0008 B960     		str	r1, [r7, #8]
 512 000a 7A60     		str	r2, [r7, #4]
 183:../Common/Source/math_helper.c ****   uint32_t i; 
 184:../Common/Source/math_helper.c ****   int32_t diff, diffCrnt = 0;
 513              		.loc 1 184 0
 514 000c 4FF00003 		mov	r3, #0
 515 0010 7B61     		str	r3, [r7, #20]
 185:../Common/Source/math_helper.c ****   uint32_t maxDiff = 0;
 516              		.loc 1 185 0
 517 0012 4FF00003 		mov	r3, #0
 518 0016 BB61     		str	r3, [r7, #24]
 186:../Common/Source/math_helper.c **** 
 187:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 519              		.loc 1 187 0
 520 0018 4FF00003 		mov	r3, #0
 521 001c FB61     		str	r3, [r7, #28]
 522 001e 1CE0     		b	.L29
 523              	.L31:
 188:../Common/Source/math_helper.c ****   {
 189:../Common/Source/math_helper.c ****   	diff = pIn[i] - pOut[i];
 524              		.loc 1 189 0
 525 0020 FB69     		ldr	r3, [r7, #28]
 526 0022 4FEA8303 		lsl	r3, r3, #2
 527 0026 FA68     		ldr	r2, [r7, #12]
 528 0028 D318     		adds	r3, r2, r3
 529 002a 1A68     		ldr	r2, [r3, #0]
 530 002c FB69     		ldr	r3, [r7, #28]
 531 002e 4FEA8303 		lsl	r3, r3, #2
 532 0032 B968     		ldr	r1, [r7, #8]
 533 0034 CB18     		adds	r3, r1, r3
 534 0036 1B68     		ldr	r3, [r3, #0]
 535 0038 D31A     		subs	r3, r2, r3
 536 003a 3B61     		str	r3, [r7, #16]
 190:../Common/Source/math_helper.c ****   	diffCrnt = (diff > 0) ? diff : -diff;
 537              		.loc 1 190 0
 538 003c 3B69     		ldr	r3, [r7, #16]
 539 003e 002B     		cmp	r3, #0
 540 0040 B8BF     		it	lt
 541 0042 5B42     		rsblt	r3, r3, #0
 542 0044 7B61     		str	r3, [r7, #20]
 191:../Common/Source/math_helper.c **** 
 192:../Common/Source/math_helper.c **** 	if(diffCrnt > maxDiff)
 543              		.loc 1 192 0
 544 0046 7A69     		ldr	r2, [r7, #20]
 545 0048 BB69     		ldr	r3, [r7, #24]
 546 004a 9A42     		cmp	r2, r3
 547 004c 01D9     		bls	.L30
 193:../Common/Source/math_helper.c **** 	{
 194:../Common/Source/math_helper.c **** 		maxDiff = diffCrnt;
 548              		.loc 1 194 0
 549 004e 7B69     		ldr	r3, [r7, #20]
 550 0050 BB61     		str	r3, [r7, #24]
 551              	.L30:
 187:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 552              		.loc 1 187 0
 553 0052 FB69     		ldr	r3, [r7, #28]
 554 0054 03F10103 		add	r3, r3, #1
 555 0058 FB61     		str	r3, [r7, #28]
 556              	.L29:
 187:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 557              		.loc 1 187 0 is_stmt 0 discriminator 1
 558 005a FA69     		ldr	r2, [r7, #28]
 559 005c 7B68     		ldr	r3, [r7, #4]
 560 005e 9A42     		cmp	r2, r3
 561 0060 DED3     		bcc	.L31
 195:../Common/Source/math_helper.c **** 	}
 196:../Common/Source/math_helper.c ****   }
 197:../Common/Source/math_helper.c **** 
 198:../Common/Source/math_helper.c ****   return(maxDiff);
 562              		.loc 1 198 0 is_stmt 1
 563 0062 BB69     		ldr	r3, [r7, #24]
 199:../Common/Source/math_helper.c **** }
 564              		.loc 1 199 0
 565 0064 1846     		mov	r0, r3
 566 0066 07F12407 		add	r7, r7, #36
 567 006a BD46     		mov	sp, r7
 568 006c 80BC     		pop	{r7}
 569 006e 7047     		bx	lr
 570              		.cfi_endproc
 571              	.LFE132:
 573              		.section	.text.arm_provide_guard_bits_q31,"ax",%progbits
 574              		.align	2
 575              		.global	arm_provide_guard_bits_q31
 576              		.thumb
 577              		.thumb_func
 579              	arm_provide_guard_bits_q31:
 580              	.LFB133:
 200:../Common/Source/math_helper.c **** 
 201:../Common/Source/math_helper.c **** /** 
 202:../Common/Source/math_helper.c ****  * @brief  Provide guard bits for Input buffer
 203:../Common/Source/math_helper.c ****  * @param  q31_t* 	Pointer to input buffer
 204:../Common/Source/math_helper.c ****  * @param  uint32_t 	blockSize
 205:../Common/Source/math_helper.c ****  * @param  uint32_t 	guard_bits
 206:../Common/Source/math_helper.c ****  * @return none
 207:../Common/Source/math_helper.c ****  * The function Provides the guard bits for the buffer 
 208:../Common/Source/math_helper.c ****  * to avoid overflow 
 209:../Common/Source/math_helper.c ****  */
 210:../Common/Source/math_helper.c **** 
 211:../Common/Source/math_helper.c **** void arm_provide_guard_bits_q31 (q31_t * input_buf, 
 212:../Common/Source/math_helper.c **** 								 uint32_t blockSize,
 213:../Common/Source/math_helper.c ****                                  uint32_t guard_bits)
 214:../Common/Source/math_helper.c **** {
 581              		.loc 1 214 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 24
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586 0000 80B4     		push	{r7}
 587              	.LCFI15:
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 7, -4
 590 0002 87B0     		sub	sp, sp, #28
 591              	.LCFI16:
 592              		.cfi_def_cfa_offset 32
 593 0004 00AF     		add	r7, sp, #0
 594              	.LCFI17:
 595              		.cfi_def_cfa_register 7
 596 0006 F860     		str	r0, [r7, #12]
 597 0008 B960     		str	r1, [r7, #8]
 598 000a 7A60     		str	r2, [r7, #4]
 215:../Common/Source/math_helper.c ****   uint32_t i;
 216:../Common/Source/math_helper.c **** 
 217:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 599              		.loc 1 217 0
 600 000c 4FF00003 		mov	r3, #0
 601 0010 7B61     		str	r3, [r7, #20]
 602 0012 12E0     		b	.L34
 603              	.L35:
 218:../Common/Source/math_helper.c ****     {
 219:../Common/Source/math_helper.c ****       input_buf[i] = input_buf[i] >> guard_bits;
 604              		.loc 1 219 0 discriminator 2
 605 0014 7B69     		ldr	r3, [r7, #20]
 606 0016 4FEA8303 		lsl	r3, r3, #2
 607 001a FA68     		ldr	r2, [r7, #12]
 608 001c D318     		adds	r3, r2, r3
 609 001e 7A69     		ldr	r2, [r7, #20]
 610 0020 4FEA8202 		lsl	r2, r2, #2
 611 0024 F968     		ldr	r1, [r7, #12]
 612 0026 8A18     		adds	r2, r1, r2
 613 0028 1168     		ldr	r1, [r2, #0]
 614 002a 7A68     		ldr	r2, [r7, #4]
 615 002c 41FA02F2 		asr	r2, r1, r2
 616 0030 1A60     		str	r2, [r3, #0]
 217:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 617              		.loc 1 217 0 discriminator 2
 618 0032 7B69     		ldr	r3, [r7, #20]
 619 0034 03F10103 		add	r3, r3, #1
 620 0038 7B61     		str	r3, [r7, #20]
 621              	.L34:
 217:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 622              		.loc 1 217 0 is_stmt 0 discriminator 1
 623 003a 7A69     		ldr	r2, [r7, #20]
 624 003c BB68     		ldr	r3, [r7, #8]
 625 003e 9A42     		cmp	r2, r3
 626 0040 E8D3     		bcc	.L35
 220:../Common/Source/math_helper.c ****     }
 221:../Common/Source/math_helper.c **** }
 627              		.loc 1 221 0 is_stmt 1
 628 0042 07F11C07 		add	r7, r7, #28
 629 0046 BD46     		mov	sp, r7
 630 0048 80BC     		pop	{r7}
 631 004a 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE133:
 635              		.section	.text.arm_provide_guard_bits_q7,"ax",%progbits
 636              		.align	2
 637              		.global	arm_provide_guard_bits_q7
 638              		.thumb
 639              		.thumb_func
 641              	arm_provide_guard_bits_q7:
 642              	.LFB134:
 222:../Common/Source/math_helper.c **** 
 223:../Common/Source/math_helper.c **** /** 
 224:../Common/Source/math_helper.c ****  * @brief  Provide guard bits for Input buffer
 225:../Common/Source/math_helper.c ****  * @param  q31_t* 	Pointer to input buffer
 226:../Common/Source/math_helper.c ****  * @param  uint32_t 	blockSize
 227:../Common/Source/math_helper.c ****  * @param  uint32_t 	guard_bits
 228:../Common/Source/math_helper.c ****  * @return none
 229:../Common/Source/math_helper.c ****  * The function Provides the guard bits for the buffer 
 230:../Common/Source/math_helper.c ****  * to avoid overflow 
 231:../Common/Source/math_helper.c ****  */
 232:../Common/Source/math_helper.c **** 
 233:../Common/Source/math_helper.c **** void arm_provide_guard_bits_q7 (q7_t * input_buf, 
 234:../Common/Source/math_helper.c **** 								uint32_t blockSize,
 235:../Common/Source/math_helper.c ****                                 uint32_t guard_bits)
 236:../Common/Source/math_helper.c **** {
 643              		.loc 1 236 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 24
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647              		@ link register save eliminated.
 648 0000 80B4     		push	{r7}
 649              	.LCFI18:
 650              		.cfi_def_cfa_offset 4
 651              		.cfi_offset 7, -4
 652 0002 87B0     		sub	sp, sp, #28
 653              	.LCFI19:
 654              		.cfi_def_cfa_offset 32
 655 0004 00AF     		add	r7, sp, #0
 656              	.LCFI20:
 657              		.cfi_def_cfa_register 7
 658 0006 F860     		str	r0, [r7, #12]
 659 0008 B960     		str	r1, [r7, #8]
 660 000a 7A60     		str	r2, [r7, #4]
 237:../Common/Source/math_helper.c ****   uint32_t i;
 238:../Common/Source/math_helper.c **** 
 239:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 661              		.loc 1 239 0
 662 000c 4FF00003 		mov	r3, #0
 663 0010 7B61     		str	r3, [r7, #20]
 664 0012 10E0     		b	.L37
 665              	.L38:
 240:../Common/Source/math_helper.c ****     {
 241:../Common/Source/math_helper.c ****       input_buf[i] = input_buf[i] >> guard_bits;
 666              		.loc 1 241 0 discriminator 2
 667 0014 FA68     		ldr	r2, [r7, #12]
 668 0016 7B69     		ldr	r3, [r7, #20]
 669 0018 D318     		adds	r3, r2, r3
 670 001a F968     		ldr	r1, [r7, #12]
 671 001c 7A69     		ldr	r2, [r7, #20]
 672 001e 8A18     		adds	r2, r1, r2
 673 0020 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 674 0022 51B2     		sxtb	r1, r2
 675 0024 7A68     		ldr	r2, [r7, #4]
 676 0026 41FA02F2 		asr	r2, r1, r2
 677 002a D2B2     		uxtb	r2, r2
 678 002c 1A70     		strb	r2, [r3, #0]
 239:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 679              		.loc 1 239 0 discriminator 2
 680 002e 7B69     		ldr	r3, [r7, #20]
 681 0030 03F10103 		add	r3, r3, #1
 682 0034 7B61     		str	r3, [r7, #20]
 683              	.L37:
 239:../Common/Source/math_helper.c ****   for (i = 0; i < blockSize; i++)
 684              		.loc 1 239 0 is_stmt 0 discriminator 1
 685 0036 7A69     		ldr	r2, [r7, #20]
 686 0038 BB68     		ldr	r3, [r7, #8]
 687 003a 9A42     		cmp	r2, r3
 688 003c EAD3     		bcc	.L38
 242:../Common/Source/math_helper.c ****     }
 243:../Common/Source/math_helper.c **** }
 689              		.loc 1 243 0 is_stmt 1
 690 003e 07F11C07 		add	r7, r7, #28
 691 0042 BD46     		mov	sp, r7
 692 0044 80BC     		pop	{r7}
 693 0046 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE134:
 697              		.section	.text.arm_calc_guard_bits,"ax",%progbits
 698              		.align	2
 699              		.global	arm_calc_guard_bits
 700              		.thumb
 701              		.thumb_func
 703              	arm_calc_guard_bits:
 704              	.LFB135:
 244:../Common/Source/math_helper.c **** 
 245:../Common/Source/math_helper.c **** 
 246:../Common/Source/math_helper.c **** 
 247:../Common/Source/math_helper.c **** /** 
 248:../Common/Source/math_helper.c ****  * @brief  Caluclates number of guard bits 
 249:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of additions
 250:../Common/Source/math_helper.c ****  * @return none
 251:../Common/Source/math_helper.c ****  * The function Caluclates the number of guard bits  
 252:../Common/Source/math_helper.c ****  * depending on the numtaps 
 253:../Common/Source/math_helper.c ****  */
 254:../Common/Source/math_helper.c **** 
 255:../Common/Source/math_helper.c **** uint32_t arm_calc_guard_bits (uint32_t num_adds)
 256:../Common/Source/math_helper.c **** {
 705              		.loc 1 256 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 16
 708              		@ frame_needed = 1, uses_anonymous_args = 0
 709              		@ link register save eliminated.
 710 0000 80B4     		push	{r7}
 711              	.LCFI21:
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 7, -4
 714 0002 85B0     		sub	sp, sp, #20
 715              	.LCFI22:
 716              		.cfi_def_cfa_offset 24
 717 0004 00AF     		add	r7, sp, #0
 718              	.LCFI23:
 719              		.cfi_def_cfa_register 7
 720 0006 7860     		str	r0, [r7, #4]
 257:../Common/Source/math_helper.c ****   uint32_t i = 1, j = 0;
 721              		.loc 1 257 0
 722 0008 4FF00103 		mov	r3, #1
 723 000c FB60     		str	r3, [r7, #12]
 724 000e 4FF00003 		mov	r3, #0
 725 0012 BB60     		str	r3, [r7, #8]
 258:../Common/Source/math_helper.c **** 
 259:../Common/Source/math_helper.c ****   if (num_adds == 1)
 726              		.loc 1 259 0
 727 0014 7B68     		ldr	r3, [r7, #4]
 728 0016 012B     		cmp	r3, #1
 729 0018 0AD1     		bne	.L42
 260:../Common/Source/math_helper.c ****     {
 261:../Common/Source/math_helper.c ****       return (0);
 730              		.loc 1 261 0
 731 001a 4FF00003 		mov	r3, #0
 732 001e 0CE0     		b	.L41
 733              	.L43:
 262:../Common/Source/math_helper.c ****     }
 263:../Common/Source/math_helper.c **** 
 264:../Common/Source/math_helper.c ****   while (i < num_adds)
 265:../Common/Source/math_helper.c ****     {
 266:../Common/Source/math_helper.c ****       i = i * 2;
 734              		.loc 1 266 0
 735 0020 FB68     		ldr	r3, [r7, #12]
 736 0022 4FEA4303 		lsl	r3, r3, #1
 737 0026 FB60     		str	r3, [r7, #12]
 267:../Common/Source/math_helper.c ****       j++;
 738              		.loc 1 267 0
 739 0028 BB68     		ldr	r3, [r7, #8]
 740 002a 03F10103 		add	r3, r3, #1
 741 002e BB60     		str	r3, [r7, #8]
 742              	.L42:
 264:../Common/Source/math_helper.c ****   while (i < num_adds)
 743              		.loc 1 264 0 discriminator 1
 744 0030 FA68     		ldr	r2, [r7, #12]
 745 0032 7B68     		ldr	r3, [r7, #4]
 746 0034 9A42     		cmp	r2, r3
 747 0036 F3D3     		bcc	.L43
 268:../Common/Source/math_helper.c ****     }
 269:../Common/Source/math_helper.c **** 
 270:../Common/Source/math_helper.c ****   return (j);
 748              		.loc 1 270 0
 749 0038 BB68     		ldr	r3, [r7, #8]
 750              	.L41:
 271:../Common/Source/math_helper.c **** }
 751              		.loc 1 271 0
 752 003a 1846     		mov	r0, r3
 753 003c 07F11407 		add	r7, r7, #20
 754 0040 BD46     		mov	sp, r7
 755 0042 80BC     		pop	{r7}
 756 0044 7047     		bx	lr
 757              		.cfi_endproc
 758              	.LFE135:
 760 0046 00BF     		.section	.text.arm_apply_guard_bits,"ax",%progbits
 761              		.align	2
 762              		.global	arm_apply_guard_bits
 763              		.thumb
 764              		.thumb_func
 766              	arm_apply_guard_bits:
 767              	.LFB136:
 272:../Common/Source/math_helper.c **** 
 273:../Common/Source/math_helper.c **** /** 
 274:../Common/Source/math_helper.c ****  * @brief  Converts Q15 to floating-point
 275:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 276:../Common/Source/math_helper.c ****  * @return none
 277:../Common/Source/math_helper.c ****  */
 278:../Common/Source/math_helper.c **** 
 279:../Common/Source/math_helper.c **** void arm_apply_guard_bits (float32_t * pIn, 
 280:../Common/Source/math_helper.c **** 						   uint32_t numSamples, 
 281:../Common/Source/math_helper.c **** 						   uint32_t guard_bits)
 282:../Common/Source/math_helper.c **** {
 768              		.loc 1 282 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 24
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 90B5     		push	{r4, r7, lr}
 773              	.LCFI24:
 774              		.cfi_def_cfa_offset 12
 775              		.cfi_offset 4, -12
 776              		.cfi_offset 7, -8
 777              		.cfi_offset 14, -4
 778 0002 2DED028B 		fstmfdd	sp!, {d8}
 779              	.LCFI25:
 780              		.cfi_def_cfa_offset 20
 781              		.cfi_offset 80, -20
 782 0006 87B0     		sub	sp, sp, #28
 783              	.LCFI26:
 784              		.cfi_def_cfa_offset 48
 785 0008 00AF     		add	r7, sp, #0
 786              	.LCFI27:
 787              		.cfi_def_cfa_register 7
 788 000a F860     		str	r0, [r7, #12]
 789 000c B960     		str	r1, [r7, #8]
 790 000e 7A60     		str	r2, [r7, #4]
 283:../Common/Source/math_helper.c ****   uint32_t i;
 284:../Common/Source/math_helper.c **** 
 285:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 791              		.loc 1 285 0
 792 0010 4FF00003 		mov	r3, #0
 793 0014 7B61     		str	r3, [r7, #20]
 794 0016 1BE0     		b	.L45
 795              	.L46:
 286:../Common/Source/math_helper.c ****     {
 287:../Common/Source/math_helper.c ****       pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
 796              		.loc 1 287 0 discriminator 2
 797 0018 7B69     		ldr	r3, [r7, #20]
 798 001a 4FEA8303 		lsl	r3, r3, #2
 799 001e FA68     		ldr	r2, [r7, #12]
 800 0020 D418     		adds	r4, r2, r3
 801 0022 7B69     		ldr	r3, [r7, #20]
 802 0024 4FEA8303 		lsl	r3, r3, #2
 803 0028 FA68     		ldr	r2, [r7, #12]
 804 002a D318     		adds	r3, r2, r3
 805 002c 93ED008A 		flds	s16, [r3, #0]
 806 0030 7868     		ldr	r0, [r7, #4]
 807 0032 FFF7FEFF 		bl	arm_calc_2pow
 808 0036 0346     		mov	r3, r0
 809 0038 07EE103A 		fmsr	s14, r3	@ int
 810 003c F8EE477A 		fuitos	s15, s14
 811 0040 68EE277A 		fmuls	s15, s16, s15
 812 0044 C4ED007A 		fsts	s15, [r4, #0]
 285:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 813              		.loc 1 285 0 discriminator 2
 814 0048 7B69     		ldr	r3, [r7, #20]
 815 004a 03F10103 		add	r3, r3, #1
 816 004e 7B61     		str	r3, [r7, #20]
 817              	.L45:
 285:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 818              		.loc 1 285 0 is_stmt 0 discriminator 1
 819 0050 7A69     		ldr	r2, [r7, #20]
 820 0052 BB68     		ldr	r3, [r7, #8]
 821 0054 9A42     		cmp	r2, r3
 822 0056 DFD3     		bcc	.L46
 288:../Common/Source/math_helper.c ****     }
 289:../Common/Source/math_helper.c **** }
 823              		.loc 1 289 0 is_stmt 1
 824 0058 07F11C07 		add	r7, r7, #28
 825 005c BD46     		mov	sp, r7
 826 005e BDEC028B 		fldmfdd	sp!, {d8}
 827 0062 90BD     		pop	{r4, r7, pc}
 828              		.cfi_endproc
 829              	.LFE136:
 831              		.section	.text.arm_calc_2pow,"ax",%progbits
 832              		.align	2
 833              		.global	arm_calc_2pow
 834              		.thumb
 835              		.thumb_func
 837              	arm_calc_2pow:
 838              	.LFB137:
 290:../Common/Source/math_helper.c **** 
 291:../Common/Source/math_helper.c **** /** 
 292:../Common/Source/math_helper.c ****  * @brief  Calculates pow(2, numShifts)
 293:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of shifts
 294:../Common/Source/math_helper.c ****  * @return pow(2, numShifts)
 295:../Common/Source/math_helper.c ****  */
 296:../Common/Source/math_helper.c **** uint32_t arm_calc_2pow(uint32_t numShifts)
 297:../Common/Source/math_helper.c **** {
 839              		.loc 1 297 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 16
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844 0000 80B4     		push	{r7}
 845              	.LCFI28:
 846              		.cfi_def_cfa_offset 4
 847              		.cfi_offset 7, -4
 848 0002 85B0     		sub	sp, sp, #20
 849              	.LCFI29:
 850              		.cfi_def_cfa_offset 24
 851 0004 00AF     		add	r7, sp, #0
 852              	.LCFI30:
 853              		.cfi_def_cfa_register 7
 854 0006 7860     		str	r0, [r7, #4]
 298:../Common/Source/math_helper.c **** 
 299:../Common/Source/math_helper.c ****   uint32_t i, val = 1;
 855              		.loc 1 299 0
 856 0008 4FF00103 		mov	r3, #1
 857 000c BB60     		str	r3, [r7, #8]
 300:../Common/Source/math_helper.c **** 
 301:../Common/Source/math_helper.c ****   for (i = 0; i < numShifts; i++)
 858              		.loc 1 301 0
 859 000e 4FF00003 		mov	r3, #0
 860 0012 FB60     		str	r3, [r7, #12]
 861 0014 07E0     		b	.L48
 862              	.L49:
 302:../Common/Source/math_helper.c ****     {
 303:../Common/Source/math_helper.c ****       val = val * 2;
 863              		.loc 1 303 0 discriminator 2
 864 0016 BB68     		ldr	r3, [r7, #8]
 865 0018 4FEA4303 		lsl	r3, r3, #1
 866 001c BB60     		str	r3, [r7, #8]
 301:../Common/Source/math_helper.c ****   for (i = 0; i < numShifts; i++)
 867              		.loc 1 301 0 discriminator 2
 868 001e FB68     		ldr	r3, [r7, #12]
 869 0020 03F10103 		add	r3, r3, #1
 870 0024 FB60     		str	r3, [r7, #12]
 871              	.L48:
 301:../Common/Source/math_helper.c ****   for (i = 0; i < numShifts; i++)
 872              		.loc 1 301 0 is_stmt 0 discriminator 1
 873 0026 FA68     		ldr	r2, [r7, #12]
 874 0028 7B68     		ldr	r3, [r7, #4]
 875 002a 9A42     		cmp	r2, r3
 876 002c F3D3     		bcc	.L49
 304:../Common/Source/math_helper.c ****     }	
 305:../Common/Source/math_helper.c **** 
 306:../Common/Source/math_helper.c ****   return(val);
 877              		.loc 1 306 0 is_stmt 1
 878 002e BB68     		ldr	r3, [r7, #8]
 307:../Common/Source/math_helper.c **** }
 879              		.loc 1 307 0
 880 0030 1846     		mov	r0, r3
 881 0032 07F11407 		add	r7, r7, #20
 882 0036 BD46     		mov	sp, r7
 883 0038 80BC     		pop	{r7}
 884 003a 7047     		bx	lr
 885              		.cfi_endproc
 886              	.LFE137:
 888              		.section	.text.arm_float_to_q14,"ax",%progbits
 889              		.align	2
 890              		.global	arm_float_to_q14
 891              		.thumb
 892              		.thumb_func
 894              	arm_float_to_q14:
 895              	.LFB138:
 308:../Common/Source/math_helper.c **** 
 309:../Common/Source/math_helper.c **** 
 310:../Common/Source/math_helper.c **** 
 311:../Common/Source/math_helper.c **** /** 
 312:../Common/Source/math_helper.c ****  * @brief  Converts float to fixed q14 
 313:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 314:../Common/Source/math_helper.c ****  * @return none
 315:../Common/Source/math_helper.c ****  * The function converts floating point values to fixed point values 
 316:../Common/Source/math_helper.c ****  */
 317:../Common/Source/math_helper.c **** 
 318:../Common/Source/math_helper.c **** void arm_float_to_q14 (float *pIn, q15_t * pOut, 
 319:../Common/Source/math_helper.c ****                        uint32_t numSamples)
 320:../Common/Source/math_helper.c **** {
 896              		.loc 1 320 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 24
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900 0000 90B5     		push	{r4, r7, lr}
 901              	.LCFI31:
 902              		.cfi_def_cfa_offset 12
 903              		.cfi_offset 4, -12
 904              		.cfi_offset 7, -8
 905              		.cfi_offset 14, -4
 906 0002 87B0     		sub	sp, sp, #28
 907              	.LCFI32:
 908              		.cfi_def_cfa_offset 40
 909 0004 00AF     		add	r7, sp, #0
 910              	.LCFI33:
 911              		.cfi_def_cfa_register 7
 912 0006 F860     		str	r0, [r7, #12]
 913 0008 B960     		str	r1, [r7, #8]
 914 000a 7A60     		str	r2, [r7, #4]
 321:../Common/Source/math_helper.c ****   uint32_t i;
 322:../Common/Source/math_helper.c **** 
 323:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 915              		.loc 1 323 0
 916 000c 4FF00003 		mov	r3, #0
 917 0010 7B61     		str	r3, [r7, #20]
 918 0012 62E0     		b	.L52
 919              	.L57:
 324:../Common/Source/math_helper.c ****     {
 325:../Common/Source/math_helper.c **** 	  /* 16384.0f corresponds to pow(2, 14) */
 326:../Common/Source/math_helper.c ****       pOut[i] = (q15_t) (pIn[i] * 16384.0f);
 920              		.loc 1 326 0
 921 0014 7B69     		ldr	r3, [r7, #20]
 922 0016 4FEA4303 		lsl	r3, r3, #1
 923 001a BA68     		ldr	r2, [r7, #8]
 924 001c D318     		adds	r3, r2, r3
 925 001e 7A69     		ldr	r2, [r7, #20]
 926 0020 4FEA8202 		lsl	r2, r2, #2
 927 0024 F968     		ldr	r1, [r7, #12]
 928 0026 8A18     		adds	r2, r1, r2
 929 0028 92ED007A 		flds	s14, [r2, #0]
 930 002c DFED2F7A 		flds	s15, .L60
 931 0030 67EE277A 		fmuls	s15, s14, s15
 932 0034 FDEEE77A 		ftosizs	s15, s15
 933 0038 17EE902A 		fmrs	r2, s15	@ int
 934 003c 92B2     		uxth	r2, r2
 935 003e 1A80     		strh	r2, [r3, #0]	@ movhi
 327:../Common/Source/math_helper.c **** 
 328:../Common/Source/math_helper.c ****       pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
 936              		.loc 1 328 0
 937 0040 7B69     		ldr	r3, [r7, #20]
 938 0042 4FEA4303 		lsl	r3, r3, #1
 939 0046 BA68     		ldr	r2, [r7, #8]
 940 0048 D418     		adds	r4, r2, r3
 941 004a 7B69     		ldr	r3, [r7, #20]
 942 004c 4FEA4303 		lsl	r3, r3, #1
 943 0050 BA68     		ldr	r2, [r7, #8]
 944 0052 D318     		adds	r3, r2, r3
 945 0054 1B88     		ldrh	r3, [r3, #0]
 946 0056 1BB2     		sxth	r3, r3
 947 0058 1846     		mov	r0, r3
 948 005a FFF7FEFF 		bl	__aeabi_i2d
 949 005e 7B69     		ldr	r3, [r7, #20]
 950 0060 4FEA8303 		lsl	r3, r3, #2
 951 0064 FA68     		ldr	r2, [r7, #12]
 952 0066 D318     		adds	r3, r2, r3
 953 0068 D3ED007A 		flds	s15, [r3, #0]
 954 006c F5EEC07A 		fcmpezs	s15
 955 0070 F1EE10FA 		fmstat
 956 0074 06DD     		ble	.L59
 957              	.L58:
 958              		.loc 1 328 0 is_stmt 0 discriminator 1
 959 0076 4FF00002 		mov	r2, #0
 960 007a 4FF00003 		mov	r3, #0
 961 007e C3F6E073 		movt	r3, 16352
 962 0082 05E0     		b	.L55
 963              	.L59:
 964              		.loc 1 328 0 discriminator 2
 965 0084 4FF00002 		mov	r2, #0
 966 0088 4FF00003 		mov	r3, #0
 967 008c CBF6E073 		movt	r3, 49120
 968              	.L55:
 969              		.loc 1 328 0 discriminator 3
 970 0090 FFF7FEFF 		bl	__aeabi_dadd
 971 0094 0246     		mov	r2, r0
 972 0096 0B46     		mov	r3, r1
 973 0098 1046     		mov	r0, r2
 974 009a 1946     		mov	r1, r3
 975 009c FFF7FEFF 		bl	__aeabi_d2iz
 976 00a0 0346     		mov	r3, r0
 977 00a2 9BB2     		uxth	r3, r3
 978 00a4 2380     		strh	r3, [r4, #0]	@ movhi
 329:../Common/Source/math_helper.c **** 
 330:../Common/Source/math_helper.c ****       if (pIn[i] == (float) 2.0)
 979              		.loc 1 330 0 is_stmt 1 discriminator 3
 980 00a6 7B69     		ldr	r3, [r7, #20]
 981 00a8 4FEA8303 		lsl	r3, r3, #2
 982 00ac FA68     		ldr	r2, [r7, #12]
 983 00ae D318     		adds	r3, r2, r3
 984 00b0 93ED007A 		flds	s14, [r3, #0]
 985 00b4 F0EE007A 		fconsts	s15, #0
 986 00b8 B4EE677A 		fcmps	s14, s15
 987 00bc F1EE10FA 		fmstat
 988 00c0 07D1     		bne	.L56
 331:../Common/Source/math_helper.c ****         {
 332:../Common/Source/math_helper.c ****           pOut[i] = 0x7FFF;
 989              		.loc 1 332 0
 990 00c2 7B69     		ldr	r3, [r7, #20]
 991 00c4 4FEA4303 		lsl	r3, r3, #1
 992 00c8 BA68     		ldr	r2, [r7, #8]
 993 00ca D318     		adds	r3, r2, r3
 994 00cc 47F6FF72 		movw	r2, #32767
 995 00d0 1A80     		strh	r2, [r3, #0]	@ movhi
 996              	.L56:
 323:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 997              		.loc 1 323 0
 998 00d2 7B69     		ldr	r3, [r7, #20]
 999 00d4 03F10103 		add	r3, r3, #1
 1000 00d8 7B61     		str	r3, [r7, #20]
 1001              	.L52:
 323:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1002              		.loc 1 323 0 is_stmt 0 discriminator 1
 1003 00da 7A69     		ldr	r2, [r7, #20]
 1004 00dc 7B68     		ldr	r3, [r7, #4]
 1005 00de 9A42     		cmp	r2, r3
 1006 00e0 98D3     		bcc	.L57
 333:../Common/Source/math_helper.c ****         }
 334:../Common/Source/math_helper.c **** 
 335:../Common/Source/math_helper.c ****     }
 336:../Common/Source/math_helper.c **** 
 337:../Common/Source/math_helper.c **** }
 1007              		.loc 1 337 0 is_stmt 1
 1008 00e2 07F11C07 		add	r7, r7, #28
 1009 00e6 BD46     		mov	sp, r7
 1010 00e8 90BD     		pop	{r4, r7, pc}
 1011              	.L61:
 1012 00ea 00BF     		.align	2
 1013              	.L60:
 1014 00ec 00008046 		.word	1182793728
 1015              		.cfi_endproc
 1016              	.LFE138:
 1018              		.section	.text.arm_float_to_q30,"ax",%progbits
 1019              		.align	2
 1020              		.global	arm_float_to_q30
 1021              		.thumb
 1022              		.thumb_func
 1024              	arm_float_to_q30:
 1025              	.LFB139:
 338:../Common/Source/math_helper.c **** 
 339:../Common/Source/math_helper.c ****  
 340:../Common/Source/math_helper.c **** /** 
 341:../Common/Source/math_helper.c ****  * @brief  Converts float to fixed q30 format
 342:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 343:../Common/Source/math_helper.c ****  * @return none
 344:../Common/Source/math_helper.c ****  * The function converts floating point values to fixed point values 
 345:../Common/Source/math_helper.c ****  */
 346:../Common/Source/math_helper.c **** 
 347:../Common/Source/math_helper.c **** void arm_float_to_q30 (float *pIn, q31_t * pOut, 
 348:../Common/Source/math_helper.c **** 					   uint32_t numSamples)
 349:../Common/Source/math_helper.c **** {
 1026              		.loc 1 349 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 24
 1029              		@ frame_needed = 1, uses_anonymous_args = 0
 1030 0000 90B5     		push	{r4, r7, lr}
 1031              	.LCFI34:
 1032              		.cfi_def_cfa_offset 12
 1033              		.cfi_offset 4, -12
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 87B0     		sub	sp, sp, #28
 1037              	.LCFI35:
 1038              		.cfi_def_cfa_offset 40
 1039 0004 00AF     		add	r7, sp, #0
 1040              	.LCFI36:
 1041              		.cfi_def_cfa_register 7
 1042 0006 F860     		str	r0, [r7, #12]
 1043 0008 B960     		str	r1, [r7, #8]
 1044 000a 7A60     		str	r2, [r7, #4]
 350:../Common/Source/math_helper.c ****   uint32_t i;
 351:../Common/Source/math_helper.c **** 
 352:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1045              		.loc 1 352 0
 1046 000c 4FF00003 		mov	r3, #0
 1047 0010 7B61     		str	r3, [r7, #20]
 1048 0012 5EE0     		b	.L63
 1049              	.L68:
 353:../Common/Source/math_helper.c ****     {
 354:../Common/Source/math_helper.c **** 	  /* 1073741824.0f corresponds to pow(2, 30) */
 355:../Common/Source/math_helper.c ****       pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
 1050              		.loc 1 355 0
 1051 0014 7B69     		ldr	r3, [r7, #20]
 1052 0016 4FEA8303 		lsl	r3, r3, #2
 1053 001a BA68     		ldr	r2, [r7, #8]
 1054 001c D318     		adds	r3, r2, r3
 1055 001e 7A69     		ldr	r2, [r7, #20]
 1056 0020 4FEA8202 		lsl	r2, r2, #2
 1057 0024 F968     		ldr	r1, [r7, #12]
 1058 0026 8A18     		adds	r2, r1, r2
 1059 0028 92ED007A 		flds	s14, [r2, #0]
 1060 002c DFED2D7A 		flds	s15, .L71
 1061 0030 67EE277A 		fmuls	s15, s14, s15
 1062 0034 FDEEE77A 		ftosizs	s15, s15
 1063 0038 C3ED007A 		fsts	s15, [r3, #0]	@ int
 356:../Common/Source/math_helper.c **** 
 357:../Common/Source/math_helper.c ****       pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
 1064              		.loc 1 357 0
 1065 003c 7B69     		ldr	r3, [r7, #20]
 1066 003e 4FEA8303 		lsl	r3, r3, #2
 1067 0042 BA68     		ldr	r2, [r7, #8]
 1068 0044 D418     		adds	r4, r2, r3
 1069 0046 7B69     		ldr	r3, [r7, #20]
 1070 0048 4FEA8303 		lsl	r3, r3, #2
 1071 004c BA68     		ldr	r2, [r7, #8]
 1072 004e D318     		adds	r3, r2, r3
 1073 0050 1B68     		ldr	r3, [r3, #0]
 1074 0052 1846     		mov	r0, r3
 1075 0054 FFF7FEFF 		bl	__aeabi_i2d
 1076 0058 7B69     		ldr	r3, [r7, #20]
 1077 005a 4FEA8303 		lsl	r3, r3, #2
 1078 005e FA68     		ldr	r2, [r7, #12]
 1079 0060 D318     		adds	r3, r2, r3
 1080 0062 D3ED007A 		flds	s15, [r3, #0]
 1081 0066 F5EEC07A 		fcmpezs	s15
 1082 006a F1EE10FA 		fmstat
 1083 006e 06DD     		ble	.L70
 1084              	.L69:
 1085              		.loc 1 357 0 is_stmt 0 discriminator 1
 1086 0070 4FF00002 		mov	r2, #0
 1087 0074 4FF00003 		mov	r3, #0
 1088 0078 C3F6E073 		movt	r3, 16352
 1089 007c 05E0     		b	.L66
 1090              	.L70:
 1091              		.loc 1 357 0 discriminator 2
 1092 007e 4FF00002 		mov	r2, #0
 1093 0082 4FF00003 		mov	r3, #0
 1094 0086 CBF6E073 		movt	r3, 49120
 1095              	.L66:
 1096              		.loc 1 357 0 discriminator 3
 1097 008a FFF7FEFF 		bl	__aeabi_dadd
 1098 008e 0246     		mov	r2, r0
 1099 0090 0B46     		mov	r3, r1
 1100 0092 1046     		mov	r0, r2
 1101 0094 1946     		mov	r1, r3
 1102 0096 FFF7FEFF 		bl	__aeabi_d2iz
 1103 009a 0346     		mov	r3, r0
 1104 009c 2360     		str	r3, [r4, #0]
 358:../Common/Source/math_helper.c **** 
 359:../Common/Source/math_helper.c ****       if (pIn[i] == (float) 2.0)
 1105              		.loc 1 359 0 is_stmt 1 discriminator 3
 1106 009e 7B69     		ldr	r3, [r7, #20]
 1107 00a0 4FEA8303 		lsl	r3, r3, #2
 1108 00a4 FA68     		ldr	r2, [r7, #12]
 1109 00a6 D318     		adds	r3, r2, r3
 1110 00a8 93ED007A 		flds	s14, [r3, #0]
 1111 00ac F0EE007A 		fconsts	s15, #0
 1112 00b0 B4EE677A 		fcmps	s14, s15
 1113 00b4 F1EE10FA 		fmstat
 1114 00b8 07D1     		bne	.L67
 360:../Common/Source/math_helper.c ****         {
 361:../Common/Source/math_helper.c ****           pOut[i] = 0x7FFFFFFF;
 1115              		.loc 1 361 0
 1116 00ba 7B69     		ldr	r3, [r7, #20]
 1117 00bc 4FEA8303 		lsl	r3, r3, #2
 1118 00c0 BA68     		ldr	r2, [r7, #8]
 1119 00c2 D318     		adds	r3, r2, r3
 1120 00c4 6FF00042 		mvn	r2, #-2147483648
 1121 00c8 1A60     		str	r2, [r3, #0]
 1122              	.L67:
 352:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1123              		.loc 1 352 0
 1124 00ca 7B69     		ldr	r3, [r7, #20]
 1125 00cc 03F10103 		add	r3, r3, #1
 1126 00d0 7B61     		str	r3, [r7, #20]
 1127              	.L63:
 352:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1128              		.loc 1 352 0 is_stmt 0 discriminator 1
 1129 00d2 7A69     		ldr	r2, [r7, #20]
 1130 00d4 7B68     		ldr	r3, [r7, #4]
 1131 00d6 9A42     		cmp	r2, r3
 1132 00d8 9CD3     		bcc	.L68
 362:../Common/Source/math_helper.c ****         }
 363:../Common/Source/math_helper.c ****     }
 364:../Common/Source/math_helper.c **** }
 1133              		.loc 1 364 0 is_stmt 1
 1134 00da 07F11C07 		add	r7, r7, #28
 1135 00de BD46     		mov	sp, r7
 1136 00e0 90BD     		pop	{r4, r7, pc}
 1137              	.L72:
 1138 00e2 00BF     		.align	2
 1139              	.L71:
 1140 00e4 0000804E 		.word	1317011456
 1141              		.cfi_endproc
 1142              	.LFE139:
 1144              		.section	.text.arm_float_to_q29,"ax",%progbits
 1145              		.align	2
 1146              		.global	arm_float_to_q29
 1147              		.thumb
 1148              		.thumb_func
 1150              	arm_float_to_q29:
 1151              	.LFB140:
 365:../Common/Source/math_helper.c **** 
 366:../Common/Source/math_helper.c **** /** 
 367:../Common/Source/math_helper.c ****  * @brief  Converts float to fixed q30 format
 368:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 369:../Common/Source/math_helper.c ****  * @return none
 370:../Common/Source/math_helper.c ****  * The function converts floating point values to fixed point values 
 371:../Common/Source/math_helper.c ****  */
 372:../Common/Source/math_helper.c **** 
 373:../Common/Source/math_helper.c **** void arm_float_to_q29 (float *pIn, q31_t * pOut, 
 374:../Common/Source/math_helper.c **** 					   uint32_t numSamples)
 375:../Common/Source/math_helper.c **** {
 1152              		.loc 1 375 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 24
 1155              		@ frame_needed = 1, uses_anonymous_args = 0
 1156 0000 90B5     		push	{r4, r7, lr}
 1157              	.LCFI37:
 1158              		.cfi_def_cfa_offset 12
 1159              		.cfi_offset 4, -12
 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 0002 87B0     		sub	sp, sp, #28
 1163              	.LCFI38:
 1164              		.cfi_def_cfa_offset 40
 1165 0004 00AF     		add	r7, sp, #0
 1166              	.LCFI39:
 1167              		.cfi_def_cfa_register 7
 1168 0006 F860     		str	r0, [r7, #12]
 1169 0008 B960     		str	r1, [r7, #8]
 1170 000a 7A60     		str	r2, [r7, #4]
 376:../Common/Source/math_helper.c ****   uint32_t i;
 377:../Common/Source/math_helper.c **** 
 378:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1171              		.loc 1 378 0
 1172 000c 4FF00003 		mov	r3, #0
 1173 0010 7B61     		str	r3, [r7, #20]
 1174 0012 5EE0     		b	.L74
 1175              	.L79:
 379:../Common/Source/math_helper.c ****     {
 380:../Common/Source/math_helper.c **** 	  /* 1073741824.0f corresponds to pow(2, 30) */
 381:../Common/Source/math_helper.c ****       pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
 1176              		.loc 1 381 0
 1177 0014 7B69     		ldr	r3, [r7, #20]
 1178 0016 4FEA8303 		lsl	r3, r3, #2
 1179 001a BA68     		ldr	r2, [r7, #8]
 1180 001c D318     		adds	r3, r2, r3
 1181 001e 7A69     		ldr	r2, [r7, #20]
 1182 0020 4FEA8202 		lsl	r2, r2, #2
 1183 0024 F968     		ldr	r1, [r7, #12]
 1184 0026 8A18     		adds	r2, r1, r2
 1185 0028 92ED007A 		flds	s14, [r2, #0]
 1186 002c DFED2D7A 		flds	s15, .L82
 1187 0030 67EE277A 		fmuls	s15, s14, s15
 1188 0034 FDEEE77A 		ftosizs	s15, s15
 1189 0038 C3ED007A 		fsts	s15, [r3, #0]	@ int
 382:../Common/Source/math_helper.c **** 
 383:../Common/Source/math_helper.c ****       pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
 1190              		.loc 1 383 0
 1191 003c 7B69     		ldr	r3, [r7, #20]
 1192 003e 4FEA8303 		lsl	r3, r3, #2
 1193 0042 BA68     		ldr	r2, [r7, #8]
 1194 0044 D418     		adds	r4, r2, r3
 1195 0046 7B69     		ldr	r3, [r7, #20]
 1196 0048 4FEA8303 		lsl	r3, r3, #2
 1197 004c BA68     		ldr	r2, [r7, #8]
 1198 004e D318     		adds	r3, r2, r3
 1199 0050 1B68     		ldr	r3, [r3, #0]
 1200 0052 1846     		mov	r0, r3
 1201 0054 FFF7FEFF 		bl	__aeabi_i2d
 1202 0058 7B69     		ldr	r3, [r7, #20]
 1203 005a 4FEA8303 		lsl	r3, r3, #2
 1204 005e FA68     		ldr	r2, [r7, #12]
 1205 0060 D318     		adds	r3, r2, r3
 1206 0062 D3ED007A 		flds	s15, [r3, #0]
 1207 0066 F5EEC07A 		fcmpezs	s15
 1208 006a F1EE10FA 		fmstat
 1209 006e 06DD     		ble	.L81
 1210              	.L80:
 1211              		.loc 1 383 0 is_stmt 0 discriminator 1
 1212 0070 4FF00002 		mov	r2, #0
 1213 0074 4FF00003 		mov	r3, #0
 1214 0078 C3F6E073 		movt	r3, 16352
 1215 007c 05E0     		b	.L77
 1216              	.L81:
 1217              		.loc 1 383 0 discriminator 2
 1218 007e 4FF00002 		mov	r2, #0
 1219 0082 4FF00003 		mov	r3, #0
 1220 0086 CBF6E073 		movt	r3, 49120
 1221              	.L77:
 1222              		.loc 1 383 0 discriminator 3
 1223 008a FFF7FEFF 		bl	__aeabi_dadd
 1224 008e 0246     		mov	r2, r0
 1225 0090 0B46     		mov	r3, r1
 1226 0092 1046     		mov	r0, r2
 1227 0094 1946     		mov	r1, r3
 1228 0096 FFF7FEFF 		bl	__aeabi_d2iz
 1229 009a 0346     		mov	r3, r0
 1230 009c 2360     		str	r3, [r4, #0]
 384:../Common/Source/math_helper.c **** 
 385:../Common/Source/math_helper.c ****       if (pIn[i] == (float) 4.0)
 1231              		.loc 1 385 0 is_stmt 1 discriminator 3
 1232 009e 7B69     		ldr	r3, [r7, #20]
 1233 00a0 4FEA8303 		lsl	r3, r3, #2
 1234 00a4 FA68     		ldr	r2, [r7, #12]
 1235 00a6 D318     		adds	r3, r2, r3
 1236 00a8 93ED007A 		flds	s14, [r3, #0]
 1237 00ac F1EE007A 		fconsts	s15, #16
 1238 00b0 B4EE677A 		fcmps	s14, s15
 1239 00b4 F1EE10FA 		fmstat
 1240 00b8 07D1     		bne	.L78
 386:../Common/Source/math_helper.c ****         {
 387:../Common/Source/math_helper.c ****           pOut[i] = 0x7FFFFFFF;
 1241              		.loc 1 387 0
 1242 00ba 7B69     		ldr	r3, [r7, #20]
 1243 00bc 4FEA8303 		lsl	r3, r3, #2
 1244 00c0 BA68     		ldr	r2, [r7, #8]
 1245 00c2 D318     		adds	r3, r2, r3
 1246 00c4 6FF00042 		mvn	r2, #-2147483648
 1247 00c8 1A60     		str	r2, [r3, #0]
 1248              	.L78:
 378:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1249              		.loc 1 378 0
 1250 00ca 7B69     		ldr	r3, [r7, #20]
 1251 00cc 03F10103 		add	r3, r3, #1
 1252 00d0 7B61     		str	r3, [r7, #20]
 1253              	.L74:
 378:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1254              		.loc 1 378 0 is_stmt 0 discriminator 1
 1255 00d2 7A69     		ldr	r2, [r7, #20]
 1256 00d4 7B68     		ldr	r3, [r7, #4]
 1257 00d6 9A42     		cmp	r2, r3
 1258 00d8 9CD3     		bcc	.L79
 388:../Common/Source/math_helper.c ****         }
 389:../Common/Source/math_helper.c ****     }
 390:../Common/Source/math_helper.c **** }
 1259              		.loc 1 390 0 is_stmt 1
 1260 00da 07F11C07 		add	r7, r7, #28
 1261 00de BD46     		mov	sp, r7
 1262 00e0 90BD     		pop	{r4, r7, pc}
 1263              	.L83:
 1264 00e2 00BF     		.align	2
 1265              	.L82:
 1266 00e4 0000004E 		.word	1308622848
 1267              		.cfi_endproc
 1268              	.LFE140:
 1270              		.section	.text.arm_float_to_q28,"ax",%progbits
 1271              		.align	2
 1272              		.global	arm_float_to_q28
 1273              		.thumb
 1274              		.thumb_func
 1276              	arm_float_to_q28:
 1277              	.LFB141:
 391:../Common/Source/math_helper.c **** 
 392:../Common/Source/math_helper.c **** 
 393:../Common/Source/math_helper.c **** /** 
 394:../Common/Source/math_helper.c ****  * @brief  Converts float to fixed q28 format
 395:../Common/Source/math_helper.c ****  * @param  uint32_t 	number of samples in the buffer
 396:../Common/Source/math_helper.c ****  * @return none
 397:../Common/Source/math_helper.c ****  * The function converts floating point values to fixed point values 
 398:../Common/Source/math_helper.c ****  */
 399:../Common/Source/math_helper.c **** 
 400:../Common/Source/math_helper.c **** void arm_float_to_q28 (float *pIn, q31_t * pOut, 
 401:../Common/Source/math_helper.c ****                        uint32_t numSamples)
 402:../Common/Source/math_helper.c **** {
 1278              		.loc 1 402 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 24
 1281              		@ frame_needed = 1, uses_anonymous_args = 0
 1282 0000 90B5     		push	{r4, r7, lr}
 1283              	.LCFI40:
 1284              		.cfi_def_cfa_offset 12
 1285              		.cfi_offset 4, -12
 1286              		.cfi_offset 7, -8
 1287              		.cfi_offset 14, -4
 1288 0002 87B0     		sub	sp, sp, #28
 1289              	.LCFI41:
 1290              		.cfi_def_cfa_offset 40
 1291 0004 00AF     		add	r7, sp, #0
 1292              	.LCFI42:
 1293              		.cfi_def_cfa_register 7
 1294 0006 F860     		str	r0, [r7, #12]
 1295 0008 B960     		str	r1, [r7, #8]
 1296 000a 7A60     		str	r2, [r7, #4]
 403:../Common/Source/math_helper.c ****   uint32_t i;
 404:../Common/Source/math_helper.c **** 
 405:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1297              		.loc 1 405 0
 1298 000c 4FF00003 		mov	r3, #0
 1299 0010 7B61     		str	r3, [r7, #20]
 1300 0012 5EE0     		b	.L85
 1301              	.L90:
 406:../Common/Source/math_helper.c ****     {
 407:../Common/Source/math_helper.c **** 	/* 268435456.0f corresponds to pow(2, 28) */
 408:../Common/Source/math_helper.c ****       pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
 1302              		.loc 1 408 0
 1303 0014 7B69     		ldr	r3, [r7, #20]
 1304 0016 4FEA8303 		lsl	r3, r3, #2
 1305 001a BA68     		ldr	r2, [r7, #8]
 1306 001c D318     		adds	r3, r2, r3
 1307 001e 7A69     		ldr	r2, [r7, #20]
 1308 0020 4FEA8202 		lsl	r2, r2, #2
 1309 0024 F968     		ldr	r1, [r7, #12]
 1310 0026 8A18     		adds	r2, r1, r2
 1311 0028 92ED007A 		flds	s14, [r2, #0]
 1312 002c DFED2D7A 		flds	s15, .L93
 1313 0030 67EE277A 		fmuls	s15, s14, s15
 1314 0034 FDEEE77A 		ftosizs	s15, s15
 1315 0038 C3ED007A 		fsts	s15, [r3, #0]	@ int
 409:../Common/Source/math_helper.c **** 
 410:../Common/Source/math_helper.c ****       pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
 1316              		.loc 1 410 0
 1317 003c 7B69     		ldr	r3, [r7, #20]
 1318 003e 4FEA8303 		lsl	r3, r3, #2
 1319 0042 BA68     		ldr	r2, [r7, #8]
 1320 0044 D418     		adds	r4, r2, r3
 1321 0046 7B69     		ldr	r3, [r7, #20]
 1322 0048 4FEA8303 		lsl	r3, r3, #2
 1323 004c BA68     		ldr	r2, [r7, #8]
 1324 004e D318     		adds	r3, r2, r3
 1325 0050 1B68     		ldr	r3, [r3, #0]
 1326 0052 1846     		mov	r0, r3
 1327 0054 FFF7FEFF 		bl	__aeabi_i2d
 1328 0058 7B69     		ldr	r3, [r7, #20]
 1329 005a 4FEA8303 		lsl	r3, r3, #2
 1330 005e FA68     		ldr	r2, [r7, #12]
 1331 0060 D318     		adds	r3, r2, r3
 1332 0062 D3ED007A 		flds	s15, [r3, #0]
 1333 0066 F5EEC07A 		fcmpezs	s15
 1334 006a F1EE10FA 		fmstat
 1335 006e 06DD     		ble	.L92
 1336              	.L91:
 1337              		.loc 1 410 0 is_stmt 0 discriminator 1
 1338 0070 4FF00002 		mov	r2, #0
 1339 0074 4FF00003 		mov	r3, #0
 1340 0078 C3F6E073 		movt	r3, 16352
 1341 007c 05E0     		b	.L88
 1342              	.L92:
 1343              		.loc 1 410 0 discriminator 2
 1344 007e 4FF00002 		mov	r2, #0
 1345 0082 4FF00003 		mov	r3, #0
 1346 0086 CBF6E073 		movt	r3, 49120
 1347              	.L88:
 1348              		.loc 1 410 0 discriminator 3
 1349 008a FFF7FEFF 		bl	__aeabi_dadd
 1350 008e 0246     		mov	r2, r0
 1351 0090 0B46     		mov	r3, r1
 1352 0092 1046     		mov	r0, r2
 1353 0094 1946     		mov	r1, r3
 1354 0096 FFF7FEFF 		bl	__aeabi_d2iz
 1355 009a 0346     		mov	r3, r0
 1356 009c 2360     		str	r3, [r4, #0]
 411:../Common/Source/math_helper.c **** 
 412:../Common/Source/math_helper.c ****       if (pIn[i] == (float) 8.0)
 1357              		.loc 1 412 0 is_stmt 1 discriminator 3
 1358 009e 7B69     		ldr	r3, [r7, #20]
 1359 00a0 4FEA8303 		lsl	r3, r3, #2
 1360 00a4 FA68     		ldr	r2, [r7, #12]
 1361 00a6 D318     		adds	r3, r2, r3
 1362 00a8 93ED007A 		flds	s14, [r3, #0]
 1363 00ac F2EE007A 		fconsts	s15, #32
 1364 00b0 B4EE677A 		fcmps	s14, s15
 1365 00b4 F1EE10FA 		fmstat
 1366 00b8 07D1     		bne	.L89
 413:../Common/Source/math_helper.c ****         {
 414:../Common/Source/math_helper.c ****           pOut[i] = 0x7FFFFFFF;
 1367              		.loc 1 414 0
 1368 00ba 7B69     		ldr	r3, [r7, #20]
 1369 00bc 4FEA8303 		lsl	r3, r3, #2
 1370 00c0 BA68     		ldr	r2, [r7, #8]
 1371 00c2 D318     		adds	r3, r2, r3
 1372 00c4 6FF00042 		mvn	r2, #-2147483648
 1373 00c8 1A60     		str	r2, [r3, #0]
 1374              	.L89:
 405:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1375              		.loc 1 405 0
 1376 00ca 7B69     		ldr	r3, [r7, #20]
 1377 00cc 03F10103 		add	r3, r3, #1
 1378 00d0 7B61     		str	r3, [r7, #20]
 1379              	.L85:
 405:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1380              		.loc 1 405 0 is_stmt 0 discriminator 1
 1381 00d2 7A69     		ldr	r2, [r7, #20]
 1382 00d4 7B68     		ldr	r3, [r7, #4]
 1383 00d6 9A42     		cmp	r2, r3
 1384 00d8 9CD3     		bcc	.L90
 415:../Common/Source/math_helper.c ****         }
 416:../Common/Source/math_helper.c ****     }
 417:../Common/Source/math_helper.c **** }
 1385              		.loc 1 417 0 is_stmt 1
 1386 00da 07F11C07 		add	r7, r7, #28
 1387 00de BD46     		mov	sp, r7
 1388 00e0 90BD     		pop	{r4, r7, pc}
 1389              	.L94:
 1390 00e2 00BF     		.align	2
 1391              	.L93:
 1392 00e4 0000804D 		.word	1300234240
 1393              		.cfi_endproc
 1394              	.LFE141:
 1396              		.section	.text.arm_clip_f32,"ax",%progbits
 1397              		.align	2
 1398              		.global	arm_clip_f32
 1399              		.thumb
 1400              		.thumb_func
 1402              	arm_clip_f32:
 1403              	.LFB142:
 418:../Common/Source/math_helper.c **** 
 419:../Common/Source/math_helper.c **** /** 
 420:../Common/Source/math_helper.c ****  * @brief  Clip the float values to +/- 1 
 421:../Common/Source/math_helper.c ****  * @param  pIn 	input buffer
 422:../Common/Source/math_helper.c ****  * @param  numSamples 	number of samples in the buffer
 423:../Common/Source/math_helper.c ****  * @return none
 424:../Common/Source/math_helper.c ****  * The function converts floating point values to fixed point values 
 425:../Common/Source/math_helper.c ****  */
 426:../Common/Source/math_helper.c **** 
 427:../Common/Source/math_helper.c **** void arm_clip_f32 (float *pIn, uint32_t numSamples)
 428:../Common/Source/math_helper.c **** {
 1404              		.loc 1 428 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 16
 1407              		@ frame_needed = 1, uses_anonymous_args = 0
 1408              		@ link register save eliminated.
 1409 0000 80B4     		push	{r7}
 1410              	.LCFI43:
 1411              		.cfi_def_cfa_offset 4
 1412              		.cfi_offset 7, -4
 1413 0002 85B0     		sub	sp, sp, #20
 1414              	.LCFI44:
 1415              		.cfi_def_cfa_offset 24
 1416 0004 00AF     		add	r7, sp, #0
 1417              	.LCFI45:
 1418              		.cfi_def_cfa_register 7
 1419 0006 7860     		str	r0, [r7, #4]
 1420 0008 3960     		str	r1, [r7, #0]
 429:../Common/Source/math_helper.c ****   uint32_t i;
 430:../Common/Source/math_helper.c **** 
 431:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1421              		.loc 1 431 0
 1422 000a 4FF00003 		mov	r3, #0
 1423 000e FB60     		str	r3, [r7, #12]
 1424 0010 32E0     		b	.L96
 1425              	.L101:
 432:../Common/Source/math_helper.c ****     {
 433:../Common/Source/math_helper.c ****       if(pIn[i] > 1.0f)
 1426              		.loc 1 433 0
 1427 0012 FB68     		ldr	r3, [r7, #12]
 1428 0014 4FEA8303 		lsl	r3, r3, #2
 1429 0018 7A68     		ldr	r2, [r7, #4]
 1430 001a D318     		adds	r3, r2, r3
 1431 001c 93ED007A 		flds	s14, [r3, #0]
 1432 0020 F7EE007A 		fconsts	s15, #112
 1433 0024 B4EEE77A 		fcmpes	s14, s15
 1434 0028 F1EE10FA 		fmstat
 1435 002c 08DD     		ble	.L104
 1436              	.L102:
 434:../Common/Source/math_helper.c **** 	  {
 435:../Common/Source/math_helper.c **** 	    pIn[i] = 1.0;
 1437              		.loc 1 435 0
 1438 002e FB68     		ldr	r3, [r7, #12]
 1439 0030 4FEA8303 		lsl	r3, r3, #2
 1440 0034 7A68     		ldr	r2, [r7, #4]
 1441 0036 D318     		adds	r3, r2, r3
 1442 0038 4FF07E52 		mov	r2, #1065353216
 1443 003c 1A60     		str	r2, [r3, #0]	@ float
 1444 003e 17E0     		b	.L99
 1445              	.L104:
 436:../Common/Source/math_helper.c **** 	  }
 437:../Common/Source/math_helper.c **** 	  else if( pIn[i] < -1.0f)
 1446              		.loc 1 437 0
 1447 0040 FB68     		ldr	r3, [r7, #12]
 1448 0042 4FEA8303 		lsl	r3, r3, #2
 1449 0046 7A68     		ldr	r2, [r7, #4]
 1450 0048 D318     		adds	r3, r2, r3
 1451 004a 93ED007A 		flds	s14, [r3, #0]
 1452 004e FFEE007A 		fconsts	s15, #240
 1453 0052 B4EEE77A 		fcmpes	s14, s15
 1454 0056 F1EE10FA 		fmstat
 1455 005a 09D5     		bpl	.L99
 1456              	.L103:
 438:../Common/Source/math_helper.c **** 	  {
 439:../Common/Source/math_helper.c **** 	    pIn[i] = -1.0;
 1457              		.loc 1 439 0
 1458 005c FB68     		ldr	r3, [r7, #12]
 1459 005e 4FEA8303 		lsl	r3, r3, #2
 1460 0062 7A68     		ldr	r2, [r7, #4]
 1461 0064 D318     		adds	r3, r2, r3
 1462 0066 4FF00002 		mov	r2, #0
 1463 006a CBF68072 		movt	r2, 49024
 1464 006e 1A60     		str	r2, [r3, #0]	@ float
 1465              	.L99:
 431:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1466              		.loc 1 431 0
 1467 0070 FB68     		ldr	r3, [r7, #12]
 1468 0072 03F10103 		add	r3, r3, #1
 1469 0076 FB60     		str	r3, [r7, #12]
 1470              	.L96:
 431:../Common/Source/math_helper.c ****   for (i = 0; i < numSamples; i++)
 1471              		.loc 1 431 0 is_stmt 0 discriminator 1
 1472 0078 FA68     		ldr	r2, [r7, #12]
 1473 007a 3B68     		ldr	r3, [r7, #0]
 1474 007c 9A42     		cmp	r2, r3
 1475 007e C8D3     		bcc	.L101
 440:../Common/Source/math_helper.c **** 	  }
 441:../Common/Source/math_helper.c **** 	       
 442:../Common/Source/math_helper.c ****     }
 443:../Common/Source/math_helper.c **** }
 1476              		.loc 1 443 0 is_stmt 1
 1477 0080 07F11407 		add	r7, r7, #20
 1478 0084 BD46     		mov	sp, r7
 1479 0086 80BC     		pop	{r7}
 1480 0088 7047     		bx	lr
 1481              		.cfi_endproc
 1482              	.LFE142:
 1484 008a 00BF     		.text
 1485              	.Letext0:
 1486              		.file 2 "c:\\dave-3.1\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/incl
 1487              		.file 3 "C:\\DAVE-3.1\\eclipse\\/../CMSIS/Include/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 math_helper.c
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:23     .text.arm_snr_f32:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:28     .text.arm_snr_f32:00000000 arm_snr_f32
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:206    .text.arm_provide_guard_bits_q15:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:211    .text.arm_provide_guard_bits_q15:00000000 arm_provide_guard_bits_q15
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:273    .text.arm_float_to_q12_20:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:278    .text.arm_float_to_q12_20:00000000 arm_float_to_q12_20
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:395    .text.arm_float_to_q12_20:000000e8 $d
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:400    .text.arm_compare_fixed_q15:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:405    .text.arm_compare_fixed_q15:00000000 arm_compare_fixed_q15
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:488    .text.arm_compare_fixed_q31:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:493    .text.arm_compare_fixed_q31:00000000 arm_compare_fixed_q31
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:574    .text.arm_provide_guard_bits_q31:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:579    .text.arm_provide_guard_bits_q31:00000000 arm_provide_guard_bits_q31
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:636    .text.arm_provide_guard_bits_q7:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:641    .text.arm_provide_guard_bits_q7:00000000 arm_provide_guard_bits_q7
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:698    .text.arm_calc_guard_bits:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:703    .text.arm_calc_guard_bits:00000000 arm_calc_guard_bits
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:761    .text.arm_apply_guard_bits:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:766    .text.arm_apply_guard_bits:00000000 arm_apply_guard_bits
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:837    .text.arm_calc_2pow:00000000 arm_calc_2pow
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:832    .text.arm_calc_2pow:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:889    .text.arm_float_to_q14:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:894    .text.arm_float_to_q14:00000000 arm_float_to_q14
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1014   .text.arm_float_to_q14:000000ec $d
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1019   .text.arm_float_to_q30:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1024   .text.arm_float_to_q30:00000000 arm_float_to_q30
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1140   .text.arm_float_to_q30:000000e4 $d
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1145   .text.arm_float_to_q29:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1150   .text.arm_float_to_q29:00000000 arm_float_to_q29
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1266   .text.arm_float_to_q29:000000e4 $d
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1271   .text.arm_float_to_q28:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1276   .text.arm_float_to_q28:00000000 arm_float_to_q28
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1392   .text.arm_float_to_q28:000000e4 $d
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1397   .text.arm_clip_f32:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccSAKpHp.s:1402   .text.arm_clip_f32:00000000 arm_clip_f32
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.250eef6c7a6ea7970222e5d8b37d2f0a
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.cc9264b0ced3bd063c5784e64e89cf51
                           .group:00000000 wm4.arm_math.h.265.70d56e5033e2760c278cbebe073db4fc
                           .group:00000000 wm4.core_cm4.h.47.5b17071cb0e0984e786cc7d50cfa4aef
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.17.f8d12df81104836a3f2a5d589ae830d8
                           .group:00000000 wm4.arm_math.h.297.9b8078faaef2b2639f9d65032d7e0d70

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
log10
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
