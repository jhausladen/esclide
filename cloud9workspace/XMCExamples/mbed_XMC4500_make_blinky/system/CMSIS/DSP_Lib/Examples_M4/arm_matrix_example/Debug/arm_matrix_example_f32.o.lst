   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"arm_matrix_example_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	B_f32
  20              		.section	.rodata
  21              		.align	2
  24              	B_f32:
  25 0000 00804344 		.word	1145274368
  26 0004 00C8EC45 		.word	1173145600
  27 0008 0000EB43 		.word	1139474432
  28 000c 00C88C45 		.word	1166854144
  29              		.global	A_f32
  30              		.align	2
  33              	A_f32:
  34 0010 0000803F 		.word	1065353216
  35 0014 00000042 		.word	1107296256
  36 0018 00008040 		.word	1082130432
  37 001c 00000043 		.word	1124073472
  38 0020 0000803F 		.word	1065353216
  39 0024 00000042 		.word	1107296256
  40 0028 00008042 		.word	1115684864
  41 002c 00000045 		.word	1157627904
  42 0030 0000803F 		.word	1065353216
  43 0034 00008041 		.word	1098907648
  44 0038 00008040 		.word	1082130432
  45 003c 00008042 		.word	1115684864
  46 0040 0000803F 		.word	1065353216
  47 0044 00008041 		.word	1098907648
  48 0048 00008042 		.word	1115684864
  49 004c 00008044 		.word	1149239296
  50              		.comm	AT_f32,64,4
  51              		.comm	ATMA_f32,64,4
  52              		.comm	ATMAI_f32,64,4
  53              		.comm	X_f32,16,4
  54              		.global	xRef_f32
  55              		.align	2
  58              	xRef_f32:
  59 0050 00009242 		.word	1116864512
  60 0054 00000041 		.word	1090519040
  61 0058 0000AA41 		.word	1101660160
  62 005c 00003840 		.word	1077411840
  63              		.comm	snr,4,4
  64              		.section	.text.main,"ax",%progbits
  65              		.align	2
  66              		.global	main
  67              		.thumb
  68              		.thumb_func
  70              	main:
  71              	.LFB128:
  72              		.file 1 "../arm_matrix_example_f32.c"
   1:../arm_matrix_example_f32.c **** /* ----------------------------------------------------------------------
   2:../arm_matrix_example_f32.c **** * Copyright (C) 2010-2012 ARM Limited. All rights reserved.
   3:../arm_matrix_example_f32.c **** *
   4:../arm_matrix_example_f32.c **** * $Date:         17. January 2013
   5:../arm_matrix_example_f32.c **** * $Revision:     V1.4.0
   6:../arm_matrix_example_f32.c **** *
   7:../arm_matrix_example_f32.c **** * Project:       CMSIS DSP Library
   8:../arm_matrix_example_f32.c **** * Title:         arm_matrix_example_f32.c
   9:../arm_matrix_example_f32.c **** *
  10:../arm_matrix_example_f32.c **** * Description:   Example code demonstrating least square fit to data
  11:../arm_matrix_example_f32.c **** *                using matrix functions
  12:../arm_matrix_example_f32.c **** *
  13:../arm_matrix_example_f32.c **** * Target Processor: Cortex-M4/Cortex-M3
  14:../arm_matrix_example_f32.c **** *
  15:../arm_matrix_example_f32.c **** * Redistribution and use in source and binary forms, with or without
  16:../arm_matrix_example_f32.c **** * modification, are permitted provided that the following conditions
  17:../arm_matrix_example_f32.c **** * are met:
  18:../arm_matrix_example_f32.c **** *   - Redistributions of source code must retain the above copyright
  19:../arm_matrix_example_f32.c **** *     notice, this list of conditions and the following disclaimer.
  20:../arm_matrix_example_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  21:../arm_matrix_example_f32.c **** *     notice, this list of conditions and the following disclaimer in
  22:../arm_matrix_example_f32.c **** *     the documentation and/or other materials provided with the
  23:../arm_matrix_example_f32.c **** *     distribution.
  24:../arm_matrix_example_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  25:../arm_matrix_example_f32.c **** *     may be used to endorse or promote products derived from this
  26:../arm_matrix_example_f32.c **** *     software without specific prior written permission.
  27:../arm_matrix_example_f32.c **** *
  28:../arm_matrix_example_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  29:../arm_matrix_example_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  30:../arm_matrix_example_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  31:../arm_matrix_example_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  32:../arm_matrix_example_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  33:../arm_matrix_example_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  34:../arm_matrix_example_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  35:../arm_matrix_example_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:../arm_matrix_example_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  37:../arm_matrix_example_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:../arm_matrix_example_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../arm_matrix_example_f32.c **** * POSSIBILITY OF SUCH DAMAGE.
  40:../arm_matrix_example_f32.c ****  * -------------------------------------------------------------------- */
  41:../arm_matrix_example_f32.c **** 
  42:../arm_matrix_example_f32.c **** /**
  43:../arm_matrix_example_f32.c ****  * @ingroup groupExamples
  44:../arm_matrix_example_f32.c ****  */
  45:../arm_matrix_example_f32.c **** 
  46:../arm_matrix_example_f32.c **** /**
  47:../arm_matrix_example_f32.c ****  * @defgroup MatrixExample Matrix Example
  48:../arm_matrix_example_f32.c ****  *
  49:../arm_matrix_example_f32.c ****  * \par Description:
  50:../arm_matrix_example_f32.c ****  * \par
  51:../arm_matrix_example_f32.c ****  * Demonstrates the use of Matrix Transpose, Matrix Muliplication, and Matrix Inverse
  52:../arm_matrix_example_f32.c ****  * functions to apply least squares fitting to input data. Least squares fitting is
  53:../arm_matrix_example_f32.c ****  * the procedure for finding the best-fitting curve that minimizes the sum of the
  54:../arm_matrix_example_f32.c ****  * squares of the offsets (least square error) from a given set of data.
  55:../arm_matrix_example_f32.c ****  *
  56:../arm_matrix_example_f32.c ****  * \par Algorithm:
  57:../arm_matrix_example_f32.c ****  * \par
  58:../arm_matrix_example_f32.c ****  * The linear combination of parameters considered is as follows:
  59:../arm_matrix_example_f32.c ****  * \par
  60:../arm_matrix_example_f32.c ****  * <code>A * X = B</code>, where \c X is the unknown value and can be estimated
  61:../arm_matrix_example_f32.c ****  * from \c A & \c B.
  62:../arm_matrix_example_f32.c ****  * \par
  63:../arm_matrix_example_f32.c ****  * The least squares estimate \c X is given by the following equation:
  64:../arm_matrix_example_f32.c ****  * \par
  65:../arm_matrix_example_f32.c ****  * <code>X = Inverse(A<sup>T</sup> * A) *  A<sup>T</sup> * B</code>
  66:../arm_matrix_example_f32.c ****  *
  67:../arm_matrix_example_f32.c ****  * \par Block Diagram:
  68:../arm_matrix_example_f32.c ****  * \par
  69:../arm_matrix_example_f32.c ****  * \image html matrixExample.gif
  70:../arm_matrix_example_f32.c ****  *
  71:../arm_matrix_example_f32.c ****  * \par Variables Description:
  72:../arm_matrix_example_f32.c ****  * \par
  73:../arm_matrix_example_f32.c ****  * \li \c A_f32 input matrix in the linear combination equation
  74:../arm_matrix_example_f32.c ****  * \li \c B_f32 output matrix in the linear combination equation
  75:../arm_matrix_example_f32.c ****  * \li \c X_f32 unknown matrix estimated using \c A_f32 & \c B_f32 matrices
  76:../arm_matrix_example_f32.c ****  *
  77:../arm_matrix_example_f32.c ****  * \par CMSIS DSP Software Library Functions Used:
  78:../arm_matrix_example_f32.c ****  * \par
  79:../arm_matrix_example_f32.c ****  * - arm_mat_init_f32()
  80:../arm_matrix_example_f32.c ****  * - arm_mat_trans_f32()
  81:../arm_matrix_example_f32.c ****  * - arm_mat_mult_f32()
  82:../arm_matrix_example_f32.c ****  * - arm_mat_inverse_f32()
  83:../arm_matrix_example_f32.c ****  *
  84:../arm_matrix_example_f32.c ****  * <b> Refer  </b>
  85:../arm_matrix_example_f32.c ****  * \link arm_matrix_example_f32.c \endlink
  86:../arm_matrix_example_f32.c ****  *
  87:../arm_matrix_example_f32.c ****  */
  88:../arm_matrix_example_f32.c **** 
  89:../arm_matrix_example_f32.c **** 
  90:../arm_matrix_example_f32.c **** /** \example arm_matrix_example_f32.c
  91:../arm_matrix_example_f32.c ****   */
  92:../arm_matrix_example_f32.c **** 
  93:../arm_matrix_example_f32.c **** #include "arm_math.h"
  94:../arm_matrix_example_f32.c **** #include "math_helper.h"
  95:../arm_matrix_example_f32.c **** 
  96:../arm_matrix_example_f32.c **** #define SNR_THRESHOLD   90
  97:../arm_matrix_example_f32.c **** 
  98:../arm_matrix_example_f32.c **** /* --------------------------------------------------------------------------------
  99:../arm_matrix_example_f32.c **** * Test input data(Cycles) taken from FIR Q15 module for differant cases of blockSize
 100:../arm_matrix_example_f32.c **** * and tapSize
 101:../arm_matrix_example_f32.c **** * --------------------------------------------------------------------------------- */
 102:../arm_matrix_example_f32.c **** 
 103:../arm_matrix_example_f32.c **** const float32_t B_f32[4] =
 104:../arm_matrix_example_f32.c **** {
 105:../arm_matrix_example_f32.c ****   782.0, 7577.0, 470.0, 4505.0
 106:../arm_matrix_example_f32.c **** };
 107:../arm_matrix_example_f32.c **** 
 108:../arm_matrix_example_f32.c **** /* --------------------------------------------------------------------------------
 109:../arm_matrix_example_f32.c **** * Formula to fit is  C1 + C2 * numTaps + C3 * blockSize + C4 * numTaps * blockSize
 110:../arm_matrix_example_f32.c **** * -------------------------------------------------------------------------------- */
 111:../arm_matrix_example_f32.c **** 
 112:../arm_matrix_example_f32.c **** const float32_t A_f32[16] =
 113:../arm_matrix_example_f32.c **** {
 114:../arm_matrix_example_f32.c ****   /* Const,   numTaps,   blockSize,   numTaps*blockSize */
 115:../arm_matrix_example_f32.c ****   1.0,     32.0,      4.0,     128.0,
 116:../arm_matrix_example_f32.c ****   1.0,     32.0,     64.0,    2048.0,
 117:../arm_matrix_example_f32.c ****   1.0,     16.0,      4.0,      64.0,
 118:../arm_matrix_example_f32.c ****   1.0,     16.0,     64.0,    1024.0,
 119:../arm_matrix_example_f32.c **** };
 120:../arm_matrix_example_f32.c **** 
 121:../arm_matrix_example_f32.c **** 
 122:../arm_matrix_example_f32.c **** /* ----------------------------------------------------------------------
 123:../arm_matrix_example_f32.c **** * Temporary buffers  for storing intermediate values
 124:../arm_matrix_example_f32.c **** * ------------------------------------------------------------------- */
 125:../arm_matrix_example_f32.c **** /* Transpose of A Buffer */
 126:../arm_matrix_example_f32.c **** float32_t AT_f32[16];
 127:../arm_matrix_example_f32.c **** /* (Transpose of A * A) Buffer */
 128:../arm_matrix_example_f32.c **** float32_t ATMA_f32[16];
 129:../arm_matrix_example_f32.c **** /* Inverse(Transpose of A * A)  Buffer */
 130:../arm_matrix_example_f32.c **** float32_t ATMAI_f32[16];
 131:../arm_matrix_example_f32.c **** /* Test Output Buffer */
 132:../arm_matrix_example_f32.c **** float32_t X_f32[4];
 133:../arm_matrix_example_f32.c **** 
 134:../arm_matrix_example_f32.c **** /* ----------------------------------------------------------------------
 135:../arm_matrix_example_f32.c **** * Reference ouput buffer C1, C2, C3 and C4 taken from MATLAB
 136:../arm_matrix_example_f32.c **** * ------------------------------------------------------------------- */
 137:../arm_matrix_example_f32.c **** const float32_t xRef_f32[4] = {73.0, 8.0, 21.25, 2.875};
 138:../arm_matrix_example_f32.c **** 
 139:../arm_matrix_example_f32.c **** float32_t snr;
 140:../arm_matrix_example_f32.c **** 
 141:../arm_matrix_example_f32.c **** 
 142:../arm_matrix_example_f32.c **** /* ----------------------------------------------------------------------
 143:../arm_matrix_example_f32.c **** * Max magnitude FFT Bin test
 144:../arm_matrix_example_f32.c **** * ------------------------------------------------------------------- */
 145:../arm_matrix_example_f32.c **** 
 146:../arm_matrix_example_f32.c **** int32_t main(void)
 147:../arm_matrix_example_f32.c **** {
  73              		.loc 1 147 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 64
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              	.LCFI0:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 90B0     		sub	sp, sp, #64
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 72
  85 0004 00AF     		add	r7, sp, #0
  86              	.LCFI2:
  87              		.cfi_def_cfa_register 7
 148:../arm_matrix_example_f32.c **** 
 149:../arm_matrix_example_f32.c ****   arm_matrix_instance_f32 A;      /* Matrix A Instance */
 150:../arm_matrix_example_f32.c ****   arm_matrix_instance_f32 AT;     /* Matrix AT(A transpose) instance */
 151:../arm_matrix_example_f32.c ****   arm_matrix_instance_f32 ATMA;   /* Matrix ATMA( AT multiply with A) instance */
 152:../arm_matrix_example_f32.c ****   arm_matrix_instance_f32 ATMAI;  /* Matrix ATMAI(Inverse of ATMA) instance */
 153:../arm_matrix_example_f32.c ****   arm_matrix_instance_f32 B;      /* Matrix B instance */
 154:../arm_matrix_example_f32.c ****   arm_matrix_instance_f32 X;      /* Matrix X(Unknown Matrix) instance */
 155:../arm_matrix_example_f32.c **** 
 156:../arm_matrix_example_f32.c ****   uint32_t srcRows, srcColumns;  /* Temporary variables */
 157:../arm_matrix_example_f32.c ****   arm_status status;
 158:../arm_matrix_example_f32.c **** 
 159:../arm_matrix_example_f32.c ****   /* Initialise A Matrix Instance with numRows, numCols and data array(A_f32) */
 160:../arm_matrix_example_f32.c ****   srcRows = 4;
  88              		.loc 1 160 0
  89 0006 4FF00403 		mov	r3, #4
  90 000a BB63     		str	r3, [r7, #56]
 161:../arm_matrix_example_f32.c ****   srcColumns = 4;
  91              		.loc 1 161 0
  92 000c 4FF00403 		mov	r3, #4
  93 0010 7B63     		str	r3, [r7, #52]
 162:../arm_matrix_example_f32.c ****   arm_mat_init_f32(&A, srcRows, srcColumns, (float32_t *)A_f32);
  94              		.loc 1 162 0
  95 0012 BB6B     		ldr	r3, [r7, #56]
  96 0014 9AB2     		uxth	r2, r3
  97 0016 7B6B     		ldr	r3, [r7, #52]
  98 0018 9BB2     		uxth	r3, r3
  99 001a 07F12C01 		add	r1, r7, #44
 100 001e 0846     		mov	r0, r1
 101 0020 1146     		mov	r1, r2
 102 0022 1A46     		mov	r2, r3
 103 0024 40F20003 		movw	r3, #:lower16:A_f32
 104 0028 C0F20003 		movt	r3, #:upper16:A_f32
 105 002c FFF7FEFF 		bl	arm_mat_init_f32
 163:../arm_matrix_example_f32.c **** 
 164:../arm_matrix_example_f32.c ****   /* Initialise Matrix Instance AT with numRows, numCols and data array(AT_f32) */
 165:../arm_matrix_example_f32.c ****   srcRows = 4;
 106              		.loc 1 165 0
 107 0030 4FF00403 		mov	r3, #4
 108 0034 BB63     		str	r3, [r7, #56]
 166:../arm_matrix_example_f32.c ****   srcColumns = 4;
 109              		.loc 1 166 0
 110 0036 4FF00403 		mov	r3, #4
 111 003a 7B63     		str	r3, [r7, #52]
 167:../arm_matrix_example_f32.c ****   arm_mat_init_f32(&AT, srcRows, srcColumns, AT_f32);
 112              		.loc 1 167 0
 113 003c BB6B     		ldr	r3, [r7, #56]
 114 003e 9AB2     		uxth	r2, r3
 115 0040 7B6B     		ldr	r3, [r7, #52]
 116 0042 9BB2     		uxth	r3, r3
 117 0044 07F12401 		add	r1, r7, #36
 118 0048 0846     		mov	r0, r1
 119 004a 1146     		mov	r1, r2
 120 004c 1A46     		mov	r2, r3
 121 004e 40F20003 		movw	r3, #:lower16:AT_f32
 122 0052 C0F20003 		movt	r3, #:upper16:AT_f32
 123 0056 FFF7FEFF 		bl	arm_mat_init_f32
 168:../arm_matrix_example_f32.c **** 
 169:../arm_matrix_example_f32.c ****   /* calculation of A transpose */
 170:../arm_matrix_example_f32.c ****   status = arm_mat_trans_f32(&A, &AT);
 124              		.loc 1 170 0
 125 005a 07F12C02 		add	r2, r7, #44
 126 005e 07F12403 		add	r3, r7, #36
 127 0062 1046     		mov	r0, r2
 128 0064 1946     		mov	r1, r3
 129 0066 FFF7FEFF 		bl	arm_mat_trans_f32
 130 006a 0346     		mov	r3, r0
 131 006c 87F83F30 		strb	r3, [r7, #63]
 171:../arm_matrix_example_f32.c **** 
 172:../arm_matrix_example_f32.c **** 
 173:../arm_matrix_example_f32.c ****   /* Initialise ATMA Matrix Instance with numRows, numCols and data array(ATMA_f32) */
 174:../arm_matrix_example_f32.c ****   srcRows = 4;
 132              		.loc 1 174 0
 133 0070 4FF00403 		mov	r3, #4
 134 0074 BB63     		str	r3, [r7, #56]
 175:../arm_matrix_example_f32.c ****   srcColumns = 4;
 135              		.loc 1 175 0
 136 0076 4FF00403 		mov	r3, #4
 137 007a 7B63     		str	r3, [r7, #52]
 176:../arm_matrix_example_f32.c ****   arm_mat_init_f32(&ATMA, srcRows, srcColumns, ATMA_f32);
 138              		.loc 1 176 0
 139 007c BB6B     		ldr	r3, [r7, #56]
 140 007e 9AB2     		uxth	r2, r3
 141 0080 7B6B     		ldr	r3, [r7, #52]
 142 0082 9BB2     		uxth	r3, r3
 143 0084 07F11C01 		add	r1, r7, #28
 144 0088 0846     		mov	r0, r1
 145 008a 1146     		mov	r1, r2
 146 008c 1A46     		mov	r2, r3
 147 008e 40F20003 		movw	r3, #:lower16:ATMA_f32
 148 0092 C0F20003 		movt	r3, #:upper16:ATMA_f32
 149 0096 FFF7FEFF 		bl	arm_mat_init_f32
 177:../arm_matrix_example_f32.c **** 
 178:../arm_matrix_example_f32.c ****   /* calculation of AT Multiply with A */
 179:../arm_matrix_example_f32.c ****   status = arm_mat_mult_f32(&AT, &A, &ATMA);
 150              		.loc 1 179 0
 151 009a 07F12401 		add	r1, r7, #36
 152 009e 07F12C02 		add	r2, r7, #44
 153 00a2 07F11C03 		add	r3, r7, #28
 154 00a6 0846     		mov	r0, r1
 155 00a8 1146     		mov	r1, r2
 156 00aa 1A46     		mov	r2, r3
 157 00ac FFF7FEFF 		bl	arm_mat_mult_f32
 158 00b0 0346     		mov	r3, r0
 159 00b2 87F83F30 		strb	r3, [r7, #63]
 180:../arm_matrix_example_f32.c **** 
 181:../arm_matrix_example_f32.c ****   /* Initialise ATMAI Matrix Instance with numRows, numCols and data array(ATMAI_f32) */
 182:../arm_matrix_example_f32.c ****   srcRows = 4;
 160              		.loc 1 182 0
 161 00b6 4FF00403 		mov	r3, #4
 162 00ba BB63     		str	r3, [r7, #56]
 183:../arm_matrix_example_f32.c ****   srcColumns = 4;
 163              		.loc 1 183 0
 164 00bc 4FF00403 		mov	r3, #4
 165 00c0 7B63     		str	r3, [r7, #52]
 184:../arm_matrix_example_f32.c ****   arm_mat_init_f32(&ATMAI, srcRows, srcColumns, ATMAI_f32);
 166              		.loc 1 184 0
 167 00c2 BB6B     		ldr	r3, [r7, #56]
 168 00c4 9AB2     		uxth	r2, r3
 169 00c6 7B6B     		ldr	r3, [r7, #52]
 170 00c8 9BB2     		uxth	r3, r3
 171 00ca 07F11401 		add	r1, r7, #20
 172 00ce 0846     		mov	r0, r1
 173 00d0 1146     		mov	r1, r2
 174 00d2 1A46     		mov	r2, r3
 175 00d4 40F20003 		movw	r3, #:lower16:ATMAI_f32
 176 00d8 C0F20003 		movt	r3, #:upper16:ATMAI_f32
 177 00dc FFF7FEFF 		bl	arm_mat_init_f32
 185:../arm_matrix_example_f32.c **** 
 186:../arm_matrix_example_f32.c ****   /* calculation of Inverse((Transpose(A) * A) */
 187:../arm_matrix_example_f32.c ****   status = arm_mat_inverse_f32(&ATMA, &ATMAI);
 178              		.loc 1 187 0
 179 00e0 07F11C02 		add	r2, r7, #28
 180 00e4 07F11403 		add	r3, r7, #20
 181 00e8 1046     		mov	r0, r2
 182 00ea 1946     		mov	r1, r3
 183 00ec FFF7FEFF 		bl	arm_mat_inverse_f32
 184 00f0 0346     		mov	r3, r0
 185 00f2 87F83F30 		strb	r3, [r7, #63]
 188:../arm_matrix_example_f32.c **** 
 189:../arm_matrix_example_f32.c ****   /* calculation of (Inverse((Transpose(A) * A)) *  Transpose(A)) */
 190:../arm_matrix_example_f32.c ****   status = arm_mat_mult_f32(&ATMAI, &AT, &ATMA);
 186              		.loc 1 190 0
 187 00f6 07F11401 		add	r1, r7, #20
 188 00fa 07F12402 		add	r2, r7, #36
 189 00fe 07F11C03 		add	r3, r7, #28
 190 0102 0846     		mov	r0, r1
 191 0104 1146     		mov	r1, r2
 192 0106 1A46     		mov	r2, r3
 193 0108 FFF7FEFF 		bl	arm_mat_mult_f32
 194 010c 0346     		mov	r3, r0
 195 010e 87F83F30 		strb	r3, [r7, #63]
 191:../arm_matrix_example_f32.c **** 
 192:../arm_matrix_example_f32.c ****   /* Initialise B Matrix Instance with numRows, numCols and data array(B_f32) */
 193:../arm_matrix_example_f32.c ****   srcRows = 4;
 196              		.loc 1 193 0
 197 0112 4FF00403 		mov	r3, #4
 198 0116 BB63     		str	r3, [r7, #56]
 194:../arm_matrix_example_f32.c ****   srcColumns = 1;
 199              		.loc 1 194 0
 200 0118 4FF00103 		mov	r3, #1
 201 011c 7B63     		str	r3, [r7, #52]
 195:../arm_matrix_example_f32.c ****   arm_mat_init_f32(&B, srcRows, srcColumns, (float32_t *)B_f32);
 202              		.loc 1 195 0
 203 011e BB6B     		ldr	r3, [r7, #56]
 204 0120 9AB2     		uxth	r2, r3
 205 0122 7B6B     		ldr	r3, [r7, #52]
 206 0124 9BB2     		uxth	r3, r3
 207 0126 07F10C01 		add	r1, r7, #12
 208 012a 0846     		mov	r0, r1
 209 012c 1146     		mov	r1, r2
 210 012e 1A46     		mov	r2, r3
 211 0130 40F20003 		movw	r3, #:lower16:B_f32
 212 0134 C0F20003 		movt	r3, #:upper16:B_f32
 213 0138 FFF7FEFF 		bl	arm_mat_init_f32
 196:../arm_matrix_example_f32.c **** 
 197:../arm_matrix_example_f32.c ****   /* Initialise X Matrix Instance with numRows, numCols and data array(X_f32) */
 198:../arm_matrix_example_f32.c ****   srcRows = 4;
 214              		.loc 1 198 0
 215 013c 4FF00403 		mov	r3, #4
 216 0140 BB63     		str	r3, [r7, #56]
 199:../arm_matrix_example_f32.c ****   srcColumns = 1;
 217              		.loc 1 199 0
 218 0142 4FF00103 		mov	r3, #1
 219 0146 7B63     		str	r3, [r7, #52]
 200:../arm_matrix_example_f32.c ****   arm_mat_init_f32(&X, srcRows, srcColumns, X_f32);
 220              		.loc 1 200 0
 221 0148 BB6B     		ldr	r3, [r7, #56]
 222 014a 9AB2     		uxth	r2, r3
 223 014c 7B6B     		ldr	r3, [r7, #52]
 224 014e 9BB2     		uxth	r3, r3
 225 0150 07F10401 		add	r1, r7, #4
 226 0154 0846     		mov	r0, r1
 227 0156 1146     		mov	r1, r2
 228 0158 1A46     		mov	r2, r3
 229 015a 40F20003 		movw	r3, #:lower16:X_f32
 230 015e C0F20003 		movt	r3, #:upper16:X_f32
 231 0162 FFF7FEFF 		bl	arm_mat_init_f32
 201:../arm_matrix_example_f32.c **** 
 202:../arm_matrix_example_f32.c ****   /* calculation ((Inverse((Transpose(A) * A)) *  Transpose(A)) * B) */
 203:../arm_matrix_example_f32.c ****   status = arm_mat_mult_f32(&ATMA, &B, &X);
 232              		.loc 1 203 0
 233 0166 07F11C01 		add	r1, r7, #28
 234 016a 07F10C02 		add	r2, r7, #12
 235 016e 07F10403 		add	r3, r7, #4
 236 0172 0846     		mov	r0, r1
 237 0174 1146     		mov	r1, r2
 238 0176 1A46     		mov	r2, r3
 239 0178 FFF7FEFF 		bl	arm_mat_mult_f32
 240 017c 0346     		mov	r3, r0
 241 017e 87F83F30 		strb	r3, [r7, #63]
 204:../arm_matrix_example_f32.c **** 
 205:../arm_matrix_example_f32.c ****   /* Comparison of reference with test output */
 206:../arm_matrix_example_f32.c ****   snr = arm_snr_f32((float32_t *)xRef_f32, X_f32, 4);
 242              		.loc 1 206 0
 243 0182 40F20000 		movw	r0, #:lower16:xRef_f32
 244 0186 C0F20000 		movt	r0, #:upper16:xRef_f32
 245 018a 40F20001 		movw	r1, #:lower16:X_f32
 246 018e C0F20001 		movt	r1, #:upper16:X_f32
 247 0192 4FF00402 		mov	r2, #4
 248 0196 FFF7FEFF 		bl	arm_snr_f32
 249 019a 0246     		mov	r2, r0	@ float
 250 019c 40F20003 		movw	r3, #:lower16:snr
 251 01a0 C0F20003 		movt	r3, #:upper16:snr
 252 01a4 1A60     		str	r2, [r3, #0]	@ float
 207:../arm_matrix_example_f32.c **** 
 208:../arm_matrix_example_f32.c ****   /*------------------------------------------------------------------------------
 209:../arm_matrix_example_f32.c ****   *            Initialise status depending on SNR calculations
 210:../arm_matrix_example_f32.c ****   *------------------------------------------------------------------------------*/
 211:../arm_matrix_example_f32.c ****   if( snr > SNR_THRESHOLD)
 253              		.loc 1 211 0
 254 01a6 40F20003 		movw	r3, #:lower16:snr
 255 01aa C0F20003 		movt	r3, #:upper16:snr
 256 01ae 93ED007A 		flds	s14, [r3, #0]
 257 01b2 DFED0B7A 		flds	s15, .L9
 258 01b6 B4EEE77A 		fcmpes	s14, s15
 259 01ba F1EE10FA 		fmstat
 260 01be 04DD     		ble	.L8
 261              	.L7:
 212:../arm_matrix_example_f32.c ****   {
 213:../arm_matrix_example_f32.c ****     status = ARM_MATH_SUCCESS;
 262              		.loc 1 213 0
 263 01c0 4FF00003 		mov	r3, #0
 264 01c4 87F83F30 		strb	r3, [r7, #63]
 265 01c8 03E0     		b	.L4
 266              	.L8:
 214:../arm_matrix_example_f32.c ****   }
 215:../arm_matrix_example_f32.c ****   else
 216:../arm_matrix_example_f32.c ****   {
 217:../arm_matrix_example_f32.c ****     status = ARM_MATH_TEST_FAILURE;
 267              		.loc 1 217 0
 268 01ca 4FF0FA03 		mov	r3, #250
 269 01ce 87F83F30 		strb	r3, [r7, #63]
 270              	.L4:
 218:../arm_matrix_example_f32.c ****   }
 219:../arm_matrix_example_f32.c **** 
 220:../arm_matrix_example_f32.c **** 
 221:../arm_matrix_example_f32.c ****   /* ----------------------------------------------------------------------
 222:../arm_matrix_example_f32.c ****   ** Loop here if the signals fail the PASS check.
 223:../arm_matrix_example_f32.c ****   ** This denotes a test failure
 224:../arm_matrix_example_f32.c ****   ** ------------------------------------------------------------------- */
 225:../arm_matrix_example_f32.c ****   if( status != ARM_MATH_SUCCESS)
 271              		.loc 1 225 0
 272 01d2 97F93F30 		ldrsb	r3, [r7, #63]
 273 01d6 002B     		cmp	r3, #0
 274 01d8 00D0     		beq	.L5
 275              	.L6:
 226:../arm_matrix_example_f32.c ****   {
 227:../arm_matrix_example_f32.c ****     while(1);
 276              		.loc 1 227 0 discriminator 1
 277 01da FEE7     		b	.L6
 278              	.L5:
 228:../arm_matrix_example_f32.c ****   }
 229:../arm_matrix_example_f32.c **** 
 230:../arm_matrix_example_f32.c ****   while(1);                             /* main function does not return */
 279              		.loc 1 230 0 discriminator 1
 280 01dc FEE7     		b	.L5
 281              	.L10:
 282 01de 00BF     		.align	2
 283              	.L9:
 284 01e0 0000B442 		.word	1119092736
 285              		.cfi_endproc
 286              	.LFE128:
 288              		.text
 289              	.Letext0:
 290              		.file 2 "c:\\dave-3.1\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/incl
 291              		.file 3 "C:\\DAVE-3.1\\eclipse\\/../CMSIS/Include/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_matrix_example_f32.c
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:24     .rodata:00000000 B_f32
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:21     .rodata:00000000 $d
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:33     .rodata:00000010 A_f32
                            *COM*:00000040 AT_f32
                            *COM*:00000040 ATMA_f32
                            *COM*:00000040 ATMAI_f32
                            *COM*:00000010 X_f32
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:58     .rodata:00000050 xRef_f32
                            *COM*:00000004 snr
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:65     .text.main:00000000 $t
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:70     .text.main:00000000 main
C:\Users\wangguan\AppData\Local\Temp\ccOjN6yk.s:284    .text.main:000001e0 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.250eef6c7a6ea7970222e5d8b37d2f0a
                           .group:00000000 wm4.arm_math.h.265.70d56e5033e2760c278cbebe073db4fc
                           .group:00000000 wm4.core_cm4.h.47.5b17071cb0e0984e786cc7d50cfa4aef
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.17.f8d12df81104836a3f2a5d589ae830d8
                           .group:00000000 wm4.math.h.35.cc9264b0ced3bd063c5784e64e89cf51
                           .group:00000000 wm4.arm_math.h.297.9b8078faaef2b2639f9d65032d7e0d70

UNDEFINED SYMBOLS
arm_mat_init_f32
arm_mat_trans_f32
arm_mat_mult_f32
arm_mat_inverse_f32
arm_snr_f32
